name: Build and Deploy to GKE

on:
  push:
    branches:
      - master
      - stage
      - feature/aws-migration
  # For future
  # release:
  #   types: [created]

env:
  API_URL: ${{ secrets.API_URL }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_DEFAULT_REGION: us-east-1
  AWS_SDK_BUCKET: ${{ secrets.DEVELOPMENT_AWS_SDK_BUCKET }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  ECR_REPOSITORY: aletheia-production
  GITHUB_SHA: ${{ github.sha }}
  KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
  IMAGE: aletheia
  ENVIRONMENT: development
  UMAMI_SITE_ID: ${{ secrets.DEVELOPMENT_UMAMI_SITE_ID }}
  MONGODB_URI: ${{ secrets.DEVELOPMENT_MONGODB_URI }}
  MONGODB_NAME: ${{ secrets.DEVELOPMENT_MONGODB_NAME }}
  ORY_SDK_URL: ${{ secrets.DEVELOPMENT_ORY_SDK_URL }}
  ORY_ACCESS_TOKEN: ${{ secrets.DEVELOPMENT_ORY_ACCESS_TOKEN }}
  ALETHEIA_SCHEMA_ID: ${{ secrets.DEVELOPMENT_ALETHEIA_SCHEMA_ID }}
  RECAPTCHA_SITEKEY: ${{ secrets.RECAPTCHA_SITEKEY }}

  GITLAB_FEATURE_FLAG_URL: ${{ secrets.GITLAB_FEATURE_FLAG_URL }}
  GITLAB_FEATURE_FLAG_INSTANCE_ID: ${{ secrets.GITLAB_FEATURE_FLAG_INSTANCE_ID }}
  # Needed env variables for first build on next
  NEXT_PUBLIC_UMAMI_SITE_ID: ${{ secrets.DEVELOPMENT_UMAMI_SITE_ID }}
  NEXT_PUBLIC_RECAPTCHA_SITEKEY: ${{ secrets.RECAPTCHA_SITEKEY }}

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Check Environment
        if: endsWith(github.ref, '/master')
        run: |
          sed -i '11{s/test.//}' deployment.yml
          sed -i '11{s/test.//}' config.seed.example.yaml
          echo "ENVIRONMENT=production" >> $GITHUB_ENV
          echo "UMAMI_SITE_ID=${{ secrets.PRODUCTION_UMAMI_SITE_ID }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_UMAMI_SITE_ID=${{ secrets.PRODUCTION_UMAMI_SITE_ID }}" >> $GITHUB_ENV
          echo "MONGODB_URI=${{ secrets.PRODUCTION_MONGODB_URI }}" >> $GITHUB_ENV
          echo "ORY_SDK_URL=${{ secrets.PRODUCTION_ORY_SDK_URL }}" >> $GITHUB_ENV
          echo "ORY_ACCESS_TOKEN=${{ secrets.PRODUCTION_ORY_ACCESS_TOKEN }}" >> $GITHUB_ENV
          echo "ALETHEIA_SCHEMA_ID=${{ secrets.PRODUCTION_ALETHEIA_SCHEMA_ID }}" >> $GITHUB_ENV
          echo "API_URL=${{ secrets.API_URL_PRODUCTION }}" >> $GITHUB_ENV
          echo "MONGODB_NAME=${{ secrets.PRODUCTION_MONGODB_NAME }}" >> $GITHUB_ENV
          echo "AWS_SDK_BUCKET=${{ secrets.PRODUCTION_AWS_SDK_BUCKET }}" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=${{ secrets.PRODUCTION_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.PRODUCTION_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV


      - name: Set environment
        run: |
          echo "${{ env.ENVIRONMENT }}"
          echo "${{ env.API_URL }}"
          sed -i "s/ENVIRONMENT/$ENVIRONMENT/g" deployment.yml
          sed -i "s/UMAMI_SITE_ID_STUB/$UMAMI_SITE_ID/g" deployment.yml
          sed -i "s/RECAPTCHA_SITEKEY_STUB/$RECAPTCHA_SITEKEY/g" deployment.yml
          sed -i "s%ORY_SDK_URL_STUB%$ORY_SDK_URL%g" deployment.yml
          sed -i "s/ORY_ACCESS_TOKEN_STUB/$ORY_ACCESS_TOKEN/g" deployment.yml


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Setting up config.yaml based on environment
      - name: Set config.yaml
        env:
            RECAPTCHA_SECRET: ${{ secrets.RECAPTCHA_SECRETKEY }}
        run: |
            sed -i "s/ENV/$ENVIRONMENT/g" config.$ENVIRONMENT.yaml
            sed -i "s%RECAPTCHA_SECRET%$RECAPTCHA_SECRET%g" config.$ENVIRONMENT.yaml
            sed -i "s%MONGODB_URI%$MONGODB_URI%g" config.$ENVIRONMENT.yaml
            sed -i "s%ORY_SDK_URL%$ORY_SDK_URL%g" config.$ENVIRONMENT.yaml
            sed -i "s%GITLAB_FEATURE_FLAG_URL%$GITLAB_FEATURE_FLAG_URL%g" config.$ENVIRONMENT.yaml
            sed -i "s%GITLAB_FEATURE_FLAG_INSTANCE_ID%$GITLAB_FEATURE_FLAG_INSTANCE_ID%g" config.$ENVIRONMENT.yaml
            sed -i "s/ORY_ACCESS_TOKEN/$ORY_ACCESS_TOKEN/g" config.$ENVIRONMENT.yaml
            sed -i "s/ALETHEIA_SCHEMA_ID/$ALETHEIA_SCHEMA_ID/g" config.$ENVIRONMENT.yaml
            sed -i "s%AWS_SDK_BUCKET%$AWS_SDK_BUCKET%g" config.$ENVIRONMENT.yaml
            sed -i "s%AWS_ACCESS_KEY_ID%$AWS_ACCESS_KEY_ID%g" config.$ENVIRONMENT.yaml
            sed -i "s%AWS_SECRET_ACCESS_KEY%$AWS_SECRET_ACCESS_KEY%g" config.$ENVIRONMENT.yaml

      - name: Set migrate-mongo-config.ts
        run: |
            sed -i "s%MONGODB_URI%$MONGODB_URI%g" migrate-mongo-config-example.ts
            sed -i "s%MONGODB_NAME%$MONGODB_NAME%g" migrate-mongo-config-example.ts

      # Setting user seed config
      - name: Set config.seed.example.yaml
        env:
            SMTP_HOST: ${{ secrets.SMTP_HOST }}
            SMTP_PORT: ${{ secrets.SMTP_PORT }}
            SMTP_EMAIL_USER: ${{ secrets.SMTP_EMAIL_USER }}
            SMTP_EMAIL_PASS: ${{ secrets.SMTP_EMAIL_PASS }}
            TEST_USER_PASS: ${{ secrets.TEST_USER_PASS }}

        run: |
            sed -i "s%SMTP_HOST%$SMTP_HOST%g" config.seed.example.yaml
            sed -i "s%SMTP_PORT%$SMTP_PORT%g" config.seed.example.yaml
            sed -i "s%SMTP_EMAIL_USER%$SMTP_EMAIL_USER%g" config.seed.example.yaml
            sed -i "s%SMTP_EMAIL_PASS%$SMTP_EMAIL_PASS%g" config.seed.example.yaml
            sed -i "s/TEST_USER_PASS/$TEST_USER_PASS/g" config.seed.example.yaml
            sed -i "s%MONGODB_URI%$MONGODB_URI%g" config.seed.example.yaml
            sed -i "s%ORY_SDK_URL%$ORY_SDK_URL%g" config.seed.example.yaml
            sed -i "s/ORY_ACCESS_TOKEN/$ORY_ACCESS_TOKEN/g" config.seed.example.yaml
            sed -i "s/ALETHEIA_SCHEMA_ID/$ALETHEIA_SCHEMA_ID/g" config.seed.example.yaml

      # Build the Docker image
      - name: Build
        run: |
          docker build --build-arg ENVIRONMENT=$ENVIRONMENT \
            --build-arg NEXT_PUBLIC_UMAMI_SITE_ID=$NEXT_PUBLIC_UMAMI_SITE_ID \
            --build-arg NEXT_PUBLIC_RECAPTCHA_SITEKEY=${{ secrets.NEXT_PUBLIC_RECAPTCHA_SITEKEY }} \
            -t "$ECR_REGISTRY"/"$ECR_REPOSITORY"/"$IMAGE":"$GITHUB_SHA" .
          docker tag "$ECR_REGISTRY"/"$ECR_REPOSITORY"/"$IMAGE":"$GITHUB_SHA" "$ECR_REGISTRY"/"$ECR_REPOSITORY"/"$IMAGE":latest

      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY/$IMAGE:$GITHUB_SHA
          if [[ "$ENVIRONMENT" == "production" ]]; then docker push "$ECR_REGISTRY"/"$ECR_REPOSITORY"/"$IMAGE":latest; fi

      - name: Set deployment.yml
        run: |
          sed -i "s/TAG/$GITHUB_SHA/" deployment.yml

      - name: deploy to cluster
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBE_CONFIG_DATA: $KUBE_CONFIG
          ECR_REGISTRY: $ECR_REGISTRY
          ECR_REPOSITORY: $ECR_REPOSITORY
          IMAGE_TAG: $GITHUB_SHA
          KUBECTL_VERSION: "v1.22.0"
          IAM_VERSION: "0.5.6"
        with:
          args: set image deployment/$ECR_REPOSITORY $ECR_REPOSITORY=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

name: Build and Deploy to GKE

on:
  push:
    branches:
      - master
      - stage
  # For future
  # release:
  #   types: [created]

env:
  GKE_PROJECT: ${{ secrets.GKE_PROJECT }}
  GKE_EMAIL: ${{ secrets.GKE_EMAIL }}
  GITHUB_SHA: ${{ github.sha }}
  GKE_ZONE: us-central1-c
  GKE_CLUSTER: aletheia
  IMAGE: aletheia
  REGISTRY_HOSTNAME: us.gcr.io
  API_URL: ${{ secrets.API_URL }}
  ENVIRONMENT: development
  UMAMI_SITE_ID: ${{ secrets.DEVELOPMENT_UMAMI_SITE_ID }}
  MONGODB_URI: ${{ secrets.DEVELOPMENT_MONGODB_URI }}
  ORY_SDK_URL: ${{ secrets.DEVELOPMENT_ORY_SDK_URL }}
  ORY_ACCESS_TOKEN: ${{ secrets.DEVELOPMENT_ORY_ACCESS_TOKEN }}
  ALETHEIA_SCHEMA_ID: ${{ secrets.DEVELOPMENT_ALETHEIA_SCHEMA_ID }}
  RECAPTCHA_SITEKEY: ${{ secrets.RECAPTCHA_SITEKEY }}
  # Needed env variables for first build on next
  NEXT_PUBLIC_UMAMI_SITE_ID: ${{ secrets.DEVELOPMENT_UMAMI_SITE_ID }}
  NEXT_PUBLIC_RECAPTCHA_SITEKEY: ${{ secrets.RECAPTCHA_SITEKEY }}

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Check Environment
        if: endsWith(github.ref, '/master')
        run: |
          sed -i '11{s/test.//}' deployment.yml
          sed -i '11{s/test.//}' config.seed.example.yaml
          echo "ENVIRONMENT=production" >> $GITHUB_ENV
          echo "UMAMI_SITE_ID=${{ secrets.PRODUCTION_UMAMI_SITE_ID }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_UMAMI_SITE_ID=${{ secrets.PRODUCTION_UMAMI_SITE_ID }}" >> $GITHUB_ENV
          echo "MONGODB_URI=${{ secrets.PRODUCTION_MONGODB_URI }}" >> $GITHUB_ENV
          echo "ORY_SDK_URL=${{ secrets.PRODUCTION_ORY_SDK_URL }}" >> $GITHUB_ENV
          echo "ORY_ACCESS_TOKEN=${{ secrets.PRODUCTION_ORY_ACCESS_TOKEN }}" >> $GITHUB_ENV
          echo "ALETHEIA_SCHEMA_ID=${{ secrets.PRODUCTION_ALETHEIA_SCHEMA_ID }}" >> $GITHUB_ENV
          echo "API_URL=${{ secrets.API_URL_PRODUCTION }}" >> $GITHUB_ENV

      - name: Set environment
        run: |
          echo "${{ env.ENVIRONMENT }}"
          echo "${{ env.API_URL }}"
          sed -i "s/ENVIRONMENT/$ENVIRONMENT/g" deployment.yml
          sed -i "s/UMAMI_SITE_ID_STUB/$UMAMI_SITE_ID/g" deployment.yml
          sed -i "s/RECAPTCHA_SITEKEY_STUB/$RECAPTCHA_SITEKEY/g" deployment.yml
          sed -i "s%ORY_SDK_URL_STUB%$ORY_SDK_URL%g" deployment.yml
          sed -i "s/ORY_ACCESS_TOKEN_STUB/$ORY_ACCESS_TOKEN/g" deployment.yml

      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@v1
        with:
          version: "270.0.0"
          service_account_email: ${{ secrets.GKE_EMAIL }}
          service_account_key: ${{ secrets.GKE_KEY }}

      # Configure docker to use the gcloud command-line tool as a credential helper
      - run: gcloud auth configure-docker

      # Setting up config.yaml based on environment
      - name: Set config.yaml
        env:
            RECAPTCHA_SECRET: ${{ secrets.RECAPTCHA_SECRETKEY }}
        run: |
            sed -i "s%RECAPTCHA_SECRET%$RECAPTCHA_SECRET%g" config.$ENVIRONMENT.yaml
            sed -i "s%MONGODB_URI%$MONGODB_URI%g" config.$ENVIRONMENT.yaml
            sed -i "s%ORY_SDK_URL%$ORY_SDK_URL%g" config.$ENVIRONMENT.yaml
            sed -i "s/ORY_ACCESS_TOKEN/$ORY_ACCESS_TOKEN/g" config.$ENVIRONMENT.yaml
            sed -i "s/ALETHEIA_SCHEMA_ID/$ALETHEIA_SCHEMA_ID/g" config.$ENVIRONMENT.yaml

      - name: Set migrate-mongo-config.js
        run: |
            sed -i "s%MONGODB_URI%$MONGODB_URI%g" migrate-mongo-config-example.js

      # Setting user seed config
      - name: Set config.seed.example.yaml
        env:
            SMTP_HOST: ${{ secrets.SMTP_HOST }}
            SMTP_PORT: ${{ secrets.SMTP_PORT }}
            SMTP_EMAIL_USER: ${{ secrets.SMTP_EMAIL_USER }}
            SMTP_EMAIL_PASS: ${{ secrets.SMTP_EMAIL_PASS }}
            TEST_USER_PASS: ${{ secrets.TEST_USER_PASS }}

        run: |
            sed -i "s%SMTP_HOST%$SMTP_HOST%g" config.seed.example.yaml
            sed -i "s%SMTP_PORT%$SMTP_PORT%g" config.seed.example.yaml
            sed -i "s%SMTP_EMAIL_USER%$SMTP_EMAIL_USER%g" config.seed.example.yaml
            sed -i "s%SMTP_EMAIL_PASS%$SMTP_EMAIL_PASS%g" config.seed.example.yaml
            sed -i "s/TEST_USER_PASS/$TEST_USER_PASS/g" config.seed.example.yaml
            sed -i "s%MONGODB_URI%$MONGODB_URI%g" config.seed.example.yaml
            sed -i "s%ORY_SDK_URL%$ORY_SDK_URL%g" config.seed.example.yaml
            sed -i "s/ORY_ACCESS_TOKEN/$ORY_ACCESS_TOKEN/g" config.seed.example.yaml
            sed -i "s/ALETHEIA_SCHEMA_ID/$ALETHEIA_SCHEMA_ID/g" config.seed.example.yaml

      # Build the Docker image
      - name: Build
        run: |
          docker build --build-arg ENVIRONMENT=$ENVIRONMENT \
            --build-arg NEXT_PUBLIC_UMAMI_SITE_ID=$NEXT_PUBLIC_UMAMI_SITE_ID \
            --build-arg NEXT_PUBLIC_RECAPTCHA_SITEKEY=${{ secrets.NEXT_PUBLIC_RECAPTCHA_SITEKEY }} \
            -t "$REGISTRY_HOSTNAME"/"$GKE_PROJECT"/"$IMAGE":"$GITHUB_SHA" .
          docker tag "$REGISTRY_HOSTNAME"/"$GKE_PROJECT"/"$IMAGE":"$GITHUB_SHA" "$REGISTRY_HOSTNAME"/"$GKE_PROJECT"/"$IMAGE":latest

      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |
          docker push $REGISTRY_HOSTNAME/$GKE_PROJECT/$IMAGE:$GITHUB_SHA
          if [[ "$ENVIRONMENT" == "production" ]]; then docker push "$REGISTRY_HOSTNAME"/"$GKE_PROJECT"/"$IMAGE":latest; fi

      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $GKE_PROJECT
          sed -i "s/TAG/$GITHUB_SHA/" deployment.yml
          kubectl apply -f deployment.yml

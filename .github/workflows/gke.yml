name: Build and Deploy to GKE

on:
  push:
    branches:
      - master
      - stage
  # For future
  # release:
  #   types: [created]

env:
  GKE_PROJECT: ${{ secrets.GKE_PROJECT }}
  GKE_EMAIL: ${{ secrets.GKE_EMAIL }}
  GITHUB_SHA: ${{ github.sha }}
  GKE_ZONE: us-central1-c
  GKE_CLUSTER: aletheia
  IMAGE: aletheia
  REGISTRY_HOSTNAME: us.gcr.io
  API_URL: ${{ secrets.API_URL }}
  ENVIRONMENT: development

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Check Environment
        if: endsWith(github.ref, '/master')
        run: |
          sed -i '11{s/test.//}' deployment.yml
          echo "::set-env name=ENVIRONMENT::production"
          echo "::set-env name=API_URL::${{ secrets.API_URL_PRODUCTION }}"

      - name: Set environment
        run: |
          sed -i "s/ENVIRONMENT/$ENVIRONMENT/g" deployment.yml

      # Setup gcloud CLI
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: "270.0.0"
          service_account_email: ${{ secrets.GKE_EMAIL }}
          service_account_key: ${{ secrets.GKE_KEY }}

      # Configure docker to use the gcloud command-line tool as a credential helper
      - run: gcloud auth configure-docker
        
      # Setting up recaptcha based on environment
      - name: Set ReCaptcha
        env:
            RECAPTCHA_SECRET: ${{ secrets.RECAPTCHA_SECRETKEY }}
        run: |
            sed -i "s/RECAPTCHA_SECRET/$RECAPTCHA_SECRET/g" config.$ENVIRONMENT.yaml

      # Build the Docker image
      - name: Build
        run: |
          docker build --build-arg ENVIRONMENT=$ENVIRONMENT --build-arg API_URL=$API_URL --build-arg RECAPTCHA_SITEKEY=${{ secrets.RECAPTCHA_SITEKEY }} -t "$REGISTRY_HOSTNAME"/"$GKE_PROJECT"/"$IMAGE":"$GITHUB_SHA" .
          docker tag "$REGISTRY_HOSTNAME"/"$GKE_PROJECT"/"$IMAGE":"$GITHUB_SHA" "$REGISTRY_HOSTNAME"/"$GKE_PROJECT"/"$IMAGE":latest

      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |
          docker push $REGISTRY_HOSTNAME/$GKE_PROJECT/$IMAGE:$GITHUB_SHA
          if [[ "$ENVIRONMENT" == "production" ]]; then docker push "$REGISTRY_HOSTNAME"/"$GKE_PROJECT"/"$IMAGE":latest; fi

      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $GKE_PROJECT
          sed -i "s/TAG/$GITHUB_SHA/" deployment.yml
          kubectl apply -f deployment.yml

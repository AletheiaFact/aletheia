var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,0.784,1,2.941]],["body/modules/AppModule.html",[0,1.183,1,4.439,2,1.316,3,0.119,4,0.093,5,0.106,6,3.82,7,0.712,8,2.605,9,3.82,10,5.323,11,6.627,12,0.553,13,3.82,14,1.101,15,0.013,16,0.657,17,0.397,18,0.958,19,4.641,20,1.064,21,2.86,22,5.323,23,3.331,24,5.323,25,3.82,26,2.576,27,6.126,28,0.233,29,5.323,30,0.362,31,2.052,32,0.967,33,3.366,34,3.331,35,3.589,36,3.82,37,3.366,38,3.331,39,2.86,40,2.576,41,3.175,42,3.009,43,2.86,44,1.442,45,1.584,46,2.576,47,3.008,48,2.768,49,3.366,50,3.331,51,3.857,52,3.82,53,2.279,54,1.524,55,2.605,56,2.279,57,3.589,58,3.82,59,3.589,60,3.82,61,5.323,62,6.126,63,2.576,64,3.857,65,3.82,66,3.82,67,3.82,68,5.323,69,3.331,70,3.589,71,3.82,72,3.175,73,2.159,74,3.009,75,3.008,76,2.768,77,3.857,78,3.82,79,3.366,80,3.331,81,3.857,82,3.82,83,2.768,84,3.82,85,2.768,86,3.82,87,2.159,88,3.82,89,2.576,90,3.82,91,2.768,92,3.82,93,3.82,94,0.119,95,0.096,96,2.052,97,3.82,98,3.82,99,3.82,100,3.82,101,1.79,102,3.175,103,3.331,104,3.009,105,3.009,106,3.82,107,0.845,108,1.524,109,3.82,110,3.331,111,3.331,112,3.82,113,3.331,114,3.82,115,3.82,116,3.82,117,3.82,118,3.331,119,3.82,120,1.107,121,1.467,122,5.342,123,6.126,124,0.008,125,0.008]],["title/modules/AuthModule.html",[0,0.784,35,2.737]],["body/modules/AuthModule.html",[0,1.304,2,1.892,3,0.172,4,0.134,5,0.153,15,0.013,28,0.218,30,0.521,33,5.047,34,4.789,35,5.584,94,0.172,95,0.137,108,2.695,121,2.595,124,0.01,125,0.01,126,2.412,127,4.789,128,4.789,129,4.789,130,5.381,131,5.381,132,2.595,133,2.033,134,1.892,135,5.492,136,5.492,137,3.98,138,5.492,139,5.492,140,5.492,141,3.98,142,1.438]],["title/classes/Claim.html",[44,1.099,95,0.102]],["body/classes/Claim.html",[3,0.147,4,0.149,5,0.131,12,0.708,15,0.013,17,0.797,28,0.208,32,1.19,44,1.953,94,0.213,95,0.118,124,0.009,125,0.009,142,2.073,143,1.739,144,3.404,145,0.489,146,1.55,147,5.361,148,2.727,149,4.59,150,4.573,151,1.906,152,3.87,153,3.288,154,3.83,155,4.848,156,4.698,157,4.698,158,1.657,159,2.655,160,4.698,161,3.693,162,2.351,163,2.524,164,2.04,165,3.168,166,3.168,167,3.7,168,3.7,169,2.803,170,2.803,171,3.7,172,2.971,173,4.698,174,3.168,175,4.127,176,3.168,177,4.127,178,0.885,179,4.82,180,4.096,181,4.698,182,4.127,183,2.867,184,4.127,185,2.971,186,4.698,187,2.201,188,4.698,189,3.404]],["title/controllers/ClaimController.html",[190,1.176,191,2.941]],["body/controllers/ClaimController.html",[3,0.055,4,0.043,5,0.049,7,0.549,8,3.52,12,0.722,14,1.435,15,0.013,16,0.857,17,0.653,18,1.25,20,1.387,28,0.195,30,0.168,44,1.88,45,0.733,54,0.705,87,1.663,94,0.055,95,0.044,107,1.46,120,0.512,124,0.005,125,0.005,142,1.384,145,0.184,148,2.222,151,1.848,164,0.882,178,1.125,185,3.974,187,0.828,190,0.853,191,2.132,192,1.542,193,2.336,194,2.566,195,2.943,196,2.943,197,2.943,198,1.698,199,1.936,200,1.984,201,2.943,202,2.943,203,2.132,204,2.943,205,2.943,206,2.566,207,2.943,208,1.861,209,2.566,210,3.383,211,1.768,212,3.472,213,1.13,214,2.943,215,3.228,216,1.768,217,4.885,218,2.943,219,1.768,220,2.137,221,1.768,222,3.261,223,3.985,224,1.768,225,1.768,226,1.768,227,3.778,228,1.768,229,1.768,230,1.542,231,1.768,232,1.768,233,1.542,234,1.768,235,1.768,236,1.768,237,1.768,238,1.768,239,1.768,240,4.252,241,1.768,242,1.768,243,2.549,244,1.768,245,4.06,246,1.768,247,1.768,248,1.768,249,1.768,250,1.768,251,1.768,252,1.768,253,1.768,254,1.542,255,1.768,256,1.768,257,1.768,258,1.768,259,1.768,260,1.542,261,4.252,262,1.768,263,1.768,264,1.014,265,0.865,266,1.118,267,1.392,268,1.85,269,1.055,270,2.137,271,1.542,272,1.542,273,1.542,274,2.031,275,3.296,276,1.118,277,0.762,278,1.055,279,0.95,280,1.936,281,1.281,282,1.85,283,1.192,284,1.392,285,2.566,286,2.566,287,1.768,288,2.031,289,1.768,290,1.768,291,2.625,292,0.95,293,0.95,294,1.467,295,0.705,296,0.913,297,1.768,298,0.512,299,1.542,300,1.542,301,1.379,302,2.523,303,1.542,304,1.542,305,1.542,306,1.542,307,3.843,308,1.542,309,3.006,310,3.006,311,1.768,312,1.768,313,1.768,314,1.542,315,2.728,316,0.999,317,2.625,318,1.984,319,1.98,320,1.192,321,1.768,322,2.549,323,1.768,324,1.768,325,1.768,326,3.296,327,3.829,328,1.768,329,1.984,330,1.861,331,1.861,332,1.542,333,1.392,334,1.768,335,1.392,336,1.542,337,2.566,338,1.542,339,1.768,340,1.542,341,1.768,342,0.828,343,1.542,344,1.663,345,1.192,346,1.118,347,1.768,348,1.768,349,1.768,350,2.943,351,1.768,352,1.542,353,1.768,354,1.768,355,1.542,356,1.768,357,1.768,358,1.768,359,1.768,360,1.542,361,1.768,362,1.768,363,4.408,364,1.768,365,1.768,366,1.392,367,3.843,368,2.318,369,0.548,370,1.542,371,1.768,372,1.192,373,0.733,374,1.768,375,1.542,376,1.768,377,1.768,378,2.943,379,3.781,380,1.768,381,1.542,382,1.542,383,1.055,384,1.768,385,1.768,386,1.281,387,1.768,388,1.768,389,2.566,390,2.566,391,1.768,392,3.342,393,3.342,394,4.608,395,3.194,396,4.895,397,3.547,398,1.768,399,2.978,400,3.342,401,3.152,402,3.563,403,1.281,404,3.563,405,2.943,406,2.943,407,1.768,408,1.768,409,1.542,410,1.768,411,1.768,412,4.408,413,4.408,414,1.768,415,1.768,416,1.768,417,1.768,418,1.768,419,1.192,420,1.768,421,1.542,422,0.905,423,0.865]],["title/modules/ClaimModule.html",[0,0.784,41,2.421]],["body/modules/ClaimModule.html",[0,1.128,2,1.509,3,0.137,4,0.107,5,0.122,15,0.013,16,0.541,28,0.228,30,0.415,31,2.354,32,1.109,39,4.04,40,2.954,41,4.996,43,4.04,44,1.781,45,1.816,46,2.954,47,4.249,48,3.175,53,3.487,54,1.748,55,3.68,56,2.614,72,4.485,73,2.476,74,3.451,75,4.249,76,3.175,94,0.137,95,0.11,108,2.331,120,1.693,121,2.245,124,0.009,125,0.009,126,2.087,132,2.245,133,1.622,134,1.509,162,1.683,178,0.633,189,4.235,191,4.766,270,4.577,271,3.82,276,2.771,424,3.82,425,3.82,426,3.82,427,3.82,428,4.755,429,3.451,430,2.521,431,4.381,432,4.381,433,3.82,434,4.603,435,4.235,436,2.614,437,3.82]],["title/classes/ClaimReview.html",[95,0.102,438,1.986]],["body/classes/ClaimReview.html",[3,0.115,4,0.126,5,0.102,12,0.777,15,0.013,17,0.818,28,0.198,32,0.929,44,1.929,94,0.204,95,0.092,107,0.812,124,0.008,125,0.008,142,2.149,143,1.359,145,0.382,146,1.311,148,2.575,150,3.088,151,2.094,152,3.792,153,3.498,154,3.99,155,4.63,158,2.025,159,3.88,161,3.893,162,1.988,163,1.972,164,1.797,165,2.475,168,2.891,169,2.19,170,2.19,172,2.321,174,2.475,175,3.49,176,2.475,177,4.043,178,0.748,182,2.475,183,1.72,184,2.475,187,1.72,369,2.319,372,4.043,373,2.699,438,2.934,439,3.561,440,5.125,441,2.475,442,4.391,443,4.722,444,5.228,445,4.722,446,3.671,447,3.751,448,2.925,449,4.722,450,3.671,451,2.781,452,3.671,453,3.671,454,3.671,455,3.671,456,3.671,457,3.671,458,2.475,459,2.66,460,2.891,461,2.891,462,2.891,463,4.077,464,4.513,465,4.513,466,4.513,467,4.513,468,4.513,469,1.88,470,2.891,471,3.671,472,1.972,473,2.66,474,4.077,475,3.201,476,3.671,477,3.671,478,2.66]],["title/controllers/ClaimReviewController.html",[190,1.176,479,2.941]],["body/controllers/ClaimReviewController.html",[3,0.128,4,0.1,5,0.114,7,1.041,12,0.709,14,1.411,15,0.013,16,0.842,17,0.425,18,1.228,20,1.363,28,0.21,30,0.388,44,1.511,45,2.96,54,1.632,87,2.312,94,0.128,95,0.102,107,1.51,120,1.185,124,0.009,125,0.009,145,0.425,151,1.779,178,0.986,190,1.185,193,2.286,194,4.866,198,2.507,199,3.253,209,4.866,210,3.207,212,5.374,213,2.144,215,3.079,243,4.6,265,2.002,266,4.017,268,3.108,269,2.441,272,3.567,273,3.567,274,3.413,275,5.538,276,2.587,284,3.222,291,2.614,292,2.198,293,2.198,294,1.663,298,1.185,299,3.567,300,3.567,301,2.614,302,1.922,303,3.567,304,3.567,305,3.567,306,3.567,309,2.095,310,2.095,335,3.222,336,3.567,337,4.866,338,3.567,340,3.567,342,1.917,343,3.567,344,3.154,345,2.759,346,2.587,369,1.269,439,3.345,479,4.044,480,3.567,481,2.587,482,4.091,483,4.091,484,4.091,485,5.563,486,4.091,487,4.091,488,4.091,489,4.091,490,4.091,491,4.091,492,4.091,493,4.091,494,4.091,495,4.091,496,4.091,497,4.091,498,4.091,499,4.091,500,4.091,501,4.091,502,4.091,503,4.091,504,4.091]],["title/modules/ClaimReviewModule.html",[0,0.784,43,2.181]],["body/modules/ClaimReviewModule.html",[0,1.197,2,1.652,3,0.15,4,0.117,5,0.133,15,0.013,16,0.592,28,0.225,30,0.455,31,2.577,32,1.214,43,4.432,44,1.68,45,1.988,47,4.357,48,3.475,53,3.7,54,1.913,75,4.357,76,3.475,94,0.194,95,0.12,108,2.474,120,1.797,121,2.382,124,0.01,125,0.01,126,2.214,132,2.382,133,1.775,134,1.652,162,1.842,178,0.693,268,4.017,269,2.861,276,3.033,430,2.675,434,4.885,436,2.861,438,2.347,439,2.247,478,4.494,479,4.981,505,4.182,506,4.796,507,4.182,508,4.182,509,4.357,510,3.777,511,3.777,512,3.777,513,4.796,514,3.475,515,4.494,516,4.182]],["title/injectables/ClaimReviewService.html",[268,1.986,517,0.565]],["body/injectables/ClaimReviewService.html",[0,0.816,3,0.065,4,0.051,5,0.058,7,0.626,12,0.751,14,1.454,15,0.013,16,0.868,17,0.505,18,1.266,20,1.459,28,0.184,30,0.197,32,0.526,44,1.978,45,3.027,94,0.065,95,0.052,101,0.973,107,1.66,124,0.005,125,0.005,142,0.879,145,0.216,146,0.85,148,1.157,158,0.562,164,1.007,169,1.239,170,1.239,178,0.702,182,1.4,183,2.93,184,1.4,185,3.609,187,0.973,193,2.105,198,1.508,199,2.488,200,2.264,213,1.866,217,4.976,220,1.174,264,1.673,265,2.069,268,1.643,288,2.866,294,1.573,295,1.687,296,1.864,298,0.973,302,1.157,315,2.128,316,1.174,317,2.499,319,2.182,366,1.635,369,1.312,372,3.597,373,2.014,403,4.135,419,3.275,422,2.166,423,1.016,438,2.069,439,3.421,442,4.809,443,1.635,445,3.33,460,1.635,472,3.924,509,2.745,511,1.635,512,1.635,514,3.52,515,2.433,517,0.467,518,0.644,519,1.811,520,3.358,521,4.858,522,3.358,523,5.011,524,3.358,525,3.358,526,3.358,527,3.358,528,3.358,529,3.358,530,2.076,531,3.227,532,3.395,533,3.358,534,3.358,535,2.076,536,2.076,537,3.358,538,3.358,539,3.358,540,4.651,541,3.358,542,2.928,543,4.228,544,4.228,545,3.358,546,3.358,547,3.358,548,2.076,549,4.681,550,2.645,551,2.076,552,1.007,553,1.29,554,3.358,555,2.076,556,3.358,557,2.076,558,3.799,559,4.201,560,3.33,561,2.645,562,2.069,563,3.358,564,2.433,565,2.645,566,1.643,567,2.076,568,2.076,569,1.635,570,2.645,571,2.433,572,1.4,573,1.635,574,1.635,575,3.358,576,2.522,577,1.635,578,2.076,579,2.076,580,3.358,581,2.076,582,3.358,583,3.358,584,2.076,585,3.358,586,2.076,587,3.358,588,2.076,589,3.358,590,4.651,591,2.076,592,3.358,593,1.643,594,1.313,595,1.064,596,1.811,597,1.635,598,1.4,599,1.635,600,2.645,601,1.505,602,1.811,603,2.076,604,5.334,605,4.858,606,4.228,607,3.275,608,2.076,609,2.928,610,3.687,611,2.076,612,1.811,613,2.076,614,2.076,615,2.076,616,2.076,617,2.076,618,2.076,619,1.4,620,1.4,621,3.358,622,2.076,623,1.811,624,1.811,625,2.076,626,1.811,627,2.076,628,2.076,629,1.811,630,4.858,631,1.811,632,2.076,633,2.076,634,3.358,635,3.358,636,2.076,637,2.076,638,1.811,639,2.076,640,2.076,641,2.076,642,2.076,643,2.076,644,2.076,645,2.076,646,2.076,647,2.076,648,2.076,649,2.076,650,2.076,651,1.116]],["title/classes/ClaimRevision.html",[95,0.102,150,2.421]],["body/classes/ClaimRevision.html",[3,0.121,4,0.094,5,0.108,12,0.773,15,0.013,17,0.842,28,0.185,32,0.982,44,2.013,94,0.193,95,0.097,101,1.817,107,0.858,124,0.008,125,0.008,142,2.139,143,1.436,145,0.403,146,1.362,148,2.611,149,4.164,150,3.684,151,2.082,152,3.906,153,3.318,154,4.032,155,4.431,158,1.963,159,3.77,161,3.942,162,2.066,163,2.084,164,1.613,165,2.615,166,5.111,172,2.453,174,2.615,175,3.627,176,2.615,177,3.627,178,0.778,182,2.615,183,2.52,184,2.615,185,3.906,198,1.742,383,4.179,438,1.898,439,3.551,447,3.898,448,3.04,449,4.864,459,2.81,469,1.986,470,3.055,472,2.084,473,2.81,552,1.163,566,3.264,652,2.81,653,3.684,654,4.864,655,3.878,656,3.878,657,3.878,658,3.878,659,3.878,660,3.878,661,3.878,662,3.055,663,3.878,664,3.878,665,3.878,666,3.209,667,3.878,668,3.878,669,3.878,670,3.878,671,3.055,672,3.055,673,3.382,674,2.314,675,4.237,676,3.382,677,3.878,678,2.81]],["title/modules/ClaimRevisionModule.html",[0,0.784,72,2.421]],["body/modules/ClaimRevisionModule.html",[0,1.328,2,1.655,3,0.15,4,0.117,5,0.134,15,0.013,16,0.593,28,0.223,30,0.455,31,2.582,32,1.217,44,1.682,47,4.359,48,3.482,53,3.704,54,1.917,55,3.775,56,2.866,72,4.922,73,2.716,94,0.15,95,0.12,101,2.251,108,2.477,121,2.385,124,0.01,125,0.01,126,2.217,132,2.385,133,1.779,134,1.655,150,3.704,162,1.846,167,3.784,178,0.695,276,3.039,428,4.878,430,2.678,433,4.19,434,4.891,436,2.866,439,2.251,678,4.5,679,4.19,680,4.19,681,4.805,682,4.19,683,5.192,684,3.784,685,4.19,686,4.19,687,4.5,688,4.19,689,4.805,690,4.19,691,4.19,692,4.805,693,4.805]],["title/injectables/ClaimRevisionService.html",[517,0.565,683,2.567]],["body/injectables/ClaimRevisionService.html",[3,0.116,4,0.147,5,0.103,7,0.971,12,0.716,14,1.246,15,0.013,16,0.807,17,0.626,18,1.085,20,1.204,28,0.208,30,0.351,32,0.938,44,2.029,73,4.038,94,0.116,95,0.093,107,1.153,124,0.008,125,0.008,142,1.712,145,0.385,146,1.319,150,4.109,158,1.003,164,1.11,167,2.916,178,0.535,183,1.735,185,4.356,187,1.735,193,1.869,198,2.339,213,1.422,264,2.252,265,2.549,294,1.994,295,2.403,296,2.216,298,1.509,302,1.275,346,3.294,373,2.159,423,1.812,439,3.347,451,2.798,517,0.725,518,1.149,532,4.148,552,1.11,553,1.422,562,1.812,572,3.512,576,3.899,593,3.199,595,1.896,596,3.229,601,2.683,602,3.229,651,2.798,653,3.107,662,2.916,683,3.294,685,3.229,687,3.774,694,3.229,695,4.365,696,5.208,697,3.703,698,4.641,699,5.208,700,5.208,701,3.703,702,3.294,703,4.102,704,5.208,705,3.703,706,4.541,707,2.916,708,3.703,709,3.774,710,4.102,711,3.703,712,3.774,713,3.703,714,2.683,715,3.703,716,3.229,717,2.549,718,3.703,719,3.703,720,4.541,721,3.703,722,3.229,723,3.703,724,4.541,725,3.229,726,2.916,727,4.541,728,3.229,729,3.229,730,2.916,731,3.229,732,2.916,733,3.229,734,3.229,735,3.703,736,5.208,737,3.703,738,3.703,739,2.497,740,3.703,741,2.798,742,3.229,743,3.703]],["title/injectables/ClaimService.html",[270,2.294,517,0.565]],["body/injectables/ClaimService.html",[0,1.015,3,0.055,4,0.043,5,0.049,7,0.544,12,0.709,14,1.359,15,0.013,16,0.828,17,0.546,18,1.207,20,1.418,28,0.179,30,0.166,32,0.443,44,2.173,45,0.725,63,1.179,73,0.988,94,0.055,95,0.044,101,1.366,107,1.63,124,0.008,125,0.005,142,1.46,145,0.182,146,0.738,147,2.297,148,1.676,149,1.966,153,2.824,158,1.016,164,0.874,169,1.043,170,1.043,171,1.377,178,1.057,183,2.462,185,3.959,193,2.332,198,1.966,199,2.855,200,1.966,203,2.113,208,1.844,213,2.244,215,1.258,220,2.474,222,2.185,230,2.542,233,2.542,260,2.542,264,1.508,265,2.728,268,2.728,269,1.043,270,1.648,277,0.754,288,2.614,294,1.956,295,1.496,296,2.176,298,0.845,301,2.462,302,2.416,308,2.542,315,1.496,316,2.474,317,2.051,319,1.966,322,1.179,326,3.817,331,4.239,346,1.106,368,1.377,369,1.63,372,1.966,373,1.815,381,1.525,382,1.525,386,2.113,390,3.817,399,2.297,422,3.107,423,0.856,435,2.718,438,1.427,442,1.179,451,1.567,459,1.267,517,0.406,518,0.542,523,2.113,531,2.995,549,2.718,550,2.297,552,1.312,553,1.681,558,3.836,559,4.6,560,4.139,561,2.297,562,2.142,564,3.172,565,3.448,566,2.381,569,2.297,570,3.448,571,2.113,572,2.952,573,2.297,574,2.297,576,2.611,577,2.297,593,1.427,594,1.106,595,0.895,597,1.377,598,1.179,599,1.377,600,2.297,607,1.179,610,1.525,619,1.179,620,1.179,629,1.525,673,5.093,674,1.739,683,3.526,686,1.525,695,2.718,703,2.297,706,2.542,707,1.377,709,2.113,712,2.113,714,1.267,716,1.525,722,1.525,734,3.817,739,1.179,744,1.377,745,2.916,746,2.916,747,2.916,748,4.582,749,2.916,750,1.525,751,2.916,752,2.916,753,3.817,754,1.748,755,2.916,756,1.748,757,4.377,758,1.748,759,2.916,760,1.748,761,4.865,762,4.377,763,1.748,764,1.748,765,2.916,766,1.748,767,2.297,768,2.542,769,1.748,770,2.916,771,1.748,772,2.916,773,1.748,774,3.751,775,4.865,776,1.748,777,2.542,778,2.916,779,2.542,780,2.916,781,2.113,782,2.542,783,2.542,784,1.748,785,1.525,786,2.297,787,2.916,788,1.525,789,1.525,790,1.748,791,1.748,792,1.748,793,2.916,794,1.525,795,1.748,796,2.718,797,2.718,798,2.954,799,2.954,800,2.718,801,2.954,802,2.718,803,1.748,804,2.916,805,1.748,806,1.748,807,1.748,808,1.748,809,1.748,810,1.748,811,2.916,812,2.916,813,1.748,814,2.916,815,3.27,816,3.751,817,1.748,818,3.751,819,1.525,820,3.751,821,1.748,822,1.748,823,1.748,824,1.748,825,3.751,826,1.748,827,1.748,828,1.748,829,1.525,830,1.748,831,2.916,832,1.748,833,1.525,834,1.267,835,1.748,836,1.377,837,1.525,838,1.748,839,1.748,840,1.748,841,1.748,842,1.748,843,1.748,844,1.748,845,1.748,846,1.748,847,1.748,848,1.748,849,1.748,850,1.748,851,1.525,852,1.748,853,1.748,854,1.525,855,2.916,856,2.916,857,1.748,858,2.916,859,1.748,860,2.916,861,1.748,862,1.748,863,1.748,864,1.748,865,1.748,866,1.748,867,1.748,868,1.748,869,1.748,870,1.525,871,1.748,872,1.748,873,1.748]],["title/classes/CreateClaimDTO.html",[95,0.102,227,2.737]],["body/classes/CreateClaimDTO.html",[3,0.153,4,0.119,5,0.136,12,0.819,15,0.013,17,0.845,28,0.174,94,0.153,95,0.157,124,0.01,125,0.01,143,1.806,145,0.507,146,1.588,148,2.668,151,2.206,158,2.228,165,3.29,227,4.229,345,4.673,383,4.134,419,4.673,469,2.499,653,4.134,654,5.459,874,6.957,875,3.843,876,6.378,877,4.879,878,4.879,879,4.879,880,4.879,881,4.879,882,4.879,883,4.879,884,4.879,885,4.879,886,4.879,887,6.271,888,4.544,889,4.939,890,6.271,891,6.204,892,4.981]],["title/classes/CreateClaimReview.html",[95,0.102,485,2.941]],["body/classes/CreateClaimReview.html",[3,0.142,4,0.111,5,0.126,12,0.817,15,0.013,17,0.817,28,0.198,44,2.237,94,0.142,95,0.15,124,0.009,125,0.009,143,1.68,145,0.472,146,1.515,148,2.616,151,2.201,158,2.205,165,3.06,345,4.513,419,4.513,439,3.725,442,4.513,443,5.271,444,5.836,445,5.271,459,3.288,462,3.574,469,2.324,485,4.335,511,3.574,512,3.574,876,3.957,889,4.712,891,5.604,892,5.028,893,6.933,894,3.957,895,5.983,896,4.538,897,4.538,898,4.538,899,7.395,900,4.538,901,4.538,902,4.538,903,4.538,904,4.538,905,4.538,906,4.538,907,4.538,908,4.538]],["title/classes/CreatePersonality.html",[95,0.102,909,2.941]],["body/classes/CreatePersonality.html",[3,0.158,4,0.123,5,0.14,12,0.813,15,0.013,16,0.87,17,0.813,18,1.407,28,0.14,94,0.158,95,0.161,124,0.01,125,0.01,143,1.871,145,0.526,146,1.624,151,2.189,158,2.214,451,3.446,469,2.589,562,3.448,891,5.052,892,5.082,909,4.648,910,6.924,911,4.407,912,6.144,913,6.144,914,4.751,915,6.144,916,5.054,917,5.593,918,5.054,919,4.407,920,5.054,921,5.054,922,5.054,923,5.054,924,5.054,925,5.593,926,5.837,927,5.054,928,5.054]],["title/injectables/DisableBodyParserMiddleware.html",[85,2.941,517,0.565]],["body/injectables/DisableBodyParserMiddleware.html",[3,0.176,4,0.137,5,0.157,7,1.28,12,0.586,14,1.166,15,0.013,16,0.696,17,0.586,18,1.015,20,1.127,21,3.689,28,0.191,30,0.534,85,4.975,87,3.88,94,0.176,95,0.141,96,3.03,124,0.011,125,0.011,142,1.477,145,0.586,210,3.461,215,2.432,222,3.461,277,2.432,342,3.609,517,0.955,518,1.749,558,3.566,666,4.096,929,5.987,930,4.917,931,5.408,932,7.403,933,5.639,934,4.975,935,4.917]],["title/modules/EmailModule.html",[0,0.784,59,2.737]],["body/modules/EmailModule.html",[0,1.34,2,1.978,3,0.18,4,0.14,5,0.16,15,0.013,28,0.207,30,0.544,53,4.141,54,2.29,59,5.502,94,0.18,95,0.144,108,2.29,121,2.666,124,0.011,125,0.011,126,2.478,132,2.666,133,2.125,134,1.978,430,2.994,936,5.006,937,5.006,938,5.006,939,5.316,940,5.741,941,5.741]],["title/injectables/EmailService.html",[517,0.565,939,2.567]],["body/injectables/EmailService.html",[3,0.132,4,0.102,5,0.117,7,1.06,12,0.75,14,1.332,15,0.013,16,0.795,17,0.591,18,1.16,20,1.288,26,4.344,28,0.158,30,0.399,54,1.678,94,0.132,95,0.105,107,1.426,124,0.009,125,0.009,145,0.437,146,1.44,158,1.54,178,1.155,193,2.305,213,2.185,264,2.377,274,3.992,294,1.807,295,2.57,296,1.764,298,1.648,302,1.959,369,1.305,517,0.791,518,1.305,552,1.705,553,2.185,741,2.26,939,3.597,942,3.313,943,6.902,944,6.443,945,5.687,946,3.313,947,5.687,948,4.207,949,4.207,950,7.727,951,4.207,952,5.687,953,5.687,954,6.018,955,6.018,956,6.443,957,4.207,958,5.687,959,3.048,960,3.668,961,3.048,962,3.668,963,3.313,964,3.668,965,3.048,966,3.668,967,5.618,968,4.207,969,4.207,970,4.207,971,4.207,972,5.687,973,4.207,974,4.207,975,4.207,976,6.443,977,4.207,978,3.313,979,4.207,980,4.207,981,4.207,982,4.207,983,4.207,984,4.207,985,5.687,986,3.668,987,4.207,988,4.207,989,4.207,990,4.207,991,3.313,992,5.687,993,4.207,994,4.207]],["title/classes/GetClaimsByHashDTO.html",[95,0.102,240,2.941]],["body/classes/GetClaimsByHashDTO.html",[3,0.161,4,0.126,5,0.143,12,0.8,15,0.013,17,0.8,18,1.17,28,0.143,94,0.161,95,0.163,124,0.01,125,0.01,143,1.909,145,0.536,146,1.645,151,2.156,158,2.128,240,4.707,288,4.374,315,2.837,317,3.332,319,3.195,469,2.641,674,4.454,888,4.707,889,5.117,892,4.722,926,5.117,995,6.188,996,4.497,997,3.195,998,4.062,999,5.157,1000,5.157,1001,4.062,1002,5.157,1003,4.062,1004,5.157,1005,5.157,1006,5.157,1007,5.117,1008,5.601,1009,4.062,1010,5.117]],["title/classes/GetClaimsDTO.html",[95,0.102,245,2.941]],["body/classes/GetClaimsDTO.html",[3,0.165,4,0.128,5,0.147,12,0.806,15,0.013,17,0.806,28,0.147,94,0.165,95,0.165,124,0.01,125,0.01,143,1.953,145,0.548,146,1.669,148,2.475,151,2.17,158,2.14,245,4.775,315,2.866,317,3.366,319,3.228,469,2.702,674,4.49,888,4.775,892,4.997,995,6.223,997,3.228,998,4.155,1001,4.155,1003,4.155,1007,5.19,1008,5.66,1009,4.155,1010,5.19,1011,4.6,1012,5.275,1013,5.275,1014,5.275,1015,5.275,1016,5.275]],["title/injectables/GetLanguageMiddleware.html",[83,2.941,517,0.565]],["body/injectables/GetLanguageMiddleware.html",[3,0.175,4,0.136,5,0.155,7,1.273,12,0.581,14,1.156,15,0.013,16,0.69,17,0.581,18,1.006,20,1.117,21,3.003,28,0.19,30,0.53,83,4.948,94,0.175,95,0.14,96,3.003,124,0.011,125,0.011,145,0.581,158,1.514,210,3.45,215,2.41,222,3.067,223,3.777,277,2.41,342,3.598,395,4.05,517,0.95,518,1.734,666,4.074,931,5.379,934,4.948,997,3.067,1017,4.873,1018,6.697,1019,5.589,1020,5.589,1021,4.402]],["title/classes/GetPersonalities.html",[95,0.102,1022,2.941]],["body/classes/GetPersonalities.html",[3,0.158,4,0.123,5,0.14,12,0.812,15,0.013,16,0.869,17,0.812,18,1.333,28,0.14,94,0.158,95,0.16,124,0.01,125,0.01,143,1.867,145,0.524,146,1.622,151,2.188,158,2.116,315,2.808,317,3.298,319,3.162,451,3.442,469,2.583,674,4.418,888,4.642,892,4.835,917,4.398,919,4.398,925,5.586,926,5.544,997,3.162,998,3.973,1001,3.973,1003,3.973,1007,5.045,1008,5.544,1009,3.973,1010,5.045,1022,4.642,1023,6.921,1024,4.398,1025,6.138,1026,5.044,1027,5.044,1028,5.044,1029,5.044,1030,5.044,1031,5.044]],["title/classes/History.html",[95,0.102,422,2.079]],["body/classes/History.html",[3,0.133,4,0.104,5,0.118,12,0.775,15,0.013,17,0.852,18,0.766,28,0.18,32,1.078,44,1.552,94,0.226,95,0.107,101,1.994,124,0.009,125,0.009,142,2.136,143,1.576,145,0.443,146,1.451,148,1.975,151,2.088,152,4.386,153,3.08,154,4.099,155,3.625,159,3.24,161,3.903,162,2.202,163,2.287,164,1.718,172,2.692,174,2.87,175,3.865,176,2.87,177,4.676,178,0.615,187,3.036,198,2.575,199,2.936,208,3.625,369,2.403,383,4.318,422,3.32,423,3.649,438,2.805,447,3.084,458,2.87,461,4.515,566,3.394,598,4.37,1032,2.87,1033,5.462,1034,5.732,1035,4.256,1036,4.256,1037,4.998,1038,4.998,1039,4.256,1040,4.256,1041,4.256,1042,4.256,1043,3.352,1044,4.256,1045,3.352,1046,4.256,1047,3.711,1048,3.084,1049,3.711]],["title/controllers/HistoryController.html",[190,1.176,1050,2.941]],["body/controllers/HistoryController.html",[3,0.155,4,0.12,5,0.137,7,1.18,8,3.413,12,0.514,14,1.023,15,0.013,16,0.611,17,0.514,18,0.89,20,0.988,28,0.176,30,0.469,94,0.155,95,0.124,107,1.4,120,1.433,124,0.01,125,0.01,145,0.514,151,1.385,178,1.099,187,3.268,190,1.833,193,2.164,213,1.9,220,3.575,264,2.179,265,3.598,294,1.657,295,1.973,296,1.534,298,1.433,315,3.031,317,3.444,318,3.335,319,2.842,327,5.054,329,3.335,330,3.128,422,2.533,423,3.096,531,3.748,717,2.42,1050,4.584,1051,4.312,1052,7.773,1053,4.946,1054,4.946,1055,4.946,1056,4.312,1057,4.946,1058,4.946,1059,4.946,1060,4.946,1061,4.946,1062,4.312,1063,4.946,1064,6.975,1065,4.946,1066,4.946,1067,4.312]],["title/modules/HistoryModule.html",[0,0.784,75,2.294]],["body/modules/HistoryModule.html",[0,1.284,2,1.844,3,0.167,4,0.13,5,0.149,15,0.013,16,0.661,28,0.22,30,0.507,31,2.876,32,1.355,53,3.967,54,2.135,75,4.545,94,0.167,95,0.134,108,2.135,120,1.551,121,2.554,124,0.01,125,0.01,126,2.374,132,2.554,133,1.982,134,1.844,162,2.056,178,0.774,430,2.868,436,3.193,531,4.476,1048,4.818,1050,4.818,1056,4.668,1068,4.668,1069,4.668,1070,4.668,1071,4.216,1072,4.668,1073,5.353,1074,4.818,1075,4.668,1076,5.353]],["title/injectables/HistoryService.html",[517,0.565,531,2.181]],["body/injectables/HistoryService.html",[3,0.095,4,0.074,5,0.084,7,0.839,12,0.693,14,1.23,15,0.013,16,0.785,17,0.796,18,1.071,20,1.474,28,0.165,30,0.287,32,0.766,44,1.219,94,0.095,95,0.076,107,1.408,124,0.011,125,0.007,142,1.178,145,0.315,146,1.14,148,2.296,158,1.219,164,0.907,178,0.651,183,1.418,187,2.979,193,2.068,198,2.672,199,2.305,213,1.729,243,3.035,264,2.049,265,3.708,294,1.807,295,2.143,296,2.288,298,1.304,301,2.787,315,2.829,317,3.234,319,2.856,320,4.012,360,3.924,369,2.2,375,2.639,383,3.794,422,3.958,423,3.662,451,2.418,517,0.626,518,0.939,531,2.418,552,1.611,553,2.064,558,4.215,562,2.629,566,3.262,572,4.494,576,3.549,593,3.708,594,1.914,595,1.55,607,2.041,619,2.041,620,2.041,695,3.893,707,2.383,712,3.261,714,2.193,834,4.311,1033,3.545,1043,2.383,1045,3.545,1062,3.924,1067,3.924,1072,2.639,1074,3.261,1077,2.639,1078,4.5,1079,4.5,1080,5.373,1081,3.026,1082,4.5,1083,4.5,1084,3.026,1085,4.012,1086,3.026,1087,4.5,1088,7.375,1089,3.545,1090,3.924,1091,4.5,1092,4.5,1093,4.5,1094,4.5,1095,3.026,1096,6.359,1097,6.359,1098,3.026,1099,5.373,1100,4.5,1101,3.924,1102,5.249,1103,4.5,1104,4.5,1105,3.924,1106,3.924,1107,3.924,1108,4.5,1109,3.026,1110,3.026,1111,3.026,1112,3.026,1113,3.026,1114,3.026,1115,3.026,1116,2.639,1117,3.026]],["title/controllers/HomeController.html",[190,1.176,1118,2.941]],["body/controllers/HomeController.html",[3,0.149,4,0.116,5,0.132,7,1.149,8,3.349,12,0.494,14,0.982,15,0.013,16,0.587,17,0.494,18,0.855,20,0.949,28,0.218,30,0.45,94,0.149,95,0.119,120,1.377,124,0.01,125,0.01,142,1.614,145,0.494,151,1.331,178,0.989,190,1.786,193,2.123,210,3.253,215,3.123,222,3.253,223,3.939,277,2.049,278,2.834,279,2.553,280,3.505,281,3.442,282,3.349,283,3.203,291,2.888,292,2.553,293,2.553,294,1.792,298,1.377,302,2.357,309,3.157,310,3.157,315,1.895,317,2.226,319,2.134,386,4.467,392,3.005,393,3.005,395,3.442,400,3.005,401,2.834,402,3.203,404,3.203,481,3.005,997,2.134,1118,4.467,1119,4.143,1120,5.375,1121,4.143,1122,4.751,1123,4.751,1124,4.082,1125,4.751,1126,4.143,1127,4.143,1128,4.467,1129,4.751,1130,4.143,1131,3.742,1132,4.751,1133,4.143,1134,4.143]],["title/modules/HomeModule.html",[0,0.784,57,2.737]],["body/modules/HomeModule.html",[0,1.317,2,1.921,3,0.174,4,0.136,5,0.155,15,0.013,28,0.219,30,0.529,39,4.304,40,3.76,49,5.066,50,4.863,55,3.92,56,3.327,57,5.596,94,0.174,95,0.14,108,2.72,120,1.976,121,2.142,124,0.011,125,0.011,126,2.435,132,2.62,133,2.065,134,1.921,1118,5.338,1135,4.863,1136,4.863,1137,5.577,1138,5.577]],["title/injectables/JsonBodyMiddleware.html",[91,2.941,517,0.565]],["body/injectables/JsonBodyMiddleware.html",[3,0.173,4,0.135,5,0.154,7,1.267,12,0.576,14,1.146,15,0.013,16,0.684,17,0.576,18,0.997,20,1.107,21,3.649,28,0.204,30,0.525,87,3.131,91,4.922,94,0.173,95,0.139,96,2.977,124,0.011,125,0.011,145,0.576,210,3.44,215,2.389,222,3.44,223,3.922,277,2.389,342,3.681,517,0.945,518,1.719,558,3.504,666,4.052,931,5.35,934,4.922,935,4.831,1139,5.923,1140,4.831,1141,5.54,1142,4.831,1143,4.364,1144,5.54]],["title/injectables/LocalAuthGuard.html",[517,0.565,1145,2.941]],["body/injectables/LocalAuthGuard.html",[3,0.195,4,0.152,5,0.174,15,0.013,28,0.203,30,0.592,94,0.195,95,0.156,124,0.011,125,0.011,137,4.529,517,1.016,518,1.939,1145,5.29,1146,5.451,1147,5.451,1148,6.251,1149,4.215,1150,6.251]],["title/injectables/LocalSerializer.html",[130,2.737,517,0.565]],["body/injectables/LocalSerializer.html",[3,0.178,4,0.138,5,0.158,12,0.59,14,1.174,15,0.013,16,0.701,17,0.59,18,1.022,28,0.22,30,0.538,32,1.437,94,0.178,95,0.142,124,0.011,125,0.011,130,4.649,164,1.702,294,1.487,298,1.998,309,3.531,310,3.531,369,1.761,458,3.828,517,0.959,518,1.761,593,3.779,595,2.908,1151,4.95,1152,4.471,1153,5.677,1154,4.36,1155,4.995,1156,3.386,1157,4.471,1158,5.677,1159,5.677]],["title/injectables/LocalStrategy.html",[131,2.737,517,0.565]],["body/injectables/LocalStrategy.html",[3,0.174,4,0.136,5,0.155,12,0.579,14,1.151,15,0.013,16,0.687,17,0.579,18,1.002,28,0.222,30,0.527,32,1.409,94,0.174,95,0.139,124,0.011,125,0.011,131,4.592,137,4.032,164,1.668,294,1.457,298,1.973,309,2.85,310,2.85,369,1.726,458,3.752,517,0.948,518,1.726,593,3.753,595,2.85,1149,3.752,1152,4.383,1154,4.307,1155,4.032,1156,3.32,1157,4.383,1160,4.852,1161,5.565,1162,4.383,1163,3.752,1164,5.565,1165,5.565,1166,5.565,1167,4.383,1168,3.519,1169,5.565]],["title/classes/Logger.html",[95,0.102,264,1.398]],["body/classes/Logger.html",[3,0.142,4,0.11,5,0.126,7,1.114,12,0.805,14,1.57,15,0.013,16,0.937,17,0.768,18,1.366,20,1.477,21,2.434,28,0.126,30,0.429,94,0.142,95,0.113,96,3.211,124,0.009,125,0.009,143,1.677,145,0.471,146,1.513,158,2.237,264,2.666,294,1.751,298,1.313,344,3.377,448,4.535,552,1.358,1170,3.95,1171,6.687,1172,5.976,1173,5.976,1174,5.976,1175,5.976,1176,5.976,1177,5.976,1178,5.976,1179,5.898,1180,4.53,1181,7.39,1182,5.976,1183,7.11,1184,4.53,1185,5.976,1186,4.53,1187,5.976,1188,4.53,1189,5.976,1190,4.53,1191,4.53,1192,4.53,1193,4.53,1194,4.53,1195,4.53,1196,4.53]],["title/injectables/LoggerMiddleware.html",[77,2.941,517,0.565]],["body/injectables/LoggerMiddleware.html",[3,0.157,4,0.123,5,0.14,7,1.193,12,0.665,14,1.041,15,0.013,16,0.622,17,0.523,18,0.906,20,1.006,21,3.437,28,0.178,30,0.477,77,4.636,94,0.157,95,0.126,96,2.705,124,0.01,125,0.01,145,0.523,146,1.62,178,1.07,210,3.607,222,3.507,264,2.549,277,2.171,294,1.842,296,1.985,329,3.394,342,3.467,517,0.89,518,1.562,552,1.509,553,1.934,666,3.817,934,4.636,1018,6.453,1197,4.389,1198,6.398,1199,5.034,1200,6.398,1201,5.034,1202,6.398,1203,5.039,1204,6.398,1205,6.398,1206,5.034,1207,4.389,1208,5.034,1209,6.398,1210,6.398,1211,5.034,1212,5.034]],["title/classes/NotFoundFilter.html",[64,2.941,95,0.102]],["body/classes/NotFoundFilter.html",[3,0.165,4,0.128,5,0.147,7,1.229,12,0.548,14,1.091,15,0.013,16,0.651,17,0.548,18,0.95,20,1.054,21,2.834,28,0.183,30,0.5,64,4.775,94,0.165,95,0.132,96,3.54,124,0.01,125,0.01,134,2.27,143,1.953,145,0.548,178,0.953,210,2.96,277,2.275,315,2.628,330,4.167,344,3.724,448,3.724,552,1.975,562,2.581,709,5.454,717,3.517,978,5.66,1179,3.822,1213,5.746,1214,4.6,1215,6.589,1216,5.746,1217,6.589,1218,5.746,1219,5.746,1220,6.589,1221,5.746,1222,7.186,1223,6.589,1224,7.527,1225,5.275,1226,5.275,1227,5.275,1228,5.275,1229,5.275,1230,5.275]],["title/controllers/OryController.html",[89,2.737,190,1.176]],["body/controllers/OryController.html",[3,0.138,4,0.107,5,0.122,7,1.094,8,3.685,12,0.686,14,1.364,15,0.013,16,0.814,17,0.686,18,1.187,20,1.318,28,0.214,30,0.417,54,1.757,89,3.955,94,0.138,95,0.11,120,1.276,124,0.009,125,0.009,142,1.153,145,0.458,151,1.643,178,0.637,190,1.699,193,2.452,215,3.367,223,4.232,266,2.785,274,3.543,278,2.627,279,2.366,282,3.227,283,2.97,291,3.089,292,2.366,293,2.366,294,1.972,298,1.276,302,2.271,342,2.063,392,3.709,393,2.785,400,2.785,401,2.627,552,1.32,1231,3.84,1232,5.865,1233,5.865,1234,5.865,1235,4.404,1236,7.983,1237,7.983,1238,4.404,1239,4.404,1240,4.404,1241,4.404,1242,4.404,1243,4.404,1244,4.404,1245,3.934,1246,3.84,1247,4.404,1248,4.404,1249,5.865,1250,4.404,1251,4.404,1252,4.404,1253,4.404]],["title/modules/OryModule.html",[0,0.784,79,2.567]],["body/modules/OryModule.html",[0,1.303,2,1.888,3,0.171,4,0.133,5,0.152,15,0.013,28,0.218,30,0.519,54,2.186,55,3.903,56,3.269,79,5.202,89,4.929,94,0.171,95,0.137,108,2.691,120,1.955,121,2.592,124,0.01,125,0.01,126,2.409,132,2.592,133,2.029,134,1.888,274,3.625,430,2.91,552,1.643,1245,4.985,1246,4.779,1254,4.779,1255,4.779,1256,5.48,1257,4.779,1258,5.48,1259,5.48]],["title/injectables/OryService.html",[517,0.565,1245,2.421]],["body/injectables/OryService.html",[3,0.132,4,0.103,5,0.117,7,1.063,12,0.751,14,1.335,15,0.013,16,0.797,17,0.671,18,1.162,20,1.139,28,0.192,30,0.4,54,1.684,94,0.132,95,0.106,107,1.262,124,0.009,125,0.009,142,1.105,145,0.439,146,1.443,158,1.544,178,0.933,199,2.162,266,2.669,274,3.996,279,3.996,294,1.69,295,2.967,296,1.768,298,1.223,301,1.977,369,1.309,517,0.793,518,1.309,552,1.709,553,1.621,946,3.324,1168,2.669,1203,4.489,1245,3.4,1260,3.68,1261,6.454,1262,5.083,1263,5.7,1264,5.7,1265,5.7,1266,5.7,1267,4.867,1268,4.221,1269,4.371,1270,5.7,1271,4.221,1272,4.221,1273,5.7,1274,4.221,1275,6.454,1276,4.371,1277,4.97,1278,4.97,1279,3.324,1280,3.058,1281,6.454,1282,4.97,1283,6.454,1284,4.221,1285,3.68,1286,4.221,1287,4.221,1288,4.221,1289,3.68,1290,3.68,1291,4.221,1292,4.221,1293,6.911,1294,5.7,1295,4.221,1296,4.221,1297,4.221,1298,4.221,1299,3.68,1300,3.68,1301,4.221,1302,5.7,1303,4.97,1304,5.7,1305,4.221]],["title/modules/ParserModule.html",[0,0.784,428,2.567]],["body/modules/ParserModule.html",[0,1.353,2,2.009,3,0.182,4,0.142,5,0.162,15,0.013,28,0.195,30,0.553,94,0.182,95,0.146,121,2.692,124,0.011,125,0.011,126,2.502,132,2.692,133,2.16,134,2.009,428,5.177,430,3.023,698,5.326,1306,5.087,1307,5.087,1308,5.087,1309,5.834,1310,5.834]],["title/injectables/ParserService.html",[517,0.565,698,2.567]],["body/injectables/ParserService.html",[3,0.111,4,0.087,5,0.099,7,0.944,12,0.771,14,1.219,15,0.013,16,0.728,17,0.754,18,1.061,20,1.356,28,0.099,30,0.337,94,0.111,95,0.089,101,1.666,107,1.561,124,0.008,125,0.008,145,0.613,146,1.282,158,1.739,178,1.168,278,3.02,301,2.372,316,2.861,367,3.102,368,3.987,472,1.911,517,0.704,518,1.104,552,1.066,553,1.366,566,3.142,576,3.516,653,3.83,674,4.328,698,3.201,955,4.414,1311,2.802,1312,5.894,1313,5.894,1314,5.894,1315,6.421,1316,6.421,1317,5.062,1318,5.062,1319,3.557,1320,3.557,1321,5.062,1322,3.557,1323,5.062,1324,3.557,1325,5.062,1326,4.642,1327,5.062,1328,3.557,1329,5.916,1330,5.062,1331,3.557,1332,3.557,1333,3.557,1334,3.668,1335,3.102,1336,2.802,1337,3.102,1338,5.062,1339,3.987,1340,3.102,1341,2.802,1342,3.102,1343,3.557,1344,3.557,1345,3.557,1346,2.802,1347,3.102,1348,2.802,1349,3.102,1350,3.557,1351,3.557,1352,3.557,1353,3.557,1354,3.557,1355,3.557,1356,3.557,1357,3.557,1358,3.557,1359,3.557,1360,5.894,1361,5.894,1362,3.987,1363,3.557,1364,3.557,1365,3.557,1366,3.557,1367,5.062,1368,3.557,1369,3.557,1370,3.557,1371,3.557,1372,3.102,1373,3.557,1374,3.557,1375,3.557,1376,5.894,1377,3.557,1378,3.557,1379,3.557,1380,3.102,1381,3.557,1382,5.062,1383,3.557,1384,3.557,1385,3.557,1386,3.557,1387,3.557,1388,3.557,1389,3.557,1390,3.557,1391,5.062,1392,3.557,1393,5.062,1394,3.557]],["title/classes/Personality.html",[95,0.102,148,1.398]],["body/classes/Personality.html",[3,0.151,4,0.118,5,0.135,12,0.758,15,0.013,16,0.853,17,0.785,28,0.192,32,1.226,44,1.311,94,0.216,95,0.121,124,0.01,125,0.01,142,2.152,143,1.792,145,0.503,146,1.58,148,2.512,149,4.656,151,2.043,154,3.537,155,3.062,158,2.157,159,3.903,161,3.866,162,2.397,163,2.601,164,2.07,168,3.813,169,2.888,170,2.888,172,3.062,174,3.265,175,4.208,176,3.265,178,0.902,182,3.265,183,2.268,184,3.265,562,3.379,702,3.062,914,4.656,1395,3.508,1396,4.842,1397,4.842,1398,4.842,1399,4.842,1400,6.24,1401,4.842,1402,3.813,1403,4.915,1404,4.222,1405,4.842,1406,4.842,1407,3.508]],["title/controllers/PersonalityController.html",[190,1.176,1408,2.941]],["body/controllers/PersonalityController.html",[3,0.084,4,0.066,5,0.075,7,0.77,8,3.617,12,0.745,14,1.482,15,0.013,16,0.884,17,0.664,18,1.29,20,1.432,28,0.19,30,0.256,87,3.607,94,0.084,95,0.068,101,1.265,107,1.413,120,0.782,124,0.006,125,0.006,142,1.471,145,0.281,148,2.418,151,2.007,178,0.923,187,1.265,190,1.197,193,2.513,198,2.253,199,2.569,203,2.993,206,3.601,208,2.612,210,3.36,213,2.325,215,3.226,220,3.421,222,3.396,223,4.06,254,2.355,264,1.423,265,1.322,266,1.708,267,2.127,277,1.165,278,1.611,279,1.451,280,2.569,282,2.454,283,1.821,284,2.127,286,2.355,291,2.99,292,1.451,293,1.451,294,1.313,295,1.077,296,0.838,298,0.782,302,2.288,309,2.569,310,2.569,314,2.355,315,1.647,333,3.253,335,2.127,344,2.334,352,2.355,355,2.355,392,3.552,393,3.552,394,3.601,395,1.957,397,1.957,400,3.552,401,3.351,402,3.787,404,3.787,409,3.601,421,2.355,422,1.383,423,1.322,448,1.526,566,1.322,576,1.611,651,2.219,717,2.021,767,5.395,909,4.625,914,1.821,997,1.213,1022,4.625,1341,2.127,1408,2.993,1409,2.355,1410,3.601,1411,4.13,1412,3.601,1413,4.13,1414,2.7,1415,2.7,1416,2.7,1417,2.355,1418,2.7,1419,2.7,1420,2.7,1421,2.7,1422,2.7,1423,4.13,1424,2.7,1425,2.7,1426,2.7,1427,2.7,1428,2.7,1429,2.7,1430,2.7,1431,2.7,1432,2.7,1433,2.7,1434,2.355,1435,2.7,1436,2.7,1437,2.7,1438,2.7,1439,2.7,1440,2.355,1441,2.7,1442,2.7,1443,2.355,1444,2.7,1445,2.7,1446,2.7,1447,2.7,1448,2.7,1449,2.7,1450,2.7,1451,2.7,1452,2.7,1453,2.7,1454,2.7,1455,2.7,1456,2.7,1457,2.355,1458,2.355,1459,2.7,1460,2.7,1461,4.13,1462,2.355,1463,2.355,1464,4.13,1465,4.13,1466,2.7,1467,2.7,1468,2.7,1469,2.7,1470,2.7,1471,2.7,1472,2.7,1473,2.7,1474,2.7,1475,2.7,1476,2.127,1477,2.7,1478,2.7,1479,2.7,1480,2.355,1481,2.355,1482,2.7]],["title/modules/PersonalityModule.html",[0,0.784,39,2.181]],["body/modules/PersonalityModule.html",[0,1.156,2,1.566,3,0.142,4,0.111,5,0.126,15,0.013,16,0.561,28,0.226,30,0.431,31,2.443,32,1.151,37,4.805,38,3.964,39,4.495,43,4.082,44,1.622,45,1.885,46,3.066,55,3.718,56,2.712,72,4.532,73,2.569,74,3.581,75,4.294,76,3.294,94,0.142,95,0.114,108,2.389,120,1.735,121,2.301,124,0.009,125,0.009,126,2.138,132,2.301,133,1.683,134,1.566,148,1.566,162,1.746,178,0.657,264,2.307,280,4.171,430,2.583,436,2.712,509,4.294,514,3.294,1407,4.34,1408,4.854,1443,3.964,1483,3.964,1484,3.964,1485,3.964,1486,3.964,1487,3.581,1488,3.964,1489,4.546,1490,4.34,1491,3.964]],["title/injectables/PersonalityService.html",[280,2.079,517,0.565]],["body/injectables/PersonalityService.html",[0,0.977,3,0.051,4,0.04,5,0.045,7,0.511,12,0.716,14,1.381,15,0.013,16,0.824,17,0.56,18,1.202,20,1.409,26,1.096,28,0.182,30,0.154,32,0.411,44,1.371,45,0.674,63,1.096,94,0.051,95,0.041,101,0.761,107,1.652,124,0.007,125,0.004,134,0.56,142,1.681,145,0.169,146,0.694,147,1.28,148,2.676,149,1.096,158,1.459,164,0.822,169,0.969,170,0.969,178,1.065,183,2.187,193,2.301,198,2.097,199,2.593,200,1.849,203,2.578,208,1.734,213,2.175,215,1.183,220,3.2,222,2.097,264,1.439,265,2.478,268,2.045,269,0.969,277,0.701,280,1.405,288,1.473,294,1.681,295,2.019,296,2.034,298,0.795,301,2.652,302,2.519,307,3.644,309,0.832,310,0.832,315,2.351,316,0.918,317,2.524,318,2.399,319,2.42,320,1.096,322,1.849,327,2.578,329,1.849,330,1.028,331,3.408,332,1.417,333,1.28,342,0.761,346,1.028,366,2.16,369,1.571,372,2.818,373,2.443,386,1.987,389,2.391,397,3.028,422,3.289,423,0.795,438,1.741,509,2.362,514,3.028,517,0.382,518,0.504,523,1.987,531,2.245,549,1.178,550,2.16,552,1.615,553,2.07,558,3.202,559,3.987,560,3.987,561,2.16,562,1.741,564,3.028,565,3.291,566,0.795,569,2.16,570,3.291,571,1.987,572,2.818,573,2.16,574,2.16,576,2.785,577,2.16,593,1.342,595,0.832,597,1.28,598,1.096,599,1.28,600,2.16,607,1.096,609,1.417,619,1.096,620,1.096,626,3.102,651,1.473,653,2.122,654,2.16,695,2.578,703,2.16,709,1.987,710,2.16,712,1.987,714,1.178,717,1.741,720,1.417,724,3.102,725,1.417,726,1.28,727,2.391,728,2.391,729,1.417,730,1.28,731,1.417,732,1.28,733,1.417,748,2.391,750,1.417,767,4.8,768,1.417,779,2.391,781,3.028,782,2.391,783,2.391,785,1.417,786,2.16,788,1.417,789,1.417,794,1.417,796,3.028,797,2.578,798,2.802,799,2.802,800,2.578,801,2.802,802,2.578,815,3.102,819,1.417,829,1.417,833,1.417,834,1.178,837,1.417,914,3.633,965,2.578,997,3.131,1021,3.987,1025,3.644,1128,4.751,1130,1.417,1340,1.417,1402,1.28,1410,2.391,1417,2.391,1440,2.391,1462,2.391,1463,1.417,1488,1.417,1490,2.578,1492,1.417,1493,2.742,1494,2.742,1495,2.742,1496,2.742,1497,2.742,1498,2.643,1499,1.625,1500,2.742,1501,1.625,1502,1.625,1503,2.742,1504,1.625,1505,4.179,1506,1.625,1507,2.742,1508,1.625,1509,1.625,1510,2.742,1511,1.625,1512,2.742,1513,1.625,1514,2.742,1515,1.625,1516,1.625,1517,2.742,1518,1.625,1519,4.668,1520,1.625,1521,2.742,1522,2.742,1523,1.625,1524,2.742,1525,1.625,1526,1.625,1527,1.625,1528,1.625,1529,1.625,1530,1.625,1531,1.625,1532,1.625,1533,2.742,1534,1.625,1535,1.625,1536,1.625,1537,1.625,1538,1.625,1539,1.625,1540,1.625,1541,1.625,1542,1.625,1543,1.625,1544,1.625,1545,4.179,1546,1.625,1547,1.417,1548,3.558,1549,1.625,1550,3.558,1551,3.558,1552,1.625,1553,1.417,1554,2.742,1555,1.625,1556,3.558,1557,2.391,1558,2.742,1559,2.742,1560,1.625,1561,1.625,1562,1.417,1563,1.625,1564,1.625,1565,1.625,1566,2.742,1567,1.625,1568,1.096,1569,1.625,1570,1.625,1571,1.178,1572,1.417,1573,1.625,1574,1.625,1575,1.625,1576,1.625,1577,1.625,1578,1.625,1579,1.625,1580,1.625,1581,1.625,1582,1.625,1583,1.625,1584,1.625,1585,1.625,1586,2.742,1587,4.179,1588,1.625,1589,3.558,1590,1.625,1591,1.625,1592,1.625,1593,1.625,1594,1.625,1595,1.625,1596,1.625,1597,2.742,1598,1.625,1599,1.625,1600,1.625,1601,1.625,1602,1.625,1603,1.625,1604,4.179,1605,1.417]],["title/controllers/RootController.html",[51,2.941,190,1.176]],["body/controllers/RootController.html",[3,0.166,4,0.13,5,0.148,7,1.235,12,0.689,14,1.1,15,0.013,16,0.657,18,0.958,20,1.324,21,2.858,28,0.184,30,0.504,51,4.8,94,0.166,95,0.133,107,1.177,120,1.541,124,0.01,125,0.01,145,0.553,151,1.855,158,1.441,178,0.769,190,1.541,215,3.349,223,3.695,291,3.379,292,2.858,293,2.858,369,1.65,481,3.364,978,4.19,1207,4.638,1606,4.638,1607,4.638,1608,7.549,1609,6.624,1610,5.319,1611,5.319,1612,5.776,1613,5.319,1614,5.319,1615,5.319,1616,5.319,1617,5.319,1618,5.319,1619,4.638,1620,4.638,1621,5.319,1622,5.319,1623,5.319,1624,5.319,1625,5.319,1626,5.319]],["title/guards/SessionGuard.html",[81,2.941,1627,3.196]],["body/guards/SessionGuard.html",[3,0.134,4,0.104,5,0.119,7,1.072,12,0.676,14,1.344,15,0.013,16,0.802,17,0.754,18,1.17,20,1.149,28,0.193,30,0.405,54,1.706,63,2.884,81,4.168,94,0.134,95,0.107,96,2.298,101,2.004,107,1.653,124,0.009,125,0.009,141,3.1,142,1.702,145,0.445,178,1.103,183,2.004,193,2.016,210,3.354,222,2.584,274,4.012,291,3.574,294,1.506,295,1.706,296,1.784,298,1.667,301,2.004,302,1.473,309,2.191,310,2.191,342,2.695,373,1.773,451,2.298,517,0.8,651,2.298,717,2.093,741,2.298,946,3.369,1155,3.1,1179,3.1,1262,4.53,1269,3.637,1277,5.015,1278,5.015,1279,3.369,1282,3.73,1285,3.73,1628,4.278,1629,3.73,1630,6.949,1631,7.63,1632,4.278,1633,5.752,1634,6.949,1635,4.278,1636,5.752,1637,4.278,1638,4.278,1639,4.278,1640,4.278,1641,4.278,1642,4.278,1643,4.278,1644,4.278,1645,4.278,1646,4.278,1647,4.278,1648,4.278,1649,4.278,1650,4.278,1651,5.752,1652,5.752,1653,4.278,1654,4.278,1655,4.278]],["title/controllers/SitemapController.html",[190,1.176,1656,2.941]],["body/controllers/SitemapController.html",[3,0.159,4,0.124,5,0.141,7,1.201,12,0.669,14,1.332,15,0.013,16,0.795,17,0.669,18,1.159,20,1.287,28,0.196,30,0.482,94,0.159,95,0.127,107,1.125,120,1.473,124,0.01,125,0.01,145,0.529,151,1.803,178,0.735,190,1.866,193,2.429,213,1.953,215,3.305,222,2.892,223,3.619,291,3.016,292,2.732,293,2.732,302,1.751,481,3.216,1280,3.684,1619,5.614,1620,5.614,1656,4.665,1657,4.433,1658,5.614,1659,5.614,1660,5.085,1661,5.085,1662,6.439,1663,5.085,1664,5.085,1665,5.085,1666,5.071,1667,5.085,1668,5.085,1669,4.469,1670,4.433,1671,5.085,1672,5.085,1673,5.085,1674,5.085,1675,5.085,1676,5.085,1677,5.085,1678,5.085,1679,5.085]],["title/modules/SitemapModule.html",[0,0.784,70,2.737]],["body/modules/SitemapModule.html",[0,1.261,2,1.791,3,0.163,4,0.127,5,0.145,15,0.013,28,0.219,30,0.493,39,4.23,40,3.506,41,4.697,42,4.095,43,4.23,44,1.408,45,2.155,46,3.506,70,5.62,94,0.163,95,0.13,108,2.605,120,1.892,121,2.508,124,0.01,125,0.01,126,2.331,132,2.508,133,1.925,134,1.791,430,2.816,1656,5.173,1669,5.249,1670,4.534,1680,4.534,1681,5.199,1682,4.534,1683,4.534,1684,5.199,1685,5.199]],["title/injectables/SitemapService.html",[517,0.565,1669,2.567]],["body/injectables/SitemapService.html",[3,0.116,4,0.091,5,0.103,7,0.974,12,0.681,14,1.249,15,0.013,16,0.746,17,0.387,18,1.087,20,1.044,28,0.192,30,0.352,44,1.415,45,1.542,94,0.116,95,0.093,101,1.742,107,1.337,124,0.01,125,0.008,145,0.387,146,1.323,148,2.08,178,1.129,193,2.219,213,2.007,264,2.256,268,3.596,269,2.219,270,4.153,279,4.196,280,3.664,281,2.695,288,2.807,294,1.873,295,2.409,296,1.873,298,1.514,302,2.377,316,3.413,320,3.523,331,3.304,344,2.102,373,2.166,397,2.695,399,2.929,403,2.695,448,2.952,517,0.727,518,1.154,552,1.115,553,1.429,651,1.998,717,1.82,741,1.998,796,2.695,797,2.695,798,2.929,799,2.929,800,2.695,801,2.929,802,2.695,836,2.929,854,3.243,1128,3.785,1134,3.243,1162,2.929,1276,2.352,1476,2.929,1658,4.555,1659,4.555,1666,4.756,1669,3.304,1686,2.929,1687,3.719,1688,3.719,1689,5.224,1690,3.719,1691,6.039,1692,5.224,1693,3.719,1694,5.224,1695,3.719,1696,6.039,1697,3.719,1698,3.243,1699,2.929,1700,5.224,1701,3.243,1702,3.243,1703,2.929,1704,3.243,1705,3.243,1706,3.243,1707,3.243,1708,3.719,1709,3.719,1710,3.243,1711,3.719,1712,2.929,1713,6.039,1714,3.719,1715,3.719,1716,3.719,1717,3.719,1718,3.719,1719,3.719,1720,3.719,1721,3.719,1722,3.719,1723,3.719,1724,3.243,1725,3.719,1726,3.719,1727,3.719,1728,3.719,1729,3.243,1730,3.719]],["title/classes/Source.html",[4,0.099,95,0.102]],["body/classes/Source.html",[3,0.134,4,0.17,5,0.119,12,0.778,15,0.013,17,0.818,28,0.181,32,1.089,44,1.563,94,0.218,95,0.108,107,0.952,124,0.009,125,0.009,142,2.033,143,1.592,145,0.447,146,1.461,151,2.095,152,3.65,153,3.5,154,3.83,155,4.729,158,2.025,159,3.262,161,3.977,162,2.217,163,2.31,164,1.73,172,2.719,177,4.695,178,0.622,187,3.052,369,2.409,423,3.188,438,2.824,442,4.695,447,3.115,448,3.262,449,5.131,458,2.899,461,3.386,469,2.202,470,4.546,472,2.31,473,3.115,562,3.188,601,4.721,666,3.443,739,4.393,1037,5.032,1038,5.032,1731,2.899,1732,4.3,1733,4.3,1734,4.3,1735,4.3,1736,4.3,1737,5.771,1738,5.771,1739,4.3,1740,4.3,1741,3.386,1742,4.3,1743,4.3,1744,4.3,1745,4.3,1746,3.115,1747,3.749]],["title/controllers/SourceController.html",[190,1.176,1748,2.941]],["body/controllers/SourceController.html",[3,0.155,4,0.121,5,0.138,7,1.183,8,3.42,12,0.516,14,1.027,15,0.013,16,0.613,17,0.516,18,0.894,20,0.992,28,0.176,30,0.471,94,0.155,95,0.124,107,1.404,120,1.439,124,0.01,125,0.01,145,0.516,151,1.391,178,1.1,187,3.274,190,1.838,193,2.168,213,1.907,220,3.584,243,4.712,264,2.185,265,2.43,294,1.3,295,1.98,296,1.54,315,3.035,317,3.449,318,3.348,319,2.849,327,5.063,329,3.348,330,3.14,419,4.276,532,3.949,717,2.43,1280,3.598,1605,4.329,1748,4.595,1749,4.329,1750,6.342,1751,4.965,1752,7.363,1753,4.965,1754,4.965,1755,4.329,1756,4.965,1757,4.965,1758,4.965,1759,4.965,1760,4.965,1761,4.329,1762,4.965,1763,7.363,1764,4.965]],["title/modules/SourceModule.html",[0,0.784,47,2.294]],["body/modules/SourceModule.html",[0,1.294,2,1.868,3,0.17,4,0.163,5,0.151,15,0.013,16,0.669,28,0.217,30,0.514,31,2.913,32,1.373,47,4.557,94,0.17,95,0.136,108,2.163,120,1.942,121,2.575,124,0.01,125,0.01,126,2.393,132,2.575,133,2.007,134,1.868,162,2.083,178,0.784,430,2.891,436,3.234,532,4.717,1746,4.857,1748,5.272,1755,4.728,1765,4.728,1766,4.728,1767,4.728,1768,4.27,1769,4.728,1770,5.422,1771,4.857,1772,4.728]],["title/injectables/SourceService.html",[517,0.565,532,2.294]],["body/injectables/SourceService.html",[3,0.152,4,0.178,5,0.135,7,1.165,12,0.719,14,1.429,15,0.013,16,0.853,17,0.65,18,1.244,20,1.249,28,0.203,30,0.46,32,1.228,94,0.152,95,0.121,107,1.383,124,0.01,125,0.01,145,0.504,158,1.692,164,1.454,178,0.701,183,2.273,187,3.238,193,2.399,198,2.807,213,2.4,294,1.27,296,1.505,298,1.81,301,2.273,302,1.671,315,2.757,317,3.42,319,3.279,320,4.213,517,0.869,518,1.505,532,3.531,552,1.454,553,1.863,593,3.572,594,3.068,595,2.485,607,3.271,619,3.271,620,3.271,1116,4.23,1741,3.821,1761,5.448,1769,4.23,1771,4.527,1773,4.23,1774,6.248,1775,4.851,1776,4.851,1777,6.248,1778,4.851,1779,4.851,1780,4.851,1781,4.851,1782,4.851,1783,4.851,1784,4.851,1785,4.851,1786,4.851,1787,4.851]],["title/controllers/StatsController.html",[190,1.176,1788,2.941]],["body/controllers/StatsController.html",[3,0.185,4,0.144,5,0.164,7,1.318,12,0.615,15,0.013,20,1.182,28,0.196,30,0.561,94,0.185,95,0.148,107,1.309,120,1.714,124,0.011,125,0.011,145,0.615,151,1.657,190,1.714,294,1.549,298,1.714,481,3.741,1124,4.508,1126,5.158,1133,5.158,1788,5.121,1789,5.158,1790,5.915,1791,6.827,1792,5.915,1793,5.915,1794,5.158,1795,5.915]],["title/modules/StatsModule.html",[0,0.784,49,2.567]],["body/modules/StatsModule.html",[0,1.264,2,1.798,3,0.163,4,0.127,5,0.145,15,0.013,28,0.219,30,0.495,39,4.234,40,3.52,41,4.701,42,4.112,43,4.234,44,1.414,45,2.164,46,3.52,49,5.274,94,0.163,95,0.131,108,2.611,120,1.897,121,2.515,124,0.01,125,0.01,126,2.337,132,2.515,133,1.933,134,1.798,430,2.823,1124,4.954,1788,5.183,1794,4.552,1796,4.552,1797,5.221,1798,4.552,1799,4.552,1800,5.221,1801,5.221]],["title/injectables/StatsService.html",[517,0.565,1124,2.421]],["body/injectables/StatsService.html",[3,0.168,4,0.131,5,0.15,7,1.245,12,0.694,14,1.114,15,0.013,16,0.665,17,0.56,18,0.97,20,1.077,28,0.211,30,0.511,44,1.459,45,2.233,94,0.168,95,0.135,107,1.478,124,0.01,125,0.01,145,0.56,268,3.887,269,3.214,270,4.551,280,4.124,281,3.904,288,2.894,294,1.9,298,1.934,322,3.633,331,3.407,517,0.929,518,1.671,1124,3.983,1128,3.904,1698,4.697,1791,6.612,1802,4.697,1803,5.387,1804,5.387,1805,5.387,1806,5.387,1807,5.387,1808,5.387,1809,5.387,1810,5.387,1811,5.387,1812,5.387]],["title/classes/UpdateClaimDTO.html",[95,0.102,261,2.941]],["body/classes/UpdateClaimDTO.html",[3,0.195,4,0.152,5,0.174,15,0.013,28,0.203,94,0.195,95,0.156,124,0.011,125,0.011,143,2.314,198,2.808,227,4.215,261,5.29,285,5.451,594,3.953,875,4.923,1149,4.215,1813,5.451,1814,6.251,1815,5.451,1816,6.251]],["title/classes/User.html",[95,0.102,369,1.259]],["body/classes/User.html",[3,0.158,4,0.123,5,0.14,12,0.77,15,0.013,16,0.869,17,0.77,28,0.178,32,1.277,94,0.22,95,0.126,102,3.009,124,0.01,125,0.01,142,2.165,143,1.867,145,0.524,146,1.622,151,2.074,154,3.793,158,2.116,159,4.186,161,3.915,162,2.461,163,2.71,164,1.512,178,0.729,369,2.184,373,2.656,451,3.442,552,1.92,702,4.684,1085,4.32,1149,3.401,1156,3.009,1168,4.452,1817,3.655,1818,6.138,1819,6.138,1820,5.044,1821,5.044,1822,5.044,1823,5.044,1824,4.398,1825,3.401,1826,3.973]],["title/interfaces/UserDocument.html",[102,2.421,1156,2.421]],["body/interfaces/UserDocument.html",[3,0.172,4,0.134,5,0.153,7,1.26,12,0.571,15,0.013,16,0.678,20,1.098,28,0.188,32,1.391,94,0.229,95,0.137,102,3.276,124,0.01,125,0.01,142,2.09,145,0.571,154,3.91,158,1.982,161,4.015,162,2.595,163,2.951,164,1.646,178,0.794,369,2.27,373,2.277,451,2.951,552,1.646,702,4.273,1085,4.556,1149,4.556,1156,4.03,1168,3.473,1817,3.98,1818,4.789,1819,4.789,1824,6.657,1825,3.703,1826,4.326,1827,4.789,1828,5.492]],["title/controllers/UsersController.html",[190,1.176,1829,2.941]],["body/controllers/UsersController.html",[3,0.106,4,0.082,5,0.094,7,0.911,8,3.394,12,0.692,14,1.377,15,0.013,16,0.822,17,0.508,18,1.198,20,1.33,28,0.207,30,0.321,54,1.351,94,0.106,95,0.085,101,2.289,107,1.269,120,0.981,124,0.008,125,0.008,133,1.253,142,1.743,145,0.352,151,1.865,164,1.465,178,0.908,190,1.416,193,2.461,210,3.212,213,1.301,215,3.372,222,3.212,223,4.147,264,1.683,266,2.141,267,2.667,274,3.081,277,1.46,278,2.02,279,1.819,282,2.806,283,2.283,291,2.686,292,1.819,293,1.819,294,1.644,295,1.949,296,1.05,298,0.981,302,1.683,315,1.351,346,3.09,369,1.516,370,2.952,392,3.09,393,3.09,400,3.09,401,2.915,402,3.295,404,3.295,448,3.24,549,2.454,571,2.454,651,1.819,691,2.952,717,1.657,741,1.819,742,4.261,777,2.952,1102,2.667,1145,2.454,1262,2.667,1267,3.866,1269,3.09,1412,4.261,1434,2.952,1480,2.952,1547,2.952,1553,2.952,1705,5.804,1706,4.999,1729,4.261,1829,3.541,1830,2.952,1831,4.261,1832,4.261,1833,3.386,1834,3.386,1835,3.386,1836,3.386,1837,3.386,1838,3.386,1839,3.386,1840,3.386,1841,3.386,1842,3.386,1843,3.386,1844,3.386,1845,3.386,1846,3.386,1847,3.386,1848,3.626,1849,2.952,1850,3.386,1851,3.386,1852,3.386,1853,3.386,1854,3.386,1855,3.386,1856,3.386,1857,3.386,1858,3.386,1859,3.386,1860,3.386,1861,3.386,1862,3.386,1863,3.386,1864,3.386,1865,4.261,1866,4.999,1867,4.887,1868,3.386,1869,3.386,1870,3.386,1871,3.386,1872,3.386,1873,3.386,1874,3.386,1875,3.386,1876,3.386,1877,3.386,1878,3.386,1879,4.887,1880,3.386,1881,4.887,1882,3.386,1883,3.386,1884,3.386]],["title/modules/UsersModule.html",[0,0.784,33,2.567]],["body/modules/UsersModule.html",[0,1.218,2,1.697,3,0.154,4,0.12,5,0.137,15,0.013,16,0.608,28,0.222,30,0.467,31,2.647,32,1.247,33,5.182,53,3.764,54,1.965,55,3.8,56,2.939,79,4.91,80,4.296,94,0.154,95,0.123,107,1.09,108,2.517,120,1.828,121,2.424,124,0.01,125,0.01,126,2.253,132,2.424,133,1.824,134,1.697,162,2.424,164,1.477,178,0.912,369,1.528,430,2.721,1154,4.403,1163,3.322,1167,3.88,1168,3.115,1825,4.255,1829,5.045,1848,5.211,1849,4.296,1885,4.296,1886,4.296,1887,4.296,1888,4.926,1889,3.88,1890,4.296,1891,4.926,1892,3.88,1893,4.296,1894,3.88,1895,4.296]],["title/injectables/UsersService.html",[517,0.565,1848,2.567]],["body/injectables/UsersService.html",[3,0.127,4,0.099,5,0.113,7,1.037,12,0.765,14,1.408,15,0.013,16,0.841,17,0.423,18,1.226,20,1.361,23,4.85,28,0.198,30,0.386,32,1.031,94,0.127,95,0.102,107,1.507,124,0.009,125,0.009,142,1.066,145,0.423,146,1.408,164,1.221,178,0.984,193,2.483,200,3.751,213,2.434,264,2.345,294,1.867,295,2.527,296,1.965,298,1.612,301,1.907,302,2.345,309,2.849,310,2.849,369,2.283,373,1.688,517,0.774,518,1.263,552,1.221,553,1.564,590,4.85,593,3.332,595,2.085,651,2.188,671,3.207,717,1.993,741,2.188,781,4.03,1152,3.207,1154,3.518,1156,2.429,1157,3.207,1245,4.493,1267,3.751,1269,3.518,1299,5.524,1557,3.55,1831,4.85,1832,5.937,1848,3.518,1865,5.524,1866,5.524,1890,3.55,1896,3.55,1897,5.562,1898,5.562,1899,4.072,1900,4.072,1901,5.562,1902,4.072,1903,5.562,1904,4.072,1905,5.562,1906,4.072,1907,4.072,1908,5.562,1909,4.072,1910,4.072,1911,4.072,1912,5.562,1913,4.072,1914,4.072,1915,4.072,1916,4.072,1917,4.072,1918,4.072,1919,4.072,1920,4.072,1921,5.562,1922,5.562,1923,4.072]],["title/injectables/UtilService.html",[509,2.294,517,0.565]],["body/injectables/UtilService.html",[3,0.142,4,0.111,5,0.126,7,1.116,12,0.622,14,1.384,15,0.013,16,0.739,17,0.622,18,1.077,20,1.196,28,0.126,30,0.43,94,0.142,95,0.114,107,1.575,124,0.009,125,0.009,145,0.472,178,1.069,183,2.126,265,2.928,288,3.596,296,1.408,316,2.565,373,2.48,403,3.288,509,3.381,517,0.832,518,1.408,523,3.288,542,5.217,552,1.36,553,1.743,870,3.957,1362,4.712,1571,5.155,1924,3.957,1925,5.983,1926,5.983,1927,5.983,1928,7.115,1929,4.538,1930,7.115,1931,5.983,1932,7.743,1933,4.538,1934,5.983,1935,5.983,1936,5.983,1937,5.983,1938,7.115,1939,7.115,1940,5.983,1941,4.538,1942,5.983,1943,6.693,1944,4.538,1945,5.983,1946,4.538,1947,4.538,1948,4.538,1949,3.957,1950,4.538,1951,4.538,1952,4.538,1953,4.538,1954,4.538,1955,4.538,1956,5.983,1957,4.712,1958,4.538,1959,4.538]],["title/controllers/ViewController.html",[190,1.176,1960,2.941]],["body/controllers/ViewController.html",[3,0.096,4,0.075,5,0.085,7,0.848,8,3.893,12,0.721,14,1.434,15,0.013,16,0.856,17,0.721,18,1.248,20,1.386,28,0.178,30,0.291,94,0.096,95,0.077,120,0.89,124,0.007,125,0.007,142,1.816,145,0.319,151,1.877,178,1.003,190,1.318,193,2.501,210,3.635,215,3.341,222,3.635,223,4.268,277,1.324,278,1.831,279,1.65,282,2.652,291,3.249,292,1.65,293,1.65,302,2.389,309,3.552,310,3.552,315,2.766,392,4.386,393,4.386,400,4.386,401,4.137,404,4.314,481,1.942,1089,3.583,1120,3.966,1121,2.677,1127,2.677,1162,3.583,1203,3.583,1218,3.966,1219,4.725,1280,2.225,1701,2.677,1702,4.725,1703,2.418,1704,4.725,1960,3.296,1961,2.677,1962,3.966,1963,4.549,1964,4.549,1965,4.549,1966,4.549,1967,4.549,1968,3.07,1969,3.07,1970,3.07,1971,3.07,1972,3.07,1973,3.07,1974,4.549,1975,3.07,1976,3.07,1977,3.07,1978,3.07,1979,4.549,1980,4.549,1981,4.549,1982,4.549,1983,4.549,1984,3.07,1985,3.07,1986,3.07,1987,3.07,1988,3.07,1989,3.07,1990,3.07,1991,3.07,1992,2.677,1993,6.935,1994,4.549,1995,4.549,1996,3.07,1997,3.07,1998,3.07,1999,3.07,2000,3.07,2001,3.07,2002,3.07,2003,3.07,2004,3.07,2005,3.07,2006,3.07]],["title/modules/ViewModule.html",[0,0.784,55,1.986]],["body/modules/ViewModule.html",[0,1.333,2,1.96,3,0.178,4,0.139,5,0.158,15,0.013,28,0.207,30,0.539,55,3.986,94,0.178,95,0.142,108,2.269,120,2,121,2.652,124,0.011,125,0.011,126,2.464,132,2.652,133,2.106,134,1.96,282,4.109,430,2.977,1960,5.385,1992,4.961,2007,4.961,2008,4.961,2009,4.961,2010,5.69,2011,5.69]],["title/injectables/ViewService.html",[282,1.986,517,0.565]],["body/injectables/ViewService.html",[3,0.157,4,0.122,5,0.14,7,1.191,12,0.794,15,0.013,17,0.522,20,1.277,28,0.195,30,0.476,94,0.157,95,0.126,96,2.699,107,1.112,113,4.381,124,0.01,125,0.01,145,0.522,146,1.618,193,2.18,264,2.547,282,3.127,294,2.044,295,2.803,296,1.982,298,2.036,302,2.201,342,2.354,344,3.611,401,4.411,517,0.889,518,1.559,552,1.506,553,1.93,651,2.699,717,2.459,1269,4.041,2012,4.381,2013,6.127,2014,7.804,2015,6.39,2016,5.024,2017,7.804,2018,5.024,2019,6.39,2020,5.024,2021,6.39,2022,5.024,2023,6.39,2024,5.572,2025,5.024,2026,5.024,2027,5.024,2028,5.024,2029,5.024]],["title/classes/WikidataCache.html",[95,0.102,2030,2.737]],["body/classes/WikidataCache.html",[3,0.161,4,0.125,5,0.143,12,0.776,15,0.013,17,0.817,28,0.18,32,1.303,94,0.222,95,0.129,124,0.01,125,0.01,142,2.056,143,1.905,145,0.535,146,1.643,151,2.09,152,3.255,153,2.765,154,3.821,158,2.02,159,3.667,161,3.939,162,2.492,163,2.765,164,1.543,178,0.744,383,3.87,552,1.543,566,3.651,997,3.192,1085,4.375,1326,5.596,1568,4.791,2030,4.791,2031,3.729,2032,5.596,2033,5.147,2034,5.147,2035,5.147,2036,5.147,2037,5.147,2038,4.053,2039,5.147,2040,3.729,2041,4.487]],["title/modules/WikidataModule.html",[0,0.784,37,2.567]],["body/modules/WikidataModule.html",[0,1.257,2,1.784,3,0.162,4,0.126,5,0.144,15,0.013,16,0.639,28,0.208,30,0.491,31,2.782,32,1.311,37,5.049,94,0.162,95,0.13,107,1.146,108,2.065,121,2.502,124,0.01,125,0.01,126,2.325,132,2.502,133,1.917,134,1.784,142,1.356,178,0.942,430,2.809,472,3.828,702,3.275,997,2.326,1498,5.246,1568,3.491,1892,4.078,1894,4.078,2030,3.491,2032,4.078,2040,5.418,2042,4.515,2043,4.515,2044,4.515,2045,4.078,2046,5.178,2047,4.515,2048,5.13,2049,4.515,2050,5.679,2051,4.515,2052,4.515]],["title/injectables/WikidataService.html",[517,0.565,1498,2.567]],["body/injectables/WikidataService.html",[3,0.09,4,0.07,5,0.08,7,0.808,12,0.726,14,1.444,15,0.013,16,0.913,17,0.603,18,1.257,20,1.356,28,0.161,30,0.272,32,0.728,94,0.09,95,0.072,107,1.659,124,0.007,125,0.007,145,0.299,148,1.492,153,3.343,158,1.685,161,1.473,164,0.862,178,1.139,193,2.325,210,1.291,213,2.002,220,2.945,243,4.576,279,1.545,294,0.753,296,0.892,298,1.255,301,2.717,302,2.143,373,1.192,517,0.603,518,0.892,552,1.298,553,1.664,562,2.838,593,2.838,595,1.473,912,3.777,913,2.507,914,4.195,915,2.507,997,3.494,1021,4.9,1221,4.544,1269,2.739,1276,2.739,1326,4.104,1380,2.507,1458,2.507,1476,3.411,1498,2.739,1568,1.939,1571,3.776,1699,2.264,1712,3.411,1724,2.507,1957,2.264,2030,4.195,2038,2.264,2047,2.507,2053,2.264,2054,4.331,2055,4.331,2056,4.331,2057,4.331,2058,4.331,2059,4.331,2060,4.331,2061,2.875,2062,2.875,2063,4.331,2064,2.875,2065,4.331,2066,2.875,2067,4.331,2068,2.875,2069,4.331,2070,2.875,2071,2.875,2072,4.331,2073,2.875,2074,4.331,2075,2.875,2076,4.331,2077,2.875,2078,2.264,2079,2.507,2080,2.875,2081,2.875,2082,2.875,2083,4.331,2084,2.875,2085,2.875,2086,2.875,2087,2.875,2088,2.875,2089,2.875,2090,2.875,2091,5.211,2092,2.875,2093,2.875,2094,2.875,2095,4.544,2096,4.331,2097,3.777,2098,4.331,2099,2.875,2100,2.875,2101,2.875,2102,4.331,2103,2.875,2104,2.875,2105,2.875,2106,2.875,2107,2.875,2108,2.875,2109,2.875,2110,2.875,2111,2.875,2112,2.875,2113,4.331,2114,2.875,2115,2.875,2116,2.875,2117,2.875,2118,2.875,2119,2.875,2120,2.875,2121,2.875,2122,2.875,2123,2.875,2124,4.331,2125,2.875,2126,4.331,2127,2.875,2128,2.875,2129,2.875,2130,2.875,2131,2.875,2132,4.331,2133,2.875,2134,4.331,2135,2.875,2136,2.875,2137,2.875,2138,2.875,2139,2.875,2140,2.875,2141,2.875,2142,2.264,2143,2.875,2144,2.875,2145,2.875,2146,2.875,2147,4.331,2148,2.875,2149,2.875,2150,2.875,2151,2.875,2152,2.875,2153,2.875,2154,2.875,2155,2.875,2156,2.875,2157,2.875,2158,2.875,2159,2.875]],["title/coverage.html",[2160,4.371]],["body/coverage.html",[4,0.063,5,0.072,15,0.013,17,0.269,44,1.081,45,2.023,51,1.873,64,1.873,73,2.257,77,1.873,81,1.873,83,1.873,85,1.873,87,1.461,89,1.743,91,1.873,95,0.192,102,1.542,124,0.006,125,0.006,130,1.743,131,1.743,144,3.536,148,0.89,150,1.542,166,3.29,179,2.036,189,1.873,190,2.12,191,1.873,192,2.254,227,1.743,240,1.873,245,1.873,261,1.873,264,0.89,268,1.265,270,1.461,280,1.324,282,1.265,288,1.389,291,1.211,296,0.802,316,4.821,369,0.802,422,1.324,429,2.036,435,1.873,438,1.265,439,3.427,440,3.29,441,3.29,474,2.036,478,1.873,479,1.873,480,2.254,485,1.873,509,1.461,510,2.036,515,1.873,517,1.101,519,2.254,531,1.389,532,1.461,652,3.536,675,2.036,678,1.873,683,1.635,684,2.036,687,1.873,694,2.254,698,1.635,744,2.036,874,2.254,875,3.145,893,2.254,894,2.254,909,1.873,910,2.254,911,2.254,929,2.254,930,2.254,939,1.635,942,4.673,959,1.873,961,1.873,963,2.036,965,1.873,995,3.145,996,2.254,1011,2.254,1017,2.254,1022,1.873,1023,2.254,1024,2.254,1032,2.693,1048,1.873,1050,1.873,1051,2.254,1071,2.036,1074,1.873,1077,2.254,1118,1.873,1119,2.254,1124,1.542,1139,2.254,1140,2.254,1145,1.873,1146,2.254,1147,2.254,1151,2.254,1154,1.635,1156,1.542,1160,2.254,1170,2.254,1197,2.254,1213,2.254,1214,2.254,1231,2.254,1245,1.542,1260,2.254,1276,2.525,1311,4.673,1334,1.873,1336,2.036,1346,2.036,1348,2.036,1395,3.536,1403,2.036,1407,1.873,1408,1.873,1409,2.254,1487,2.036,1490,1.873,1492,2.254,1498,1.635,1606,2.254,1627,2.036,1629,2.254,1656,1.873,1657,2.254,1669,1.635,1686,3.145,1731,2.693,1746,1.873,1748,1.873,1749,2.254,1768,2.036,1771,1.873,1773,2.254,1788,1.873,1789,2.254,1802,2.254,1813,2.254,1817,3.536,1825,1.743,1829,1.873,1830,2.254,1848,1.635,1889,2.036,1896,2.254,1924,2.254,1960,1.873,1961,2.254,2012,2.254,2030,1.743,2031,2.894,2040,1.873,2045,2.036,2048,2.036,2053,3.843,2078,2.036,2160,2.036,2161,2.585,2162,2.585,2163,2.585,2164,8.291,2165,7.08,2166,5.489,2167,5.933,2168,8.268,2169,2.585,2170,2.585,2171,5.489,2172,2.254,2173,2.585,2174,4.88,2175,2.585,2176,2.585,2177,2.585,2178,6.272,2179,2.254,2180,2.254,2181,2.585,2182,2.585,2183,2.585,2184,2.585,2185,5.489,2186,4.255,2187,2.254,2188,3.482,2189,2.254,2190,5.489,2191,2.585,2192,2.254,2193,2.585,2194,4.255,2195,2.254,2196,2.254,2197,2.254,2198,2.254,2199,2.585,2200,2.585,2201,2.585,2202,2.585,2203,2.254,2204,2.585,2205,2.585,2206,2.585]],["title/dependencies.html",[126,1.744,2207,2.951]],["body/dependencies.html",[15,0.013,28,0.111,30,0.379,32,1.011,54,1.593,63,2.693,69,3.483,94,0.125,95,0.137,104,3.146,105,3.146,124,0.009,125,0.009,126,1.426,137,2.894,141,2.894,164,1.88,169,2.383,170,3.275,276,2.526,277,2.705,342,3.164,345,2.693,469,2.046,594,2.526,638,5.47,710,3.146,739,2.693,959,2.894,961,2.894,967,4.787,997,1.794,1131,3.146,1143,4.941,1155,4.545,1163,3.702,1276,2.526,1279,3.146,1329,3.483,1334,2.894,1339,3.146,1666,3.146,1815,3.483,2208,5.49,2209,5.49,2210,3.995,2211,3.483,2212,3.995,2213,3.995,2214,3.995,2215,3.995,2216,3.995,2217,3.995,2218,3.995,2219,3.995,2220,4.787,2221,6.273,2222,5.49,2223,5.49,2224,3.995,2225,3.995,2226,3.995,2227,3.995,2228,3.995,2229,3.995,2230,3.995,2231,3.995,2232,3.995,2233,3.995,2234,3.995,2235,5.49,2236,3.995,2237,3.146,2238,3.995,2239,5.49,2240,3.995,2241,3.995,2242,3.995,2243,3.995,2244,3.995,2245,6.273,2246,3.995,2247,3.995,2248,3.995,2249,3.995,2250,3.146,2251,3.995,2252,6.273,2253,3.995,2254,3.995,2255,3.995,2256,6.273,2257,3.995,2258,5.49,2259,3.995,2260,3.995,2261,3.995,2262,5.49,2263,3.995,2264,3.995,2265,3.995,2266,3.995,2267,3.995,2268,3.995,2269,3.995,2270,3.995,2271,3.995,2272,3.995,2273,3.995,2274,3.995,2275,3.995,2276,3.995,2277,6.834,2278,6.273,2279,3.995,2280,3.995,2281,3.995,2282,3.995,2283,3.995,2284,3.995,2285,3.995,2286,3.995,2287,3.995,2288,3.995,2289,3.483,2290,3.995,2291,3.995,2292,3.995,2293,3.995,2294,3.995,2295,3.995,2296,3.995,2297,3.995,2298,3.995,2299,3.995,2300,3.995,2301,3.995,2302,3.995,2303,3.995,2304,3.995,2305,3.995,2306,3.995,2307,3.995,2308,3.995]],["title/miscellaneous/enumerations.html",[2309,2.14,2310,4.259]],["body/miscellaneous/enumerations.html",[15,0.013,44,2.096,124,0.011,125,0.011,142,1.813,145,0.594,148,2.384,198,3.109,199,3.545,208,4.378,373,2.369,423,3.388,438,3.788,439,2.677,440,3.854,441,4.668,462,5.452,463,4.501,464,4.983,465,4.983,466,4.983,467,4.983,468,4.983,553,3.159,598,4.668,601,5.016,1032,3.854,1731,3.854,2309,3.614,2310,4.983,2311,4.501,2312,5.452,2313,4.501]],["title/index.html",[145,0.352,2314,2.951,2315,2.951]],["body/index.html",[15,0.011,124,0.011,125,0.011,690,5.087,741,3.134,1106,6.551,2024,6.111,2250,4.595,2316,5.52,2317,5.834,2318,5.834,2319,5.834,2320,5.834,2321,5.834,2322,5.834,2323,5.834,2324,5.834,2325,5.834,2326,5.834,2327,5.834,2328,7.009,2329,5.834,2330,5.834,2331,5.834,2332,5.834,2333,7.009,2334,5.834,2335,5.834,2336,5.834,2337,5.087,2338,6.111,2339,5.834,2340,6.551,2341,5.834,2342,5.087,2343,5.834,2344,5.087,2345,5.087,2346,5.834,2347,7.009,2348,5.834,2349,5.834,2350,7.009,2351,5.834,2352,5.087]],["title/license.html",[2314,2.951,2315,2.951,2353,2.665]],["body/license.html",[4,0.171,5,0.039,7,0.141,8,3.014,12,0.078,15,0.002,17,0.145,19,2.093,21,0.406,26,0.509,28,0.021,44,0.376,87,0.427,95,0.019,102,2.079,104,1.095,107,0.167,118,1.212,122,2.448,124,0.003,125,0.002,134,0.26,154,1.229,277,0.599,294,0.198,296,1.081,301,0.905,318,1.303,319,0.624,330,0.477,331,1.518,342,0.354,369,1.593,383,0.45,402,0.509,472,1.509,473,1.739,540,0.658,564,2.731,566,2.852,593,0.369,612,1.685,623,6.882,624,1.685,631,1.212,653,0.45,666,3.628,671,1.095,672,4.85,674,0.829,726,1.095,730,1.89,732,1.89,739,0.509,741,0.747,781,0.547,786,0.594,796,0.547,797,1.007,800,1.007,802,1.739,836,1.89,954,0.658,986,0.658,991,0.594,997,0.624,1033,1.095,1047,2.761,1085,1.303,1089,3.666,1090,0.658,1101,1.212,1102,2.211,1105,1.212,1107,1.212,1131,0.594,1163,0.937,1179,0.547,1216,1.212,1267,0.509,1289,1.685,1303,0.658,1339,0.594,1341,1.095,1342,0.658,1362,0.594,1372,1.212,1457,0.658,1481,1.212,1562,0.658,1571,0.547,1572,1.685,1612,0.658,1703,5.266,1710,0.658,1827,1.685,1949,2.448,1957,0.594,1962,0.658,2013,2.448,2095,0.658,2097,2.448,2142,0.594,2160,1.095,2172,1.212,2237,1.095,2289,1.212,2337,1.685,2338,2.093,2340,3.286,2342,2.761,2345,0.658,2352,1.685,2353,6.26,2354,5.628,2355,6.002,2356,0.755,2357,0.755,2358,1.932,2359,6.48,2360,3.769,2361,5.731,2362,6.297,2363,3.167,2364,0.755,2365,0.755,2366,1.39,2367,2.808,2368,6.158,2369,2.808,2370,1.932,2371,4.989,2372,0.755,2373,0.755,2374,0.755,2375,1.39,2376,4.654,2377,3.167,2378,0.755,2379,3.167,2380,0.755,2381,0.755,2382,3.769,2383,0.755,2384,0.755,2385,0.755,2386,4.989,2387,7.185,2388,4.989,2389,1.932,2390,1.932,2391,3.509,2392,1.39,2393,1.39,2394,3.485,2395,3.485,2396,4.989,2397,3.167,2398,0.755,2399,0.755,2400,2.4,2401,3.769,2402,1.39,2403,3.769,2404,1.932,2405,0.755,2406,1.39,2407,0.755,2408,1.932,2409,5.628,2410,2.808,2411,1.39,2412,2.4,2413,0.755,2414,0.755,2415,1.39,2416,2.4,2417,2.4,2418,1.39,2419,4.654,2420,1.39,2421,2.808,2422,5.827,2423,2.808,2424,1.39,2425,2.4,2426,3.485,2427,2.808,2428,0.755,2429,3.167,2430,6.588,2431,1.932,2432,3.485,2433,0.755,2434,0.755,2435,0.755,2436,3.769,2437,1.39,2438,4.464,2439,4.255,2440,2.808,2441,1.39,2442,0.755,2443,0.755,2444,5.137,2445,1.39,2446,0.755,2447,0.755,2448,4.829,2449,1.39,2450,1.932,2451,0.755,2452,0.755,2453,0.755,2454,0.755,2455,0.755,2456,0.755,2457,0.755,2458,0.755,2459,0.755,2460,0.755,2461,1.39,2462,0.755,2463,0.755,2464,0.755,2465,1.39,2466,0.755,2467,1.932,2468,1.39,2469,0.755,2470,0.755,2471,1.39,2472,1.39,2473,4.989,2474,0.755,2475,1.39,2476,1.39,2477,0.755,2478,0.755,2479,1.39,2480,1.932,2481,1.932,2482,1.39,2483,0.755,2484,0.755,2485,3.167,2486,0.755,2487,0.755,2488,2.808,2489,0.755,2490,0.755,2491,0.755,2492,0.755,2493,1.39,2494,1.932,2495,0.755,2496,4.024,2497,0.755,2498,4.989,2499,2.4,2500,2.808,2501,3.167,2502,0.755,2503,1.932,2504,5.518,2505,1.39,2506,0.755,2507,0.755,2508,0.755,2509,1.932,2510,7.069,2511,4.255,2512,0.755,2513,0.755,2514,1.39,2515,1.39,2516,0.755,2517,4.255,2518,0.755,2519,2.4,2520,3.769,2521,0.755,2522,1.932,2523,1.932,2524,1.39,2525,6.969,2526,1.932,2527,4.024,2528,2.4,2529,3.485,2530,1.39,2531,0.755,2532,1.39,2533,1.932,2534,4.024,2535,4.255,2536,0.755,2537,1.39,2538,1.39,2539,2.4,2540,2.4,2541,3.509,2542,0.755,2543,1.932,2544,0.755,2545,6.23,2546,1.39,2547,0.755,2548,3.769,2549,0.755,2550,1.932,2551,3.769,2552,0.755,2553,5.137,2554,2.4,2555,1.39,2556,3.769,2557,4.464,2558,3.167,2559,0.755,2560,0.755,2561,0.755,2562,0.755,2563,3.769,2564,0.755,2565,1.39,2566,4.829,2567,0.755,2568,0.755,2569,1.932,2570,0.755,2571,1.932,2572,0.755,2573,0.755,2574,0.755,2575,4.464,2576,1.932,2577,1.932,2578,0.755,2579,0.755,2580,0.755,2581,1.39,2582,4.255,2583,0.755,2584,3.167,2585,0.755,2586,0.755,2587,2.808,2588,1.932,2589,1.932,2590,3.167,2591,1.932,2592,0.755,2593,0.755,2594,2.808,2595,2.808,2596,3.167,2597,0.755,2598,0.755,2599,0.755,2600,1.39,2601,1.932,2602,0.755,2603,0.755,2604,1.932,2605,0.755,2606,0.755,2607,0.755,2608,1.39,2609,0.755,2610,6.002,2611,0.755,2612,3.769,2613,0.755,2614,3.167,2615,1.39,2616,0.755,2617,0.755,2618,1.39,2619,1.39,2620,2.4,2621,0.755,2622,0.755,2623,0.755,2624,0.755,2625,1.39,2626,1.932,2627,2.808,2628,0.755,2629,1.39,2630,0.755,2631,0.755,2632,3.167,2633,0.755,2634,2.4,2635,0.755,2636,4.255,2637,3.485,2638,2.4,2639,0.755,2640,2.808,2641,0.755,2642,1.39,2643,0.755,2644,0.755,2645,1.932,2646,1.932,2647,1.932,2648,0.755,2649,0.755,2650,0.755,2651,1.932,2652,1.932,2653,3.167,2654,0.658,2655,0.755,2656,1.39,2657,1.39,2658,1.39,2659,0.755,2660,4.829,2661,1.39,2662,0.755,2663,0.755,2664,0.755,2665,0.755,2666,0.755,2667,0.755,2668,1.932,2669,0.755,2670,0.755,2671,5.137,2672,0.755,2673,0.755,2674,0.755,2675,2.808,2676,2.808,2677,0.755,2678,0.755,2679,1.932,2680,0.755,2681,0.755,2682,2.4,2683,0.755,2684,1.39,2685,0.755,2686,0.755,2687,0.755,2688,0.755,2689,0.755,2690,0.755,2691,1.39,2692,1.39,2693,0.755,2694,1.932,2695,0.755,2696,0.755,2697,1.39,2698,0.755,2699,0.755,2700,0.755,2701,0.755,2702,1.39,2703,1.39,2704,1.39,2705,4.024,2706,1.39,2707,3.167,2708,0.755,2709,0.755,2710,1.39,2711,1.932,2712,1.932,2713,2.4,2714,2.4,2715,1.932,2716,2.4,2717,1.932,2718,0.755,2719,2.808,2720,2.808,2721,1.685,2722,1.932,2723,0.755,2724,1.39,2725,1.39,2726,2.808,2727,1.39,2728,2.4,2729,2.4,2730,1.39,2731,1.932,2732,4.989,2733,2.808,2734,0.755,2735,0.755,2736,0.755,2737,1.932,2738,1.39,2739,1.39,2740,0.755,2741,0.755,2742,0.755,2743,0.755,2744,1.39,2745,0.755,2746,0.755,2747,0.755,2748,0.755,2749,0.755,2750,1.39,2751,1.932,2752,0.755,2753,0.755,2754,1.932,2755,0.755,2756,0.755,2757,1.39,2758,1.39,2759,3.167,2760,5.827,2761,1.932,2762,1.39,2763,1.39,2764,1.39,2765,1.39,2766,2.4,2767,1.39,2768,0.755,2769,0.755,2770,0.755,2771,0.755,2772,3.485,2773,3.167,2774,1.39,2775,0.755,2776,0.755,2777,0.755,2778,0.755,2779,1.39,2780,0.755,2781,1.39,2782,0.755,2783,2.808,2784,3.769,2785,2.4,2786,0.755,2787,4.464,2788,0.755,2789,0.755,2790,0.755,2791,0.755,2792,0.755,2793,0.755,2794,0.755,2795,0.755,2796,1.39,2797,1.932,2798,2.808,2799,2.093,2800,2.4,2801,1.39,2802,0.755,2803,0.755,2804,1.39,2805,0.755,2806,0.755,2807,0.755,2808,1.39,2809,0.755,2810,0.755,2811,1.932,2812,0.755,2813,1.39,2814,1.39,2815,0.755,2816,0.755,2817,1.932,2818,0.755,2819,0.755,2820,0.755,2821,0.755,2822,0.755,2823,1.39,2824,0.755,2825,0.755,2826,0.755,2827,0.755,2828,0.755,2829,1.932,2830,0.755,2831,0.755,2832,0.755,2833,0.755,2834,0.755,2835,2.808,2836,0.755,2837,0.755,2838,1.39,2839,2.4,2840,3.769,2841,0.755,2842,0.755,2843,0.755,2844,0.755,2845,0.755,2846,0.755,2847,0.755,2848,0.755,2849,3.485,2850,1.932,2851,0.755,2852,2.4,2853,0.755,2854,0.755,2855,1.932,2856,0.755,2857,0.755,2858,1.932,2859,0.755,2860,1.39,2861,0.755,2862,0.755,2863,0.755,2864,0.755,2865,0.755,2866,0.755,2867,0.755,2868,0.755,2869,1.39,2870,0.755,2871,0.755,2872,0.755,2873,0.755,2874,1.39,2875,0.755,2876,0.755,2877,1.932,2878,0.755,2879,0.755,2880,1.39,2881,0.755,2882,1.39,2883,0.755,2884,1.932,2885,3.485,2886,0.755,2887,1.39,2888,0.755,2889,1.39,2890,0.755,2891,0.755,2892,0.755,2893,0.755,2894,1.39,2895,0.755,2896,1.39,2897,2.4,2898,0.755,2899,2.808,2900,0.755,2901,0.755,2902,0.755,2903,0.755,2904,0.755,2905,0.755,2906,1.39,2907,1.39,2908,1.39,2909,1.932,2910,0.755,2911,1.39,2912,1.39,2913,0.755,2914,1.39,2915,1.932,2916,0.755,2917,1.39,2918,0.755,2919,1.39,2920,0.755,2921,1.932,2922,1.39,2923,0.755,2924,0.755,2925,1.39,2926,6.002,2927,0.755,2928,2.808,2929,4.255,2930,1.932,2931,0.755,2932,0.755,2933,0.755,2934,2.4,2935,0.755,2936,0.755,2937,1.932,2938,0.755,2939,1.39,2940,0.755,2941,0.755,2942,0.755,2943,2.4,2944,0.755,2945,0.755,2946,0.755,2947,0.755,2948,0.755,2949,2.4,2950,0.755,2951,0.755,2952,1.932,2953,0.755,2954,1.39,2955,1.932,2956,0.755,2957,1.39,2958,0.755,2959,0.755,2960,0.755,2961,0.755,2962,1.39,2963,1.932,2964,0.755,2965,0.755,2966,1.39,2967,0.755,2968,1.39,2969,0.755,2970,0.755,2971,0.755,2972,0.755,2973,1.932,2974,1.39,2975,0.755,2976,0.755,2977,2.4,2978,0.755,2979,1.932,2980,0.755,2981,0.755,2982,0.755,2983,0.755,2984,0.755,2985,0.755,2986,1.932,2987,1.39,2988,1.39,2989,0.755,2990,3.485,2991,1.39,2992,1.932,2993,0.755,2994,0.755,2995,1.39,2996,0.755,2997,1.932,2998,0.755,2999,1.39,3000,0.755,3001,0.755,3002,0.755,3003,0.755,3004,1.932,3005,1.932,3006,1.39,3007,0.755,3008,1.39,3009,0.755,3010,0.755,3011,1.39,3012,1.39,3013,0.755,3014,0.755,3015,1.39,3016,0.755,3017,0.755,3018,0.755,3019,0.755,3020,0.755,3021,1.932,3022,0.755,3023,0.755,3024,0.755,3025,0.755,3026,0.755,3027,2.4,3028,1.39,3029,1.932,3030,0.755,3031,0.755,3032,0.755,3033,0.755,3034,0.755,3035,1.39,3036,0.755,3037,0.755,3038,0.755,3039,0.755,3040,0.755,3041,0.755,3042,0.755,3043,0.755,3044,0.755,3045,0.755,3046,0.755,3047,0.755,3048,0.755,3049,0.755,3050,2.4,3051,0.755,3052,1.39,3053,0.755,3054,0.755,3055,0.755,3056,0.755,3057,0.755,3058,0.755,3059,0.755,3060,0.755,3061,0.755,3062,0.755,3063,1.932,3064,0.755,3065,0.755,3066,0.755,3067,1.39,3068,0.755,3069,0.755,3070,0.755,3071,0.755,3072,0.755,3073,0.755,3074,0.755,3075,1.39,3076,1.39,3077,2.808,3078,1.932,3079,0.755,3080,1.39,3081,0.755,3082,0.755,3083,0.755,3084,0.755,3085,1.932,3086,1.39,3087,0.755,3088,1.39,3089,1.39,3090,1.39,3091,0.755,3092,0.755,3093,0.755,3094,0.755,3095,0.755,3096,0.755,3097,0.755,3098,0.755,3099,1.39,3100,0.755,3101,0.755,3102,1.932,3103,0.755,3104,0.755,3105,0.755,3106,0.755,3107,0.755,3108,0.755,3109,0.755,3110,0.755,3111,0.755,3112,0.755,3113,0.755,3114,1.39,3115,0.755,3116,0.755,3117,0.755,3118,0.755,3119,0.755,3120,0.755,3121,0.755,3122,0.755,3123,0.755,3124,0.755,3125,0.755,3126,0.755,3127,0.755,3128,0.755,3129,0.755,3130,0.755,3131,0.755,3132,0.755,3133,0.755,3134,0.755,3135,1.932,3136,1.39,3137,0.755,3138,0.755,3139,0.755,3140,0.755,3141,0.755,3142,0.755,3143,0.755,3144,1.39,3145,1.932,3146,0.755,3147,0.755,3148,0.755,3149,0.755,3150,0.755,3151,0.755,3152,0.755,3153,1.39,3154,0.755,3155,0.755,3156,0.755,3157,0.755,3158,0.755,3159,0.755,3160,0.755,3161,0.755,3162,0.755,3163,0.755,3164,0.755,3165,0.755,3166,0.755,3167,0.755,3168,0.755,3169,0.755,3170,0.755,3171,0.755,3172,0.755,3173,0.755,3174,0.755,3175,0.755]],["title/modules.html",[2,1.912]],["body/modules.html",[1,3.937,2,1.872,15,0.01,33,3.436,35,3.664,37,3.436,39,2.919,41,3.241,43,2.919,47,3.071,49,3.436,55,2.659,57,3.664,59,3.664,70,3.664,72,3.241,75,3.071,79,3.436,124,0.01,125,0.01,428,3.436,2211,7.369,2344,7.369,2541,4.738,2721,7.369,3176,5.433,3177,8.469]],["title/overview.html",[3178,4.84]],["body/overview.html",[2,1.103,15,0.013,33,4.727,35,4.86,37,4.302,39,4.354,41,4.834,43,4.225,47,4.073,49,4.847,55,3.708,57,4.86,59,4.389,70,5.109,72,4.617,75,4.073,79,4.558,102,1.91,120,0.928,124,0.007,125,0.007,126,1.675,127,2.792,128,2.792,129,2.792,130,3.745,131,3.745,132,1.802,133,1.185,134,1.103,143,1.185,268,3.439,270,3.972,280,3.6,282,3.439,424,2.792,425,2.792,426,2.792,427,2.792,428,4.445,472,2.521,505,2.792,507,2.792,508,2.792,509,3.456,518,0.993,531,3.776,532,3.972,679,2.792,680,2.792,682,2.792,683,4.445,698,4.445,936,2.792,937,2.792,938,2.792,939,4.445,1068,2.792,1069,2.792,1070,2.792,1124,4.192,1135,2.792,1136,2.792,1245,4.192,1254,2.792,1255,2.792,1257,2.792,1306,2.792,1307,2.792,1308,2.792,1483,2.792,1484,2.792,1485,2.792,1486,2.792,1498,4.445,1627,2.522,1669,4.445,1680,2.792,1682,2.792,1683,2.792,1765,2.792,1766,2.792,1767,2.792,1796,2.792,1798,2.792,1799,2.792,1848,4.445,1885,2.792,1886,2.792,1887,2.792,2007,2.792,2008,2.792,2009,2.792,2042,2.792,2043,2.792,2044,2.792,2192,4.091,2203,2.792,3178,2.792,3179,3.202]],["title/properties.html",[146,1.237,2207,2.951]],["body/properties.html",[15,0.013,124,0.011,125,0.011,146,1.591,463,5.767,562,3.074,672,4.948,1607,5.478,2220,5.478,2277,5.478,2316,4.948,2353,4.948,3180,6.282,3181,6.282,3182,7.322,3183,6.282,3184,6.282,3185,6.282,3186,6.282]],["title/miscellaneous/typealiases.html",[2309,2.14,3187,4.884]],["body/miscellaneous/typealiases.html",[15,0.011,17,0.622,124,0.011,125,0.011,144,4.337,145,0.622,166,4.036,171,5.605,439,3.334,440,4.036,441,4.799,460,5.605,652,5.157,662,5.605,744,4.714,753,6.205,1032,4.036,1043,5.605,1395,4.337,1402,5.605,1731,4.036,1741,5.605,2031,4.337,2038,5.605,2309,3.785,2311,5.605,2312,4.714,2313,4.714,3188,5.985,3189,5.219,3190,5.985,3191,5.219,3192,5.219]],["title/miscellaneous/variables.html",[2309,2.14,3193,4.259]],["body/miscellaneous/variables.html",[1,2.644,3,0.114,7,0.429,8,1.127,15,0.013,16,0.802,17,0.379,26,3.475,45,0.955,73,1.302,103,3.951,105,1.814,107,1.48,110,2.008,111,2.008,124,0.006,125,0.006,141,1.669,142,1.751,144,1.669,145,0.239,153,1.96,162,2.495,164,0.69,166,1.553,178,1.069,179,3.568,180,2.008,189,3.283,193,1.406,212,1.814,264,1.257,274,1.237,291,1.709,296,1.406,302,2.157,322,2.46,344,1.302,369,1.132,373,2.137,429,1.814,435,2.644,436,3.565,437,2.008,439,2.415,440,1.553,441,3.055,472,2.434,474,3.568,475,2.008,478,3.283,510,2.873,515,2.644,516,2.008,552,2.454,553,3.144,566,1.127,652,3.283,653,1.374,675,3.568,676,2.008,678,3.283,684,2.873,687,2.644,688,2.008,702,1.456,741,1.96,834,2.644,851,2.008,939,1.456,942,1.814,959,2.644,960,2.008,961,2.644,962,2.008,963,2.873,964,2.008,965,2.644,966,2.008,991,1.814,997,1.034,1032,1.553,1045,1.814,1048,3.283,1049,2.008,1071,1.814,1074,2.644,1075,2.008,1142,2.008,1143,1.814,1154,2.307,1163,1.553,1167,1.814,1168,1.456,1267,3.788,1276,3.259,1290,2.008,1300,2.008,1311,1.814,1334,2.644,1335,2.008,1336,2.873,1337,2.008,1346,2.873,1347,2.008,1348,2.873,1349,2.008,1395,1.669,1403,3.568,1404,2.008,1407,3.283,1487,1.814,1490,2.644,1491,2.008,1568,1.553,1686,1.814,1699,2.873,1707,2.008,1712,2.873,1731,1.553,1746,3.283,1747,2.008,1768,1.814,1771,2.644,1772,2.008,1817,1.669,1825,3.055,1826,1.814,1889,1.814,1892,2.873,1893,2.008,1894,2.873,1895,2.008,2031,1.669,2032,1.814,2040,4.071,2041,2.008,2045,1.814,2048,2.873,2049,2.008,2050,3.181,2051,2.008,2052,2.008,2053,1.814,2078,2.873,2079,2.008,2142,1.814,2179,2.008,2180,3.181,2186,2.008,2187,3.181,2188,4.494,2189,3.181,2194,2.008,2195,3.181,2196,3.181,2197,2.008,2198,3.181,2237,1.814,2250,1.814,2309,1.456,2311,4.707,2312,1.814,2313,1.814,2316,2.873,2391,2.008,2654,2.008,2799,2.008,3189,3.181,3191,3.181,3192,2.008,3193,2.008,3194,2.303,3195,3.648,3196,2.303,3197,4.531,3198,5.154,3199,2.303,3200,4.531,3201,2.303,3202,5.154,3203,2.303,3204,2.303,3205,2.303,3206,2.303,3207,2.303,3208,2.303,3209,2.303,3210,3.648,3211,2.303,3212,2.303,3213,2.303,3214,2.303,3215,2.303,3216,3.648,3217,3.648,3218,3.648,3219,2.303,3220,2.303,3221,2.303,3222,2.303,3223,2.303,3224,2.303,3225,2.303,3226,2.303,3227,2.303,3228,2.303,3229,2.303,3230,2.303,3231,2.303,3232,2.303,3233,2.303,3234,2.303,3235,2.303,3236,2.303,3237,2.303,3238,2.303,3239,3.648,3240,2.303,3241,2.303,3242,2.303,3243,2.303,3244,2.303,3245,2.303,3246,2.303,3247,2.303,3248,2.303,3249,2.303,3250,2.303,3251,2.303,3252,5.976,3253,2.303,3254,2.303,3255,2.303,3256,2.303,3257,2.303,3258,2.303,3259,2.303,3260,3.648,3261,2.303,3262,2.303,3263,3.648,3264,4.531,3265,2.303,3266,2.303,3267,2.303,3268,2.303,3269,2.303,3270,5.154,3271,2.303,3272,2.303,3273,5.154,3274,2.303,3275,2.303,3276,3.648,3277,2.303,3278,2.303,3279,2.303,3280,2.303,3281,2.303,3282,2.303,3283,2.303,3284,2.303,3285,2.303,3286,2.303,3287,2.303,3288,2.303,3289,2.303,3290,2.303,3291,2.303,3292,2.303,3293,2.303,3294,2.303,3295,2.303,3296,2.303,3297,2.303,3298,2.303,3299,2.303,3300,2.303,3301,2.303,3302,2.303,3303,2.303,3304,2.303,3305,2.303,3306,2.303]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"injectables/DisableBodyParserMiddleware.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"injectables/GetLanguageMiddleware.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/JsonBodyMiddleware.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"modules/OryModule.html":{},"injectables/OryService.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":316,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/UtilService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":2220,"title":{},"body":{"dependencies.html":{},"properties.html":{}}}],["0.0.3",{"_index":2266,"title":{},"body":{"dependencies.html":{}}}],["0.0.5",{"_index":2247,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":2296,"title":{},"body":{"dependencies.html":{}}}],["0.1.24",{"_index":2228,"title":{},"body":{"dependencies.html":{}}}],["0.11.7",{"_index":2257,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":2244,"title":{},"body":{"dependencies.html":{}}}],["0.2.5",{"_index":2231,"title":{},"body":{"dependencies.html":{}}}],["0.21.2",{"_index":2241,"title":{},"body":{"dependencies.html":{}}}],["0.3.0",{"_index":2248,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":2274,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":2243,"title":{},"body":{"dependencies.html":{}}}],["0.9",{"_index":1719,"title":{},"body":{"injectables/SitemapService.html":{}}}],["0/1",{"_index":2164,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":2191,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":2175,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2165,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2190,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2166,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2167,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2178,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2185,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2174,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2171,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":472,"title":{},"body":{"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ParserService.html":{},"classes/Source.html":{},"modules/WikidataModule.html":{},"license.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":2275,"title":{},"body":{"dependencies.html":{}}}],["1.0.1",{"_index":2222,"title":{},"body":{"dependencies.html":{}}}],["1.1.18",{"_index":2216,"title":{},"body":{"dependencies.html":{}}}],["1.17.2",{"_index":2260,"title":{},"body":{"dependencies.html":{}}}],["1.4.1",{"_index":2258,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":2253,"title":{},"body":{"dependencies.html":{}}}],["1.5.0",{"_index":2238,"title":{},"body":{"dependencies.html":{}}}],["1.6.1",{"_index":2305,"title":{},"body":{"dependencies.html":{}}}],["1.8.0",{"_index":2270,"title":{},"body":{"dependencies.html":{}}}],["1.9.1",{"_index":2219,"title":{},"body":{"dependencies.html":{}}}],["1/2",{"_index":2182,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":2202,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":2173,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":2200,"title":{},"body":{"coverage.html":{}}}],["1/8",{"_index":2204,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":318,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HistoryController.html":{},"injectables/PersonalityService.html":{},"controllers/SourceController.html":{},"license.html":{}}}],["10.2.0",{"_index":2268,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1946,"title":{},"body":{"injectables/UtilService.html":{}}}],["11",{"_index":2684,"title":{},"body":{"license.html":{}}}],["12",{"_index":2203,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["12.1.0",{"_index":2267,"title":{},"body":{"dependencies.html":{}}}],["13",{"_index":3065,"title":{},"body":{"license.html":{}}}],["13.11.4",{"_index":2246,"title":{},"body":{"dependencies.html":{}}}],["14",{"_index":2199,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":2887,"title":{},"body":{"license.html":{}}}],["16",{"_index":2172,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["17",{"_index":2192,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["17.0.2",{"_index":2278,"title":{},"body":{"dependencies.html":{}}}],["18",{"_index":2169,"title":{},"body":{"coverage.html":{}}}],["1996",{"_index":2690,"title":{},"body":{"license.html":{}}}],["2",{"_index":2097,"title":{},"body":{"injectables/WikidataService.html":{},"license.html":{}}}],["2.0.0",{"_index":2226,"title":{},"body":{"dependencies.html":{}}}],["2.1.0",{"_index":2285,"title":{},"body":{"dependencies.html":{}}}],["2.1.6",{"_index":2255,"title":{},"body":{"dependencies.html":{}}}],["2.3.0",{"_index":2264,"title":{},"body":{"dependencies.html":{}}}],["2.3.2",{"_index":2282,"title":{},"body":{"dependencies.html":{}}}],["2.4.8",{"_index":2304,"title":{},"body":{"dependencies.html":{}}}],["2.8.4",{"_index":2302,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":2688,"title":{},"body":{"license.html":{}}}],["2007",{"_index":2358,"title":{},"body":{"license.html":{}}}],["21.6.10",{"_index":2263,"title":{},"body":{"dependencies.html":{}}}],["22",{"_index":3179,"title":{},"body":{"overview.html":{}}}],["26",{"_index":2176,"title":{},"body":{"coverage.html":{}}}],["27.4.0",{"_index":2233,"title":{},"body":{"dependencies.html":{}}}],["28",{"_index":3046,"title":{},"body":{"license.html":{}}}],["29",{"_index":2356,"title":{},"body":{"license.html":{}}}],["3",{"_index":1949,"title":{},"body":{"injectables/UtilService.html":{},"license.html":{}}}],["3/16",{"_index":2170,"title":{},"body":{"coverage.html":{}}}],["3/17",{"_index":2193,"title":{},"body":{"coverage.html":{}}}],["3/7",{"_index":2184,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":2945,"title":{},"body":{"license.html":{}}}],["33",{"_index":2201,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":2722,"title":{},"body":{"license.html":{}}}],["4.1.0",{"_index":2212,"title":{},"body":{"dependencies.html":{}}}],["4.17.1",{"_index":2259,"title":{},"body":{"dependencies.html":{}}}],["4.18.5",{"_index":2240,"title":{},"body":{"dependencies.html":{}}}],["4.29.0",{"_index":2236,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":2290,"title":{},"body":{"dependencies.html":{}}}],["4.6.0",{"_index":2251,"title":{},"body":{"dependencies.html":{}}}],["4.6.2",{"_index":2210,"title":{},"body":{"dependencies.html":{}}}],["4.7.7",{"_index":2261,"title":{},"body":{"dependencies.html":{}}}],["4/15",{"_index":2177,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":2156,"title":{},"body":{"injectables/WikidataService.html":{}}}],["404",{"_index":1219,"title":{},"body":{"classes/NotFoundFilter.html":{},"controllers/ViewController.html":{}}}],["42",{"_index":2183,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":1131,"title":{},"body":{"controllers/HomeController.html":{},"dependencies.html":{},"license.html":{}}}],["5.13.5",{"_index":2265,"title":{},"body":{"dependencies.html":{}}}],["5.3.0",{"_index":2308,"title":{},"body":{"dependencies.html":{}}}],["5.4.0",{"_index":2272,"title":{},"body":{"dependencies.html":{}}}],["5.5.1",{"_index":2293,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":2181,"title":{},"body":{"coverage.html":{}}}],["6.1.0",{"_index":2276,"title":{},"body":{"dependencies.html":{}}}],["6.1.1",{"_index":2299,"title":{},"body":{"dependencies.html":{}}}],["6.4.1",{"_index":2280,"title":{},"body":{"dependencies.html":{}}}],["6.7.0",{"_index":2273,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":2938,"title":{},"body":{"license.html":{}}}],["6b",{"_index":2780,"title":{},"body":{"license.html":{}}}],["6d",{"_index":2806,"title":{},"body":{"license.html":{}}}],["7",{"_index":2717,"title":{},"body":{"license.html":{}}}],["7.12.1",{"_index":2214,"title":{},"body":{"dependencies.html":{}}}],["7.2.4",{"_index":2288,"title":{},"body":{"dependencies.html":{}}}],["7.3.0",{"_index":2301,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":971,"title":{},"body":{"injectables/EmailService.html":{}}}],["8.0.0",{"_index":2223,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":2224,"title":{},"body":{"dependencies.html":{}}}],["8.0.6",{"_index":2221,"title":{},"body":{"dependencies.html":{}}}],["86400",{"_index":2052,"title":{},"body":{"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["9a76c3a1c35c",{"_index":1940,"title":{},"body":{"injectables/UtilService.html":{}}}],["_",{"_index":2130,"title":{},"body":{"injectables/WikidataService.html":{}}}],["_checkcaptcharesponse",{"_index":194,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["_checkcaptcharesponse(secret",{"_index":209,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["_getclaim",{"_index":745,"title":{},"body":{"injectables/ClaimService.html":{}}}],["_getclaim(match",{"_index":752,"title":{},"body":{"injectables/ClaimService.html":{}}}],["_getsentencebyhashandclaimid",{"_index":195,"title":{},"body":{"controllers/ClaimController.html":{}}}],["_getsentencebyhashandclaimid(sentencehash",{"_index":214,"title":{},"body":{"controllers/ClaimController.html":{}}}],["_id",{"_index":183,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"classes/Personality.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"injectables/SourceService.html":{},"injectables/UtilService.html":{}}}],["_res",{"_index":932,"title":{},"body":{"injectables/DisableBodyParserMiddleware.html":{}}}],["_reviewsbysentencehashaggregated",{"_index":520,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["_reviewsbysentencehashaggregated(sentencehash",{"_index":534,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["_topclassificationaccumulator",{"_index":521,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["_verifyinputsquery",{"_index":196,"title":{},"body":{"controllers/ClaimController.html":{}}}],["_verifyinputsquery(query",{"_index":218,"title":{},"body":{"controllers/ClaimController.html":{}}}],["abaixo",{"_index":3287,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ability",{"_index":2857,"title":{},"body":{"license.html":{}}}],["above",{"_index":2921,"title":{},"body":{"license.html":{}}}],["absence",{"_index":2718,"title":{},"body":{"license.html":{}}}],["absolute",{"_index":3124,"title":{},"body":{"license.html":{}}}],["absolutely",{"_index":3152,"title":{},"body":{"license.html":{}}}],["abuse",{"_index":2464,"title":{},"body":{"license.html":{}}}],["acc",{"_index":634,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["accept",{"_index":2237,"title":{},"body":{"dependencies.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["acceptance",{"_index":2949,"title":{},"body":{"license.html":{}}}],["access",{"_index":2342,"title":{},"body":{"index.html":{},"license.html":{}}}],["access_token",{"_index":1281,"title":{},"body":{"injectables/OryService.html":{}}}],["accessible",{"_index":3014,"title":{},"body":{"license.html":{}}}],["accesstoken",{"_index":1282,"title":{},"body":{"injectables/OryService.html":{},"guards/SessionGuard.html":{}}}],["accompanied",{"_index":2761,"title":{},"body":{"license.html":{}}}],["accompanies",{"_index":3128,"title":{},"body":{"license.html":{}}}],["accord",{"_index":2716,"title":{},"body":{"license.html":{}}}],["according",{"_index":3119,"title":{},"body":{"license.html":{}}}],["accumulate",{"_index":539,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["accumulateargs",{"_index":541,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["accumulator",{"_index":537,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["acessar",{"_index":3282,"title":{},"body":{"miscellaneous/variables.html":{}}}],["achieve",{"_index":3134,"title":{},"body":{"license.html":{}}}],["acknowledges",{"_index":2649,"title":{},"body":{"license.html":{}}}],["acquired",{"_index":2995,"title":{},"body":{"license.html":{}}}],["acronyms",{"_index":1354,"title":{},"body":{"injectables/ParserService.html":{}}}],["action",{"_index":2091,"title":{},"body":{"injectables/WikidataService.html":{}}}],["actions",{"_index":2956,"title":{},"body":{"license.html":{}}}],["activities",{"_index":2543,"title":{},"body":{"license.html":{}}}],["activity",{"_index":3041,"title":{},"body":{"license.html":{}}}],["actual",{"_index":3019,"title":{},"body":{"license.html":{}}}],["actually",{"_index":2828,"title":{},"body":{"license.html":{}}}],["adapt",{"_index":2516,"title":{},"body":{"license.html":{}}}],["add",{"_index":836,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/SitemapService.html":{},"license.html":{}}}],["added",{"_index":2715,"title":{},"body":{"license.html":{}}}],["additional",{"_index":2732,"title":{},"body":{"license.html":{}}}],["address",{"_index":3072,"title":{},"body":{"license.html":{}}}],["addressed",{"_index":2513,"title":{},"body":{"license.html":{}}}],["adminendpoint",{"_index":1261,"title":{},"body":{"injectables/OryService.html":{}}}],["adopted",{"_index":2687,"title":{},"body":{"license.html":{}}}],["adversely",{"_index":2865,"title":{},"body":{"license.html":{}}}],["advised",{"_index":3115,"title":{},"body":{"license.html":{}}}],["affects",{"_index":2866,"title":{},"body":{"license.html":{}}}],["affero",{"_index":3063,"title":{},"body":{"license.html":{}}}],["affirmed",{"_index":2978,"title":{},"body":{"license.html":{}}}],["affirms",{"_index":2643,"title":{},"body":{"license.html":{}}}],["against",{"_index":2704,"title":{},"body":{"license.html":{}}}],["agent",{"_index":1207,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"controllers/RootController.html":{}}}],["agg",{"_index":1942,"title":{},"body":{"injectables/UtilService.html":{}}}],["aggregate",{"_index":624,"title":{},"body":{"injectables/ClaimReviewService.html":{},"license.html":{}}}],["aggregates",{"_index":627,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["agree",{"_index":3058,"title":{},"body":{"license.html":{}}}],["agreed",{"_index":3101,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":3005,"title":{},"body":{"license.html":{}}}],["agreggateclassification",{"_index":522,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["agreggateclassification(match",{"_index":547,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["aim",{"_index":2460,"title":{},"body":{"license.html":{}}}],["aletheia",{"_index":2316,"title":{},"body":{"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["aliases",{"_index":3188,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alleging",{"_index":2985,"title":{},"body":{"license.html":{}}}],["allow",{"_index":1562,"title":{},"body":{"injectables/PersonalityService.html":{},"license.html":{}}}],["allowed",{"_index":1572,"title":{},"body":{"injectables/PersonalityService.html":{},"license.html":{}}}],["allowedheaders",{"_index":3213,"title":{},"body":{"miscellaneous/variables.html":{}}}],["along",{"_index":2720,"title":{},"body":{"license.html":{}}}],["alpha.153",{"_index":2229,"title":{},"body":{"dependencies.html":{}}}],["alphabets",{"_index":1343,"title":{},"body":{"injectables/ParserService.html":{}}}],["already",{"_index":1457,"title":{},"body":{"controllers/PersonalityController.html":{},"license.html":{}}}],["alternative",{"_index":2776,"title":{},"body":{"license.html":{}}}],["although",{"_index":2456,"title":{},"body":{"license.html":{}}}],["ancillary",{"_index":2950,"title":{},"body":{"license.html":{}}}],["and/or",{"_index":2440,"title":{},"body":{"license.html":{}}}],["ant",{"_index":2208,"title":{},"body":{"dependencies.html":{}}}],["antd",{"_index":2239,"title":{},"body":{"dependencies.html":{}}}],["anti",{"_index":2674,"title":{},"body":{"license.html":{}}}],["anyone",{"_index":2729,"title":{},"body":{"license.html":{}}}],["anything",{"_index":2528,"title":{},"body":{"license.html":{}}}],["análise",{"_index":2318,"title":{},"body":{"index.html":{}}}],["api",{"_index":1607,"title":{},"body":{"controllers/RootController.html":{},"properties.html":{}}}],["api/claimreview",{"_index":482,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["api/kratos/admin",{"_index":1273,"title":{},"body":{"injectables/OryService.html":{}}}],["api/stats",{"_index":1790,"title":{},"body":{"controllers/StatsController.html":{}}}],["api\\nsitemap",{"_index":1623,"title":{},"body":{"controllers/RootController.html":{}}}],["app",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["app.close",{"_index":3301,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.get(configservice",{"_index":3256,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.get(emailservice",{"_index":3255,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.get(usersservice",{"_index":3258,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.listen(options.config.port",{"_index":3238,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.logger.log(\"error/recaptcha",{"_index":496,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["app.setglobalprefix(\"api",{"_index":3237,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.use",{"_index":3226,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.use(cookieparser",{"_index":3225,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.use(passport.initialize",{"_index":3234,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.use(passport.session",{"_index":3235,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.useglobalpipes",{"_index":3219,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.usestaticassets(join(__dirname",{"_index":3236,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app_filter",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["applicable",{"_index":2534,"title":{},"body":{"license.html":{}}}],["applications",{"_index":3169,"title":{},"body":{"license.html":{}}}],["applied",{"_index":2492,"title":{},"body":{"license.html":{}}}],["applies",{"_index":2392,"title":{},"body":{"license.html":{}}}],["apply",{"_index":2396,"title":{},"body":{"license.html":{}}}],["apply(disablebodyparsermiddleware",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["apply(jsonbodymiddleware",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["appmodule.register(options",{"_index":3217,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appropriate",{"_index":2556,"title":{},"body":{"license.html":{}}}],["appropriately",{"_index":2709,"title":{},"body":{"license.html":{}}}],["approximates",{"_index":3123,"title":{},"body":{"license.html":{}}}],["area",{"_index":2466,"title":{},"body":{"license.html":{}}}],["arguable",{"_index":464,"title":{},"body":{"classes/ClaimReview.html":{},"miscellaneous/enumerations.html":{}}}],["argumentshost",{"_index":1224,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["arise",{"_index":2474,"title":{},"body":{"license.html":{}}}],["arising",{"_index":3105,"title":{},"body":{"license.html":{}}}],["arrange",{"_index":3015,"title":{},"body":{"license.html":{}}}],["arrangement",{"_index":3029,"title":{},"body":{"license.html":{}}}],["array",{"_index":1939,"title":{},"body":{"injectables/UtilService.html":{}}}],["array.foreach((item",{"_index":1952,"title":{},"body":{"injectables/UtilService.html":{}}}],["array.from(newarray.values",{"_index":1959,"title":{},"body":{"injectables/UtilService.html":{}}}],["array.isarray(claim.sources",{"_index":737,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["array.isarray(claimreview.sources",{"_index":650,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["array.isarray(claims",{"_index":1594,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["arraynotempty",{"_index":887,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["article",{"_index":2683,"title":{},"body":{"license.html":{}}}],["asc",{"_index":320,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/SourceService.html":{}}}],["asking",{"_index":2414,"title":{},"body":{"license.html":{}}}],["assert",{"_index":2435,"title":{},"body":{"license.html":{}}}],["assets",{"_index":1962,"title":{},"body":{"controllers/ViewController.html":{},"license.html":{}}}],["assets(@req",{"_index":2004,"title":{},"body":{"controllers/ViewController.html":{}}}],["assets(req",{"_index":1968,"title":{},"body":{"controllers/ViewController.html":{}}}],["associated",{"_index":2621,"title":{},"body":{"license.html":{}}}],["assume",{"_index":3095,"title":{},"body":{"license.html":{}}}],["assumption",{"_index":3127,"title":{},"body":{"license.html":{}}}],["assumptions",{"_index":2908,"title":{},"body":{"license.html":{}}}],["assures",{"_index":2495,"title":{},"body":{"license.html":{}}}],["async",{"_index":193,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"controllers/OryController.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["attach",{"_index":3136,"title":{},"body":{"license.html":{}}}],["attempt",{"_index":2924,"title":{},"body":{"license.html":{}}}],["attempting",{"_index":1547,"title":{},"body":{"injectables/PersonalityService.html":{},"controllers/UsersController.html":{}}}],["attributed",{"_index":2451,"title":{},"body":{"license.html":{}}}],["attributions",{"_index":2890,"title":{},"body":{"license.html":{}}}],["auth",{"_index":984,"title":{},"body":{"injectables/EmailService.html":{}}}],["auth.guard",{"_index":1851,"title":{},"body":{"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":1147,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth/auth.module",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/local",{"_index":1850,"title":{},"body":{"controllers/UsersController.html":{}}}],["auth/session.guard",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["authenticate",{"_index":1824,"title":{},"body":{"classes/User.html":{},"interfaces/UserDocument.html":{}}}],["authguard",{"_index":1148,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authguard(\"local",{"_index":1150,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":35,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":2889,"title":{},"body":{"license.html":{}}}],["authorization",{"_index":1303,"title":{},"body":{"injectables/OryService.html":{},"license.html":{}}}],["authorized",{"_index":2881,"title":{},"body":{"license.html":{}}}],["authorizes",{"_index":2991,"title":{},"body":{"license.html":{}}}],["authorizing",{"_index":3033,"title":{},"body":{"license.html":{}}}],["authors",{"_index":2395,"title":{},"body":{"license.html":{}}}],["authtype",{"_index":1881,"title":{},"body":{"controllers/UsersController.html":{}}}],["auto",{"_index":667,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["automatic",{"_index":2960,"title":{},"body":{"license.html":{}}}],["automatically",{"_index":2634,"title":{},"body":{"license.html":{}}}],["available",{"_index":2541,"title":{},"body":{"license.html":{},"modules.html":{}}}],["avoid",{"_index":2490,"title":{},"body":{"license.html":{}}}],["avoiding",{"_index":1220,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["await",{"_index":302,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HomeController.html":{},"controllers/OryController.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"injectables/SourceService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["away",{"_index":2381,"title":{},"body":{"license.html":{}}}],["axios",{"_index":1276,"title":{},"body":{"injectables/OryService.html":{},"injectables/SitemapService.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["axios.get",{"_index":1724,"title":{},"body":{"injectables/SitemapService.html":{},"injectables/WikidataService.html":{}}}],["axios.get(\"https://www.wikidata.org/w/api.php",{"_index":2090,"title":{},"body":{"injectables/WikidataService.html":{}}}],["b",{"_index":2596,"title":{},"body":{"license.html":{}}}],["babel/polyfill",{"_index":2213,"title":{},"body":{"dependencies.html":{}}}],["bail",{"_index":1570,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["based",{"_index":1047,"title":{},"body":{"classes/History.html":{},"license.html":{}}}],["baseoptions",{"_index":1286,"title":{},"body":{"injectables/OryService.html":{}}}],["basepath",{"_index":1285,"title":{},"body":{"injectables/OryService.html":{},"guards/SessionGuard.html":{}}}],["baseurl",{"_index":974,"title":{},"body":{"injectables/EmailService.html":{}}}],["basic",{"_index":2635,"title":{},"body":{"license.html":{}}}],["batches",{"_index":1565,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["bearer",{"_index":1304,"title":{},"body":{"injectables/OryService.html":{}}}],["before",{"_index":1045,"title":{},"body":{"classes/History.html":{},"injectables/HistoryService.html":{},"miscellaneous/variables.html":{}}}],["behalf",{"_index":2662,"title":{},"body":{"license.html":{}}}],["being",{"_index":2804,"title":{},"body":{"license.html":{}}}],["believe",{"_index":3025,"title":{},"body":{"license.html":{}}}],["below",{"_index":2669,"title":{},"body":{"license.html":{}}}],["bem",{"_index":3278,"title":{},"body":{"miscellaneous/variables.html":{}}}],["benefit",{"_index":3018,"title":{},"body":{"license.html":{}}}],["best",{"_index":3133,"title":{},"body":{"license.html":{}}}],["between",{"_index":2631,"title":{},"body":{"license.html":{}}}],["beyond",{"_index":2749,"title":{},"body":{"license.html":{}}}],["bigger",{"_index":632,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["body",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/JsonBodyMiddleware.html":{},"controllers/PersonalityController.html":{},"coverage.html":{},"license.html":{}}}],["body.middleware",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["body.middleware.ts",{"_index":1140,"title":{},"body":{"injectables/JsonBodyMiddleware.html":{},"coverage.html":{}}}],["body.middleware.ts:7",{"_index":1141,"title":{},"body":{"injectables/JsonBodyMiddleware.html":{}}}],["bodyparser",{"_index":1142,"title":{},"body":{"injectables/JsonBodyMiddleware.html":{},"miscellaneous/variables.html":{}}}],["bodyparser.json()(req",{"_index":1144,"title":{},"body":{"injectables/JsonBodyMiddleware.html":{}}}],["boolean",{"_index":451,"title":{},"body":{"classes/ClaimReview.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreatePersonality.html":{},"classes/GetPersonalities.html":{},"injectables/HistoryService.html":{},"guards/SessionGuard.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{}}}],["both",{"_index":2445,"title":{},"body":{"license.html":{}}}],["box",{"_index":3159,"title":{},"body":{"license.html":{}}}],["br",{"_index":2079,"title":{},"body":{"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["browse",{"_index":3177,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2344,"title":{},"body":{"index.html":{},"modules.html":{}}}],["buf",{"_index":3265,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buf.tostring(\"hex",{"_index":3268,"title":{},"body":{"miscellaneous/variables.html":{}}}],["build",{"_index":2350,"title":{},"body":{"index.html":{}}}],["business",{"_index":3038,"title":{},"body":{"license.html":{}}}],["c",{"_index":2360,"title":{},"body":{"license.html":{}}}],["calculateoverallstats",{"_index":746,"title":{},"body":{"injectables/ClaimService.html":{}}}],["calculateoverallstats(claim",{"_index":755,"title":{},"body":{"injectables/ClaimService.html":{}}}],["called",{"_index":2523,"title":{},"body":{"license.html":{}}}],["canactivate",{"_index":1630,"title":{},"body":{"guards/SessionGuard.html":{}}}],["canactivate(context",{"_index":1633,"title":{},"body":{"guards/SessionGuard.html":{}}}],["carry",{"_index":2724,"title":{},"body":{"license.html":{}}}],["case",{"_index":726,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{},"license.html":{}}}],["cases",{"_index":2823,"title":{},"body":{"license.html":{}}}],["cast",{"_index":639,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["catch",{"_index":717,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"controllers/HistoryController.html":{},"classes/NotFoundFilter.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ViewService.html":{}}}],["catch((e",{"_index":3290,"title":{},"body":{"miscellaneous/variables.html":{}}}],["catch((err",{"_index":1464,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["catch((error",{"_index":332,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/PersonalityService.html":{}}}],["catch(e",{"_index":1878,"title":{},"body":{"controllers/UsersController.html":{}}}],["catch(exception",{"_index":1223,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["catch(notfoundexception",{"_index":1227,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["cause",{"_index":797,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"license.html":{}}}],["cd",{"_index":2331,"title":{},"body":{"index.html":{}}}],["cease",{"_index":2927,"title":{},"body":{"license.html":{}}}],["certain",{"_index":2417,"title":{},"body":{"license.html":{}}}],["cessation",{"_index":2940,"title":{},"body":{"license.html":{}}}],["change",{"_index":1102,"title":{},"body":{"injectables/HistoryService.html":{},"controllers/UsersController.html":{},"license.html":{}}}],["change(create",{"_index":1103,"title":{},"body":{"injectables/HistoryService.html":{}}}],["changed",{"_index":781,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/UsersService.html":{},"license.html":{}}}],["changepassword",{"_index":1831,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["changepassword(@req",{"_index":1864,"title":{},"body":{"controllers/UsersController.html":{}}}],["changepassword(mongoose.types.objectid(req.params.id",{"_index":1874,"title":{},"body":{"controllers/UsersController.html":{}}}],["changepassword(req",{"_index":1833,"title":{},"body":{"controllers/UsersController.html":{}}}],["changepassword(userid",{"_index":1898,"title":{},"body":{"injectables/UsersService.html":{}}}],["changes",{"_index":1067,"title":{},"body":{"controllers/HistoryController.html":{},"injectables/HistoryService.html":{}}}],["changing",{"_index":2372,"title":{},"body":{"license.html":{}}}],["characterized",{"_index":2854,"title":{},"body":{"license.html":{}}}],["characters",{"_index":731,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{}}}],["charge",{"_index":2401,"title":{},"body":{"license.html":{}}}],["checking",{"_index":3182,"title":{},"body":{"properties.html":{}}}],["choose",{"_index":3080,"title":{},"body":{"license.html":{}}}],["choosing",{"_index":3084,"title":{},"body":{"license.html":{}}}],["circumstances",{"_index":2667,"title":{},"body":{"license.html":{}}}],["circumvention",{"_index":2675,"title":{},"body":{"license.html":{}}}],["civil",{"_index":3126,"title":{},"body":{"license.html":{}}}],["claim",{"_index":44,"title":{"classes/Claim.html":{}},"body":{"modules/AppModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimReview.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"classes/Personality.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"license.html":{}}}],["claim._id",{"_index":399,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{},"injectables/SitemapService.html":{}}}],["claim.claimid",{"_index":718,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["claim.content",{"_index":720,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{}}}],["claim.content.object",{"_index":856,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claim.content.object.foreach((p",{"_index":863,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claim.content.text",{"_index":1596,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["claim.controller",{"_index":432,"title":{},"body":{"modules/ClaimModule.html":{}}}],["claim.dto",{"_index":285,"title":{},"body":{"controllers/ClaimController.html":{},"classes/UpdateClaimDTO.html":{}}}],["claim.dto.ts",{"_index":875,"title":{},"body":{"classes/CreateClaimDTO.html":{},"classes/UpdateClaimDTO.html":{},"coverage.html":{}}}],["claim.dto.ts:11",{"_index":877,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["claim.dto.ts:16",{"_index":879,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["claim.dto.ts:21",{"_index":886,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["claim.dto.ts:25",{"_index":883,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["claim.dto.ts:29",{"_index":881,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["claim.dto.ts:33",{"_index":880,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["claim.dto.ts:7",{"_index":884,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["claim.lastestrevision",{"_index":1561,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["claim.latestrevision",{"_index":804,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claim.name",{"_index":437,"title":{},"body":{"modules/ClaimModule.html":{},"miscellaneous/variables.html":{}}}],["claim.personality",{"_index":806,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claim.save",{"_index":830,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claim.service",{"_index":271,"title":{},"body":{"controllers/ClaimController.html":{},"modules/ClaimModule.html":{}}}],["claim.slug",{"_index":722,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{}}}],["claim.sources",{"_index":736,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["claim.toobject",{"_index":849,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claim.toobject().latestrevision",{"_index":826,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claim/claim.module",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/SitemapModule.html":{},"modules/StatsModule.html":{}}}],["claim/claim.service",{"_index":1698,"title":{},"body":{"injectables/SitemapService.html":{},"injectables/StatsService.html":{}}}],["claim/schemas/claim.schema",{"_index":459,"title":{},"body":{"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimReview.html":{}}}],["claim?.content?.object",{"_index":855,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claim?.latestrevision",{"_index":852,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claim?.revision",{"_index":853,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claimbody",{"_index":762,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claimcontent",{"_index":774,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claimcontent[paragraphindex].content[sentenceindex].props",{"_index":871,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claimcontroller",{"_index":191,"title":{"controllers/ClaimController.html":{}},"body":{"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"coverage.html":{}}}],["claimcreatepage",{"_index":197,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claimcreatepage(@req",{"_index":408,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claimcreatepage(req",{"_index":221,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claimdocument",{"_index":171,"title":{},"body":{"classes/Claim.html":{},"injectables/ClaimService.html":{},"miscellaneous/typealiases.html":{}}}],["claimid",{"_index":185,"title":{},"body":{"classes/Claim.html":{},"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{}}}],["claimids",{"_index":582,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["claimmatchparameters",{"_index":753,"title":{},"body":{"injectables/ClaimService.html":{},"miscellaneous/typealiases.html":{}}}],["claimmodel",{"_index":435,"title":{},"body":{"modules/ClaimModule.html":{},"injectables/ClaimService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimmodule",{"_index":41,"title":{"modules/ClaimModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/SitemapModule.html":{},"modules/StatsModule.html":{},"modules.html":{},"overview.html":{}}}],["claimobj",{"_index":377,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claimobj.content.object.foreach((p",{"_index":380,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claimobj.date",{"_index":384,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claimobj.personality",{"_index":385,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claimreview",{"_index":438,"title":{"classes/ClaimReview.html":{}},"body":{"classes/ClaimReview.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"injectables/PersonalityService.html":{},"classes/Source.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["claimreview.claim",{"_index":643,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["claimreview.name",{"_index":516,"title":{},"body":{"modules/ClaimReviewModule.html":{},"miscellaneous/variables.html":{}}}],["claimreview.personality",{"_index":641,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["claimreview.sources",{"_index":649,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["claimreview.topclassification",{"_index":873,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claimreview.user",{"_index":645,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["claimreviewbody",{"_index":563,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["claimreviewcontroller",{"_index":479,"title":{"controllers/ClaimReviewController.html":{}},"body":{"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"coverage.html":{}}}],["claimreviewdocument",{"_index":460,"title":{},"body":{"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"miscellaneous/typealiases.html":{}}}],["claimreviewid",{"_index":575,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["claimreviewmodel",{"_index":515,"title":{},"body":{"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimreviewmodule",{"_index":43,"title":{"modules/ClaimReviewModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/PersonalityModule.html":{},"modules/SitemapModule.html":{},"modules/StatsModule.html":{},"modules.html":{},"overview.html":{}}}],["claimreviewschema",{"_index":478,"title":{},"body":{"classes/ClaimReview.html":{},"modules/ClaimReviewModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimreviewschemaraw",{"_index":474,"title":{},"body":{"classes/ClaimReview.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimreviewschemaraw.plugin(softdeleteplugin",{"_index":477,"title":{},"body":{"classes/ClaimReview.html":{}}}],["claimreviewschemaraw.virtual('sources",{"_index":476,"title":{},"body":{"classes/ClaimReview.html":{}}}],["claimreviewservice",{"_index":268,"title":{"injectables/ClaimReviewService.html":{}},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/StatsService.html":{},"coverage.html":{},"overview.html":{}}}],["claimrevision",{"_index":150,"title":{"classes/ClaimRevision.html":{}},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"coverage.html":{}}}],["claimrevision.name",{"_index":688,"title":{},"body":{"modules/ClaimRevisionModule.html":{},"miscellaneous/variables.html":{}}}],["claimrevisiondocument",{"_index":662,"title":{},"body":{"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"miscellaneous/typealiases.html":{}}}],["claimrevisionmodel",{"_index":687,"title":{},"body":{"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimrevisionmodule",{"_index":72,"title":{"modules/ClaimRevisionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/PersonalityModule.html":{},"modules.html":{},"overview.html":{}}}],["claimrevisionschema",{"_index":678,"title":{},"body":{"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimrevisionschemaraw",{"_index":675,"title":{},"body":{"classes/ClaimRevision.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimrevisionschemaraw.virtual('reviews",{"_index":677,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["claimrevisionservice",{"_index":683,"title":{"injectables/ClaimRevisionService.html":{}},"body":{"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"coverage.html":{},"overview.html":{}}}],["claimrevisionupdate",{"_index":775,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claims",{"_index":331,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/StatsService.html":{},"license.html":{}}}],["claims.dto",{"_index":287,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claims.dto.ts",{"_index":1011,"title":{},"body":{"classes/GetClaimsDTO.html":{},"coverage.html":{}}}],["claims.dto.ts:10",{"_index":1015,"title":{},"body":{"classes/GetClaimsDTO.html":{}}}],["claims.dto.ts:13",{"_index":1013,"title":{},"body":{"classes/GetClaimsDTO.html":{}}}],["claims.dto.ts:17",{"_index":1012,"title":{},"body":{"classes/GetClaimsDTO.html":{}}}],["claims.dto.ts:20",{"_index":1016,"title":{},"body":{"classes/GetClaimsDTO.html":{}}}],["claims.dto.ts:6",{"_index":1014,"title":{},"body":{"classes/GetClaimsDTO.html":{}}}],["claims.map((claim",{"_index":1595,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["claims.map(async",{"_index":795,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claimschema",{"_index":189,"title":{},"body":{"classes/Claim.html":{},"modules/ClaimModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimschemaraw",{"_index":179,"title":{},"body":{"classes/Claim.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimschemaraw.plugin(softdeleteplugin",{"_index":188,"title":{},"body":{"classes/Claim.html":{}}}],["claimschemaraw.virtual('revisions",{"_index":181,"title":{},"body":{"classes/Claim.html":{}}}],["claimschemaraw.virtual('sources",{"_index":186,"title":{},"body":{"classes/Claim.html":{}}}],["claimservice",{"_index":270,"title":{"injectables/ClaimService.html":{}},"body":{"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"injectables/ClaimService.html":{},"injectables/SitemapService.html":{},"injectables/StatsService.html":{},"coverage.html":{},"overview.html":{}}}],["claimslug",{"_index":390,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{}}}],["class",{"_index":95,"title":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"classes/Personality.html":{},"classes/Source.html":{},"classes/UpdateClaimDTO.html":{},"classes/User.html":{},"classes/WikidataCache.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"injectables/DisableBodyParserMiddleware.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"injectables/GetLanguageMiddleware.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/JsonBodyMiddleware.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"modules/OryModule.html":{},"injectables/OryService.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"dependencies.html":{},"license.html":{}}}],["classes",{"_index":143,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"classes/Personality.html":{},"classes/Source.html":{},"classes/UpdateClaimDTO.html":{},"classes/User.html":{},"classes/WikidataCache.html":{},"overview.html":{}}}],["classification",{"_index":442,"title":{},"body":{"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimReview.html":{},"classes/Source.html":{}}}],["classificationenum",{"_index":462,"title":{},"body":{"classes/ClaimReview.html":{},"classes/CreateClaimReview.html":{},"miscellaneous/enumerations.html":{}}}],["clean",{"_index":689,"title":{},"body":{"modules/ClaimRevisionModule.html":{}}}],["clear",{"_index":2790,"title":{},"body":{"license.html":{}}}],["clearly",{"_index":2442,"title":{},"body":{"license.html":{}}}],["client",{"_index":565,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["clone",{"_index":2328,"title":{},"body":{"index.html":{}}}],["closely",{"_index":3122,"title":{},"body":{"license.html":{}}}],["cluster_authmodule",{"_index":127,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":128,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":129,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_claimmodule",{"_index":424,"title":{},"body":{"modules/ClaimModule.html":{},"overview.html":{}}}],["cluster_claimmodule_exports",{"_index":426,"title":{},"body":{"modules/ClaimModule.html":{},"overview.html":{}}}],["cluster_claimmodule_imports",{"_index":425,"title":{},"body":{"modules/ClaimModule.html":{},"overview.html":{}}}],["cluster_claimmodule_providers",{"_index":427,"title":{},"body":{"modules/ClaimModule.html":{},"overview.html":{}}}],["cluster_claimreviewmodule",{"_index":505,"title":{},"body":{"modules/ClaimReviewModule.html":{},"overview.html":{}}}],["cluster_claimreviewmodule_exports",{"_index":507,"title":{},"body":{"modules/ClaimReviewModule.html":{},"overview.html":{}}}],["cluster_claimreviewmodule_imports",{"_index":506,"title":{},"body":{"modules/ClaimReviewModule.html":{}}}],["cluster_claimreviewmodule_providers",{"_index":508,"title":{},"body":{"modules/ClaimReviewModule.html":{},"overview.html":{}}}],["cluster_claimrevisionmodule",{"_index":679,"title":{},"body":{"modules/ClaimRevisionModule.html":{},"overview.html":{}}}],["cluster_claimrevisionmodule_exports",{"_index":680,"title":{},"body":{"modules/ClaimRevisionModule.html":{},"overview.html":{}}}],["cluster_claimrevisionmodule_imports",{"_index":681,"title":{},"body":{"modules/ClaimRevisionModule.html":{}}}],["cluster_claimrevisionmodule_providers",{"_index":682,"title":{},"body":{"modules/ClaimRevisionModule.html":{},"overview.html":{}}}],["cluster_emailmodule",{"_index":936,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_exports",{"_index":938,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_providers",{"_index":937,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_historymodule",{"_index":1068,"title":{},"body":{"modules/HistoryModule.html":{},"overview.html":{}}}],["cluster_historymodule_exports",{"_index":1070,"title":{},"body":{"modules/HistoryModule.html":{},"overview.html":{}}}],["cluster_historymodule_providers",{"_index":1069,"title":{},"body":{"modules/HistoryModule.html":{},"overview.html":{}}}],["cluster_homemodule",{"_index":1135,"title":{},"body":{"modules/HomeModule.html":{},"overview.html":{}}}],["cluster_homemodule_imports",{"_index":1136,"title":{},"body":{"modules/HomeModule.html":{},"overview.html":{}}}],["cluster_orymodule",{"_index":1254,"title":{},"body":{"modules/OryModule.html":{},"overview.html":{}}}],["cluster_orymodule_exports",{"_index":1255,"title":{},"body":{"modules/OryModule.html":{},"overview.html":{}}}],["cluster_orymodule_imports",{"_index":1256,"title":{},"body":{"modules/OryModule.html":{}}}],["cluster_orymodule_providers",{"_index":1257,"title":{},"body":{"modules/OryModule.html":{},"overview.html":{}}}],["cluster_parsermodule",{"_index":1306,"title":{},"body":{"modules/ParserModule.html":{},"overview.html":{}}}],["cluster_parsermodule_exports",{"_index":1307,"title":{},"body":{"modules/ParserModule.html":{},"overview.html":{}}}],["cluster_parsermodule_providers",{"_index":1308,"title":{},"body":{"modules/ParserModule.html":{},"overview.html":{}}}],["cluster_personalitymodule",{"_index":1483,"title":{},"body":{"modules/PersonalityModule.html":{},"overview.html":{}}}],["cluster_personalitymodule_exports",{"_index":1485,"title":{},"body":{"modules/PersonalityModule.html":{},"overview.html":{}}}],["cluster_personalitymodule_imports",{"_index":1486,"title":{},"body":{"modules/PersonalityModule.html":{},"overview.html":{}}}],["cluster_personalitymodule_providers",{"_index":1484,"title":{},"body":{"modules/PersonalityModule.html":{},"overview.html":{}}}],["cluster_sitemapmodule",{"_index":1680,"title":{},"body":{"modules/SitemapModule.html":{},"overview.html":{}}}],["cluster_sitemapmodule_exports",{"_index":1682,"title":{},"body":{"modules/SitemapModule.html":{},"overview.html":{}}}],["cluster_sitemapmodule_imports",{"_index":1681,"title":{},"body":{"modules/SitemapModule.html":{}}}],["cluster_sitemapmodule_providers",{"_index":1683,"title":{},"body":{"modules/SitemapModule.html":{},"overview.html":{}}}],["cluster_sourcemodule",{"_index":1765,"title":{},"body":{"modules/SourceModule.html":{},"overview.html":{}}}],["cluster_sourcemodule_exports",{"_index":1766,"title":{},"body":{"modules/SourceModule.html":{},"overview.html":{}}}],["cluster_sourcemodule_providers",{"_index":1767,"title":{},"body":{"modules/SourceModule.html":{},"overview.html":{}}}],["cluster_statsmodule",{"_index":1796,"title":{},"body":{"modules/StatsModule.html":{},"overview.html":{}}}],["cluster_statsmodule_exports",{"_index":1799,"title":{},"body":{"modules/StatsModule.html":{},"overview.html":{}}}],["cluster_statsmodule_imports",{"_index":1797,"title":{},"body":{"modules/StatsModule.html":{}}}],["cluster_statsmodule_providers",{"_index":1798,"title":{},"body":{"modules/StatsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1885,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1887,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":1888,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1886,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_viewmodule",{"_index":2007,"title":{},"body":{"modules/ViewModule.html":{},"overview.html":{}}}],["cluster_viewmodule_exports",{"_index":2008,"title":{},"body":{"modules/ViewModule.html":{},"overview.html":{}}}],["cluster_viewmodule_providers",{"_index":2009,"title":{},"body":{"modules/ViewModule.html":{},"overview.html":{}}}],["cluster_wikidatamodule",{"_index":2042,"title":{},"body":{"modules/WikidataModule.html":{},"overview.html":{}}}],["cluster_wikidatamodule_exports",{"_index":2044,"title":{},"body":{"modules/WikidataModule.html":{},"overview.html":{}}}],["cluster_wikidatamodule_providers",{"_index":2043,"title":{},"body":{"modules/WikidataModule.html":{},"overview.html":{}}}],["code",{"_index":1703,"title":{},"body":{"injectables/SitemapService.html":{},"controllers/ViewController.html":{},"license.html":{}}}],["codeofconductpage",{"_index":1963,"title":{},"body":{"controllers/ViewController.html":{}}}],["codeofconductpage(@req",{"_index":2002,"title":{},"body":{"controllers/ViewController.html":{}}}],["codeofconductpage(req",{"_index":1971,"title":{},"body":{"controllers/ViewController.html":{}}}],["collect",{"_index":3060,"title":{},"body":{"license.html":{}}}],["combate",{"_index":2322,"title":{},"body":{"index.html":{}}}],["combination",{"_index":1090,"title":{},"body":{"injectables/HistoryService.html":{},"license.html":{}}}],["combine",{"_index":3064,"title":{},"body":{"license.html":{}}}],["combined",{"_index":2744,"title":{},"body":{"license.html":{}}}],["combinedlistall",{"_index":1493,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["combinedlistall(query",{"_index":1500,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["comes",{"_index":2730,"title":{},"body":{"license.html":{}}}],["commands",{"_index":2569,"title":{},"body":{"license.html":{}}}],["commercial",{"_index":2833,"title":{},"body":{"license.html":{}}}],["commitment",{"_index":3006,"title":{},"body":{"license.html":{}}}],["common",{"_index":2827,"title":{},"body":{"license.html":{}}}],["communication",{"_index":2629,"title":{},"body":{"license.html":{}}}],["compilation",{"_index":2739,"title":{},"body":{"license.html":{}}}],["compilation's",{"_index":2748,"title":{},"body":{"license.html":{}}}],["compilations",{"_index":3043,"title":{},"body":{"license.html":{}}}],["compiler",{"_index":2607,"title":{},"body":{"license.html":{}}}],["compliance",{"_index":2965,"title":{},"body":{"license.html":{}}}],["comply",{"_index":2659,"title":{},"body":{"license.html":{}}}],["compodoc/compodoc",{"_index":2215,"title":{},"body":{"dependencies.html":{}}}],["component",{"_index":2595,"title":{},"body":{"license.html":{}}}],["components",{"_index":2307,"title":{},"body":{"dependencies.html":{}}}],["compose",{"_index":2336,"title":{},"body":{"index.html":{}}}],["compromise",{"_index":2245,"title":{},"body":{"dependencies.html":{}}}],["computer",{"_index":2537,"title":{},"body":{"license.html":{}}}],["computers",{"_index":2489,"title":{},"body":{"license.html":{}}}],["com|net|org|io|gov)/g",{"_index":1359,"title":{},"body":{"injectables/ParserService.html":{}}}],["concerning",{"_index":3066,"title":{},"body":{"license.html":{}}}],["concerns",{"_index":3073,"title":{},"body":{"license.html":{}}}],["conditioned",{"_index":3037,"title":{},"body":{"license.html":{}}}],["conditions",{"_index":2498,"title":{},"body":{"license.html":{}}}],["conduct",{"_index":1704,"title":{},"body":{"injectables/SitemapService.html":{},"controllers/ViewController.html":{}}}],["config",{"_index":1301,"title":{},"body":{"injectables/OryService.html":{}}}],["configmodule",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/UsersModule.html":{}}}],["configmodule.forroot",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":274,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/EmailService.html":{},"controllers/OryController.html":{},"modules/OryModule.html":{},"injectables/OryService.html":{},"guards/SessionGuard.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["configservice.get(\"disable_smtp",{"_index":3261,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get(\"users",{"_index":3259,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configuration",{"_index":1277,"title":{},"body":{"injectables/OryService.html":{},"guards/SessionGuard.html":{}}}],["configure",{"_index":9,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":10,"title":{},"body":{"modules/AppModule.html":{}}}],["conflicts",{"_index":1982,"title":{},"body":{"controllers/ViewController.html":{}}}],["connect",{"_index":2249,"title":{},"body":{"dependencies.html":{}}}],["connection",{"_index":3027,"title":{},"body":{"license.html":{}}}],["connection_uri",{"_index":3248,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consent",{"_index":2279,"title":{},"body":{"dependencies.html":{}}}],["consequence",{"_index":2952,"title":{},"body":{"license.html":{}}}],["consequential",{"_index":3104,"title":{},"body":{"license.html":{}}}],["consider",{"_index":3167,"title":{},"body":{"license.html":{}}}],["considered",{"_index":2910,"title":{},"body":{"license.html":{}}}],["consistent",{"_index":2999,"title":{},"body":{"license.html":{}}}],["conspicuously",{"_index":2708,"title":{},"body":{"license.html":{}}}],["const",{"_index":178,"title":{},"body":{"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"injectables/OryService.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["constantly",{"_index":2484,"title":{},"body":{"license.html":{}}}],["constitutes",{"_index":2648,"title":{},"body":{"license.html":{}}}],["constructor",{"_index":298,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"controllers/OryController.html":{},"injectables/OryService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"injectables/SitemapService.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{}}}],["constructor(claimreviewmodel",{"_index":530,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["constructor(claimreviewservice",{"_index":1803,"title":{},"body":{"injectables/StatsService.html":{}}}],["constructor(claimrevisionmodel",{"_index":697,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["constructor(configservice",{"_index":946,"title":{},"body":{"injectables/EmailService.html":{},"injectables/OryService.html":{},"guards/SessionGuard.html":{}}}],["constructor(historymodel",{"_index":1081,"title":{},"body":{"injectables/HistoryService.html":{}}}],["constructor(logger",{"_index":1176,"title":{},"body":{"classes/Logger.html":{}}}],["constructor(personalityservice",{"_index":1687,"title":{},"body":{"injectables/SitemapService.html":{}}}],["constructor(private",{"_index":1280,"title":{},"body":{"injectables/OryService.html":{},"controllers/SitemapController.html":{},"controllers/SourceController.html":{},"controllers/ViewController.html":{}}}],["constructor(req",{"_index":750,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["constructor(sourcemodel",{"_index":1775,"title":{},"body":{"injectables/SourceService.html":{}}}],["constructor(usermodel",{"_index":1152,"title":{},"body":{"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["constructor(wikidatacache",{"_index":2061,"title":{},"body":{"injectables/WikidataService.html":{}}}],["construed",{"_index":3048,"title":{},"body":{"license.html":{}}}],["consumer",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"license.html":{}}}],["contact",{"_index":3146,"title":{},"body":{"license.html":{}}}],["contain",{"_index":3044,"title":{},"body":{"license.html":{}}}],["containing",{"_index":2892,"title":{},"body":{"license.html":{}}}],["contains",{"_index":2914,"title":{},"body":{"license.html":{}}}],["content",{"_index":653,"title":{},"body":{"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"classes/CreateClaimDTO.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["contentlength",{"_index":1210,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["contents",{"_index":3003,"title":{},"body":{"license.html":{}}}],["context",{"_index":1179,"title":{},"body":{"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"guards/SessionGuard.html":{},"license.html":{}}}],["context.gethandler",{"_index":1639,"title":{},"body":{"guards/SessionGuard.html":{}}}],["context.getresponse",{"_index":1229,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["context.switchtohttp",{"_index":1641,"title":{},"body":{"guards/SessionGuard.html":{}}}],["continue",{"_index":2860,"title":{},"body":{"license.html":{}}}],["continued",{"_index":2845,"title":{},"body":{"license.html":{}}}],["continuing",{"_index":3294,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contractual",{"_index":2907,"title":{},"body":{"license.html":{}}}],["contradict",{"_index":3054,"title":{},"body":{"license.html":{}}}],["contrast",{"_index":2383,"title":{},"body":{"license.html":{}}}],["contributor",{"_index":2990,"title":{},"body":{"license.html":{}}}],["contributor's",{"_index":2992,"title":{},"body":{"license.html":{}}}],["control",{"_index":2614,"title":{},"body":{"license.html":{}}}],["controlled",{"_index":2994,"title":{},"body":{"license.html":{}}}],["controller",{"_index":190,"title":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/HistoryController.html":{},"controllers/HomeController.html":{},"controllers/OryController.html":{},"controllers/PersonalityController.html":{},"controllers/RootController.html":{},"controllers/SitemapController.html":{},"controllers/SourceController.html":{},"controllers/StatsController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/HistoryController.html":{},"controllers/HomeController.html":{},"controllers/OryController.html":{},"controllers/PersonalityController.html":{},"controllers/RootController.html":{},"controllers/SitemapController.html":{},"controllers/SourceController.html":{},"controllers/StatsController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"coverage.html":{}}}],["controller(\"api",{"_index":1616,"title":{},"body":{"controllers/RootController.html":{}}}],["controller(\"api/claimreview",{"_index":494,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["controller(\"api/stats",{"_index":1795,"title":{},"body":{"controllers/StatsController.html":{}}}],["controllers",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"controllers/OryController.html":{},"modules/OryModule.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"controllers/RootController.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"overview.html":{}}}],["controllers:[historycontroller",{"_index":1076,"title":{},"body":{"modules/HistoryModule.html":{}}}],["convenient",{"_index":2559,"title":{},"body":{"license.html":{}}}],["convert",{"_index":725,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{}}}],["convey",{"_index":2545,"title":{},"body":{"license.html":{}}}],["conveyance",{"_index":3031,"title":{},"body":{"license.html":{}}}],["conveyed",{"_index":2855,"title":{},"body":{"license.html":{}}}],["conveying",{"_index":2553,"title":{},"body":{"license.html":{}}}],["conveys",{"_index":2906,"title":{},"body":{"license.html":{}}}],["cookie",{"_index":2252,"title":{},"body":{"dependencies.html":{}}}],["cookieparser",{"_index":2187,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["cookies",{"_index":1288,"title":{},"body":{"injectables/OryService.html":{}}}],["copies",{"_index":2371,"title":{},"body":{"license.html":{}}}],["copy",{"_index":2368,"title":{},"body":{"license.html":{}}}],["copying",{"_index":2499,"title":{},"body":{"license.html":{}}}],["copyleft",{"_index":2374,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":2359,"title":{},"body":{"license.html":{}}}],["copyrightable",{"_index":2508,"title":{},"body":{"license.html":{}}}],["copyrighted",{"_index":2664,"title":{},"body":{"license.html":{}}}],["correction",{"_index":3098,"title":{},"body":{"license.html":{}}}],["corresponding",{"_index":2610,"title":{},"body":{"license.html":{}}}],["cors",{"_index":1290,"title":{},"body":{"injectables/OryService.html":{},"miscellaneous/variables.html":{}}}],["corsoptions",{"_index":3210,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cost",{"_index":2774,"title":{},"body":{"license.html":{}}}],["count",{"_index":523,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/UtilService.html":{}}}],["count(query",{"_index":550,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["countdown",{"_index":2281,"title":{},"body":{"dependencies.html":{}}}],["counterclaim",{"_index":2983,"title":{},"body":{"license.html":{}}}],["countreviewsbysentencehash",{"_index":524,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["countreviewsbysentencehash(sentencehash",{"_index":554,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["countries",{"_index":2542,"title":{},"body":{"license.html":{}}}],["country",{"_index":3021,"title":{},"body":{"license.html":{}}}],["course",{"_index":3157,"title":{},"body":{"license.html":{}}}],["court",{"_index":3053,"title":{},"body":{"license.html":{}}}],["courts",{"_index":3121,"title":{},"body":{"license.html":{}}}],["covenant",{"_index":3009,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":2160,"title":{"coverage.html":{}},"body":{"coverage.html":{},"license.html":{}}}],["covered",{"_index":2525,"title":{},"body":{"license.html":{}}}],["create",{"_index":198,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"injectables/SourceService.html":{},"classes/UpdateClaimDTO.html":{},"miscellaneous/enumerations.html":{}}}],["create(@body",{"_index":335,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/PersonalityController.html":{}}}],["create(claim",{"_index":759,"title":{},"body":{"injectables/ClaimService.html":{}}}],["create(claimid",{"_index":700,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["create(claimreview",{"_index":556,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["create(createclaimdto",{"_index":226,"title":{},"body":{"controllers/ClaimController.html":{}}}],["create(createclaimreview",{"_index":484,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["create(createpersonality",{"_index":1414,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["create(data",{"_index":1777,"title":{},"body":{"injectables/SourceService.html":{}}}],["create(personality",{"_index":1503,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["createclaimdto",{"_index":227,"title":{"classes/CreateClaimDTO.html":{}},"body":{"controllers/ClaimController.html":{},"classes/CreateClaimDTO.html":{},"classes/UpdateClaimDTO.html":{},"coverage.html":{}}}],["createclaimdto.recaptcha",{"_index":339,"title":{},"body":{"controllers/ClaimController.html":{}}}],["createclaimreview",{"_index":485,"title":{"classes/CreateClaimReview.html":{}},"body":{"controllers/ClaimReviewController.html":{},"classes/CreateClaimReview.html":{},"coverage.html":{}}}],["createclaimreview.recaptcha",{"_index":495,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["createdat",{"_index":2032,"title":{},"body":{"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["createhistory",{"_index":1078,"title":{},"body":{"injectables/HistoryService.html":{}}}],["createhistory(data",{"_index":1083,"title":{},"body":{"injectables/HistoryService.html":{}}}],["createidentity",{"_index":1263,"title":{},"body":{"injectables/OryService.html":{}}}],["createidentity(user",{"_index":1266,"title":{},"body":{"injectables/OryService.html":{}}}],["createparagraphid",{"_index":1315,"title":{},"body":{"injectables/ParserService.html":{}}}],["createpersonality",{"_index":909,"title":{"classes/CreatePersonality.html":{}},"body":{"classes/CreatePersonality.html":{},"controllers/PersonalityController.html":{},"coverage.html":{}}}],["creates",{"_index":559,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["createsentenceid",{"_index":1316,"title":{},"body":{"injectables/ParserService.html":{}}}],["createserver",{"_index":2021,"title":{},"body":{"injectables/ViewService.html":{}}}],["createtransport",{"_index":943,"title":{},"body":{"injectables/EmailService.html":{}}}],["creation",{"_index":561,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["credenciais",{"_index":3286,"title":{},"body":{"miscellaneous/variables.html":{}}}],["credentials",{"_index":1300,"title":{},"body":{"injectables/OryService.html":{},"miscellaneous/variables.html":{}}}],["criterion",{"_index":2573,"title":{},"body":{"license.html":{}}}],["cross",{"_index":2982,"title":{},"body":{"license.html":{}}}],["crowd",{"_index":3180,"title":{},"body":{"properties.html":{}}}],["cure",{"_index":2944,"title":{},"body":{"license.html":{}}}],["currentpassword",{"_index":1865,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["custom",{"_index":1218,"title":{},"body":{"classes/NotFoundFilter.html":{},"controllers/ViewController.html":{}}}],["customarily",{"_index":2764,"title":{},"body":{"license.html":{}}}],["customer",{"_index":2770,"title":{},"body":{"license.html":{}}}],["d",{"_index":2337,"title":{},"body":{"index.html":{},"license.html":{}}}],["damages",{"_index":3102,"title":{},"body":{"license.html":{}}}],["danger",{"_index":2491,"title":{},"body":{"license.html":{}}}],["data",{"_index":301,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/OryService.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"injectables/SourceService.html":{},"injectables/UsersService.html":{},"injectables/WikidataService.html":{},"license.html":{}}}],["data.entities",{"_index":2099,"title":{},"body":{"injectables/WikidataService.html":{}}}],["data.query",{"_index":2158,"title":{},"body":{"injectables/WikidataService.html":{}}}],["data.targetid",{"_index":1781,"title":{},"body":{"injectables/SourceService.html":{}}}],["data.user",{"_index":1783,"title":{},"body":{"injectables/SourceService.html":{}}}],["database",{"_index":572,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{}}}],["dataid",{"_index":1099,"title":{},"body":{"injectables/HistoryService.html":{}}}],["date",{"_index":383,"title":{},"body":{"controllers/ClaimController.html":{},"classes/ClaimRevision.html":{},"classes/CreateClaimDTO.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"classes/WikidataCache.html":{},"license.html":{}}}],["date.now",{"_index":2039,"title":{},"body":{"classes/WikidataCache.html":{}}}],["days",{"_index":2939,"title":{},"body":{"license.html":{}}}],["db",{"_index":2333,"title":{},"body":{"index.html":{}}}],["de",{"_index":1106,"title":{},"body":{"injectables/HistoryService.html":{},"index.html":{}}}],["debug",{"_index":1172,"title":{},"body":{"classes/Logger.html":{}}}],["debug(message",{"_index":1178,"title":{},"body":{"classes/Logger.html":{}}}],["december",{"_index":2689,"title":{},"body":{"license.html":{}}}],["decide",{"_index":3082,"title":{},"body":{"license.html":{}}}],["declining",{"_index":2898,"title":{},"body":{"license.html":{}}}],["decorators",{"_index":151,"title":{},"body":{"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"classes/ClaimRevision.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"controllers/HomeController.html":{},"controllers/OryController.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"controllers/RootController.html":{},"controllers/SitemapController.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"controllers/StatsController.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"classes/WikidataCache.html":{}}}],["decorators/is",{"_index":292,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/HomeController.html":{},"controllers/OryController.html":{},"controllers/PersonalityController.html":{},"controllers/RootController.html":{},"controllers/SitemapController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["deemed",{"_index":2677,"title":{},"body":{"license.html":{}}}],["default",{"_index":552,"title":{},"body":{"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"injectables/HistoryService.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"modules/OryModule.html":{},"injectables/OryService.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/SourceService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":727,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{}}}],["defective",{"_index":3094,"title":{},"body":{"license.html":{}}}],["defenses",{"_index":3051,"title":{},"body":{"license.html":{}}}],["defined",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"injectables/GetLanguageMiddleware.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"injectables/JsonBodyMiddleware.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"injectables/OryService.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{},"license.html":{}}}],["definition",{"_index":2619,"title":{},"body":{"license.html":{}}}],["definitions",{"_index":2502,"title":{},"body":{"license.html":{}}}],["delete",{"_index":199,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"injectables/OryService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"miscellaneous/enumerations.html":{}}}],["delete(\":id",{"_index":502,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["delete(\"api/claim/:id",{"_index":354,"title":{},"body":{"controllers/ClaimController.html":{}}}],["delete(\"api/personality/:id",{"_index":1468,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["delete(':id",{"_index":488,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["delete('api/claim/:id",{"_index":231,"title":{},"body":{"controllers/ClaimController.html":{}}}],["delete('api/personality/:id",{"_index":1418,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["delete(@param",{"_index":503,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["delete(@param(\"id",{"_index":355,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{}}}],["delete(claimid",{"_index":230,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{}}}],["delete(claimreviewid",{"_index":567,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["delete(params",{"_index":487,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["delete(personalityid",{"_index":1417,"title":{},"body":{"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["deleted",{"_index":1471,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["deleteidentity",{"_index":1264,"title":{},"body":{"injectables/OryService.html":{}}}],["deleteidentity(identityid",{"_index":1270,"title":{},"body":{"injectables/OryService.html":{}}}],["deletion",{"_index":570,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["denied",{"_index":2862,"title":{},"body":{"license.html":{}}}],["denominated",{"_index":3007,"title":{},"body":{"license.html":{}}}],["deny",{"_index":2454,"title":{},"body":{"license.html":{}}}],["denying",{"_index":2413,"title":{},"body":{"license.html":{}}}],["dependencies",{"_index":126,"title":{"dependencies.html":{}},"body":{"modules/AuthModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/HomeModule.html":{},"modules/OryModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deprecated",{"_index":1854,"title":{},"body":{"controllers/UsersController.html":{}}}],["deprive",{"_index":3016,"title":{},"body":{"license.html":{}}}],["desc",{"_index":360,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/HistoryService.html":{}}}],["description",{"_index":562,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreatePersonality.html":{},"injectables/HistoryService.html":{},"classes/NotFoundFilter.html":{},"classes/Personality.html":{},"injectables/PersonalityService.html":{},"classes/Source.html":{},"injectables/WikidataService.html":{},"properties.html":{}}}],["descriptions",{"_index":2109,"title":{},"body":{"injectables/WikidataService.html":{}}}],["design/icons",{"_index":2209,"title":{},"body":{"dependencies.html":{}}}],["designated",{"_index":2782,"title":{},"body":{"license.html":{}}}],["designed",{"_index":2379,"title":{},"body":{"license.html":{}}}],["detail",{"_index":3071,"title":{},"body":{"license.html":{}}}],["details",{"_index":1033,"title":{},"body":{"classes/History.html":{},"injectables/HistoryService.html":{},"license.html":{}}}],["details.the",{"_index":3155,"title":{},"body":{"license.html":{}}}],["determining",{"_index":2821,"title":{},"body":{"license.html":{}}}],["dev",{"_index":2024,"title":{},"body":{"injectables/ViewService.html":{},"index.html":{}}}],["develop",{"_index":3130,"title":{},"body":{"license.html":{}}}],["developers",{"_index":2431,"title":{},"body":{"license.html":{}}}],["development",{"_index":2345,"title":{},"body":{"index.html":{},"license.html":{}}}],["devices",{"_index":2453,"title":{},"body":{"license.html":{}}}],["dhaiwat10/react",{"_index":2217,"title":{},"body":{"dependencies.html":{}}}],["differ",{"_index":3070,"title":{},"body":{"license.html":{}}}],["different",{"_index":2785,"title":{},"body":{"license.html":{}}}],["differently",{"_index":2886,"title":{},"body":{"license.html":{}}}],["dir",{"_index":2027,"title":{},"body":{"injectables/ViewService.html":{}}}],["direction",{"_index":2663,"title":{},"body":{"license.html":{}}}],["directions",{"_index":2791,"title":{},"body":{"license.html":{}}}],["directly",{"_index":2530,"title":{},"body":{"license.html":{}}}],["disable",{"_index":1581,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["disablebodyparsermiddleware",{"_index":85,"title":{"injectables/DisableBodyParserMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/DisableBodyParserMiddleware.html":{},"coverage.html":{}}}],["disablesmtp",{"_index":3260,"title":{},"body":{"miscellaneous/variables.html":{}}}],["disclaim",{"_index":2700,"title":{},"body":{"license.html":{}}}],["disclaimer",{"_index":3085,"title":{},"body":{"license.html":{}}}],["disclaiming",{"_index":2883,"title":{},"body":{"license.html":{}}}],["discriminatory",{"_index":3035,"title":{},"body":{"license.html":{}}}],["discursos",{"_index":2319,"title":{},"body":{"index.html":{}}}],["display",{"_index":2738,"title":{},"body":{"license.html":{}}}],["displayed",{"_index":2891,"title":{},"body":{"license.html":{}}}],["displays",{"_index":2555,"title":{},"body":{"license.html":{}}}],["distinguishing",{"_index":3074,"title":{},"body":{"license.html":{}}}],["distribute",{"_index":2369,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":3142,"title":{},"body":{"license.html":{}}}],["distributing",{"_index":3039,"title":{},"body":{"license.html":{}}}],["distribution",{"_index":2500,"title":{},"body":{"license.html":{}}}],["docker:docker",{"_index":2335,"title":{},"body":{"index.html":{}}}],["document",{"_index":1085,"title":{},"body":{"injectables/HistoryService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"classes/WikidataCache.html":{},"license.html":{}}}],["documentation",{"_index":2161,"title":{},"body":{"coverage.html":{}}}],["documented",{"_index":2870,"title":{},"body":{"license.html":{}}}],["doesn't",{"_index":571,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"controllers/UsersController.html":{}}}],["dom",{"_index":2283,"title":{},"body":{"dependencies.html":{}}}],["domains",{"_index":2476,"title":{},"body":{"license.html":{}}}],["domino",{"_index":2254,"title":{},"body":{"dependencies.html":{}}}],["doubtful",{"_index":2822,"title":{},"body":{"license.html":{}}}],["downstream",{"_index":2962,"title":{},"body":{"license.html":{}}}],["draft",{"_index":2256,"title":{},"body":{"dependencies.html":{}}}],["dto/create",{"_index":284,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/PersonalityController.html":{}}}],["dto/get",{"_index":286,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{}}}],["dto/update",{"_index":290,"title":{},"body":{"controllers/ClaimController.html":{}}}],["duplicate",{"_index":1937,"title":{},"body":{"injectables/UtilService.html":{}}}],["durable",{"_index":2763,"title":{},"body":{"license.html":{}}}],["dwelling",{"_index":2820,"title":{},"body":{"license.html":{}}}],["dynamic",{"_index":1737,"title":{},"body":{"classes/Source.html":{}}}],["dynamically",{"_index":2623,"title":{},"body":{"license.html":{}}}],["dynamicmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{}}}],["e",{"_index":741,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/EmailService.html":{},"guards/SessionGuard.html":{},"injectables/SitemapService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["e.message",{"_index":1729,"title":{},"body":{"injectables/SitemapService.html":{},"controllers/UsersController.html":{}}}],["each",{"_index":2511,"title":{},"body":{"license.html":{}}}],["earlier",{"_index":2524,"title":{},"body":{"license.html":{}}}],["effect",{"_index":3118,"title":{},"body":{"license.html":{}}}],["effected",{"_index":2698,"title":{},"body":{"license.html":{}}}],["effective",{"_index":2678,"title":{},"body":{"license.html":{}}}],["effectively",{"_index":2493,"title":{},"body":{"license.html":{}}}],["efforts",{"_index":2976,"title":{},"body":{"license.html":{}}}],["electronic",{"_index":3147,"title":{},"body":{"license.html":{}}}],["email",{"_index":1168,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/OryService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["email.service",{"_index":941,"title":{},"body":{"modules/EmailModule.html":{}}}],["email/email.module",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["emailmodule",{"_index":59,"title":{"modules/EmailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EmailModule.html":{},"modules.html":{},"overview.html":{}}}],["emailresponse",{"_index":3276,"title":{},"body":{"miscellaneous/variables.html":{}}}],["emailresult",{"_index":992,"title":{},"body":{"injectables/EmailService.html":{}}}],["emailservice",{"_index":939,"title":{"injectables/EmailService.html":{}},"body":{"modules/EmailModule.html":{},"injectables/EmailService.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["emailservice.sendemail",{"_index":3277,"title":{},"body":{"miscellaneous/variables.html":{}}}],["embodied",{"_index":2758,"title":{},"body":{"license.html":{}}}],["employer",{"_index":3160,"title":{},"body":{"license.html":{}}}],["en",{"_index":1021,"title":{},"body":{"injectables/GetLanguageMiddleware.html":{},"injectables/PersonalityService.html":{},"injectables/WikidataService.html":{}}}],["enable",{"_index":2598,"title":{},"body":{"license.html":{}}}],["enableimplicitconversion",{"_index":3222,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enables",{"_index":2547,"title":{},"body":{"license.html":{}}}],["encodeuricomponent(params.wikidataid",{"_index":2094,"title":{},"body":{"injectables/WikidataService.html":{}}}],["encoding",{"_index":969,"title":{},"body":{"injectables/EmailService.html":{}}}],["end",{"_index":3129,"title":{},"body":{"license.html":{}}}],["enforce",{"_index":3008,"title":{},"body":{"license.html":{}}}],["enforcing",{"_index":2703,"title":{},"body":{"license.html":{}}}],["engine",{"_index":1728,"title":{},"body":{"injectables/SitemapService.html":{}}}],["english/javascript",{"_index":1936,"title":{},"body":{"injectables/UtilService.html":{}}}],["ensure",{"_index":2796,"title":{},"body":{"license.html":{}}}],["ensures",{"_index":1287,"title":{},"body":{"injectables/OryService.html":{}}}],["entered",{"_index":3045,"title":{},"body":{"license.html":{}}}],["entire",{"_index":2728,"title":{},"body":{"license.html":{}}}],["entirely",{"_index":3062,"title":{},"body":{"license.html":{}}}],["entities",{"_index":2098,"title":{},"body":{"injectables/WikidataService.html":{}}}],["entities[params.wikidataid",{"_index":2101,"title":{},"body":{"injectables/WikidataService.html":{}}}],["entity",{"_index":2966,"title":{},"body":{"license.html":{}}}],["enum",{"_index":461,"title":{},"body":{"classes/ClaimReview.html":{},"classes/History.html":{},"classes/Source.html":{}}}],["enumerations",{"_index":2310,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["equal",{"_index":577,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["equivalent",{"_index":2651,"title":{},"body":{"license.html":{}}}],["err",{"_index":1553,"title":{},"body":{"injectables/PersonalityService.html":{},"controllers/UsersController.html":{}}}],["erroneously",{"_index":2452,"title":{},"body":{"license.html":{}}}],["error",{"_index":344,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"controllers/PersonalityController.html":{},"injectables/SitemapService.html":{},"injectables/ViewService.html":{},"miscellaneous/variables.html":{}}}],["error(\"invalid",{"_index":1871,"title":{},"body":{"controllers/UsersController.html":{}}}],["error(\"repeated",{"_index":1872,"title":{},"body":{"controllers/UsersController.html":{}}}],["error(message",{"_index":1182,"title":{},"body":{"classes/Logger.html":{}}}],["error.keypattern",{"_index":1453,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["error.keypattern.wikidata",{"_index":1454,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["error.keyvalue.wikidata",{"_index":1456,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["error.message",{"_index":1455,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["error.name",{"_index":1451,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["errorformat",{"_index":2140,"title":{},"body":{"injectables/WikidataService.html":{}}}],["eslint",{"_index":1580,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["eslint/eslint",{"_index":2234,"title":{},"body":{"dependencies.html":{}}}],["essential",{"_index":2601,"title":{},"body":{"license.html":{}}}],["even",{"_index":3114,"title":{},"body":{"license.html":{}}}],["event",{"_index":3100,"title":{},"body":{"license.html":{}}}],["everyone",{"_index":2366,"title":{},"body":{"license.html":{}}}],["exact",{"_index":2521,"title":{},"body":{"license.html":{}}}],["exaggerated",{"_index":467,"title":{},"body":{"classes/ClaimReview.html":{},"miscellaneous/enumerations.html":{}}}],["example",{"_index":2421,"title":{},"body":{"license.html":{}}}],["except",{"_index":732,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{},"license.html":{}}}],["exception",{"_index":1226,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["exceptionfilter",{"_index":1222,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["exceptions",{"_index":1216,"title":{},"body":{"classes/NotFoundFilter.html":{},"license.html":{}}}],["excluded",{"_index":2810,"title":{},"body":{"license.html":{}}}],["excluding",{"_index":3049,"title":{},"body":{"license.html":{}}}],["exclusion",{"_index":3139,"title":{},"body":{"license.html":{}}}],["exclusive",{"_index":3000,"title":{},"body":{"license.html":{}}}],["exclusively",{"_index":2657,"title":{},"body":{"license.html":{}}}],["excuse",{"_index":3055,"title":{},"body":{"license.html":{}}}],["exec",{"_index":2084,"title":{},"body":{"injectables/WikidataService.html":{}}}],["executable",{"_index":2589,"title":{},"body":{"license.html":{}}}],["execute",{"_index":2843,"title":{},"body":{"license.html":{}}}],["executing",{"_index":2536,"title":{},"body":{"license.html":{}}}],["executioncontext",{"_index":1634,"title":{},"body":{"guards/SessionGuard.html":{}}}],["exercise",{"_index":2977,"title":{},"body":{"license.html":{}}}],["exercising",{"_index":2699,"title":{},"body":{"license.html":{}}}],["exists",{"_index":1458,"title":{},"body":{"controllers/PersonalityController.html":{},"injectables/WikidataService.html":{}}}],["expected",{"_index":2831,"title":{},"body":{"license.html":{}}}],["expects",{"_index":2830,"title":{},"body":{"license.html":{}}}],["expireafterseconds",{"_index":2051,"title":{},"body":{"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["explains",{"_index":2443,"title":{},"body":{"license.html":{}}}],["explicitly",{"_index":2642,"title":{},"body":{"license.html":{}}}],["export",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"injectables/DisableBodyParserMiddleware.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"injectables/GetLanguageMiddleware.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/JsonBodyMiddleware.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"modules/OryModule.html":{},"injectables/OryService.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"dependencies.html":{}}}],["exports",{"_index":430,"title":{},"body":{"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/OryModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{}}}],["express",{"_index":277,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/GetLanguageMiddleware.html":{},"controllers/HomeController.html":{},"injectables/JsonBodyMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"dependencies.html":{},"license.html":{}}}],["expressed",{"_index":3087,"title":{},"body":{"license.html":{}}}],["expressly",{"_index":2923,"title":{},"body":{"license.html":{}}}],["extend",{"_index":2479,"title":{},"body":{"license.html":{}}}],["extended",{"_index":3034,"title":{},"body":{"license.html":{}}}],["extends",{"_index":1149,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateClaimDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{}}}],["extensions",{"_index":2743,"title":{},"body":{"license.html":{}}}],["extent",{"_index":2558,"title":{},"body":{"license.html":{}}}],["extract",{"_index":1380,"title":{},"body":{"injectables/ParserService.html":{},"injectables/WikidataService.html":{}}}],["extractclaimwithtextsummary",{"_index":1494,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["extractclaimwithtextsummary(claims",{"_index":1507,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["extractproperties",{"_index":2054,"title":{},"body":{"injectables/WikidataService.html":{}}}],["extractproperties(wikidata",{"_index":2063,"title":{},"body":{"injectables/WikidataService.html":{}}}],["extractvalue",{"_index":2055,"title":{},"body":{"injectables/WikidataService.html":{}}}],["extractvalue(wikidata",{"_index":2065,"title":{},"body":{"injectables/WikidataService.html":{}}}],["f",{"_index":2904,"title":{},"body":{"license.html":{}}}],["facilities",{"_index":2658,"title":{},"body":{"license.html":{}}}],["fact",{"_index":463,"title":{},"body":{"classes/ClaimReview.html":{},"miscellaneous/enumerations.html":{},"properties.html":{}}}],["fails",{"_index":2935,"title":{},"body":{"license.html":{}}}],["failure",{"_index":3112,"title":{},"body":{"license.html":{}}}],["fair",{"_index":2650,"title":{},"body":{"license.html":{}}}],["fake",{"_index":2323,"title":{},"body":{"index.html":{}}}],["fake\"].indexof",{"_index":1745,"title":{},"body":{"classes/Source.html":{}}}],["false",{"_index":373,"title":{},"body":{"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"injectables/SitemapService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/WikidataService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["family",{"_index":2815,"title":{},"body":{"license.html":{}}}],["fashion",{"_index":2518,"title":{},"body":{"license.html":{}}}],["favor",{"_index":2825,"title":{},"body":{"license.html":{}}}],["feature",{"_index":2562,"title":{},"body":{"license.html":{}}}],["fee",{"_index":2425,"title":{},"body":{"license.html":{}}}],["fetch",{"_index":837,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["fetchonly",{"_index":1132,"title":{},"body":{"controllers/HomeController.html":{}}}],["fetchproperties",{"_index":2056,"title":{},"body":{"injectables/WikidataService.html":{}}}],["fetchproperties(params",{"_index":2067,"title":{},"body":{"injectables/WikidataService.html":{}}}],["field",{"_index":670,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["field(after",{"_index":1044,"title":{},"body":{"classes/History.html":{}}}],["file",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"injectables/DisableBodyParserMiddleware.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"injectables/GetLanguageMiddleware.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/JsonBodyMiddleware.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"modules/OryModule.html":{},"injectables/OryService.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"license.html":{}}}],["file:${imagetitle",{"_index":2152,"title":{},"body":{"injectables/WikidataService.html":{}}}],["filename",{"_index":2117,"title":{},"body":{"injectables/WikidataService.html":{}}}],["files",{"_index":2620,"title":{},"body":{"license.html":{}}}],["filterquery",{"_index":787,"title":{},"body":{"injectables/ClaimService.html":{}}}],["filters",{"_index":1215,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["filters/not",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["finalize",{"_index":545,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["finally",{"_index":2482,"title":{},"body":{"license.html":{}}}],["find",{"_index":631,"title":{},"body":{"injectables/ClaimReviewService.html":{},"license.html":{}}}],["findall",{"_index":1832,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findall(@req",{"_index":1856,"title":{},"body":{"controllers/UsersController.html":{}}}],["findall(req",{"_index":1836,"title":{},"body":{"controllers/UsersController.html":{}}}],["finish",{"_index":3293,"title":{},"body":{"miscellaneous/variables.html":{}}}],["finished",{"_index":3300,"title":{},"body":{"miscellaneous/variables.html":{}}}],["first",{"_index":671,"title":{},"body":{"classes/ClaimRevision.html":{},"injectables/UsersService.html":{},"license.html":{}}}],["firstpasswordchanged",{"_index":1818,"title":{},"body":{"classes/User.html":{},"interfaces/UserDocument.html":{}}}],["fitness",{"_index":3090,"title":{},"body":{"license.html":{}}}],["fixed",{"_index":2762,"title":{},"body":{"license.html":{}}}],["flow",{"_index":2630,"title":{},"body":{"license.html":{}}}],["follow",{"_index":2352,"title":{},"body":{"index.html":{},"license.html":{}}}],["following",{"_index":3004,"title":{},"body":{"license.html":{}}}],["forbid",{"_index":2697,"title":{},"body":{"license.html":{}}}],["forbidnonwhitelisted",{"_index":3224,"title":{},"body":{"miscellaneous/variables.html":{}}}],["force",{"_index":2654,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["forcepassword",{"_index":3264,"title":{},"body":{"miscellaneous/variables.html":{}}}],["foreignfield",{"_index":184,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"classes/Personality.html":{}}}],["fork",{"_index":2326,"title":{},"body":{"index.html":{}}}],["form",{"_index":2575,"title":{},"body":{"license.html":{}}}],["format",{"_index":2095,"title":{},"body":{"injectables/WikidataService.html":{},"license.html":{}}}],["formatstats",{"_index":1925,"title":{},"body":{"injectables/UtilService.html":{}}}],["formatstats(reviews",{"_index":1927,"title":{},"body":{"injectables/UtilService.html":{}}}],["formatversion",{"_index":2096,"title":{},"body":{"injectables/WikidataService.html":{}}}],["forms",{"_index":2753,"title":{},"body":{"license.html":{}}}],["forroutes(orycontroller",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":330,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HistoryController.html":{},"classes/NotFoundFilter.html":{},"injectables/PersonalityService.html":{},"controllers/SourceController.html":{},"license.html":{}}}],["found.filter",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["found.filter.ts",{"_index":1214,"title":{},"body":{"classes/NotFoundFilter.html":{},"coverage.html":{}}}],["found.filter.ts:9",{"_index":1225,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["foundation",{"_index":2363,"title":{},"body":{"license.html":{}}}],["free",{"_index":2361,"title":{},"body":{"license.html":{}}}],["freedom",{"_index":2382,"title":{},"body":{"license.html":{}}}],["freedoms",{"_index":2428,"title":{},"body":{"license.html":{}}}],["front",{"_index":574,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["fs",{"_index":963,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["fs.readfilesync(path.resolve(__dirname",{"_index":968,"title":{},"body":{"injectables/EmailService.html":{}}}],["fulfilling",{"_index":2681,"title":{},"body":{"license.html":{}}}],["full",{"_index":3141,"title":{},"body":{"license.html":{}}}],["fully",{"_index":692,"title":{},"body":{"modules/ClaimRevisionModule.html":{}}}],["function",{"_index":558,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/HistoryService.html":{},"injectables/JsonBodyMiddleware.html":{},"injectables/PersonalityService.html":{}}}],["functioning",{"_index":2846,"title":{},"body":{"license.html":{}}}],["fundamentally",{"_index":2458,"title":{},"body":{"license.html":{}}}],["further",{"_index":2784,"title":{},"body":{"license.html":{}}}],["future",{"_index":1341,"title":{},"body":{"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"license.html":{}}}],["general",{"_index":2355,"title":{},"body":{"license.html":{}}}],["generally",{"_index":2617,"title":{},"body":{"license.html":{}}}],["generate",{"_index":2611,"title":{},"body":{"license.html":{}}}],["generatepassword",{"_index":3262,"title":{},"body":{"miscellaneous/variables.html":{}}}],["generatepassword(userdata.istestuser",{"_index":3296,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get(\"404",{"_index":2005,"title":{},"body":{"controllers/ViewController.html":{}}}],["get(\":id",{"_index":499,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["get(\"_next",{"_index":2003,"title":{},"body":{"controllers/ViewController.html":{}}}],["get(\"about",{"_index":1997,"title":{},"body":{"controllers/ViewController.html":{}}}],["get(\"api/.ory",{"_index":1247,"title":{},"body":{"controllers/OryController.html":{}}}],["get(\"api/claim",{"_index":313,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get(\"api/claim/:claimid/sentence/:sentencehash/reviews",{"_index":357,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get(\"api/claim/:id",{"_index":348,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get(\"api/history/:targetmodel/:targetid",{"_index":1058,"title":{},"body":{"controllers/HistoryController.html":{}}}],["get(\"api/personality",{"_index":1447,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get(\"api/personality/:id",{"_index":1459,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get(\"api/personality/:id/reviews",{"_index":1472,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get(\"api/source/:targetid",{"_index":1757,"title":{},"body":{"controllers/SourceController.html":{}}}],["get(\"api/user/validate",{"_index":1855,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(\"code",{"_index":2001,"title":{},"body":{"controllers/ViewController.html":{}}}],["get(\"health",{"_index":1625,"title":{},"body":{"controllers/RootController.html":{}}}],["get(\"home",{"_index":1126,"title":{},"body":{"controllers/HomeController.html":{},"controllers/StatsController.html":{}}}],["get(\"login",{"_index":1880,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(\"personality",{"_index":1479,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get(\"personality/:personalityslug/claim/:claimslug",{"_index":410,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get(\"personality/:personalityslug/claim/:claimslug/:revisionid",{"_index":414,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get(\"personality/:personalityslug/claim/:claimslug/history",{"_index":420,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get(\"personality/:personalityslug/claim/:claimslug/sentence/:sentencehash",{"_index":387,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get(\"personality/:personalityslug/claim/:claimslug/sources",{"_index":417,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get(\"personality/:slug",{"_index":1477,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get(\"personality/:slug/claim/create",{"_index":407,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get(\"personality/:slug/history",{"_index":1482,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get(\"personality/search",{"_index":1474,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get(\"privacy",{"_index":1999,"title":{},"body":{"controllers/ViewController.html":{}}}],["get(\"profile",{"_index":1883,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(\"robots.txt",{"_index":1617,"title":{},"body":{"controllers/RootController.html":{}}}],["get(\"sitemap.xml",{"_index":1671,"title":{},"body":{"controllers/SitemapController.html":{}}}],["get(\"submit",{"_index":1677,"title":{},"body":{"controllers/SitemapController.html":{}}}],["get('api/history/:targetmodel/:targetid",{"_index":1054,"title":{},"body":{"controllers/HistoryController.html":{}}}],["get('api/source/:targetid",{"_index":1753,"title":{},"body":{"controllers/SourceController.html":{}}}],["get('api/user/validate",{"_index":1837,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('home",{"_index":1792,"title":{},"body":{"controllers/StatsController.html":{}}}],["get('personality/:personalityslug/claim/:claimslug/:revisionid",{"_index":252,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get('personality/:personalityslug/claim/:claimslug/history",{"_index":255,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get('personality/:slug/claim/create",{"_index":224,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get('personality/:slug/history",{"_index":1432,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get('personality/search",{"_index":1430,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get('profile",{"_index":1845,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('submit",{"_index":1665,"title":{},"body":{"controllers/SitemapController.html":{}}}],["get(@param",{"_index":500,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["get(@param(\"id",{"_index":1460,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get(`https://www.wikidata.org/w/api.php",{"_index":2143,"title":{},"body":{"injectables/WikidataService.html":{}}}],["get(params",{"_index":490,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["get(personalityid",{"_index":1420,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get,head,put,patch,post,delete",{"_index":3212,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getbyid",{"_index":200,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/UsersService.html":{}}}],["getbyid(@param(\"id",{"_index":349,"title":{},"body":{"controllers/ClaimController.html":{}}}],["getbyid(claimid",{"_index":233,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{}}}],["getbyid(claimreviewid",{"_index":578,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getbyid(personalityid",{"_index":1462,"title":{},"body":{"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["getbyid(userid",{"_index":1901,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbypersonalityidandclaimslug",{"_index":747,"title":{},"body":{"injectables/ClaimService.html":{}}}],["getbypersonalityidandclaimslug(personalityid",{"_index":765,"title":{},"body":{"injectables/ClaimService.html":{}}}],["getbyslug",{"_index":1495,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["getbyslug(personalityslug",{"_index":1510,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["getbytargetid",{"_index":1774,"title":{},"body":{"injectables/SourceService.html":{}}}],["getbytargetid(targetid",{"_index":1761,"title":{},"body":{"controllers/SourceController.html":{},"injectables/SourceService.html":{}}}],["getbytargetidandmodel",{"_index":1079,"title":{},"body":{"injectables/HistoryService.html":{}}}],["getbytargetidandmodel(targetid",{"_index":1062,"title":{},"body":{"controllers/HistoryController.html":{},"injectables/HistoryService.html":{}}}],["getclaimreviewpage",{"_index":201,"title":{},"body":{"controllers/ClaimController.html":{}}}],["getclaimreviewpage(@req",{"_index":388,"title":{},"body":{"controllers/ClaimController.html":{}}}],["getclaimreviewpage(req",{"_index":236,"title":{},"body":{"controllers/ClaimController.html":{}}}],["getclaimsbyhashdto",{"_index":240,"title":{"classes/GetClaimsByHashDTO.html":{}},"body":{"controllers/ClaimController.html":{},"classes/GetClaimsByHashDTO.html":{},"coverage.html":{}}}],["getclaimsdto",{"_index":245,"title":{"classes/GetClaimsDTO.html":{}},"body":{"controllers/ClaimController.html":{},"classes/GetClaimsDTO.html":{},"coverage.html":{}}}],["getcommonsthumburl",{"_index":2057,"title":{},"body":{"injectables/WikidataService.html":{}}}],["getcommonsthumburl(imagetitle",{"_index":2069,"title":{},"body":{"injectables/WikidataService.html":{}}}],["getdeletedpersonalitybywikidata",{"_index":1496,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["getdeletedpersonalitybywikidata(wikidata",{"_index":1512,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["getemailbody",{"_index":944,"title":{},"body":{"injectables/EmailService.html":{}}}],["getemailbody(options",{"_index":949,"title":{},"body":{"injectables/EmailService.html":{}}}],["gethistory",{"_index":1052,"title":{},"body":{"controllers/HistoryController.html":{}}}],["gethistory(@param",{"_index":1059,"title":{},"body":{"controllers/HistoryController.html":{}}}],["gethistory(param",{"_index":1053,"title":{},"body":{"controllers/HistoryController.html":{}}}],["gethistoryparams",{"_index":1080,"title":{},"body":{"injectables/HistoryService.html":{}}}],["gethistoryparams(dataid",{"_index":1095,"title":{},"body":{"injectables/HistoryService.html":{}}}],["gethomestats",{"_index":1791,"title":{},"body":{"controllers/StatsController.html":{},"injectables/StatsService.html":{}}}],["getlanguagemiddleware",{"_index":83,"title":{"injectables/GetLanguageMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/GetLanguageMiddleware.html":{},"coverage.html":{}}}],["getlanguagemiddleware).forroutes",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["getnextserver",{"_index":401,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/OryController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{}}}],["getorypaths",{"_index":1232,"title":{},"body":{"controllers/OryController.html":{}}}],["getorypaths(@req",{"_index":1248,"title":{},"body":{"controllers/OryController.html":{}}}],["getorypaths(req",{"_index":1235,"title":{},"body":{"controllers/OryController.html":{}}}],["getpersonalities",{"_index":1022,"title":{"classes/GetPersonalities.html":{}},"body":{"classes/GetPersonalities.html":{},"controllers/PersonalityController.html":{},"coverage.html":{}}}],["getrequesthandler",{"_index":1253,"title":{},"body":{"controllers/OryController.html":{}}}],["getreviewsbyclaimid",{"_index":525,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getreviewsbyclaimid(claimid",{"_index":580,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getreviewsbysentencehash",{"_index":526,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getreviewsbysentencehash(sentencehash",{"_index":583,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getreviewstats",{"_index":1410,"title":{},"body":{"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["getreviewstats(@param(\"id",{"_index":1473,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["getreviewstats(id",{"_index":1514,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["getreviewstats(personalityid",{"_index":1423,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["getreviewstatsbyclaimid",{"_index":527,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getreviewstatsbyclaimid(claimid",{"_index":585,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getreviewstatsbysentencehash",{"_index":528,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getreviewstatsbysentencehash(match",{"_index":587,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getrevision",{"_index":696,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["getrevision(claimid",{"_index":704,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["getsentencereviewsbyhash",{"_index":202,"title":{},"body":{"controllers/ClaimController.html":{}}}],["getsentencereviewsbyhash(@param",{"_index":358,"title":{},"body":{"controllers/ClaimController.html":{}}}],["getsentencereviewsbyhash(params",{"_index":239,"title":{},"body":{"controllers/ClaimController.html":{}}}],["getsitelinkname",{"_index":2058,"title":{},"body":{"injectables/WikidataService.html":{}}}],["getsitelinkname(language",{"_index":2072,"title":{},"body":{"injectables/WikidataService.html":{}}}],["getsitemap",{"_index":1658,"title":{},"body":{"controllers/SitemapController.html":{},"injectables/SitemapService.html":{}}}],["getsitemap(@res",{"_index":1673,"title":{},"body":{"controllers/SitemapController.html":{}}}],["getsitemap(hostname",{"_index":1689,"title":{},"body":{"injectables/SitemapService.html":{}}}],["getsitemap(res",{"_index":1660,"title":{},"body":{"controllers/SitemapController.html":{}}}],["getsources",{"_index":1752,"title":{},"body":{"controllers/SourceController.html":{}}}],["getsourcesclaim",{"_index":1750,"title":{},"body":{"controllers/SourceController.html":{}}}],["getsourcesclaim(@param",{"_index":1758,"title":{},"body":{"controllers/SourceController.html":{}}}],["getsourcesclaim(params",{"_index":1751,"title":{},"body":{"controllers/SourceController.html":{}}}],["getting",{"_index":2314,"title":{"index.html":{},"license.html":{}},"body":{}}],["getuserreviewbysentencehash",{"_index":529,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getuserreviewbysentencehash(sentencehash",{"_index":589,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["give",{"_index":2719,"title":{},"body":{"license.html":{}}}],["given",{"_index":2647,"title":{},"body":{"license.html":{}}}],["gives",{"_index":2735,"title":{},"body":{"license.html":{}}}],["giving",{"_index":2437,"title":{},"body":{"license.html":{}}}],["gnu",{"_index":2354,"title":{},"body":{"license.html":{}}}],["google",{"_index":2284,"title":{},"body":{"dependencies.html":{}}}],["governed",{"_index":2877,"title":{},"body":{"license.html":{}}}],["gpl",{"_index":2432,"title":{},"body":{"license.html":{}}}],["grant",{"_index":2899,"title":{},"body":{"license.html":{}}}],["granted",{"_index":2637,"title":{},"body":{"license.html":{}}}],["grants",{"_index":2955,"title":{},"body":{"license.html":{}}}],["graph",{"_index":3176,"title":{},"body":{"modules.html":{}}}],["gratis",{"_index":2424,"title":{},"body":{"license.html":{}}}],["greatest",{"_index":3131,"title":{},"body":{"license.html":{}}}],["group",{"_index":605,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["guarantee",{"_index":2385,"title":{},"body":{"license.html":{}}}],["guard",{"_index":1627,"title":{"guards/SessionGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":1628,"title":{},"body":{"guards/SessionGuard.html":{}}}],["gui",{"_index":3158,"title":{},"body":{"license.html":{}}}],["handlebars",{"_index":961,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["handlebars.compile(html",{"_index":973,"title":{},"body":{"injectables/EmailService.html":{}}}],["handler",{"_index":1964,"title":{},"body":{"controllers/ViewController.html":{}}}],["handler(req",{"_index":1974,"title":{},"body":{"controllers/ViewController.html":{}}}],["hash",{"_index":368,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{},"injectables/ParserService.html":{}}}],["hash.dto",{"_index":289,"title":{},"body":{"controllers/ClaimController.html":{}}}],["hash.dto.ts",{"_index":996,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{},"coverage.html":{}}}],["hash.dto.ts:11",{"_index":1004,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{}}}],["hash.dto.ts:14",{"_index":1000,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{}}}],["hash.dto.ts:18",{"_index":999,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{}}}],["hash.dto.ts:22",{"_index":1006,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{}}}],["hash.dto.ts:7",{"_index":1002,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{}}}],["hasn't",{"_index":780,"title":{},"body":{"injectables/ClaimService.html":{}}}],["having",{"_index":2656,"title":{},"body":{"license.html":{}}}],["header",{"_index":1668,"title":{},"body":{"controllers/SitemapController.html":{}}}],["header(\"content",{"_index":1672,"title":{},"body":{"controllers/SitemapController.html":{}}}],["headers",{"_index":1302,"title":{},"body":{"injectables/OryService.html":{}}}],["health",{"_index":1608,"title":{},"body":{"controllers/RootController.html":{}}}],["here",{"_index":1981,"title":{},"body":{"controllers/ViewController.html":{}}}],["hereafter",{"_index":2996,"title":{},"body":{"license.html":{}}}],["history",{"_index":422,"title":{"classes/History.html":{}},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"coverage.html":{}}}],["history.controller",{"_index":1073,"title":{},"body":{"modules/HistoryModule.html":{}}}],["history.length",{"_index":1065,"title":{},"body":{"controllers/HistoryController.html":{}}}],["history.service",{"_index":1056,"title":{},"body":{"controllers/HistoryController.html":{},"modules/HistoryModule.html":{}}}],["history/history.module",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/PersonalityModule.html":{}}}],["history/history.service",{"_index":597,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["history/schema/history.schema",{"_index":599,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["history_model",{"_index":1075,"title":{},"body":{"modules/HistoryModule.html":{},"miscellaneous/variables.html":{}}}],["historycontroller",{"_index":1050,"title":{"controllers/HistoryController.html":{}},"body":{"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"coverage.html":{}}}],["historydocument",{"_index":1043,"title":{},"body":{"classes/History.html":{},"injectables/HistoryService.html":{},"miscellaneous/typealiases.html":{}}}],["historymodel",{"_index":1074,"title":{},"body":{"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["historymodule",{"_index":75,"title":{"modules/HistoryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/HistoryModule.html":{},"modules/PersonalityModule.html":{},"modules.html":{},"overview.html":{}}}],["historyschema",{"_index":1048,"title":{},"body":{"classes/History.html":{},"modules/HistoryModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["historyservice",{"_index":531,"title":{"injectables/HistoryService.html":{}},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{},"coverage.html":{},"overview.html":{}}}],["historytype",{"_index":598,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"injectables/PersonalityService.html":{},"miscellaneous/enumerations.html":{}}}],["historytype.create",{"_index":819,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["historytype.delete",{"_index":833,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["historytype.update",{"_index":829,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["holder",{"_index":2929,"title":{},"body":{"license.html":{}}}],["holders",{"_index":2882,"title":{},"body":{"license.html":{}}}],["home",{"_index":1134,"title":{},"body":{"controllers/HomeController.html":{},"injectables/SitemapService.html":{}}}],["home.controller",{"_index":1138,"title":{},"body":{"modules/HomeModule.html":{}}}],["home/home.module",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["homecontroller",{"_index":1118,"title":{"controllers/HomeController.html":{}},"body":{"controllers/HomeController.html":{},"modules/HomeModule.html":{},"coverage.html":{}}}],["homemodule",{"_index":57,"title":{"modules/HomeModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HomeModule.html":{},"modules.html":{},"overview.html":{}}}],["hope",{"_index":3143,"title":{},"body":{"license.html":{}}}],["host",{"_index":978,"title":{},"body":{"injectables/EmailService.html":{},"classes/NotFoundFilter.html":{},"controllers/RootController.html":{}}}],["host.switchtohttp",{"_index":1228,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["hostname",{"_index":1691,"title":{},"body":{"injectables/SitemapService.html":{}}}],["hosts",{"_index":2793,"title":{},"body":{"license.html":{}}}],["host}/sitemap.xml",{"_index":1624,"title":{},"body":{"controllers/RootController.html":{}}}],["household",{"_index":2816,"title":{},"body":{"license.html":{}}}],["html",{"_index":967,"title":{},"body":{"injectables/EmailService.html":{},"dependencies.html":{}}}],["http://localhost:3000",{"_index":2343,"title":{},"body":{"index.html":{}}}],["httpcontext",{"_index":1640,"title":{},"body":{"guards/SessionGuard.html":{}}}],["httpcontext.getrequest",{"_index":1642,"title":{},"body":{"guards/SessionGuard.html":{}}}],["httpcontext.getresponse",{"_index":1643,"title":{},"body":{"guards/SessionGuard.html":{}}}],["httpmodule",{"_index":434,"title":{},"body":{"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{}}}],["https://${wikilang.replace",{"_index":2129,"title":{},"body":{"injectables/WikidataService.html":{}}}],["https://commons.wikimedia.org/w/api.php",{"_index":2150,"title":{},"body":{"injectables/WikidataService.html":{}}}],["https://fsf.org",{"_index":2365,"title":{},"body":{"license.html":{}}}],["https://github.com//aletheia",{"_index":2330,"title":{},"body":{"index.html":{}}}],["https://google.com/ping?sitemap=${hostname}/sitemap.xml",{"_index":1725,"title":{},"body":{"injectables/SitemapService.html":{}}}],["https://medium.com/javascript",{"_index":1934,"title":{},"body":{"injectables/UtilService.html":{}}}],["https://mongoosejs.com/docs/populate.html#dynamic",{"_index":1738,"title":{},"body":{"classes/Source.html":{}}}],["https://stackoverflow.com/questions/47669178/mongoose",{"_index":625,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["https://www.gnu.org/licenses",{"_index":3164,"title":{},"body":{"license.html":{}}}],["https://www.gnu.org/licenses/why",{"_index":3174,"title":{},"body":{"license.html":{}}}],["https://www.google.com/recaptcha/api",{"_index":300,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["httpservice",{"_index":275,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["hypothetical",{"_index":3156,"title":{},"body":{"license.html":{}}}],["i18n",{"_index":1983,"title":{},"body":{"controllers/ViewController.html":{}}}],["i18next",{"_index":2262,"title":{},"body":{"dependencies.html":{}}}],["icons",{"_index":2292,"title":{},"body":{"dependencies.html":{}}}],["id",{"_index":576,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["identifiable",{"_index":3023,"title":{},"body":{"license.html":{}}}],["identifier",{"_index":2162,"title":{},"body":{"coverage.html":{}}}],["identityid",{"_index":1272,"title":{},"body":{"injectables/OryService.html":{}}}],["ids",{"_index":2093,"title":{},"body":{"injectables/WikidataService.html":{}}}],["if(newpersonalitybody.name",{"_index":1583,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["if(personalityexists",{"_index":1541,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["if(revisionid",{"_index":842,"title":{},"body":{"injectables/ClaimService.html":{}}}],["ignore",{"_index":310,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/HomeController.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"injectables/UsersService.html":{},"controllers/ViewController.html":{}}}],["iiprop",{"_index":2154,"title":{},"body":{"injectables/WikidataService.html":{}}}],["iiurlwidth",{"_index":2155,"title":{},"body":{"injectables/WikidataService.html":{}}}],["image",{"_index":912,"title":{},"body":{"classes/CreatePersonality.html":{},"injectables/WikidataService.html":{}}}],["imageinfo",{"_index":2153,"title":{},"body":{"injectables/WikidataService.html":{}}}],["imagetitle",{"_index":2071,"title":{},"body":{"injectables/WikidataService.html":{}}}],["implement",{"_index":2599,"title":{},"body":{"license.html":{}}}],["implementation",{"_index":2600,"title":{},"body":{"license.html":{}}}],["implements",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/GetLanguageMiddleware.html":{},"injectables/JsonBodyMiddleware.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"guards/SessionGuard.html":{},"injectables/ViewService.html":{}}}],["implied",{"_index":3050,"title":{},"body":{"license.html":{}}}],["import",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"injectables/DisableBodyParserMiddleware.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"injectables/GetLanguageMiddleware.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/JsonBodyMiddleware.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"modules/OryModule.html":{},"injectables/OryService.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"dependencies.html":{},"license.html":{}}}],["importing",{"_index":2989,"title":{},"body":{"license.html":{}}}],["imports",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/HomeModule.html":{},"modules/OryModule.html":{},"modules/PersonalityModule.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{}}}],["impose",{"_index":2909,"title":{},"body":{"license.html":{}}}],["imposed",{"_index":3052,"title":{},"body":{"license.html":{}}}],["improve",{"_index":1709,"title":{},"body":{"injectables/SitemapService.html":{}}}],["inability",{"_index":3106,"title":{},"body":{"license.html":{}}}],["inaccurate",{"_index":3109,"title":{},"body":{"license.html":{}}}],["inc",{"_index":2364,"title":{},"body":{"license.html":{}}}],["incidental",{"_index":3103,"title":{},"body":{"license.html":{}}}],["include",{"_index":2590,"title":{},"body":{"license.html":{}}}],["included",{"_index":1289,"title":{},"body":{"injectables/OryService.html":{},"license.html":{}}}],["includes",{"_index":2540,"title":{},"body":{"license.html":{}}}],["including",{"_index":2612,"title":{},"body":{"license.html":{}}}],["inclusion",{"_index":2752,"title":{},"body":{"license.html":{}}}],["incompatible",{"_index":2459,"title":{},"body":{"license.html":{}}}],["incorporating",{"_index":3165,"title":{},"body":{"license.html":{}}}],["incorporation",{"_index":2819,"title":{},"body":{"license.html":{}}}],["increment",{"_index":668,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["inc|ltd|jr|sr|co",{"_index":1351,"title":{},"body":{"injectables/ParserService.html":{}}}],["indemnification",{"_index":2905,"title":{},"body":{"license.html":{}}}],["independent",{"_index":2741,"title":{},"body":{"license.html":{}}}],["index",{"_index":145,"title":{"index.html":{}},"body":{"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"injectables/GetLanguageMiddleware.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"injectables/JsonBodyMiddleware.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"injectables/OryService.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexof(v",{"_index":471,"title":{},"body":{"classes/ClaimReview.html":{}}}],["indicate",{"_index":2959,"title":{},"body":{"license.html":{}}}],["indicating",{"_index":2920,"title":{},"body":{"license.html":{}}}],["individual",{"_index":2750,"title":{},"body":{"license.html":{}}}],["individuals",{"_index":2468,"title":{},"body":{"license.html":{}}}],["industrial",{"_index":2834,"title":{},"body":{"license.html":{}}}],["info",{"_index":3,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"injectables/DisableBodyParserMiddleware.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"injectables/GetLanguageMiddleware.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/JsonBodyMiddleware.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"modules/OryModule.html":{},"injectables/OryService.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["inform",{"_index":2802,"title":{},"body":{"license.html":{}}}],["information",{"_index":2840,"title":{},"body":{"license.html":{}}}],["infringe",{"_index":2957,"title":{},"body":{"license.html":{}}}],["infringed",{"_index":2986,"title":{},"body":{"license.html":{}}}],["infringement",{"_index":2533,"title":{},"body":{"license.html":{}}}],["init",{"_index":538,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["initapp",{"_index":2188,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["initiate",{"_index":2980,"title":{},"body":{"license.html":{}}}],["inject",{"_index":785,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["inject(request",{"_index":789,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["injectable",{"_index":517,"title":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/EmailService.html":{},"injectables/GetLanguageMiddleware.html":{},"injectables/HistoryService.html":{},"injectables/JsonBodyMiddleware.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/OryService.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/SourceService.html":{},"injectables/StatsService.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{}},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/EmailService.html":{},"injectables/GetLanguageMiddleware.html":{},"injectables/HistoryService.html":{},"injectables/JsonBodyMiddleware.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/OryService.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"injectables/SitemapService.html":{},"injectables/SourceService.html":{},"injectables/StatsService.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{},"coverage.html":{}}}],["injectables",{"_index":518,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/EmailService.html":{},"injectables/GetLanguageMiddleware.html":{},"injectables/HistoryService.html":{},"injectables/JsonBodyMiddleware.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/OryService.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/SourceService.html":{},"injectables/StatsService.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{},"overview.html":{}}}],["injectmodel",{"_index":595,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"injectables/PersonalityService.html":{},"injectables/SourceService.html":{},"injectables/UsersService.html":{},"injectables/WikidataService.html":{}}}],["injectmodel('history_model",{"_index":1110,"title":{},"body":{"injectables/HistoryService.html":{}}}],["injectmodel(claim.name",{"_index":790,"title":{},"body":{"injectables/ClaimService.html":{}}}],["injectmodel(claimreview.name",{"_index":603,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["injectmodel(claimrevision.name",{"_index":713,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["injectmodel(personality.name",{"_index":1528,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["injectmodel(source.name",{"_index":1780,"title":{},"body":{"injectables/SourceService.html":{}}}],["injectmodel(user.name",{"_index":1157,"title":{},"body":{"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["injectmodel(wikidatacache.name",{"_index":2080,"title":{},"body":{"injectables/WikidataService.html":{}}}],["inside",{"_index":2455,"title":{},"body":{"license.html":{}}}],["instalação",{"_index":2325,"title":{},"body":{"index.html":{}}}],["install",{"_index":2338,"title":{},"body":{"index.html":{},"license.html":{}}}],["installation",{"_index":2839,"title":{},"body":{"license.html":{}}}],["installed",{"_index":2858,"title":{},"body":{"license.html":{}}}],["instead",{"_index":3171,"title":{},"body":{"license.html":{}}}],["intact",{"_index":2712,"title":{},"body":{"license.html":{}}}],["intended",{"_index":2384,"title":{},"body":{"license.html":{}}}],["intention",{"_index":2701,"title":{},"body":{"license.html":{}}}],["interaction",{"_index":2550,"title":{},"body":{"license.html":{}}}],["interactive",{"_index":2554,"title":{},"body":{"license.html":{}}}],["interchange",{"_index":2765,"title":{},"body":{"license.html":{}}}],["interest",{"_index":2974,"title":{},"body":{"license.html":{}}}],["interface",{"_index":102,"title":{"interfaces/UserDocument.html":{}},"body":{"modules/AppModule.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"coverage.html":{},"license.html":{},"overview.html":{}}}],["interfaces",{"_index":1827,"title":{},"body":{"interfaces/UserDocument.html":{},"license.html":{}}}],["interfered",{"_index":2848,"title":{},"body":{"license.html":{}}}],["interpretation",{"_index":3117,"title":{},"body":{"license.html":{}}}],["interpreter",{"_index":2609,"title":{},"body":{"license.html":{}}}],["intimate",{"_index":2628,"title":{},"body":{"license.html":{}}}],["invalidate",{"_index":2736,"title":{},"body":{"license.html":{}}}],["ip",{"_index":1202,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["irrevocable",{"_index":2639,"title":{},"body":{"license.html":{}}}],["isallowedprop",{"_index":913,"title":{},"body":{"classes/CreatePersonality.html":{},"injectables/WikidataService.html":{}}}],["isalpha",{"_index":888,"title":{},"body":{"classes/CreateClaimDTO.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{}}}],["isalphanumeric",{"_index":899,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["isarray",{"_index":889,"title":{},"body":{"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/GetClaimsByHashDTO.html":{}}}],["isarray()@arraynotempty",{"_index":882,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["isboolean",{"_index":925,"title":{},"body":{"classes/CreatePersonality.html":{},"classes/GetPersonalities.html":{}}}],["isboolean()@isoptional",{"_index":919,"title":{},"body":{"classes/CreatePersonality.html":{},"classes/GetPersonalities.html":{}}}],["isdatestring",{"_index":890,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["isdeleted",{"_index":372,"title":{},"body":{"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["isenum",{"_index":907,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["isenum(classificationenum",{"_index":908,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["isint",{"_index":1007,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{}}}],["isnotempty",{"_index":891,"title":{},"body":{"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{}}}],["isnotempty()@isarray",{"_index":905,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["isnotempty()@isstring",{"_index":876,"title":{},"body":{"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{}}}],["isnotempty()@isstring()@isalpha",{"_index":885,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["isnotempty()@isstring()@isdatestring",{"_index":878,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["isnotempty()@isstring()@isenum(classificationenum",{"_index":897,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["isnotempty()@isstring()@minlength(3",{"_index":921,"title":{},"body":{"classes/CreatePersonality.html":{}}}],["isnumber",{"_index":1008,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{}}}],["isnumber()@isint()@min(0",{"_index":1001,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{}}}],["isnumber()@min(0",{"_index":1003,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{}}}],["isoftdeletedmodel",{"_index":600,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["isoptional",{"_index":926,"title":{},"body":{"classes/CreatePersonality.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetPersonalities.html":{}}}],["isoptional()@isarray",{"_index":1005,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{}}}],["ispublic",{"_index":291,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/HomeController.html":{},"controllers/OryController.html":{},"controllers/PersonalityController.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ispublic()@get",{"_index":1987,"title":{},"body":{"controllers/ViewController.html":{}}}],["ispublic()@get('404",{"_index":1977,"title":{},"body":{"controllers/ViewController.html":{}}}],["ispublic()@get(':id",{"_index":491,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["ispublic()@get('_next",{"_index":1969,"title":{},"body":{"controllers/ViewController.html":{}}}],["ispublic()@get('about",{"_index":1985,"title":{},"body":{"controllers/ViewController.html":{}}}],["ispublic()@get('api/.ory",{"_index":1238,"title":{},"body":{"controllers/OryController.html":{}}}],["ispublic()@get('api/claim",{"_index":246,"title":{},"body":{"controllers/ClaimController.html":{}}}],["ispublic()@get('api/claim/:claimid/sentence/:sentencehash/reviews",{"_index":241,"title":{},"body":{"controllers/ClaimController.html":{}}}],["ispublic()@get('api/claim/:id",{"_index":234,"title":{},"body":{"controllers/ClaimController.html":{}}}],["ispublic()@get('api/personality",{"_index":1427,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["ispublic()@get('api/personality/:id",{"_index":1421,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["ispublic()@get('api/personality/:id/reviews",{"_index":1424,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["ispublic()@get('code",{"_index":1972,"title":{},"body":{"controllers/ViewController.html":{}}}],["ispublic()@get('health",{"_index":1610,"title":{},"body":{"controllers/RootController.html":{}}}],["ispublic()@get('home",{"_index":1122,"title":{},"body":{"controllers/HomeController.html":{}}}],["ispublic()@get('login",{"_index":1842,"title":{},"body":{"controllers/UsersController.html":{}}}],["ispublic()@get('personality",{"_index":1435,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["ispublic()@get('personality/:personalityslug/claim/:claimslug",{"_index":249,"title":{},"body":{"controllers/ClaimController.html":{}}}],["ispublic()@get('personality/:personalityslug/claim/:claimslug/sentence/:sentencehash",{"_index":237,"title":{},"body":{"controllers/ClaimController.html":{}}}],["ispublic()@get('personality/:personalityslug/claim/:claimslug/sources",{"_index":258,"title":{},"body":{"controllers/ClaimController.html":{}}}],["ispublic()@get('personality/:slug",{"_index":1438,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["ispublic()@get('privacy",{"_index":1990,"title":{},"body":{"controllers/ViewController.html":{}}}],["ispublic()@get('robots.txt",{"_index":1614,"title":{},"body":{"controllers/RootController.html":{}}}],["ispublic()@get('sitemap.xml')@header('content",{"_index":1661,"title":{},"body":{"controllers/SitemapController.html":{}}}],["ispublic()@post('api/.ory",{"_index":1243,"title":{},"body":{"controllers/OryController.html":{}}}],["ispublic()@useguards(localauthguard)@post('api/user/signin",{"_index":1840,"title":{},"body":{"controllers/UsersController.html":{}}}],["isstring",{"_index":892,"title":{},"body":{"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{}}}],["isstring()@isalpha",{"_index":998,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{}}}],["isstring()@isalphanumeric",{"_index":895,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["isstring()@isoptional",{"_index":917,"title":{},"body":{"classes/CreatePersonality.html":{},"classes/GetPersonalities.html":{}}}],["istestuser",{"_index":3263,"title":{},"body":{"miscellaneous/variables.html":{}}}],["it's",{"_index":1046,"title":{},"body":{"classes/History.html":{}}}],["item",{"_index":1957,"title":{},"body":{"injectables/UtilService.html":{},"injectables/WikidataService.html":{},"license.html":{}}}],["item[property",{"_index":1954,"title":{},"body":{"injectables/UtilService.html":{}}}],["iterate",{"_index":801,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{}}}],["itself",{"_index":2863,"title":{},"body":{"license.html":{}}}],["js",{"_index":638,"title":{},"body":{"injectables/ClaimReviewService.html":{},"dependencies.html":{}}}],["json",{"_index":1221,"title":{},"body":{"classes/NotFoundFilter.html":{},"injectables/WikidataService.html":{}}}],["jsonbodymiddleware",{"_index":91,"title":{"injectables/JsonBodyMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/JsonBodyMiddleware.html":{},"coverage.html":{}}}],["june",{"_index":2357,"title":{},"body":{"license.html":{}}}],["keep",{"_index":2711,"title":{},"body":{"license.html":{}}}],["keeping",{"_index":779,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["kernel",{"_index":2602,"title":{},"body":{"license.html":{}}}],["key",{"_index":2871,"title":{},"body":{"license.html":{}}}],["keys",{"_index":2842,"title":{},"body":{"license.html":{}}}],["keywords",{"_index":3184,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":2546,"title":{},"body":{"license.html":{}}}],["kinds",{"_index":2375,"title":{},"body":{"license.html":{}}}],["know",{"_index":2406,"title":{},"body":{"license.html":{}}}],["knowingly",{"_index":3011,"title":{},"body":{"license.html":{}}}],["knowledge",{"_index":3020,"title":{},"body":{"license.html":{}}}],["label",{"_index":2103,"title":{},"body":{"injectables/WikidataService.html":{}}}],["labels",{"_index":2106,"title":{},"body":{"injectables/WikidataService.html":{}}}],["landing",{"_index":1996,"title":{},"body":{"controllers/ViewController.html":{}}}],["lang",{"_index":546,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["language",{"_index":997,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"injectables/GetLanguageMiddleware.html":{},"classes/GetPersonalities.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"dependencies.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["languagefallback",{"_index":2135,"title":{},"body":{"injectables/WikidataService.html":{}}}],["languagevariantmap",{"_index":2078,"title":{},"body":{"injectables/WikidataService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["languagevariantmap[language",{"_index":2132,"title":{},"body":{"injectables/WikidataService.html":{}}}],["language}wiki",{"_index":2133,"title":{},"body":{"injectables/WikidataService.html":{}}}],["larger",{"_index":2745,"title":{},"body":{"license.html":{}}}],["later",{"_index":3077,"title":{},"body":{"license.html":{}}}],["latest",{"_index":1104,"title":{},"body":{"injectables/HistoryService.html":{}}}],["latestchange",{"_index":1096,"title":{},"body":{"injectables/HistoryService.html":{}}}],["latestrevision",{"_index":147,"title":{},"body":{"classes/Claim.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["law",{"_index":2535,"title":{},"body":{"license.html":{}}}],["laws",{"_index":2505,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":2984,"title":{},"body":{"license.html":{}}}],["lean",{"_index":794,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["legal",{"_index":2438,"title":{},"body":{"license.html":{}}}],["length",{"_index":1212,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["less",{"_index":2269,"title":{},"body":{"dependencies.html":{}}}],["lesser",{"_index":3170,"title":{},"body":{"license.html":{}}}],["let's",{"_index":665,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["lgpl.html",{"_index":3175,"title":{},"body":{"license.html":{}}}],["liability",{"_index":2885,"title":{},"body":{"license.html":{}}}],["liable",{"_index":2532,"title":{},"body":{"license.html":{}}}],["libraries",{"_index":2588,"title":{},"body":{"license.html":{}}}],["library",{"_index":2811,"title":{},"body":{"license.html":{}}}],["license",{"_index":2353,"title":{"license.html":{}},"body":{"license.html":{},"properties.html":{}}}],["licensed",{"_index":2509,"title":{},"body":{"license.html":{}}}],["licensee",{"_index":2512,"title":{},"body":{"license.html":{}}}],["licensees",{"_index":2514,"title":{},"body":{"license.html":{}}}],["licenses",{"_index":2377,"title":{},"body":{"license.html":{}}}],["licensing",{"_index":2961,"title":{},"body":{"license.html":{}}}],["licensors",{"_index":2897,"title":{},"body":{"license.html":{}}}],["likewise",{"_index":2953,"title":{},"body":{"license.html":{}}}],["limit",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"license.html":{}}}],["limit(pagesize",{"_index":620,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{},"injectables/SourceService.html":{}}}],["limitation",{"_index":3099,"title":{},"body":{"license.html":{}}}],["limited",{"_index":3088,"title":{},"body":{"license.html":{}}}],["limiting",{"_index":2884,"title":{},"body":{"license.html":{}}}],["line",{"_index":796,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"license.html":{}}}],["link",{"_index":739,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/Source.html":{},"dependencies.html":{},"license.html":{}}}],["linked",{"_index":2624,"title":{},"body":{"license.html":{}}}],["linking",{"_index":3168,"title":{},"body":{"license.html":{}}}],["list",{"_index":1481,"title":{},"body":{"controllers/PersonalityController.html":{},"license.html":{}}}],["listall",{"_index":203,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["listall(@query",{"_index":314,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{}}}],["listall(getclaimsdto",{"_index":244,"title":{},"body":{"controllers/ClaimController.html":{}}}],["listall(getpersonalities",{"_index":1426,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["listall(page",{"_index":768,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["listening",{"_index":3243,"title":{},"body":{"miscellaneous/variables.html":{}}}],["literal",{"_index":707,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{}}}],["litigation",{"_index":2981,"title":{},"body":{"license.html":{}}}],["load",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"injectables/ViewService.html":{}}}],["loaded",{"_index":3254,"title":{},"body":{"miscellaneous/variables.html":{}}}],["loading",{"_index":3253,"title":{},"body":{"miscellaneous/variables.html":{}}}],["local",{"_index":1163,"title":{},"body":{"injectables/LocalStrategy.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["local.serializer",{"_index":139,"title":{},"body":{"modules/AuthModule.html":{}}}],["local.strategy",{"_index":138,"title":{},"body":{"modules/AuthModule.html":{}}}],["localauthguard",{"_index":1145,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"injectables/LocalAuthGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["localfield",{"_index":182,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"classes/Personality.html":{}}}],["localhost",{"_index":3303,"title":{},"body":{"miscellaneous/variables.html":{}}}],["locally:git",{"_index":2329,"title":{},"body":{"index.html":{}}}],["localserializer",{"_index":130,"title":{"injectables/LocalSerializer.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalSerializer.html":{},"coverage.html":{},"overview.html":{}}}],["localstrategy",{"_index":131,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["log",{"_index":1173,"title":{},"body":{"classes/Logger.html":{}}}],["log(message",{"_index":1185,"title":{},"body":{"classes/Logger.html":{}}}],["logger",{"_index":264,"title":{"classes/Logger.html":{}},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ViewService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger(\"claimcontroller",{"_index":297,"title":{},"body":{"controllers/ClaimController.html":{}}}],["logger(\"claimreviewservice",{"_index":592,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["logger(\"claimservice",{"_index":706,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{}}}],["logger(\"emailservice",{"_index":958,"title":{},"body":{"injectables/EmailService.html":{}}}],["logger(\"historycontroller",{"_index":1057,"title":{},"body":{"controllers/HistoryController.html":{}}}],["logger(\"historyservice",{"_index":1108,"title":{},"body":{"injectables/HistoryService.html":{}}}],["logger(\"personalitycontroller",{"_index":1446,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["logger(\"personalityservice",{"_index":1524,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["logger(\"sitemapservice",{"_index":1694,"title":{},"body":{"injectables/SitemapService.html":{}}}],["logger(\"sourcecontroller",{"_index":1756,"title":{},"body":{"controllers/SourceController.html":{}}}],["logger(\"usercontroller",{"_index":1852,"title":{},"body":{"controllers/UsersController.html":{}}}],["logger(\"userservice",{"_index":1905,"title":{},"body":{"injectables/UsersService.html":{}}}],["logger(\"viewservice",{"_index":2019,"title":{},"body":{"injectables/ViewService.html":{}}}],["logger('http",{"_index":1200,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["logger(options.logger",{"_index":3218,"title":{},"body":{"miscellaneous/variables.html":{}}}],["loggermiddleware",{"_index":77,"title":{"injectables/LoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["loggerservice",{"_index":1171,"title":{},"body":{"classes/Logger.html":{}}}],["logging",{"_index":1653,"title":{},"body":{"guards/SessionGuard.html":{}}}],["logic",{"_index":691,"title":{},"body":{"modules/ClaimRevisionModule.html":{},"controllers/UsersController.html":{}}}],["login",{"_index":1705,"title":{},"body":{"injectables/SitemapService.html":{},"controllers/UsersController.html":{}}}],["login(@req",{"_index":1859,"title":{},"body":{"controllers/UsersController.html":{}}}],["login(req",{"_index":1839,"title":{},"body":{"controllers/UsersController.html":{}}}],["long",{"_index":2652,"title":{},"body":{"license.html":{}}}],["lookup",{"_index":628,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["loop",{"_index":1707,"title":{},"body":{"injectables/SitemapService.html":{},"miscellaneous/variables.html":{}}}],["loss",{"_index":3107,"title":{},"body":{"license.html":{}}}],["losses",{"_index":3110,"title":{},"body":{"license.html":{}}}],["lower",{"_index":724,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{}}}],["machine",{"_index":2755,"title":{},"body":{"license.html":{}}}],["made",{"_index":1101,"title":{},"body":{"injectables/HistoryService.html":{},"license.html":{}}}],["mail",{"_index":991,"title":{},"body":{"injectables/EmailService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["maintain",{"_index":2789,"title":{},"body":{"license.html":{}}}],["major",{"_index":2594,"title":{},"body":{"license.html":{}}}],["make",{"_index":2388,"title":{},"body":{"license.html":{}}}],["makes",{"_index":2672,"title":{},"body":{"license.html":{}}}],["making",{"_index":2520,"title":{},"body":{"license.html":{}}}],["manner",{"_index":2997,"title":{},"body":{"license.html":{}}}],["manufacturer",{"_index":2457,"title":{},"body":{"license.html":{}}}],["many",{"_index":1092,"title":{},"body":{"injectables/HistoryService.html":{}}}],["map",{"_index":1951,"title":{},"body":{"injectables/UtilService.html":{}}}],["march",{"_index":3047,"title":{},"body":{"license.html":{}}}],["markdown",{"_index":2286,"title":{},"body":{"dependencies.html":{}}}],["marked",{"_index":2449,"title":{},"body":{"license.html":{}}}],["marks",{"_index":2903,"title":{},"body":{"license.html":{}}}],["masks",{"_index":2507,"title":{},"body":{"license.html":{}}}],["match",{"_index":549,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"controllers/UsersController.html":{}}}],["matches",{"_index":839,"title":{},"body":{"injectables/ClaimService.html":{}}}],["matching",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"injectables/DisableBodyParserMiddleware.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"injectables/GetLanguageMiddleware.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/JsonBodyMiddleware.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"modules/OryModule.html":{},"injectables/OryService.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":2660,"title":{},"body":{"license.html":{}}}],["materially",{"_index":2864,"title":{},"body":{"license.html":{}}}],["math.ceil",{"_index":1605,"title":{},"body":{"injectables/PersonalityService.html":{},"controllers/SourceController.html":{}}}],["math.ceil(totalchanges",{"_index":1066,"title":{},"body":{"controllers/HistoryController.html":{}}}],["math.ceil(totalclaims",{"_index":328,"title":{},"body":{"controllers/ClaimController.html":{}}}],["math.ceil(totalreviews",{"_index":365,"title":{},"body":{"controllers/ClaimController.html":{}}}],["md5",{"_index":1334,"title":{},"body":{"injectables/ParserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["meaning",{"_index":2913,"title":{},"body":{"license.html":{}}}],["means",{"_index":2504,"title":{},"body":{"license.html":{}}}],["measure",{"_index":2680,"title":{},"body":{"license.html":{}}}],["measures",{"_index":2694,"title":{},"body":{"license.html":{}}}],["medium",{"_index":2707,"title":{},"body":{"license.html":{}}}],["meet",{"_index":2723,"title":{},"body":{"license.html":{}}}],["meets",{"_index":2572,"title":{},"body":{"license.html":{}}}],["menu",{"_index":2570,"title":{},"body":{"license.html":{}}}],["merchantability",{"_index":3089,"title":{},"body":{"license.html":{}}}],["mere",{"_index":2549,"title":{},"body":{"license.html":{}}}],["merge",{"_index":542,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/UtilService.html":{}}}],["mergeobjectsinunique",{"_index":1926,"title":{},"body":{"injectables/UtilService.html":{}}}],["mergeobjectsinunique(array",{"_index":1931,"title":{},"body":{"injectables/UtilService.html":{}}}],["merging",{"_index":2970,"title":{},"body":{"license.html":{}}}],["message",{"_index":448,"title":{},"body":{"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"controllers/PersonalityController.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/UsersController.html":{}}}],["met",{"_index":2641,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":2295,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":1203,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/OryService.html":{},"controllers/ViewController.html":{}}}],["methods",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/EmailService.html":{},"injectables/GetLanguageMiddleware.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"injectables/JsonBodyMiddleware.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"injectables/OryService.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["metrics",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["middleware/disable",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["middleware/json",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["middleware/language.middleware",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["middleware/logger.middleware",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["middlewareconsumer",{"_index":11,"title":{},"body":{"modules/AppModule.html":{}}}],["migrated",{"_index":693,"title":{},"body":{"modules/ClaimRevisionModule.html":{}}}],["min",{"_index":1009,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{}}}],["min(0",{"_index":1010,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{}}}],["minlength",{"_index":927,"title":{},"body":{"classes/CreatePersonality.html":{}}}],["minlength(3",{"_index":928,"title":{},"body":{"classes/CreatePersonality.html":{}}}],["miscellaneous",{"_index":2309,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["misleading",{"_index":465,"title":{},"body":{"classes/ClaimReview.html":{},"miscellaneous/enumerations.html":{}}}],["misrepresentation",{"_index":2893,"title":{},"body":{"license.html":{}}}],["mit",{"_index":3186,"title":{},"body":{"properties.html":{}}}],["mode",{"_index":2838,"title":{},"body":{"license.html":{}}}],["model",{"_index":593,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"injectables/PersonalityService.html":{},"injectables/SourceService.html":{},"injectables/UsersService.html":{},"injectables/WikidataService.html":{},"license.html":{}}}],["modeyarn",{"_index":2341,"title":{},"body":{"index.html":{}}}],["modification",{"_index":2501,"title":{},"body":{"license.html":{}}}],["modifications",{"_index":2576,"title":{},"body":{"license.html":{}}}],["modified",{"_index":2448,"title":{},"body":{"license.html":{}}}],["modifies",{"_index":2727,"title":{},"body":{"license.html":{}}}],["modify",{"_index":2419,"title":{},"body":{"license.html":{}}}],["modifying",{"_index":2538,"title":{},"body":{"license.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/HomeModule.html":{},"modules/OryModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimService.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/HomeModule.html":{},"modules/OryModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/HomeModule.html":{},"modules/OryModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{},"modules.html":{},"overview.html":{}}}],["mongo",{"_index":2250,"title":{},"body":{"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["mongodb",{"_index":669,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["mongodb://${mongodb_host}/${mongodb_name",{"_index":3249,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongodb_host",{"_index":2195,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mongodb_name",{"_index":2196,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mongoerror",{"_index":1452,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["mongooptions",{"_index":3233,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongoose",{"_index":164,"title":{},"body":{"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Personality.html":{},"injectables/PersonalityService.html":{},"classes/Source.html":{},"injectables/SourceService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["mongoose.date",{"_index":1034,"title":{},"body":{"classes/History.html":{}}}],["mongoose.document",{"_index":172,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Personality.html":{},"classes/Source.html":{}}}],["mongoose.types.objectid",{"_index":177,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Source.html":{}}}],["mongoose.types.objectid(query.personality",{"_index":312,"title":{},"body":{"controllers/ClaimController.html":{}}}],["mongoosemodule",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/HistoryModule.html":{},"modules/PersonalityModule.html":{},"modules/SourceModule.html":{},"modules/UsersModule.html":{},"modules/WikidataModule.html":{}}}],["mongoosemodule.forfeature",{"_index":436,"title":{},"body":{"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/HistoryModule.html":{},"modules/PersonalityModule.html":{},"modules/SourceModule.html":{},"miscellaneous/variables.html":{}}}],["mongoosemodule.forfeatureasync",{"_index":1892,"title":{},"body":{"modules/UsersModule.html":{},"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["mongoosemodule.forroot",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["mongostore",{"_index":2189,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mongostore.create",{"_index":3231,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongourl",{"_index":3232,"title":{},"body":{"miscellaneous/variables.html":{}}}],["more",{"_index":2772,"title":{},"body":{"license.html":{}}}],["moreover",{"_index":2941,"title":{},"body":{"license.html":{}}}],["move",{"_index":1862,"title":{},"body":{"controllers/UsersController.html":{}}}],["mr|mrs|ms|dr|he\\s|she\\s|it\\s|they\\s|their\\s|our\\s|we\\s|but\\s|however\\s|that\\s|this\\s|wherever)/g",{"_index":1353,"title":{},"body":{"injectables/ParserService.html":{}}}],["mr|st|mrs|ms|dr)[.]/g",{"_index":1347,"title":{},"body":{"injectables/ParserService.html":{},"miscellaneous/variables.html":{}}}],["name",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreatePersonality.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/EmailService.html":{},"injectables/GetLanguageMiddleware.html":{},"classes/GetPersonalities.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"injectables/JsonBodyMiddleware.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"injectables/OryService.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"injectables/StatsService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["names",{"_index":2896,"title":{},"body":{"license.html":{}}}],["nature",{"_index":2742,"title":{},"body":{"license.html":{}}}],["ndisallow",{"_index":1622,"title":{},"body":{"controllers/RootController.html":{}}}],["necessary",{"_index":1107,"title":{},"body":{"injectables/HistoryService.html":{},"license.html":{}}}],["need",{"_index":2410,"title":{},"body":{"license.html":{}}}],["needed",{"_index":2481,"title":{},"body":{"license.html":{}}}],["nestfactory.create",{"_index":3216,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nestjs/axios",{"_index":276,"title":{},"body":{"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/DisableBodyParserMiddleware.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GetLanguageMiddleware.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/JsonBodyMiddleware.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"modules/OryModule.html":{},"injectables/OryService.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"modules/HistoryModule.html":{},"controllers/OryController.html":{},"modules/OryModule.html":{},"injectables/OryService.html":{},"guards/SessionGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1815,"title":{},"body":{"classes/UpdateClaimDTO.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"classes/Claim.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Personality.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"classes/Source.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":137,"title":{},"body":{"modules/AuthModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":2225,"title":{},"body":{"dependencies.html":{}}}],["nestjs/throttler",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":934,"title":{},"body":{"injectables/DisableBodyParserMiddleware.html":{},"injectables/GetLanguageMiddleware.html":{},"injectables/JsonBodyMiddleware.html":{},"injectables/LoggerMiddleware.html":{}}}],["nestmodule",{"_index":29,"title":{},"body":{"modules/AppModule.html":{}}}],["network",{"_index":2551,"title":{},"body":{"license.html":{}}}],["new",{"_index":296,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/OryService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["newarray",{"_index":1950,"title":{},"body":{"injectables/UtilService.html":{}}}],["newarray.get(propertyvalue",{"_index":1958,"title":{},"body":{"injectables/UtilService.html":{}}}],["newarray.has(propertyvalue",{"_index":1955,"title":{},"body":{"injectables/UtilService.html":{}}}],["newarray.set(propertyvalue",{"_index":1956,"title":{},"body":{"injectables/UtilService.html":{}}}],["newclaim",{"_index":808,"title":{},"body":{"injectables/ClaimService.html":{}}}],["newclaim._id",{"_index":817,"title":{},"body":{"injectables/ClaimService.html":{}}}],["newclaim.latestrevision",{"_index":811,"title":{},"body":{"injectables/ClaimService.html":{}}}],["newclaim.save",{"_index":821,"title":{},"body":{"injectables/ClaimService.html":{}}}],["newclaim.slug",{"_index":813,"title":{},"body":{"injectables/ClaimService.html":{}}}],["newclaim.toobject",{"_index":822,"title":{},"body":{"injectables/ClaimService.html":{}}}],["newclaimreview",{"_index":647,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["newclaimrevision",{"_index":734,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{}}}],["newclaimrevision._id",{"_index":812,"title":{},"body":{"injectables/ClaimService.html":{}}}],["newclaimrevision.save",{"_index":743,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["newclaimrevision.slug",{"_index":814,"title":{},"body":{"injectables/ClaimService.html":{}}}],["newclaimrevision.toobject",{"_index":823,"title":{},"body":{"injectables/ClaimService.html":{}}}],["newhistory",{"_index":1112,"title":{},"body":{"injectables/HistoryService.html":{}}}],["newhistory.save",{"_index":1114,"title":{},"body":{"injectables/HistoryService.html":{}}}],["newpassword",{"_index":1866,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["newpassword).then",{"_index":1920,"title":{},"body":{"injectables/UsersService.html":{}}}],["newpersonality",{"_index":1545,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["newpersonality._id",{"_index":1549,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["newpersonality.save",{"_index":1552,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["newpersonalitybody",{"_index":1519,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["newpersonalitybody.slug",{"_index":1584,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["news",{"_index":2324,"title":{},"body":{"index.html":{}}}],["newsentences",{"_index":1376,"title":{},"body":{"injectables/ParserService.html":{}}}],["newsentences.concat(semicolonsentences",{"_index":1390,"title":{},"body":{"injectables/ParserService.html":{}}}],["newuser",{"_index":1908,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuser.oryid",{"_index":1913,"title":{},"body":{"injectables/UsersService.html":{}}}],["newwikidatacache",{"_index":2086,"title":{},"body":{"injectables/WikidataService.html":{}}}],["newwikidatacache.save",{"_index":2088,"title":{},"body":{"injectables/WikidataService.html":{}}}],["next",{"_index":342,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/GetLanguageMiddleware.html":{},"injectables/JsonBodyMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"controllers/OryController.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"injectables/ViewService.html":{},"dependencies.html":{},"license.html":{}}}],["next(request",{"_index":1636,"title":{},"body":{"guards/SessionGuard.html":{}}}],["next/dist/server/next",{"_index":2022,"title":{},"body":{"injectables/ViewService.html":{}}}],["nextapirequest",{"_index":1236,"title":{},"body":{"controllers/OryController.html":{}}}],["nextapiresponse",{"_index":1237,"title":{},"body":{"controllers/OryController.html":{}}}],["nextfunction",{"_index":1018,"title":{},"body":{"injectables/GetLanguageMiddleware.html":{},"injectables/LoggerMiddleware.html":{}}}],["nextserver",{"_index":2017,"title":{},"body":{"injectables/ViewService.html":{}}}],["nlp",{"_index":1336,"title":{},"body":{"injectables/ParserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["nlp(content",{"_index":1364,"title":{},"body":{"injectables/ParserService.html":{}}}],["nlp.extend(require('compromise",{"_index":1338,"title":{},"body":{"injectables/ParserService.html":{}}}],["nlpcontent",{"_index":1363,"title":{},"body":{"injectables/ParserService.html":{}}}],["nlpcontent.paragraphs",{"_index":1365,"title":{},"body":{"injectables/ParserService.html":{}}}],["nlpcontent.text(this.nlpoptions",{"_index":1375,"title":{},"body":{"injectables/ParserService.html":{}}}],["nlpoptions",{"_index":1312,"title":{},"body":{"injectables/ParserService.html":{}}}],["nodemailer",{"_index":959,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["nodemailer.createtransport",{"_index":977,"title":{},"body":{"injectables/EmailService.html":{}}}],["non",{"_index":2496,"title":{},"body":{"license.html":{}}}],["noncommercially",{"_index":2778,"title":{},"body":{"license.html":{}}}],["normal",{"_index":2592,"title":{},"body":{"license.html":{}}}],["normally",{"_index":2814,"title":{},"body":{"license.html":{}}}],["notfoundexception",{"_index":709,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/NotFoundFilter.html":{},"injectables/PersonalityService.html":{}}}],["notfoundfilter",{"_index":64,"title":{"classes/NotFoundFilter.html":{}},"body":{"modules/AppModule.html":{},"classes/NotFoundFilter.html":{},"coverage.html":{}}}],["nothing",{"_index":2954,"title":{},"body":{"license.html":{}}}],["notice",{"_index":2563,"title":{},"body":{"license.html":{}}}],["notices",{"_index":2557,"title":{},"body":{"license.html":{}}}],["notifies",{"_index":2942,"title":{},"body":{"license.html":{}}}],["notify",{"_index":2936,"title":{},"body":{"license.html":{}}}],["notwithstanding",{"_index":2880,"title":{},"body":{"license.html":{}}}],["null",{"_index":834,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":674,"title":{},"body":{"classes/ClaimRevision.html":{},"injectables/ClaimService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"injectables/ParserService.html":{},"license.html":{}}}],["numbered",{"_index":3076,"title":{},"body":{"license.html":{}}}],["o",{"_index":3283,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object",{"_index":566,"title":{},"body":{"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"classes/WikidataCache.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["object.assign",{"_index":1574,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["object.assign(claim",{"_index":862,"title":{},"body":{"injectables/ClaimService.html":{}}}],["object.assign(parsedurl.query",{"_index":404,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["object.assign(personality",{"_index":1588,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["object.assign(sentence.props",{"_index":872,"title":{},"body":{"injectables/ClaimService.html":{}}}],["object.keys(state).reduce",{"_index":633,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["objectid",{"_index":640,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["objects",{"_index":1938,"title":{},"body":{"injectables/UtilService.html":{}}}],["obligate",{"_index":3059,"title":{},"body":{"license.html":{}}}],["obligated",{"_index":2795,"title":{},"body":{"license.html":{}}}],["obligations",{"_index":2682,"title":{},"body":{"license.html":{}}}],["occasionally",{"_index":2777,"title":{},"body":{"license.html":{}}}],["occurring",{"_index":2951,"title":{},"body":{"license.html":{}}}],["occurs",{"_index":2465,"title":{},"body":{"license.html":{}}}],["offer",{"_index":2436,"title":{},"body":{"license.html":{}}}],["offered",{"_index":2805,"title":{},"body":{"license.html":{}}}],["offering",{"_index":2781,"title":{},"body":{"license.html":{}}}],["official",{"_index":2578,"title":{},"body":{"license.html":{}}}],["ok",{"_index":1626,"title":{},"body":{"controllers/RootController.html":{}}}],["old",{"_index":777,"title":{},"body":{"injectables/ClaimService.html":{},"controllers/UsersController.html":{}}}],["omit",{"_index":573,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["one",{"_index":2584,"title":{},"body":{"license.html":{}}}],["onmodel",{"_index":1038,"title":{},"body":{"classes/History.html":{},"classes/Source.html":{}}}],["onmoduleinit",{"_index":2014,"title":{},"body":{"injectables/ViewService.html":{}}}],["operate",{"_index":3113,"title":{},"body":{"license.html":{}}}],["operated",{"_index":2786,"title":{},"body":{"license.html":{}}}],["operating",{"_index":2605,"title":{},"body":{"license.html":{}}}],["operation",{"_index":2702,"title":{},"body":{"license.html":{}}}],["option",{"_index":612,"title":{},"body":{"injectables/ClaimReviewService.html":{},"license.html":{}}}],["optional",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreatePersonality.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"injectables/GetLanguageMiddleware.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"injectables/JsonBodyMiddleware.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"injectables/OryService.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"injectables/StatsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"injectables/WikidataService.html":{}}}],["options",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailService.html":{},"injectables/PersonalityService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["options.config",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["options.config.db.connection_uri",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["options.config.db.options",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["options.config.interface",{"_index":3244,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.config.port",{"_index":3245,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.config.throttle.limit",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["options.config.throttle.ttl",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["options.db",{"_index":3247,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.logger.log",{"_index":3239,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.logger.log(\"error",{"_index":3291,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.logger.log(\"info",{"_index":3252,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.name",{"_index":3240,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options?.config?.cors",{"_index":3211,"title":{},"body":{"miscellaneous/variables.html":{}}}],["optionstoupdate",{"_index":695,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{}}}],["order",{"_index":319,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"injectables/PersonalityService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"license.html":{}}}],["organization",{"_index":2968,"title":{},"body":{"license.html":{}}}],["organizations",{"_index":2515,"title":{},"body":{"license.html":{}}}],["origin",{"_index":2142,"title":{},"body":{"injectables/WikidataService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["original",{"_index":2894,"title":{},"body":{"license.html":{}}}],["originalurl",{"_index":1204,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["ory",{"_index":1262,"title":{},"body":{"injectables/OryService.html":{},"guards/SessionGuard.html":{},"controllers/UsersController.html":{}}}],["ory.controller",{"_index":1259,"title":{},"body":{"modules/OryModule.html":{}}}],["ory.service",{"_index":1246,"title":{},"body":{"controllers/OryController.html":{},"modules/OryModule.html":{}}}],["ory.tosession(undefined",{"_index":1647,"title":{},"body":{"guards/SessionGuard.html":{}}}],["ory/cli",{"_index":2227,"title":{},"body":{"dependencies.html":{}}}],["ory/client",{"_index":1279,"title":{},"body":{"injectables/OryService.html":{},"guards/SessionGuard.html":{},"dependencies.html":{}}}],["ory/integrations",{"_index":2230,"title":{},"body":{"dependencies.html":{}}}],["ory/ory.controller",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["ory/ory.module",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["ory/ory.service",{"_index":1906,"title":{},"body":{"injectables/UsersService.html":{}}}],["orycontroller",{"_index":89,"title":{"controllers/OryController.html":{}},"body":{"modules/AppModule.html":{},"controllers/OryController.html":{},"modules/OryModule.html":{},"coverage.html":{}}}],["oryid",{"_index":1819,"title":{},"body":{"classes/User.html":{},"interfaces/UserDocument.html":{}}}],["orymodule",{"_index":79,"title":{"modules/OryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OryModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["orypaths",{"_index":1233,"title":{},"body":{"controllers/OryController.html":{}}}],["orypaths(@req",{"_index":1252,"title":{},"body":{"controllers/OryController.html":{}}}],["orypaths(req",{"_index":1240,"title":{},"body":{"controllers/OryController.html":{}}}],["oryservice",{"_index":1245,"title":{"injectables/OryService.html":{}},"body":{"controllers/OryController.html":{},"modules/OryModule.html":{},"injectables/OryService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["oryuser",{"_index":1910,"title":{},"body":{"injectables/UsersService.html":{}}}],["oryuser.id",{"_index":1914,"title":{},"body":{"injectables/UsersService.html":{}}}],["others",{"_index":2412,"title":{},"body":{"license.html":{}}}],["otherwise",{"_index":2653,"title":{},"body":{"license.html":{}}}],["out",{"_index":134,"title":{},"body":{"modules/AuthModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/HomeModule.html":{},"classes/NotFoundFilter.html":{},"modules/OryModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{},"license.html":{},"overview.html":{}}}],["output",{"_index":2645,"title":{},"body":{"license.html":{}}}],["outside",{"_index":2665,"title":{},"body":{"license.html":{}}}],["overallstats",{"_index":860,"title":{},"body":{"injectables/ClaimService.html":{}}}],["overview",{"_index":3178,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":778,"title":{},"body":{"injectables/ClaimService.html":{}}}],["overwrites",{"_index":1521,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["owned",{"_index":2993,"title":{},"body":{"license.html":{}}}],["p.content.foreach((sentence",{"_index":381,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{}}}],["p.content.length",{"_index":864,"title":{},"body":{"injectables/ClaimService.html":{}}}],["package",{"_index":2207,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["packaged",{"_index":2734,"title":{},"body":{"license.html":{}}}],["packages:yarn",{"_index":2339,"title":{},"body":{"index.html":{}}}],["packaging",{"_index":2593,"title":{},"body":{"license.html":{}}}],["page",{"_index":315,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"classes/NotFoundFilter.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["pages",{"_index":2157,"title":{},"body":{"injectables/WikidataService.html":{}}}],["pages.length",{"_index":2159,"title":{},"body":{"injectables/WikidataService.html":{}}}],["pagesize",{"_index":317,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"injectables/PersonalityService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{}}}],["paginate",{"_index":1091,"title":{},"body":{"injectables/HistoryService.html":{}}}],["paginated",{"_index":1094,"title":{},"body":{"injectables/HistoryService.html":{}}}],["paginates",{"_index":1708,"title":{},"body":{"injectables/SitemapService.html":{}}}],["paper",{"_index":3148,"title":{},"body":{"license.html":{}}}],["paragraph",{"_index":1372,"title":{},"body":{"injectables/ParserService.html":{},"license.html":{}}}],["paragraph.content.foreach((sentence",{"_index":867,"title":{},"body":{"injectables/ClaimService.html":{}}}],["paragraphid",{"_index":1367,"title":{},"body":{"injectables/ParserService.html":{}}}],["paragraphs",{"_index":1339,"title":{},"body":{"injectables/ParserService.html":{},"dependencies.html":{},"license.html":{}}}],["paragraphs.foreach((paragraph",{"_index":1366,"title":{},"body":{"injectables/ParserService.html":{}}}],["paragraphsequence",{"_index":1313,"title":{},"body":{"injectables/ParserService.html":{}}}],["param",{"_index":265,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/SourceController.html":{},"injectables/UtilService.html":{}}}],["parameters",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/EmailService.html":{},"injectables/GetLanguageMiddleware.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"injectables/JsonBodyMiddleware.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"injectables/OryService.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"injectables/StatsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"injectables/WikidataService.html":{}}}],["params",{"_index":243,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/HistoryService.html":{},"controllers/SourceController.html":{},"injectables/WikidataService.html":{}}}],["params.language",{"_index":2083,"title":{},"body":{"injectables/WikidataService.html":{}}}],["params.wikidataid",{"_index":2082,"title":{},"body":{"injectables/WikidataService.html":{}}}],["parse",{"_index":278,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/OryController.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["parse(content",{"_index":1321,"title":{},"body":{"injectables/ParserService.html":{}}}],["parse(req.url",{"_index":393,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/OryController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["parsedurl",{"_index":392,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/OryController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["parsedurl.pathname",{"_index":1994,"title":{},"body":{"controllers/ViewController.html":{}}}],["parsedurl.query",{"_index":1995,"title":{},"body":{"controllers/ViewController.html":{}}}],["parseint(gethistory.pagesize",{"_index":1060,"title":{},"body":{"controllers/HistoryController.html":{}}}],["parseint(getsources.pagesize",{"_index":1759,"title":{},"body":{"controllers/SourceController.html":{}}}],["parseint(page",{"_index":617,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["parseint(pagesize",{"_index":366,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/PersonalityService.html":{}}}],["parser",{"_index":1143,"title":{},"body":{"injectables/JsonBodyMiddleware.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["parser.middleware",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["parser.middleware.ts",{"_index":930,"title":{},"body":{"injectables/DisableBodyParserMiddleware.html":{},"coverage.html":{}}}],["parser.middleware.ts:6",{"_index":933,"title":{},"body":{"injectables/DisableBodyParserMiddleware.html":{}}}],["parser.service",{"_index":1310,"title":{},"body":{"modules/ParserModule.html":{}}}],["parser/parser.module",{"_index":433,"title":{},"body":{"modules/ClaimModule.html":{},"modules/ClaimRevisionModule.html":{}}}],["parser/parser.service",{"_index":711,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["parsermodule",{"_index":428,"title":{"modules/ParserModule.html":{}},"body":{"modules/ClaimModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/ParserModule.html":{},"modules.html":{},"overview.html":{}}}],["parserservice",{"_index":698,"title":{"injectables/ParserService.html":{}},"body":{"injectables/ClaimRevisionService.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"coverage.html":{},"overview.html":{}}}],["parsesentence",{"_index":1317,"title":{},"body":{"injectables/ParserService.html":{}}}],["parsesentence(sentencecontent",{"_index":1323,"title":{},"body":{"injectables/ParserService.html":{}}}],["part",{"_index":2517,"title":{},"body":{"license.html":{}}}],["partialtype",{"_index":1814,"title":{},"body":{"classes/UpdateClaimDTO.html":{}}}],["partialtype(createclaimdto",{"_index":1816,"title":{},"body":{"classes/UpdateClaimDTO.html":{}}}],["particular",{"_index":2582,"title":{},"body":{"license.html":{}}}],["parties",{"_index":2548,"title":{},"body":{"license.html":{}}}],["parts",{"_index":2632,"title":{},"body":{"license.html":{}}}],["party",{"_index":2787,"title":{},"body":{"license.html":{}}}],["party's",{"_index":2972,"title":{},"body":{"license.html":{}}}],["pass",{"_index":986,"title":{},"body":{"injectables/EmailService.html":{},"license.html":{}}}],["passport",{"_index":1155,"title":{},"body":{"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"guards/SessionGuard.html":{},"dependencies.html":{}}}],["passport.deserializeuser(this.usermodel.deserializeuser",{"_index":1159,"title":{},"body":{"injectables/LocalSerializer.html":{}}}],["passport.serializeuser(this.usermodel.serializeuser",{"_index":1158,"title":{},"body":{"injectables/LocalSerializer.html":{}}}],["passportmodule",{"_index":136,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":140,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1164,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1165,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["password",{"_index":1267,"title":{},"body":{"injectables/OryService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["patent",{"_index":2926,"title":{},"body":{"license.html":{}}}],["patents",{"_index":2485,"title":{},"body":{"license.html":{}}}],["path",{"_index":965,"title":{},"body":{"injectables/EmailService.html":{},"injectables/PersonalityService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["pattern",{"_index":2463,"title":{},"body":{"license.html":{}}}],["payment",{"_index":3040,"title":{},"body":{"license.html":{}}}],["peer",{"_index":2800,"title":{},"body":{"license.html":{}}}],["peers",{"_index":2803,"title":{},"body":{"license.html":{}}}],["per",{"_index":1093,"title":{},"body":{"injectables/HistoryService.html":{}}}],["percentage",{"_index":1945,"title":{},"body":{"injectables/UtilService.html":{}}}],["percentage.tofixed(0",{"_index":1947,"title":{},"body":{"injectables/UtilService.html":{}}}],["performance",{"_index":1710,"title":{},"body":{"injectables/SitemapService.html":{},"license.html":{}}}],["performing",{"_index":2618,"title":{},"body":{"license.html":{}}}],["permanently",{"_index":2934,"title":{},"body":{"license.html":{}}}],["permission",{"_index":2439,"title":{},"body":{"license.html":{}}}],["permissions",{"_index":2636,"title":{},"body":{"license.html":{}}}],["permissive",{"_index":2714,"title":{},"body":{"license.html":{}}}],["permit",{"_index":2751,"title":{},"body":{"license.html":{}}}],["permits",{"_index":2916,"title":{},"body":{"license.html":{}}}],["permitted",{"_index":2367,"title":{},"body":{"license.html":{}}}],["perpetuity",{"_index":2853,"title":{},"body":{"license.html":{}}}],["personal",{"_index":2813,"title":{},"body":{"license.html":{}}}],["personalidades",{"_index":2320,"title":{},"body":{"index.html":{}}}],["personalities",{"_index":1128,"title":{},"body":{"controllers/HomeController.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/StatsService.html":{}}}],["personalities.dto",{"_index":1444,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["personalities.dto.ts",{"_index":1024,"title":{},"body":{"classes/GetPersonalities.html":{},"coverage.html":{}}}],["personalities.dto.ts:10",{"_index":1030,"title":{},"body":{"classes/GetPersonalities.html":{}}}],["personalities.dto.ts:13",{"_index":1028,"title":{},"body":{"classes/GetPersonalities.html":{}}}],["personalities.dto.ts:17",{"_index":1026,"title":{},"body":{"classes/GetPersonalities.html":{}}}],["personalities.dto.ts:21",{"_index":1031,"title":{},"body":{"classes/GetPersonalities.html":{}}}],["personalities.dto.ts:25",{"_index":1027,"title":{},"body":{"classes/GetPersonalities.html":{}}}],["personalities.dto.ts:6",{"_index":1029,"title":{},"body":{"classes/GetPersonalities.html":{}}}],["personalities.map(async",{"_index":1537,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["personality",{"_index":148,"title":{"classes/Personality.html":{}},"body":{"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/GetClaimsDTO.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["personality._id",{"_index":397,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{}}}],["personality.claims",{"_index":1559,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["personality.controller",{"_index":1489,"title":{},"body":{"modules/PersonalityModule.html":{}}}],["personality.dto",{"_index":1445,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["personality.dto.ts",{"_index":911,"title":{},"body":{"classes/CreatePersonality.html":{},"coverage.html":{}}}],["personality.dto.ts:12",{"_index":923,"title":{},"body":{"classes/CreatePersonality.html":{}}}],["personality.dto.ts:16",{"_index":920,"title":{},"body":{"classes/CreatePersonality.html":{}}}],["personality.dto.ts:20",{"_index":918,"title":{},"body":{"classes/CreatePersonality.html":{}}}],["personality.dto.ts:24",{"_index":924,"title":{},"body":{"classes/CreatePersonality.html":{}}}],["personality.dto.ts:6",{"_index":922,"title":{},"body":{"classes/CreatePersonality.html":{}}}],["personality.dto.ts:9",{"_index":916,"title":{},"body":{"classes/CreatePersonality.html":{}}}],["personality.name",{"_index":1491,"title":{},"body":{"modules/PersonalityModule.html":{},"miscellaneous/variables.html":{}}}],["personality.service",{"_index":1443,"title":{},"body":{"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{}}}],["personality.slug",{"_index":1543,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["personality.wikidata",{"_index":1569,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["personality/${personality.slug",{"_index":1714,"title":{},"body":{"injectables/SitemapService.html":{}}}],["personality/${personality.slug}/claim/${claim.slug",{"_index":1716,"title":{},"body":{"injectables/SitemapService.html":{}}}],["personality/${personality.slug}/claim/${claim.slug}/sentence/${review._id",{"_index":1717,"title":{},"body":{"injectables/SitemapService.html":{}}}],["personality/personality.module",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/HomeModule.html":{},"modules/SitemapModule.html":{},"modules/StatsModule.html":{}}}],["personality/personality.service",{"_index":281,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"injectables/SitemapService.html":{},"injectables/StatsService.html":{}}}],["personality/schemas/personality.schema",{"_index":165,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{}}}],["personalitybody",{"_index":1505,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["personalityclaimpage",{"_index":204,"title":{},"body":{"controllers/ClaimController.html":{}}}],["personalityclaimpage(@req",{"_index":411,"title":{},"body":{"controllers/ClaimController.html":{}}}],["personalityclaimpage(req",{"_index":248,"title":{},"body":{"controllers/ClaimController.html":{}}}],["personalityclaimpagewithrevision",{"_index":205,"title":{},"body":{"controllers/ClaimController.html":{}}}],["personalityclaimpagewithrevision(@req",{"_index":415,"title":{},"body":{"controllers/ClaimController.html":{}}}],["personalityclaimpagewithrevision(req",{"_index":251,"title":{},"body":{"controllers/ClaimController.html":{}}}],["personalitycontroller",{"_index":1408,"title":{"controllers/PersonalityController.html":{}},"body":{"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"coverage.html":{}}}],["personalitycreatesearch",{"_index":1411,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["personalitycreatesearch(@req",{"_index":1475,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["personalitycreatesearch(req",{"_index":1429,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["personalitydocument",{"_index":1402,"title":{},"body":{"classes/Personality.html":{},"injectables/PersonalityService.html":{},"miscellaneous/typealiases.html":{}}}],["personalityexists",{"_index":1539,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["personalityexists.restore",{"_index":1542,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["personalityhistorypage",{"_index":206,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{}}}],["personalityhistorypage(@req",{"_index":421,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{}}}],["personalityhistorypage(req",{"_index":254,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{}}}],["personalityid",{"_index":767,"title":{},"body":{"injectables/ClaimService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["personalitylist",{"_index":1412,"title":{},"body":{"controllers/PersonalityController.html":{},"controllers/UsersController.html":{}}}],["personalitylist(@req",{"_index":1480,"title":{},"body":{"controllers/PersonalityController.html":{},"controllers/UsersController.html":{}}}],["personalitylist(req",{"_index":1434,"title":{},"body":{"controllers/PersonalityController.html":{},"controllers/UsersController.html":{}}}],["personalitymodel",{"_index":1490,"title":{},"body":{"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["personalitymodule",{"_index":39,"title":{"modules/PersonalityModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/HomeModule.html":{},"modules/PersonalityModule.html":{},"modules/SitemapModule.html":{},"modules/StatsModule.html":{},"modules.html":{},"overview.html":{}}}],["personalitypage",{"_index":1413,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["personalitypage(@req",{"_index":1478,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["personalitypage(req",{"_index":1437,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["personalityschema",{"_index":1407,"title":{},"body":{"classes/Personality.html":{},"modules/PersonalityModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["personalityschemaraw",{"_index":1403,"title":{},"body":{"classes/Personality.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["personalityschemaraw.plugin(softdeleteplugin",{"_index":1406,"title":{},"body":{"classes/Personality.html":{}}}],["personalityschemaraw.virtual('claims",{"_index":1405,"title":{},"body":{"classes/Personality.html":{}}}],["personalityservice",{"_index":280,"title":{"injectables/PersonalityService.html":{}},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/StatsService.html":{},"coverage.html":{},"overview.html":{}}}],["personalityslug",{"_index":389,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/PersonalityService.html":{}}}],["personalityupdate",{"_index":1589,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["pertinent",{"_index":3057,"title":{},"body":{"license.html":{}}}],["ph\\.d\\./g",{"_index":1349,"title":{},"body":{"injectables/ParserService.html":{},"miscellaneous/variables.html":{}}}],["phdregex",{"_index":1348,"title":{},"body":{"injectables/ParserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["physical",{"_index":2759,"title":{},"body":{"license.html":{}}}],["physically",{"_index":2775,"title":{},"body":{"license.html":{}}}],["pid",{"_index":3241,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pieces",{"_index":2405,"title":{},"body":{"license.html":{}}}],["place",{"_index":2783,"title":{},"body":{"license.html":{}}}],["plain",{"_index":1935,"title":{},"body":{"injectables/UtilService.html":{}}}],["plaintext",{"_index":2141,"title":{},"body":{"injectables/WikidataService.html":{}}}],["plataforma",{"_index":2317,"title":{},"body":{"index.html":{}}}],["platform",{"_index":3183,"title":{},"body":{"properties.html":{}}}],["please",{"_index":3172,"title":{},"body":{"license.html":{}}}],["plugin",{"_index":2235,"title":{},"body":{"dependencies.html":{}}}],["plus",{"_index":2975,"title":{},"body":{"license.html":{}}}],["poder",{"_index":3281,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pointer",{"_index":3140,"title":{},"body":{"license.html":{}}}],["policy",{"_index":1702,"title":{},"body":{"injectables/SitemapService.html":{},"controllers/ViewController.html":{}}}],["populate",{"_index":626,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/PersonalityService.html":{}}}],["populate(\"latestrevision",{"_index":793,"title":{},"body":{"injectables/ClaimService.html":{}}}],["populate(\"personality",{"_index":716,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{}}}],["populate(\"sources",{"_index":848,"title":{},"body":{"injectables/ClaimService.html":{}}}],["populate(\"user",{"_index":1117,"title":{},"body":{"injectables/HistoryService.html":{}}}],["populates",{"_index":622,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["port",{"_index":980,"title":{},"body":{"injectables/EmailService.html":{}}}],["portion",{"_index":2808,"title":{},"body":{"license.html":{}}}],["positive",{"_index":798,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{}}}],["possesses",{"_index":2771,"title":{},"body":{"license.html":{}}}],["possession",{"_index":2731,"title":{},"body":{"license.html":{}}}],["possibility",{"_index":3116,"title":{},"body":{"license.html":{}}}],["possible",{"_index":3132,"title":{},"body":{"license.html":{}}}],["post",{"_index":266,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/OryController.html":{},"injectables/OryService.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{}}}],["post(\"api/.ory",{"_index":1250,"title":{},"body":{"controllers/OryController.html":{}}}],["post(\"api/claim",{"_index":334,"title":{},"body":{"controllers/ClaimController.html":{}}}],["post(\"api/personality",{"_index":1449,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["post(\"api/user/signin",{"_index":1858,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('api/claim",{"_index":228,"title":{},"body":{"controllers/ClaimController.html":{}}}],["post('api/personality",{"_index":1415,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["postorypaths",{"_index":1234,"title":{},"body":{"controllers/OryController.html":{}}}],["postorypaths(@req",{"_index":1251,"title":{},"body":{"controllers/OryController.html":{}}}],["postorypaths(req",{"_index":1242,"title":{},"body":{"controllers/OryController.html":{}}}],["postprocess",{"_index":748,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["postprocess(claim",{"_index":770,"title":{},"body":{"injectables/ClaimService.html":{}}}],["postprocess(personality",{"_index":1517,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["postprocesssentences",{"_index":1318,"title":{},"body":{"injectables/ParserService.html":{}}}],["postprocesssentences(sentences",{"_index":1327,"title":{},"body":{"injectables/ParserService.html":{}}}],["power",{"_index":2696,"title":{},"body":{"license.html":{}}}],["practical",{"_index":2378,"title":{},"body":{"license.html":{}}}],["practice",{"_index":2472,"title":{},"body":{"license.html":{}}}],["preamble",{"_index":2373,"title":{},"body":{"license.html":{}}}],["precise",{"_index":2497,"title":{},"body":{"license.html":{}}}],["precisely",{"_index":2469,"title":{},"body":{"license.html":{}}}],["predecessor",{"_index":2973,"title":{},"body":{"license.html":{}}}],["preferred",{"_index":2574,"title":{},"body":{"license.html":{}}}],["prefix",{"_index":481,"title":{},"body":{"controllers/ClaimReviewController.html":{},"controllers/HomeController.html":{},"controllers/RootController.html":{},"controllers/SitemapController.html":{},"controllers/StatsController.html":{},"controllers/ViewController.html":{}}}],["prefixes",{"_index":1346,"title":{},"body":{"injectables/ParserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["present",{"_index":3069,"title":{},"body":{"license.html":{}}}],["presents",{"_index":2568,"title":{},"body":{"license.html":{}}}],["preservation",{"_index":2888,"title":{},"body":{"license.html":{}}}],["prevent",{"_index":2411,"title":{},"body":{"license.html":{}}}],["prevented",{"_index":2847,"title":{},"body":{"license.html":{}}}],["preview",{"_index":2218,"title":{},"body":{"dependencies.html":{}}}],["previous",{"_index":1105,"title":{},"body":{"injectables/HistoryService.html":{},"license.html":{}}}],["previouschange",{"_index":1097,"title":{},"body":{"injectables/HistoryService.html":{}}}],["previousclaim",{"_index":831,"title":{},"body":{"injectables/ClaimService.html":{}}}],["previouspersonality",{"_index":1587,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["previousrevision",{"_index":825,"title":{},"body":{"injectables/ClaimService.html":{}}}],["previousrevision._id",{"_index":827,"title":{},"body":{"injectables/ClaimService.html":{}}}],["price",{"_index":2400,"title":{},"body":{"license.html":{}}}],["primarily",{"_index":3042,"title":{},"body":{"license.html":{}}}],["prior",{"_index":2937,"title":{},"body":{"license.html":{}}}],["priority",{"_index":1718,"title":{},"body":{"injectables/SitemapService.html":{}}}],["privacy",{"_index":1701,"title":{},"body":{"injectables/SitemapService.html":{},"controllers/ViewController.html":{}}}],["private",{"_index":294,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"controllers/OryController.html":{},"injectables/OryService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{},"license.html":{}}}],["problems",{"_index":2450,"title":{},"body":{"license.html":{}}}],["procedures",{"_index":2841,"title":{},"body":{"license.html":{}}}],["process.env.development_password",{"_index":3267,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.environment",{"_index":2025,"title":{},"body":{"injectables/ViewService.html":{}}}],["process.env.mongodb_host",{"_index":3302,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.mongodb_name",{"_index":3304,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.pid",{"_index":3242,"title":{},"body":{"miscellaneous/variables.html":{}}}],["procuring",{"_index":3030,"title":{},"body":{"license.html":{}}}],["produce",{"_index":2608,"title":{},"body":{"license.html":{}}}],["product",{"_index":2760,"title":{},"body":{"license.html":{}}}],["production",{"_index":2349,"title":{},"body":{"index.html":{}}}],["products",{"_index":2467,"title":{},"body":{"license.html":{}}}],["profile",{"_index":1706,"title":{},"body":{"injectables/SitemapService.html":{},"controllers/UsersController.html":{}}}],["profile(@req",{"_index":1884,"title":{},"body":{"controllers/UsersController.html":{}}}],["profile(req",{"_index":1844,"title":{},"body":{"controllers/UsersController.html":{}}}],["program",{"_index":2387,"title":{},"body":{"license.html":{}}}],["program's",{"_index":2706,"title":{},"body":{"license.html":{}}}],["programmer",{"_index":3161,"title":{},"body":{"license.html":{}}}],["programming",{"_index":2583,"title":{},"body":{"license.html":{}}}],["programs",{"_index":2397,"title":{},"body":{"license.html":{}}}],["prohibit",{"_index":2471,"title":{},"body":{"license.html":{}}}],["prohibiting",{"_index":2692,"title":{},"body":{"license.html":{}}}],["prohibits",{"_index":3036,"title":{},"body":{"license.html":{}}}],["project",{"_index":629,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{}}}],["prominent",{"_index":2571,"title":{},"body":{"license.html":{}}}],["prominently",{"_index":2560,"title":{},"body":{"license.html":{}}}],["promise",{"_index":1269,"title":{},"body":{"injectables/OryService.html":{},"guards/SessionGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{}}}],["promise.all",{"_index":322,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/StatsService.html":{},"miscellaneous/variables.html":{}}}],["promise.all(personality.claims.map((claim",{"_index":1560,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["promise.resolve(undefined",{"_index":614,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["prop",{"_index":161,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Personality.html":{},"classes/Source.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{}}}],["prop({default",{"_index":2033,"title":{},"body":{"classes/WikidataCache.html":{}}}],["prop({required",{"_index":159,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Personality.html":{},"classes/Source.html":{},"classes/User.html":{},"classes/WikidataCache.html":{}}}],["prop({type",{"_index":152,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Source.html":{},"classes/WikidataCache.html":{}}}],["prop({unique",{"_index":1399,"title":{},"body":{"classes/Personality.html":{}}}],["prop({validate",{"_index":1732,"title":{},"body":{"classes/Source.html":{}}}],["propagate",{"_index":2527,"title":{},"body":{"license.html":{}}}],["propagating",{"_index":2958,"title":{},"body":{"license.html":{}}}],["propagation",{"_index":2539,"title":{},"body":{"license.html":{}}}],["properties",{"_index":146,"title":{"properties.html":{}},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"injectables/OryService.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"properties.html":{}}}],["property",{"_index":1571,"title":{},"body":{"injectables/PersonalityService.html":{},"injectables/UtilService.html":{},"injectables/WikidataService.html":{},"license.html":{}}}],["propertyvalue",{"_index":1953,"title":{},"body":{"injectables/UtilService.html":{}}}],["proprietary",{"_index":2494,"title":{},"body":{"license.html":{}}}],["props",{"_index":1326,"title":{},"body":{"injectables/ParserService.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{}}}],["protect",{"_index":2408,"title":{},"body":{"license.html":{}}}],["protecting",{"_index":2461,"title":{},"body":{"license.html":{}}}],["protection",{"_index":2441,"title":{},"body":{"license.html":{}}}],["protocols",{"_index":2868,"title":{},"body":{"license.html":{}}}],["prove",{"_index":3093,"title":{},"body":{"license.html":{}}}],["provide",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"license.html":{}}}],["provided",{"_index":2566,"title":{},"body":{"license.html":{}}}],["providers",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/HomeModule.html":{},"modules/OryModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{}}}],["provision",{"_index":2480,"title":{},"body":{"license.html":{}}}],["provisionally",{"_index":2931,"title":{},"body":{"license.html":{}}}],["proxy",{"_index":3081,"title":{},"body":{"license.html":{}}}],["proxy's",{"_index":3083,"title":{},"body":{"license.html":{}}}],["pt",{"_index":1712,"title":{},"body":{"injectables/SitemapService.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["public",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"controllers/HistoryController.html":{},"controllers/HomeController.html":{},"controllers/OryController.html":{},"controllers/PersonalityController.html":{},"controllers/SourceController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["public.decorator",{"_index":293,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/HomeController.html":{},"controllers/OryController.html":{},"controllers/PersonalityController.html":{},"controllers/RootController.html":{},"controllers/SitemapController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["public.decorator.ts",{"_index":2180,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["publicity",{"_index":2895,"title":{},"body":{"license.html":{}}}],["publicly",{"_index":2869,"title":{},"body":{"license.html":{}}}],["publish",{"_index":2710,"title":{},"body":{"license.html":{}}}],["published",{"_index":3078,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":2488,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":2817,"title":{},"body":{"license.html":{}}}],["pursuant",{"_index":3026,"title":{},"body":{"license.html":{}}}],["put",{"_index":267,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{}}}],["put(\"api/claim/:id",{"_index":351,"title":{},"body":{"controllers/ClaimController.html":{}}}],["put(\"api/personality/:id",{"_index":1466,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["put(\"api/user/:id/password",{"_index":1863,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('api/claim/:id",{"_index":262,"title":{},"body":{"controllers/ClaimController.html":{}}}],["put('api/personality/:id",{"_index":1441,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["put('api/user/:id/password",{"_index":1834,"title":{},"body":{"controllers/UsersController.html":{}}}],["públicas",{"_index":2321,"title":{},"body":{"index.html":{}}}],["q5",{"_index":2115,"title":{},"body":{"injectables/WikidataService.html":{}}}],["qs",{"_index":272,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["qs.stringify",{"_index":305,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["qualify",{"_index":2948,"title":{},"body":{"license.html":{}}}],["quality",{"_index":3092,"title":{},"body":{"license.html":{}}}],["queries",{"_index":1087,"title":{},"body":{"injectables/HistoryService.html":{}}}],["query",{"_index":220,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"controllers/HistoryController.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/SourceController.html":{},"injectables/WikidataService.html":{}}}],["query.language",{"_index":1463,"title":{},"body":{"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["query.name",{"_index":1597,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["query.name.$regex",{"_index":1535,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["query.personality",{"_index":308,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{}}}],["query.withsuggestions",{"_index":1601,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["queryinputs",{"_index":307,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/PersonalityService.html":{}}}],["queryinputs.name",{"_index":1598,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["queryinputs.personality",{"_index":311,"title":{},"body":{"controllers/ClaimController.html":{}}}],["querystring",{"_index":273,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["querywikibaseentities",{"_index":2059,"title":{},"body":{"injectables/WikidataService.html":{}}}],["querywikibaseentities(query",{"_index":2074,"title":{},"body":{"injectables/WikidataService.html":{}}}],["random",{"_index":1130,"title":{},"body":{"controllers/HomeController.html":{},"injectables/PersonalityService.html":{}}}],["randombytes(8",{"_index":3266,"title":{},"body":{"miscellaneous/variables.html":{}}}],["raw",{"_index":2298,"title":{},"body":{"dependencies.html":{}}}],["rawclaim",{"_index":843,"title":{},"body":{"injectables/ClaimService.html":{}}}],["rawclaim[0",{"_index":846,"title":{},"body":{"injectables/ClaimService.html":{}}}],["react",{"_index":2277,"title":{},"body":{"dependencies.html":{},"properties.html":{}}}],["read",{"_index":3173,"title":{},"body":{"license.html":{}}}],["readable",{"_index":2756,"title":{},"body":{"license.html":{}}}],["readily",{"_index":3013,"title":{},"body":{"license.html":{}}}],["reading",{"_index":2873,"title":{},"body":{"license.html":{}}}],["readonly",{"_index":295,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"injectables/OryService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ViewService.html":{}}}],["ready",{"_index":2478,"title":{},"body":{"license.html":{}}}],["reason",{"_index":3024,"title":{},"body":{"license.html":{}}}],["reasonable",{"_index":2773,"title":{},"body":{"license.html":{}}}],["recaptcha",{"_index":345,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"dependencies.html":{}}}],["recaptcha_api_url",{"_index":299,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["recaptcha_api_url}/siteverify",{"_index":304,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["recaptchacheck",{"_index":337,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["recaptchacheck.success",{"_index":340,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["receipt",{"_index":2946,"title":{},"body":{"license.html":{}}}],["receive",{"_index":2403,"title":{},"body":{"license.html":{}}}],["received",{"_index":564,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"license.html":{}}}],["receives",{"_index":2963,"title":{},"body":{"license.html":{}}}],["receiving",{"_index":3032,"title":{},"body":{"license.html":{}}}],["recipient",{"_index":2852,"title":{},"body":{"license.html":{}}}],["recipient's",{"_index":3022,"title":{},"body":{"license.html":{}}}],["recipients",{"_index":2426,"title":{},"body":{"license.html":{}}}],["recognized",{"_index":2579,"title":{},"body":{"license.html":{}}}],["redirect",{"_index":1217,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["redirects",{"_index":1979,"title":{},"body":{"controllers/ViewController.html":{}}}],["redistribute",{"_index":3135,"title":{},"body":{"license.html":{}}}],["redux",{"_index":2287,"title":{},"body":{"dependencies.html":{}}}],["ref",{"_index":155,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Personality.html":{},"classes/Source.html":{}}}],["referring",{"_index":2399,"title":{},"body":{"license.html":{}}}],["refers",{"_index":2503,"title":{},"body":{"license.html":{}}}],["reflect",{"_index":2294,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":1631,"title":{},"body":{"guards/SessionGuard.html":{}}}],["refpath",{"_index":1037,"title":{},"body":{"classes/History.html":{},"classes/Source.html":{}}}],["refrain",{"_index":3061,"title":{},"body":{"license.html":{}}}],["regard",{"_index":2878,"title":{},"body":{"license.html":{}}}],["regardless",{"_index":2733,"title":{},"body":{"license.html":{}}}],["regenerate",{"_index":2633,"title":{},"body":{"license.html":{}}}],["regex",{"_index":1340,"title":{},"body":{"injectables/ParserService.html":{},"injectables/PersonalityService.html":{}}}],["register",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"injectables/UsersService.html":{}}}],["register(options",{"_index":24,"title":{},"body":{"modules/AppModule.html":{}}}],["register(user",{"_index":1903,"title":{},"body":{"injectables/UsersService.html":{}}}],["rehype",{"_index":2297,"title":{},"body":{"dependencies.html":{}}}],["reinstated",{"_index":2930,"title":{},"body":{"license.html":{}}}],["relationship",{"_index":2666,"title":{},"body":{"license.html":{}}}],["released",{"_index":2393,"title":{},"body":{"license.html":{}}}],["relevant",{"_index":2725,"title":{},"body":{"license.html":{}}}],["reliable",{"_index":1743,"title":{},"body":{"classes/Source.html":{}}}],["relicensing",{"_index":2917,"title":{},"body":{"license.html":{}}}],["relying",{"_index":3012,"title":{},"body":{"license.html":{}}}],["remain",{"_index":2794,"title":{},"body":{"license.html":{}}}],["remains",{"_index":2390,"title":{},"body":{"license.html":{}}}],["removal",{"_index":2879,"title":{},"body":{"license.html":{}}}],["remove",{"_index":800,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"license.html":{}}}],["render",{"_index":402,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"license.html":{}}}],["render(req",{"_index":1993,"title":{},"body":{"controllers/ViewController.html":{}}}],["render404",{"_index":1980,"title":{},"body":{"controllers/ViewController.html":{}}}],["rendered",{"_index":3108,"title":{},"body":{"license.html":{}}}],["repair",{"_index":3097,"title":{},"body":{"license.html":{}}}],["repeatednewpassword",{"_index":1867,"title":{},"body":{"controllers/UsersController.html":{}}}],["replace_me",{"_index":3227,"title":{},"body":{"miscellaneous/variables.html":{}}}],["replacement",{"_index":733,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{}}}],["repo",{"_index":2327,"title":{},"body":{"index.html":{}}}],["report",{"_index":443,"title":{},"body":{"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/CreateClaimReview.html":{}}}],["represent",{"_index":2836,"title":{},"body":{"license.html":{}}}],["req",{"_index":215,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimService.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/GetLanguageMiddleware.html":{},"controllers/HomeController.html":{},"injectables/JsonBodyMiddleware.html":{},"controllers/OryController.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"controllers/SitemapController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["req.body",{"_index":1868,"title":{},"body":{"controllers/UsersController.html":{}}}],["req.get(\"host",{"_index":1620,"title":{},"body":{"controllers/RootController.html":{},"controllers/SitemapController.html":{}}}],["req.headers[\"accept",{"_index":1020,"title":{},"body":{"injectables/GetLanguageMiddleware.html":{}}}],["req.language",{"_index":395,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/GetLanguageMiddleware.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{}}}],["req.login(req.user",{"_index":1860,"title":{},"body":{"controllers/UsersController.html":{}}}],["req.params",{"_index":391,"title":{},"body":{"controllers/ClaimController.html":{}}}],["req.params.claimslug",{"_index":413,"title":{},"body":{"controllers/ClaimController.html":{}}}],["req.params.id",{"_index":1869,"title":{},"body":{"controllers/UsersController.html":{}}}],["req.params.personalityslug",{"_index":412,"title":{},"body":{"controllers/ClaimController.html":{}}}],["req.params.slug",{"_index":409,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{}}}],["req.protocol",{"_index":1619,"title":{},"body":{"controllers/RootController.html":{},"controllers/SitemapController.html":{}}}],["req.user",{"_index":370,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/UsersController.html":{}}}],["req.user._id.tostring",{"_index":1870,"title":{},"body":{"controllers/UsersController.html":{}}}],["req?.params?.revisionid",{"_index":416,"title":{},"body":{"controllers/ClaimController.html":{}}}],["req?.user?._id",{"_index":498,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["req['disablebodyparser",{"_index":935,"title":{},"body":{"injectables/DisableBodyParserMiddleware.html":{},"injectables/JsonBodyMiddleware.html":{}}}],["request",{"_index":222,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/GetLanguageMiddleware.html":{},"controllers/HomeController.html":{},"injectables/JsonBodyMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["request.get('user",{"_index":1206,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["request.header('cookie",{"_index":1648,"title":{},"body":{"guards/SessionGuard.html":{}}}],["request.isauthenticated",{"_index":1651,"title":{},"body":{"guards/SessionGuard.html":{}}}],["request.url.startswith(\"/api",{"_index":1654,"title":{},"body":{"guards/SessionGuard.html":{}}}],["request.user",{"_index":1649,"title":{},"body":{"guards/SessionGuard.html":{}}}],["requested",{"_index":3215,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requester.internalerror(res",{"_index":343,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["requestproperties",{"_index":2060,"title":{},"body":{"injectables/WikidataService.html":{}}}],["requestproperties(params",{"_index":2076,"title":{},"body":{"injectables/WikidataService.html":{}}}],["requests",{"_index":1291,"title":{},"body":{"injectables/OryService.html":{}}}],["require",{"_index":2627,"title":{},"body":{"license.html":{}}}],["require(\"axios",{"_index":1699,"title":{},"body":{"injectables/SitemapService.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["require(\"connect",{"_index":3246,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require(\"cookie",{"_index":3209,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require(\"fs",{"_index":964,"title":{},"body":{"injectables/EmailService.html":{},"miscellaneous/variables.html":{}}}],["require(\"handlebars",{"_index":962,"title":{},"body":{"injectables/EmailService.html":{},"miscellaneous/variables.html":{}}}],["require(\"md5",{"_index":1335,"title":{},"body":{"injectables/ParserService.html":{},"miscellaneous/variables.html":{}}}],["require(\"nodemailer",{"_index":960,"title":{},"body":{"injectables/EmailService.html":{},"miscellaneous/variables.html":{}}}],["require(\"path",{"_index":966,"title":{},"body":{"injectables/EmailService.html":{},"miscellaneous/variables.html":{}}}],["require(\"service",{"_index":3306,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('compromise",{"_index":1337,"title":{},"body":{"injectables/ParserService.html":{},"miscellaneous/variables.html":{}}}],["required",{"_index":154,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Personality.html":{},"classes/Source.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"classes/WikidataCache.html":{},"license.html":{}}}],["requirement",{"_index":2726,"title":{},"body":{"license.html":{}}}],["requirements",{"_index":2798,"title":{},"body":{"license.html":{}}}],["requires",{"_index":2447,"title":{},"body":{"license.html":{}}}],["requiring",{"_index":2519,"title":{},"body":{"license.html":{}}}],["res",{"_index":223,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/GetLanguageMiddleware.html":{},"controllers/HomeController.html":{},"injectables/JsonBodyMiddleware.html":{},"controllers/OryController.html":{},"controllers/PersonalityController.html":{},"controllers/RootController.html":{},"controllers/SitemapController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["res.send",{"_index":1861,"title":{},"body":{"controllers/UsersController.html":{}}}],["res.send(sitemapxml",{"_index":1676,"title":{},"body":{"controllers/SitemapController.html":{}}}],["res.status(200).json",{"_index":1875,"title":{},"body":{"controllers/UsersController.html":{}}}],["res.status(500).json",{"_index":1879,"title":{},"body":{"controllers/UsersController.html":{}}}],["res.type(\"text/plain\").end",{"_index":1621,"title":{},"body":{"controllers/RootController.html":{}}}],["resave",{"_index":3228,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reset",{"_index":133,"title":{},"body":{"modules/AuthModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/HomeModule.html":{},"modules/OryModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{},"overview.html":{}}}],["resolved",{"_index":2824,"title":{},"body":{"license.html":{}}}],["resolver",{"_index":1564,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["respect",{"_index":2420,"title":{},"body":{"license.html":{}}}],["response",{"_index":210,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/GetLanguageMiddleware.html":{},"controllers/HomeController.html":{},"injectables/JsonBodyMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/PersonalityController.html":{},"guards/SessionGuard.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"injectables/WikidataService.html":{}}}],["response.data",{"_index":2145,"title":{},"body":{"injectables/WikidataService.html":{}}}],["response.get('content",{"_index":1211,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["response.on('finish",{"_index":1208,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["response.redirect(\"/login",{"_index":1655,"title":{},"body":{"guards/SessionGuard.html":{}}}],["response.redirect('/404",{"_index":1230,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["responsibilities",{"_index":2418,"title":{},"body":{"license.html":{}}}],["responsible",{"_index":2964,"title":{},"body":{"license.html":{}}}],["rest",{"_index":3185,"title":{},"body":{"properties.html":{}}}],["restrict",{"_index":2487,"title":{},"body":{"license.html":{}}}],["restricting",{"_index":2693,"title":{},"body":{"license.html":{}}}],["restriction",{"_index":2915,"title":{},"body":{"license.html":{}}}],["restrictions",{"_index":2911,"title":{},"body":{"license.html":{}}}],["result",{"_index":1362,"title":{},"body":{"injectables/ParserService.html":{},"injectables/UtilService.html":{},"license.html":{}}}],["result.push",{"_index":1371,"title":{},"body":{"injectables/ParserService.html":{}}}],["result.slice(0",{"_index":1948,"title":{},"body":{"injectables/UtilService.html":{}}}],["resulting",{"_index":2522,"title":{},"body":{"license.html":{}}}],["results",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"injectables/DisableBodyParserMiddleware.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"injectables/GetLanguageMiddleware.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/JsonBodyMiddleware.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"modules/OryModule.html":{},"injectables/OryService.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retains",{"_index":2856,"title":{},"body":{"license.html":{}}}],["return",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"injectables/OryService.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/ViewService.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/EmailService.html":{},"injectables/GetLanguageMiddleware.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"injectables/JsonBodyMiddleware.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"injectables/OryService.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{}}}],["review",{"_index":403,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/SitemapService.html":{},"injectables/UtilService.html":{}}}],["review._id",{"_index":870,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/UtilService.html":{}}}],["review.controller",{"_index":513,"title":{},"body":{"modules/ClaimReviewModule.html":{}}}],["review.controller.ts",{"_index":480,"title":{},"body":{"controllers/ClaimReviewController.html":{},"coverage.html":{}}}],["review.controller.ts:17",{"_index":483,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["review.controller.ts:31",{"_index":486,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["review.controller.ts:55",{"_index":492,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["review.controller.ts:60",{"_index":489,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["review.count",{"_index":1943,"title":{},"body":{"injectables/UtilService.html":{}}}],["review.dto",{"_index":493,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["review.dto.ts",{"_index":894,"title":{},"body":{"classes/CreateClaimReview.html":{},"coverage.html":{}}}],["review.dto.ts:13",{"_index":896,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["review.dto.ts:16",{"_index":900,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["review.dto.ts:20",{"_index":904,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["review.dto.ts:23",{"_index":903,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["review.dto.ts:27",{"_index":902,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["review.dto.ts:30",{"_index":901,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["review.dto.ts:34",{"_index":906,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["review.dto.ts:9",{"_index":898,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["review.module",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/PersonalityModule.html":{},"modules/SitemapModule.html":{},"modules/StatsModule.html":{}}}],["review.module.ts",{"_index":510,"title":{},"body":{"modules/ClaimReviewModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["review.schema",{"_index":512,"title":{},"body":{"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/CreateClaimReview.html":{}}}],["review.schema.ts",{"_index":441,"title":{},"body":{"classes/ClaimReview.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["review.schema.ts:44",{"_index":450,"title":{},"body":{"classes/ClaimReview.html":{}}}],["review.schema.ts:51",{"_index":446,"title":{},"body":{"classes/ClaimReview.html":{}}}],["review.schema.ts:58",{"_index":453,"title":{},"body":{"classes/ClaimReview.html":{}}}],["review.schema.ts:61",{"_index":456,"title":{},"body":{"classes/ClaimReview.html":{}}}],["review.schema.ts:64",{"_index":455,"title":{},"body":{"classes/ClaimReview.html":{}}}],["review.schema.ts:67",{"_index":454,"title":{},"body":{"classes/ClaimReview.html":{}}}],["review.schema.ts:74",{"_index":457,"title":{},"body":{"classes/ClaimReview.html":{}}}],["review.schema.ts:77",{"_index":452,"title":{},"body":{"classes/ClaimReview.html":{}}}],["review.service",{"_index":269,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/StatsService.html":{}}}],["review.service.ts",{"_index":519,"title":{},"body":{"injectables/ClaimReviewService.html":{},"coverage.html":{}}}],["review.service.ts:101",{"_index":535,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:126",{"_index":536,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:14",{"_index":533,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:176",{"_index":557,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:211",{"_index":579,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:224",{"_index":568,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:23",{"_index":548,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:31",{"_index":551,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:35",{"_index":588,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:44",{"_index":586,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:58",{"_index":581,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:70",{"_index":591,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:85",{"_index":555,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:91",{"_index":584,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review/claim",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["review/dto/create",{"_index":893,"title":{},"body":{"classes/CreateClaimReview.html":{},"coverage.html":{}}}],["review/schemas/claim",{"_index":440,"title":{},"body":{"classes/ClaimReview.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["reviewing",{"_index":3120,"title":{},"body":{"license.html":{}}}],["reviews",{"_index":288,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"classes/GetClaimsByHashDTO.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/StatsService.html":{},"injectables/UtilService.html":{},"coverage.html":{}}}],["reviews.find((review",{"_index":869,"title":{},"body":{"injectables/ClaimService.html":{}}}],["reviews.length",{"_index":866,"title":{},"body":{"injectables/ClaimService.html":{}}}],["reviews.map((review",{"_index":1944,"title":{},"body":{"injectables/UtilService.html":{}}}],["reviews.reduce((agg",{"_index":1941,"title":{},"body":{"injectables/UtilService.html":{}}}],["reviewstats",{"_index":858,"title":{},"body":{"injectables/ClaimService.html":{}}}],["revised",{"_index":3067,"title":{},"body":{"license.html":{}}}],["revision",{"_index":761,"title":{},"body":{"injectables/ClaimService.html":{}}}],["revision.module",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/PersonalityModule.html":{}}}],["revision.module.ts",{"_index":684,"title":{},"body":{"modules/ClaimRevisionModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["revision.schema",{"_index":167,"title":{},"body":{"classes/Claim.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{}}}],["revision.schema.ts",{"_index":652,"title":{},"body":{"classes/ClaimRevision.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["revision.schema.ts:11",{"_index":660,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["revision.schema.ts:14",{"_index":659,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["revision.schema.ts:17",{"_index":656,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["revision.schema.ts:20",{"_index":657,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["revision.schema.ts:27",{"_index":655,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["revision.schema.ts:38",{"_index":661,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["revision.schema.ts:45",{"_index":658,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["revision.service",{"_index":686,"title":{},"body":{"modules/ClaimRevisionModule.html":{},"injectables/ClaimService.html":{}}}],["revision.service.ts",{"_index":694,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"coverage.html":{}}}],["revision.service.ts:12",{"_index":708,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["revision.service.ts:13",{"_index":699,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["revision.service.ts:28",{"_index":705,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["revision.service.ts:42",{"_index":701,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["revision/claim",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"modules/PersonalityModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["revision/schema/claim",{"_index":166,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimRevision.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["revisionid",{"_index":673,"title":{},"body":{"classes/ClaimRevision.html":{},"injectables/ClaimService.html":{}}}],["revisions",{"_index":173,"title":{},"body":{"classes/Claim.html":{}}}],["right",{"_index":2850,"title":{},"body":{"license.html":{}}}],["rights",{"_index":2409,"title":{},"body":{"license.html":{}}}],["risk",{"_index":3091,"title":{},"body":{"license.html":{}}}],["robots",{"_index":1609,"title":{},"body":{"controllers/RootController.html":{}}}],["robots(@res",{"_index":1618,"title":{},"body":{"controllers/RootController.html":{}}}],["robots(res",{"_index":1613,"title":{},"body":{"controllers/RootController.html":{}}}],["rom",{"_index":2859,"title":{},"body":{"license.html":{}}}],["root/root.controller",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["rootcontroller",{"_index":51,"title":{"controllers/RootController.html":{}},"body":{"modules/AppModule.html":{},"controllers/RootController.html":{},"coverage.html":{}}}],["royalty",{"_index":2979,"title":{},"body":{"license.html":{}}}],["rules",{"_index":1342,"title":{},"body":{"injectables/ParserService.html":{},"license.html":{}}}],["run",{"_index":2340,"title":{},"body":{"index.html":{},"license.html":{}}}],["runner",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["running",{"_index":2646,"title":{},"body":{"license.html":{}}}],["runs",{"_index":2606,"title":{},"body":{"license.html":{}}}],["rxjs",{"_index":2300,"title":{},"body":{"dependencies.html":{}}}],["safest",{"_index":3137,"title":{},"body":{"license.html":{}}}],["sake",{"_index":2446,"title":{},"body":{"license.html":{}}}],["sale",{"_index":2988,"title":{},"body":{"license.html":{}}}],["same",{"_index":2427,"title":{},"body":{"license.html":{}}}],["sample",{"_index":1530,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["satisfy",{"_index":2797,"title":{},"body":{"license.html":{}}}],["save",{"_index":703,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["saveuninitialized",{"_index":3229,"title":{},"body":{"miscellaneous/variables.html":{}}}],["saying",{"_index":2792,"title":{},"body":{"license.html":{}}}],["schema",{"_index":162,"title":{},"body":{"classes/Claim.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"modules/ClaimReviewModule.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"classes/History.html":{},"modules/HistoryModule.html":{},"classes/Personality.html":{},"modules/PersonalityModule.html":{},"classes/Source.html":{},"modules/SourceModule.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"modules/UsersModule.html":{},"classes/WikidataCache.html":{},"miscellaneous/variables.html":{}}}],["schema.plugin(require(\"passport",{"_index":1895,"title":{},"body":{"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["schema/claim",{"_index":685,"title":{},"body":{"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{}}}],["schema/history.schema",{"_index":1072,"title":{},"body":{"modules/HistoryModule.html":{},"injectables/HistoryService.html":{}}}],["schema_id",{"_index":1294,"title":{},"body":{"injectables/OryService.html":{}}}],["schemafactory",{"_index":163,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Personality.html":{},"classes/Source.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"classes/WikidataCache.html":{}}}],["schemafactory.createforclass(claim",{"_index":180,"title":{},"body":{"classes/Claim.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(claimreview",{"_index":475,"title":{},"body":{"classes/ClaimReview.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(claimrevision",{"_index":676,"title":{},"body":{"classes/ClaimRevision.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(history",{"_index":1049,"title":{},"body":{"classes/History.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(personality",{"_index":1404,"title":{},"body":{"classes/Personality.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(source",{"_index":1747,"title":{},"body":{"classes/Source.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":1826,"title":{},"body":{"classes/User.html":{},"interfaces/UserDocument.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(wikidatacache",{"_index":2041,"title":{},"body":{"classes/WikidataCache.html":{},"miscellaneous/variables.html":{}}}],["schemas/claim",{"_index":511,"title":{},"body":{"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/CreateClaimReview.html":{}}}],["schemas/claim.schema",{"_index":431,"title":{},"body":{"modules/ClaimModule.html":{}}}],["schemas/personality.schema",{"_index":1488,"title":{},"body":{"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{}}}],["schemas/source.schema",{"_index":1769,"title":{},"body":{"modules/SourceModule.html":{},"injectables/SourceService.html":{}}}],["schemas/user.schema",{"_index":1890,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["schemas/wikidata.schema",{"_index":2047,"title":{},"body":{"modules/WikidataModule.html":{},"injectables/WikidataService.html":{}}}],["school",{"_index":3162,"title":{},"body":{"license.html":{}}}],["scope",{"_index":786,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"license.html":{}}}],["scope.request",{"_index":788,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["scripts",{"_index":2613,"title":{},"body":{"license.html":{}}}],["search",{"_index":1476,"title":{},"body":{"controllers/PersonalityController.html":{},"injectables/SitemapService.html":{},"injectables/WikidataService.html":{}}}],["search.map((wbentity",{"_index":2146,"title":{},"body":{"injectables/WikidataService.html":{}}}],["secondarily",{"_index":2531,"title":{},"body":{"license.html":{}}}],["secret",{"_index":212,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"miscellaneous/variables.html":{}}}],["section",{"_index":2671,"title":{},"body":{"license.html":{}}}],["sections",{"_index":2754,"title":{},"body":{"license.html":{}}}],["secure",{"_index":982,"title":{},"body":{"injectables/EmailService.html":{}}}],["see",{"_index":3145,"title":{},"body":{"license.html":{}}}],["seed",{"_index":3299,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seedbuild",{"_index":2348,"title":{},"body":{"index.html":{}}}],["seeded",{"_index":3274,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seeder",{"_index":2346,"title":{},"body":{"index.html":{}}}],["seeding",{"_index":3292,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seedsingleuser",{"_index":3269,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seedsingleuser(userdata",{"_index":3298,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seems",{"_index":1853,"title":{},"body":{"controllers/UsersController.html":{}}}],["select",{"_index":1556,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["sell",{"_index":3002,"title":{},"body":{"license.html":{}}}],["selling",{"_index":2987,"title":{},"body":{"license.html":{}}}],["semicolon",{"_index":1381,"title":{},"body":{"injectables/ParserService.html":{}}}],["semicolonsentence",{"_index":1386,"title":{},"body":{"injectables/ParserService.html":{}}}],["semicolonsentence.trim",{"_index":1389,"title":{},"body":{"injectables/ParserService.html":{}}}],["semicolonsentences",{"_index":1382,"title":{},"body":{"injectables/ParserService.html":{}}}],["semicolonsentences.length",{"_index":1387,"title":{},"body":{"injectables/ParserService.html":{}}}],["semicolonsentences.map",{"_index":1385,"title":{},"body":{"injectables/ParserService.html":{}}}],["semicolonsentence};`.trim",{"_index":1388,"title":{},"body":{"injectables/ParserService.html":{}}}],["semiconductor",{"_index":2506,"title":{},"body":{"license.html":{}}}],["sendemail",{"_index":945,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendemail(to",{"_index":953,"title":{},"body":{"injectables/EmailService.html":{}}}],["sent",{"_index":3289,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sentence",{"_index":367,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ParserService.html":{}}}],["sentence.props.topclassification",{"_index":865,"title":{},"body":{"injectables/ClaimService.html":{}}}],["sentence.props[\"data",{"_index":382,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{}}}],["sentence.text(this.nlpoptions",{"_index":1379,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentence_content",{"_index":444,"title":{},"body":{"classes/ClaimReview.html":{},"classes/CreateClaimReview.html":{}}}],["sentence_hash",{"_index":445,"title":{},"body":{"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/CreateClaimReview.html":{}}}],["sentencecontent",{"_index":1325,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentencedatahash",{"_index":1393,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentencehash",{"_index":217,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{}}}],["sentenceid",{"_index":1391,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentenceindex",{"_index":868,"title":{},"body":{"injectables/ClaimService.html":{}}}],["sentenceobj",{"_index":379,"title":{},"body":{"controllers/ClaimController.html":{}}}],["sentences",{"_index":1329,"title":{},"body":{"injectables/ParserService.html":{},"dependencies.html":{}}}],["sentences.foreach(sentence",{"_index":1377,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentences.length",{"_index":1370,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentences.map((sentence",{"_index":1373,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentencesequence",{"_index":1314,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentencetext",{"_index":1378,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentencetext.includes",{"_index":1384,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentencetext.split",{"_index":1383,"title":{},"body":{"injectables/ParserService.html":{}}}],["seo",{"_index":2271,"title":{},"body":{"dependencies.html":{}}}],["separable",{"_index":2807,"title":{},"body":{"license.html":{}}}],["separate",{"_index":2740,"title":{},"body":{"license.html":{}}}],["separately",{"_index":2737,"title":{},"body":{"license.html":{}}}],["serializefunctions",{"_index":613,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["server",{"_index":2013,"title":{},"body":{"injectables/ViewService.html":{},"license.html":{}}}],["server/.../claim",{"_index":2311,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/.../claim.module.ts",{"_index":3196,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../claim.schema.ts",{"_index":3189,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/.../claim.service.ts",{"_index":3190,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["server/.../email.service.ts",{"_index":3198,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../history.module.ts",{"_index":3199,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../history.schema.ts",{"_index":2312,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/.../is",{"_index":3201,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../main.ts",{"_index":3197,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../parser.service.ts",{"_index":3202,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../personality.module.ts",{"_index":3203,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../personality.schema.ts",{"_index":3191,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/.../seed.ts",{"_index":3200,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../server.ts",{"_index":3204,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../sitemap.service.ts",{"_index":3194,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../source.module.ts",{"_index":3205,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../source.schema.ts",{"_index":2313,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/.../user.schema.ts",{"_index":3207,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../users.module.ts",{"_index":3206,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../wikidata.module.ts",{"_index":3208,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../wikidata.schema.ts",{"_index":3192,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/.../wikidata.service.ts",{"_index":3195,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/app.module.ts",{"_index":6,"title":{},"body":{"modules/AppModule.html":{}}}],["server/app.module.ts:32",{"_index":13,"title":{},"body":{"modules/AppModule.html":{}}}],["server/app.module.ts:39",{"_index":25,"title":{},"body":{"modules/AppModule.html":{}}}],["server/auth/auth.module.ts",{"_index":135,"title":{},"body":{"modules/AuthModule.html":{}}}],["server/auth/local",{"_index":1146,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["server/auth/local.serializer.ts",{"_index":1151,"title":{},"body":{"injectables/LocalSerializer.html":{},"coverage.html":{}}}],["server/auth/local.serializer.ts:8",{"_index":1153,"title":{},"body":{"injectables/LocalSerializer.html":{}}}],["server/auth/local.strategy.ts",{"_index":1160,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["server/auth/local.strategy.ts:9",{"_index":1161,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["server/auth/session.guard.ts",{"_index":1629,"title":{},"body":{"guards/SessionGuard.html":{},"coverage.html":{}}}],["server/auth/session.guard.ts:10",{"_index":1632,"title":{},"body":{"guards/SessionGuard.html":{}}}],["server/auth/session.guard.ts:17",{"_index":1635,"title":{},"body":{"guards/SessionGuard.html":{}}}],["server/auth/session.guard.ts:47",{"_index":1637,"title":{},"body":{"guards/SessionGuard.html":{}}}],["server/claim",{"_index":439,"title":{},"body":{"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"classes/CreateClaimReview.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/claim/claim.controller.ts",{"_index":192,"title":{},"body":{"controllers/ClaimController.html":{},"coverage.html":{}}}],["server/claim/claim.controller.ts:115",{"_index":235,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:120",{"_index":263,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:125",{"_index":232,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:131",{"_index":242,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:162",{"_index":216,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:193",{"_index":238,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:225",{"_index":225,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:249",{"_index":250,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:274",{"_index":253,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:301",{"_index":259,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:324",{"_index":256,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:41",{"_index":211,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:53",{"_index":219,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:65",{"_index":247,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:94",{"_index":229,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.module.ts",{"_index":429,"title":{},"body":{"modules/ClaimModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/claim/claim.service.ts",{"_index":744,"title":{},"body":{"injectables/ClaimService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["server/claim/claim.service.ts:101",{"_index":776,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:137",{"_index":763,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:153",{"_index":764,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:157",{"_index":766,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:161",{"_index":754,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:17",{"_index":784,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:18",{"_index":751,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:193",{"_index":771,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:221",{"_index":756,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:240",{"_index":773,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:34",{"_index":769,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:56",{"_index":758,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:66",{"_index":760,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/dto/create",{"_index":874,"title":{},"body":{"classes/CreateClaimDTO.html":{},"coverage.html":{}}}],["server/claim/dto/get",{"_index":995,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"coverage.html":{}}}],["server/claim/dto/update",{"_index":1813,"title":{},"body":{"classes/UpdateClaimDTO.html":{},"coverage.html":{}}}],["server/claim/schemas/claim.schema.ts",{"_index":144,"title":{},"body":{"classes/Claim.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/claim/schemas/claim.schema.ts:16",{"_index":157,"title":{},"body":{"classes/Claim.html":{}}}],["server/claim/schemas/claim.schema.ts:19",{"_index":160,"title":{},"body":{"classes/Claim.html":{}}}],["server/claim/schemas/claim.schema.ts:26",{"_index":156,"title":{},"body":{"classes/Claim.html":{}}}],["server/decorators/is",{"_index":2179,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/email/email.module.ts",{"_index":940,"title":{},"body":{"modules/EmailModule.html":{}}}],["server/email/email.service.ts",{"_index":942,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/email/email.service.ts:10",{"_index":947,"title":{},"body":{"injectables/EmailService.html":{}}}],["server/email/email.service.ts:16",{"_index":951,"title":{},"body":{"injectables/EmailService.html":{}}}],["server/email/email.service.ts:27",{"_index":948,"title":{},"body":{"injectables/EmailService.html":{}}}],["server/email/email.service.ts:40",{"_index":957,"title":{},"body":{"injectables/EmailService.html":{}}}],["server/filters/not",{"_index":1213,"title":{},"body":{"classes/NotFoundFilter.html":{},"coverage.html":{}}}],["server/history/history.controller.ts",{"_index":1051,"title":{},"body":{"controllers/HistoryController.html":{},"coverage.html":{}}}],["server/history/history.controller.ts:18",{"_index":1055,"title":{},"body":{"controllers/HistoryController.html":{}}}],["server/history/history.module.ts",{"_index":1071,"title":{},"body":{"modules/HistoryModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/history/history.service.ts",{"_index":1077,"title":{},"body":{"injectables/HistoryService.html":{},"coverage.html":{}}}],["server/history/history.service.ts:31",{"_index":1098,"title":{},"body":{"injectables/HistoryService.html":{}}}],["server/history/history.service.ts:58",{"_index":1084,"title":{},"body":{"injectables/HistoryService.html":{}}}],["server/history/history.service.ts:73",{"_index":1086,"title":{},"body":{"injectables/HistoryService.html":{}}}],["server/history/history.service.ts:8",{"_index":1109,"title":{},"body":{"injectables/HistoryService.html":{}}}],["server/history/history.service.ts:9",{"_index":1082,"title":{},"body":{"injectables/HistoryService.html":{}}}],["server/history/schema/history.schema.ts",{"_index":1032,"title":{},"body":{"classes/History.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/history/schema/history.schema.ts:25",{"_index":1039,"title":{},"body":{"classes/History.html":{}}}],["server/history/schema/history.schema.ts:30",{"_index":1040,"title":{},"body":{"classes/History.html":{}}}],["server/history/schema/history.schema.ts:37",{"_index":1042,"title":{},"body":{"classes/History.html":{}}}],["server/history/schema/history.schema.ts:42",{"_index":1041,"title":{},"body":{"classes/History.html":{}}}],["server/history/schema/history.schema.ts:48",{"_index":1036,"title":{},"body":{"classes/History.html":{}}}],["server/history/schema/history.schema.ts:54",{"_index":1035,"title":{},"body":{"classes/History.html":{}}}],["server/home/home.controller.ts",{"_index":1119,"title":{},"body":{"controllers/HomeController.html":{},"coverage.html":{}}}],["server/home/home.controller.ts:19",{"_index":1123,"title":{},"body":{"controllers/HomeController.html":{}}}],["server/home/home.module.ts",{"_index":1137,"title":{},"body":{"modules/HomeModule.html":{}}}],["server/logger.ts",{"_index":1170,"title":{},"body":{"classes/Logger.html":{},"coverage.html":{}}}],["server/logger.ts:13",{"_index":1180,"title":{},"body":{"classes/Logger.html":{}}}],["server/logger.ts:17",{"_index":1184,"title":{},"body":{"classes/Logger.html":{}}}],["server/logger.ts:21",{"_index":1188,"title":{},"body":{"classes/Logger.html":{}}}],["server/logger.ts:25",{"_index":1190,"title":{},"body":{"classes/Logger.html":{}}}],["server/logger.ts:4",{"_index":1177,"title":{},"body":{"classes/Logger.html":{}}}],["server/logger.ts:9",{"_index":1186,"title":{},"body":{"classes/Logger.html":{}}}],["server/main.ts",{"_index":2186,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/middleware/disable",{"_index":929,"title":{},"body":{"injectables/DisableBodyParserMiddleware.html":{},"coverage.html":{}}}],["server/middleware/json",{"_index":1139,"title":{},"body":{"injectables/JsonBodyMiddleware.html":{},"coverage.html":{}}}],["server/middleware/language.middleware.ts",{"_index":1017,"title":{},"body":{"injectables/GetLanguageMiddleware.html":{},"coverage.html":{}}}],["server/middleware/language.middleware.ts:5",{"_index":1019,"title":{},"body":{"injectables/GetLanguageMiddleware.html":{}}}],["server/middleware/logger.middleware.ts",{"_index":1197,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["server/middleware/logger.middleware.ts:6",{"_index":1201,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["server/middleware/logger.middleware.ts:8",{"_index":1199,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["server/ory/ory.controller.ts",{"_index":1231,"title":{},"body":{"controllers/OryController.html":{},"coverage.html":{}}}],["server/ory/ory.controller.ts:24",{"_index":1239,"title":{},"body":{"controllers/OryController.html":{}}}],["server/ory/ory.controller.ts:30",{"_index":1244,"title":{},"body":{"controllers/OryController.html":{}}}],["server/ory/ory.controller.ts:34",{"_index":1241,"title":{},"body":{"controllers/OryController.html":{}}}],["server/ory/ory.module.ts",{"_index":1258,"title":{},"body":{"modules/OryModule.html":{}}}],["server/ory/ory.service.ts",{"_index":1260,"title":{},"body":{"injectables/OryService.html":{},"coverage.html":{}}}],["server/ory/ory.service.ts:26",{"_index":1268,"title":{},"body":{"injectables/OryService.html":{}}}],["server/ory/ory.service.ts:44",{"_index":1271,"title":{},"body":{"injectables/OryService.html":{}}}],["server/ory/ory.service.ts:8",{"_index":1274,"title":{},"body":{"injectables/OryService.html":{}}}],["server/ory/ory.service.ts:9",{"_index":1265,"title":{},"body":{"injectables/OryService.html":{}}}],["server/parser/parser.module.ts",{"_index":1309,"title":{},"body":{"modules/ParserModule.html":{}}}],["server/parser/parser.service.ts",{"_index":1311,"title":{},"body":{"injectables/ParserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/parser/parser.service.ts:18",{"_index":1332,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/parser/parser.service.ts:19",{"_index":1333,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/parser/parser.service.ts:20",{"_index":1331,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/parser/parser.service.ts:22",{"_index":1322,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/parser/parser.service.ts:50",{"_index":1328,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/parser/parser.service.ts:70",{"_index":1324,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/parser/parser.service.ts:86",{"_index":1319,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/parser/parser.service.ts:91",{"_index":1320,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/personality/dto/create",{"_index":910,"title":{},"body":{"classes/CreatePersonality.html":{},"coverage.html":{}}}],["server/personality/dto/get",{"_index":1023,"title":{},"body":{"classes/GetPersonalities.html":{},"coverage.html":{}}}],["server/personality/personality.controller.ts",{"_index":1409,"title":{},"body":{"controllers/PersonalityController.html":{},"coverage.html":{}}}],["server/personality/personality.controller.ts:104",{"_index":1439,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:125",{"_index":1436,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:139",{"_index":1433,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:32",{"_index":1428,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:37",{"_index":1416,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:54",{"_index":1422,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:63",{"_index":1442,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:68",{"_index":1419,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:79",{"_index":1425,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:88",{"_index":1431,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.module.ts",{"_index":1487,"title":{},"body":{"modules/PersonalityModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/personality/personality.service.ts",{"_index":1492,"title":{},"body":{"injectables/PersonalityService.html":{},"coverage.html":{}}}],["server/personality/personality.service.ts:116",{"_index":1513,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:123",{"_index":1509,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:134",{"_index":1511,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:160",{"_index":1518,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:17",{"_index":1525,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:18",{"_index":1526,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:185",{"_index":1515,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:203",{"_index":1520,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:21",{"_index":1499,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:245",{"_index":1506,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:260",{"_index":1502,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:264",{"_index":1508,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:274",{"_index":1523,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:283",{"_index":1501,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:32",{"_index":1516,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:82",{"_index":1504,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/schemas/personality.schema.ts",{"_index":1395,"title":{},"body":{"classes/Personality.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/personality/schemas/personality.schema.ts:10",{"_index":1397,"title":{},"body":{"classes/Personality.html":{}}}],["server/personality/schemas/personality.schema.ts:13",{"_index":1398,"title":{},"body":{"classes/Personality.html":{}}}],["server/personality/schemas/personality.schema.ts:16",{"_index":1396,"title":{},"body":{"classes/Personality.html":{}}}],["server/personality/schemas/personality.schema.ts:19",{"_index":1401,"title":{},"body":{"classes/Personality.html":{}}}],["server/root/root.controller.ts",{"_index":1606,"title":{},"body":{"controllers/RootController.html":{},"coverage.html":{}}}],["server/root/root.controller.ts:17",{"_index":1611,"title":{},"body":{"controllers/RootController.html":{}}}],["server/root/root.controller.ts:8",{"_index":1615,"title":{},"body":{"controllers/RootController.html":{}}}],["server/seed.ts",{"_index":2194,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/server.ts",{"_index":2197,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/sitemap/sitemap.controller.ts",{"_index":1657,"title":{},"body":{"controllers/SitemapController.html":{},"coverage.html":{}}}],["server/sitemap/sitemap.controller.ts:18",{"_index":1663,"title":{},"body":{"controllers/SitemapController.html":{}}}],["server/sitemap/sitemap.controller.ts:26",{"_index":1667,"title":{},"body":{"controllers/SitemapController.html":{}}}],["server/sitemap/sitemap.module.ts",{"_index":1684,"title":{},"body":{"modules/SitemapModule.html":{}}}],["server/sitemap/sitemap.service.ts",{"_index":1686,"title":{},"body":{"injectables/SitemapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/sitemap/sitemap.service.ts:15",{"_index":1695,"title":{},"body":{"injectables/SitemapService.html":{}}}],["server/sitemap/sitemap.service.ts:17",{"_index":1690,"title":{},"body":{"injectables/SitemapService.html":{}}}],["server/sitemap/sitemap.service.ts:73",{"_index":1693,"title":{},"body":{"injectables/SitemapService.html":{}}}],["server/sitemap/sitemap.service.ts:9",{"_index":1688,"title":{},"body":{"injectables/SitemapService.html":{}}}],["server/source/schemas/source.schema.ts",{"_index":1731,"title":{},"body":{"classes/Source.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/source/schemas/source.schema.ts:14",{"_index":1735,"title":{},"body":{"classes/Source.html":{}}}],["server/source/schemas/source.schema.ts:28",{"_index":1733,"title":{},"body":{"classes/Source.html":{}}}],["server/source/schemas/source.schema.ts:31",{"_index":1734,"title":{},"body":{"classes/Source.html":{}}}],["server/source/schemas/source.schema.ts:41",{"_index":1736,"title":{},"body":{"classes/Source.html":{}}}],["server/source/schemas/source.schema.ts:46",{"_index":1739,"title":{},"body":{"classes/Source.html":{}}}],["server/source/schemas/source.schema.ts:53",{"_index":1740,"title":{},"body":{"classes/Source.html":{}}}],["server/source/source.controller.ts",{"_index":1749,"title":{},"body":{"controllers/SourceController.html":{},"coverage.html":{}}}],["server/source/source.controller.ts:10",{"_index":1754,"title":{},"body":{"controllers/SourceController.html":{}}}],["server/source/source.module.ts",{"_index":1768,"title":{},"body":{"modules/SourceModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/source/source.service.ts",{"_index":1773,"title":{},"body":{"injectables/SourceService.html":{},"coverage.html":{}}}],["server/source/source.service.ts:12",{"_index":1778,"title":{},"body":{"injectables/SourceService.html":{}}}],["server/source/source.service.ts:20",{"_index":1779,"title":{},"body":{"injectables/SourceService.html":{}}}],["server/source/source.service.ts:7",{"_index":1776,"title":{},"body":{"injectables/SourceService.html":{}}}],["server/stats/stats.controller.ts",{"_index":1789,"title":{},"body":{"controllers/StatsController.html":{},"coverage.html":{}}}],["server/stats/stats.controller.ts:10",{"_index":1793,"title":{},"body":{"controllers/StatsController.html":{}}}],["server/stats/stats.module.ts",{"_index":1800,"title":{},"body":{"modules/StatsModule.html":{}}}],["server/stats/stats.service.ts",{"_index":1802,"title":{},"body":{"injectables/StatsService.html":{},"coverage.html":{}}}],["server/stats/stats.service.ts:14",{"_index":1805,"title":{},"body":{"injectables/StatsService.html":{}}}],["server/stats/stats.service.ts:7",{"_index":1804,"title":{},"body":{"injectables/StatsService.html":{}}}],["server/users/schemas/user.schema.ts",{"_index":1817,"title":{},"body":{"classes/User.html":{},"interfaces/UserDocument.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/users/schemas/user.schema.ts:11",{"_index":1822,"title":{},"body":{"classes/User.html":{}}}],["server/users/schemas/user.schema.ts:14",{"_index":1820,"title":{},"body":{"classes/User.html":{}}}],["server/users/schemas/user.schema.ts:17",{"_index":1823,"title":{},"body":{"classes/User.html":{}}}],["server/users/schemas/user.schema.ts:20",{"_index":1821,"title":{},"body":{"classes/User.html":{}}}],["server/users/schemas/user.schema.ts:5",{"_index":1828,"title":{},"body":{"interfaces/UserDocument.html":{}}}],["server/users/users.controller.ts",{"_index":1830,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["server/users/users.controller.ts:28",{"_index":1838,"title":{},"body":{"controllers/UsersController.html":{}}}],["server/users/users.controller.ts:35",{"_index":1841,"title":{},"body":{"controllers/UsersController.html":{}}}],["server/users/users.controller.ts:43",{"_index":1835,"title":{},"body":{"controllers/UsersController.html":{}}}],["server/users/users.controller.ts:72",{"_index":1843,"title":{},"body":{"controllers/UsersController.html":{}}}],["server/users/users.controller.ts:86",{"_index":1846,"title":{},"body":{"controllers/UsersController.html":{}}}],["server/users/users.module.ts",{"_index":1889,"title":{},"body":{"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/users/users.service.ts",{"_index":1896,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["server/users/users.service.ts:15",{"_index":1900,"title":{},"body":{"injectables/UsersService.html":{}}}],["server/users/users.service.ts:19",{"_index":1904,"title":{},"body":{"injectables/UsersService.html":{}}}],["server/users/users.service.ts:34",{"_index":1902,"title":{},"body":{"injectables/UsersService.html":{}}}],["server/users/users.service.ts:40",{"_index":1899,"title":{},"body":{"injectables/UsersService.html":{}}}],["server/users/users.service.ts:9",{"_index":1897,"title":{},"body":{"injectables/UsersService.html":{}}}],["server/util.ts",{"_index":1924,"title":{},"body":{"injectables/UtilService.html":{},"coverage.html":{}}}],["server/util.ts:26",{"_index":1933,"title":{},"body":{"injectables/UtilService.html":{}}}],["server/util.ts:5",{"_index":1929,"title":{},"body":{"injectables/UtilService.html":{}}}],["server/view/view.controller.ts",{"_index":1961,"title":{},"body":{"controllers/ViewController.html":{},"coverage.html":{}}}],["server/view/view.controller.ts:11",{"_index":1975,"title":{},"body":{"controllers/ViewController.html":{}}}],["server/view/view.controller.ts:22",{"_index":1988,"title":{},"body":{"controllers/ViewController.html":{}}}],["server/view/view.controller.ts:33",{"_index":1986,"title":{},"body":{"controllers/ViewController.html":{}}}],["server/view/view.controller.ts:44",{"_index":1991,"title":{},"body":{"controllers/ViewController.html":{}}}],["server/view/view.controller.ts:55",{"_index":1973,"title":{},"body":{"controllers/ViewController.html":{}}}],["server/view/view.controller.ts:66",{"_index":1970,"title":{},"body":{"controllers/ViewController.html":{}}}],["server/view/view.controller.ts:81",{"_index":1978,"title":{},"body":{"controllers/ViewController.html":{}}}],["server/view/view.module.ts",{"_index":2010,"title":{},"body":{"modules/ViewModule.html":{}}}],["server/view/view.service.ts",{"_index":2012,"title":{},"body":{"injectables/ViewService.html":{},"coverage.html":{}}}],["server/view/view.service.ts:12",{"_index":2018,"title":{},"body":{"injectables/ViewService.html":{}}}],["server/view/view.service.ts:24",{"_index":2016,"title":{},"body":{"injectables/ViewService.html":{}}}],["server/view/view.service.ts:7",{"_index":2020,"title":{},"body":{"injectables/ViewService.html":{}}}],["server/view/view.service.ts:8",{"_index":2015,"title":{},"body":{"injectables/ViewService.html":{}}}],["server/wikidata/schemas/wikidata.schema.ts",{"_index":2031,"title":{},"body":{"classes/WikidataCache.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/wikidata/schemas/wikidata.schema.ts:12",{"_index":2035,"title":{},"body":{"classes/WikidataCache.html":{}}}],["server/wikidata/schemas/wikidata.schema.ts:15",{"_index":2036,"title":{},"body":{"classes/WikidataCache.html":{}}}],["server/wikidata/schemas/wikidata.schema.ts:18",{"_index":2034,"title":{},"body":{"classes/WikidataCache.html":{}}}],["server/wikidata/schemas/wikidata.schema.ts:9",{"_index":2037,"title":{},"body":{"classes/WikidataCache.html":{}}}],["server/wikidata/wikidata.module.ts",{"_index":2045,"title":{},"body":{"modules/WikidataModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/wikidata/wikidata.service.ts",{"_index":2053,"title":{},"body":{"injectables/WikidataService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/wikidata/wikidata.service.ts:104",{"_index":2073,"title":{},"body":{"injectables/WikidataService.html":{}}}],["server/wikidata/wikidata.service.ts:111",{"_index":2066,"title":{},"body":{"injectables/WikidataService.html":{}}}],["server/wikidata/wikidata.service.ts:125",{"_index":2075,"title":{},"body":{"injectables/WikidataService.html":{}}}],["server/wikidata/wikidata.service.ts:153",{"_index":2070,"title":{},"body":{"injectables/WikidataService.html":{}}}],["server/wikidata/wikidata.service.ts:16",{"_index":2062,"title":{},"body":{"injectables/WikidataService.html":{}}}],["server/wikidata/wikidata.service.ts:22",{"_index":2068,"title":{},"body":{"injectables/WikidataService.html":{}}}],["server/wikidata/wikidata.service.ts:39",{"_index":2077,"title":{},"body":{"injectables/WikidataService.html":{}}}],["server/wikidata/wikidata.service.ts:55",{"_index":2064,"title":{},"body":{"injectables/WikidataService.html":{}}}],["serves",{"_index":2597,"title":{},"body":{"license.html":{}}}],["service",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"license.html":{}}}],["servicerunner",{"_index":2198,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["servicing",{"_index":3096,"title":{},"body":{"license.html":{}}}],["session",{"_index":141,"title":{},"body":{"modules/AuthModule.html":{},"guards/SessionGuard.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["session?.identity?.traits?.user_id",{"_index":1650,"title":{},"body":{"guards/SessionGuard.html":{}}}],["sessionguard",{"_index":81,"title":{"guards/SessionGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/SessionGuard.html":{},"coverage.html":{}}}],["set",{"_index":2303,"title":{},"body":{"dependencies.html":{}}}],["setmetadata('public",{"_index":3305,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shall",{"_index":2676,"title":{},"body":{"license.html":{}}}],["share",{"_index":2289,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["shared",{"_index":2622,"title":{},"body":{"license.html":{}}}],["short",{"_index":3150,"title":{},"body":{"license.html":{}}}],["show",{"_index":2429,"title":{},"body":{"license.html":{}}}],["show404",{"_index":1965,"title":{},"body":{"controllers/ViewController.html":{}}}],["show404(@req",{"_index":2006,"title":{},"body":{"controllers/ViewController.html":{}}}],["show404(req",{"_index":1976,"title":{},"body":{"controllers/ViewController.html":{}}}],["showaboutpage",{"_index":1966,"title":{},"body":{"controllers/ViewController.html":{}}}],["showaboutpage(@req",{"_index":1998,"title":{},"body":{"controllers/ViewController.html":{}}}],["showaboutpage(req",{"_index":1984,"title":{},"body":{"controllers/ViewController.html":{}}}],["showhome",{"_index":1120,"title":{},"body":{"controllers/HomeController.html":{},"controllers/ViewController.html":{}}}],["showhome(@req",{"_index":1127,"title":{},"body":{"controllers/HomeController.html":{},"controllers/ViewController.html":{}}}],["showhome(req",{"_index":1121,"title":{},"body":{"controllers/HomeController.html":{},"controllers/ViewController.html":{}}}],["showprivacypolicypage",{"_index":1967,"title":{},"body":{"controllers/ViewController.html":{}}}],["showprivacypolicypage(@req",{"_index":2000,"title":{},"body":{"controllers/ViewController.html":{}}}],["showprivacypolicypage(req",{"_index":1989,"title":{},"body":{"controllers/ViewController.html":{}}}],["sign",{"_index":3163,"title":{},"body":{"license.html":{}}}],["significant",{"_index":2837,"title":{},"body":{"license.html":{}}}],["similar",{"_index":2691,"title":{},"body":{"license.html":{}}}],["simultaneously",{"_index":3056,"title":{},"body":{"license.html":{}}}],["single",{"_index":3028,"title":{},"body":{"license.html":{}}}],["sistema",{"_index":3284,"title":{},"body":{"miscellaneous/variables.html":{}}}],["site",{"_index":1720,"title":{},"body":{"injectables/SitemapService.html":{}}}],["sitekey",{"_index":405,"title":{},"body":{"controllers/ClaimController.html":{}}}],["sitelinkname",{"_index":2121,"title":{},"body":{"injectables/WikidataService.html":{}}}],["sitelinkname.match(/^(.*)wiki$/)[1",{"_index":2125,"title":{},"body":{"injectables/WikidataService.html":{}}}],["sitemap",{"_index":1666,"title":{},"body":{"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"dependencies.html":{}}}],["sitemap.controller",{"_index":1685,"title":{},"body":{"modules/SitemapModule.html":{}}}],["sitemap.service",{"_index":1670,"title":{},"body":{"controllers/SitemapController.html":{},"modules/SitemapModule.html":{}}}],["sitemap/sitemap.module",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["sitemapcontroller",{"_index":1656,"title":{"controllers/SitemapController.html":{}},"body":{"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"coverage.html":{}}}],["sitemapmodule",{"_index":70,"title":{"modules/SitemapModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SitemapModule.html":{},"modules.html":{},"overview.html":{}}}],["sitemapservice",{"_index":1669,"title":{"injectables/SitemapService.html":{}},"body":{"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"coverage.html":{},"overview.html":{}}}],["sitemapstream",{"_index":1696,"title":{},"body":{"injectables/SitemapService.html":{}}}],["sitemapstream.end",{"_index":1722,"title":{},"body":{"injectables/SitemapService.html":{}}}],["sitemapstream.write(site",{"_index":1721,"title":{},"body":{"injectables/SitemapService.html":{}}}],["sitemapxml",{"_index":1674,"title":{},"body":{"controllers/SitemapController.html":{}}}],["sites",{"_index":1700,"title":{},"body":{"injectables/SitemapService.html":{}}}],["sites.push",{"_index":1713,"title":{},"body":{"injectables/SitemapService.html":{}}}],["size",{"_index":1531,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["skip(page",{"_index":619,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{},"injectables/SourceService.html":{}}}],["slice",{"_index":1928,"title":{},"body":{"injectables/UtilService.html":{}}}],["slug",{"_index":149,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimService.html":{},"classes/Personality.html":{},"injectables/PersonalityService.html":{}}}],["slugify",{"_index":710,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{},"dependencies.html":{}}}],["slugify(claim.title",{"_index":723,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["slugify(newpersonalitybody.name",{"_index":1585,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["slugify(personality.name",{"_index":1544,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["social",{"_index":2291,"title":{},"body":{"dependencies.html":{}}}],["soft",{"_index":569,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["softdelete",{"_index":169,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"classes/Personality.html":{},"injectables/PersonalityService.html":{},"dependencies.html":{}}}],["softdeleteplugin",{"_index":168,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/Personality.html":{}}}],["software",{"_index":2362,"title":{},"body":{"license.html":{}}}],["sold",{"_index":2818,"title":{},"body":{"license.html":{}}}],["sole",{"_index":2655,"title":{},"body":{"license.html":{}}}],["solely",{"_index":2668,"title":{},"body":{"license.html":{}}}],["sonarcloud",{"_index":799,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{}}}],["sort",{"_index":607,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{},"injectables/SourceService.html":{}}}],["source",{"_index":4,"title":{"classes/Source.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"injectables/DisableBodyParserMiddleware.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"injectables/GetLanguageMiddleware.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/JsonBodyMiddleware.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"modules/OryModule.html":{},"injectables/OryService.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"license.html":{}}}],["source.controller",{"_index":1770,"title":{},"body":{"modules/SourceModule.html":{}}}],["source.name",{"_index":1772,"title":{},"body":{"modules/SourceModule.html":{},"miscellaneous/variables.html":{}}}],["source.save",{"_index":1786,"title":{},"body":{"injectables/SourceService.html":{}}}],["source.service",{"_index":1755,"title":{},"body":{"controllers/SourceController.html":{},"modules/SourceModule.html":{}}}],["source/schemas/source.schema",{"_index":602,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{}}}],["source/source.module",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{}}}],["source/source.service",{"_index":596,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{}}}],["sourcecontroller",{"_index":1748,"title":{"controllers/SourceController.html":{}},"body":{"controllers/SourceController.html":{},"modules/SourceModule.html":{},"coverage.html":{}}}],["sourced",{"_index":3181,"title":{},"body":{"properties.html":{}}}],["sourcedocument",{"_index":1741,"title":{},"body":{"classes/Source.html":{},"injectables/SourceService.html":{},"miscellaneous/typealiases.html":{}}}],["sourcemodel",{"_index":1771,"title":{},"body":{"modules/SourceModule.html":{},"injectables/SourceService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sourcemodule",{"_index":47,"title":{"modules/SourceModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/SourceModule.html":{},"modules.html":{},"overview.html":{}}}],["sources",{"_index":419,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"controllers/SourceController.html":{}}}],["sources.length",{"_index":1764,"title":{},"body":{"controllers/SourceController.html":{}}}],["sourceschema",{"_index":1746,"title":{},"body":{"classes/Source.html":{},"modules/SourceModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sourcesclaimpage",{"_index":207,"title":{},"body":{"controllers/ClaimController.html":{}}}],["sourcesclaimpage(@req",{"_index":418,"title":{},"body":{"controllers/ClaimController.html":{}}}],["sourcesclaimpage(req",{"_index":257,"title":{},"body":{"controllers/ClaimController.html":{}}}],["sourceservice",{"_index":532,"title":{"injectables/SourceService.html":{}},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"coverage.html":{},"overview.html":{}}}],["sourcetargetmodel",{"_index":601,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"classes/Source.html":{},"miscellaneous/enumerations.html":{}}}],["sourcetargetmodel.claim",{"_index":740,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["spare",{"_index":2769,"title":{},"body":{"license.html":{}}}],["sparse",{"_index":1400,"title":{},"body":{"classes/Personality.html":{}}}],["speak",{"_index":2398,"title":{},"body":{"license.html":{}}}],["special",{"_index":730,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{},"license.html":{}}}],["specifc",{"_index":838,"title":{},"body":{"injectables/ClaimService.html":{}}}],["specific",{"_index":2604,"title":{},"body":{"license.html":{}}}],["specifically",{"_index":2626,"title":{},"body":{"license.html":{}}}],["specified",{"_index":2581,"title":{},"body":{"license.html":{}}}],["specifies",{"_index":3075,"title":{},"body":{"license.html":{}}}],["specify",{"_index":3079,"title":{},"body":{"license.html":{}}}],["speech",{"_index":663,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["spirit",{"_index":3068,"title":{},"body":{"license.html":{}}}],["stand",{"_index":2477,"title":{},"body":{"license.html":{}}}],["standard",{"_index":2577,"title":{},"body":{"license.html":{}}}],["standards",{"_index":2580,"title":{},"body":{"license.html":{}}}],["start",{"_index":3138,"title":{},"body":{"license.html":{}}}],["started",{"_index":2315,"title":{"index.html":{},"license.html":{}},"body":{}}],["starters",{"_index":1352,"title":{},"body":{"injectables/ParserService.html":{}}}],["starts",{"_index":3151,"title":{},"body":{"license.html":{}}}],["startup",{"_index":2332,"title":{},"body":{"index.html":{}}}],["state",{"_index":540,"title":{},"body":{"injectables/ClaimReviewService.html":{},"license.html":{}}}],["state1",{"_index":543,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["state2",{"_index":544,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["state[acc",{"_index":635,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["state[classification",{"_index":630,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["state[topclassification",{"_index":637,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["stated",{"_index":2640,"title":{},"body":{"license.html":{}}}],["statement",{"_index":2919,"title":{},"body":{"license.html":{}}}],["statements",{"_index":2163,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":2486,"title":{},"body":{"license.html":{}}}],["static",{"_index":22,"title":{},"body":{"modules/AppModule.html":{}}}],["stating",{"_index":2713,"title":{},"body":{"license.html":{}}}],["stats",{"_index":386,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{},"controllers/HomeController.html":{},"injectables/PersonalityService.html":{}}}],["stats.controller",{"_index":1801,"title":{},"body":{"modules/StatsModule.html":{}}}],["stats.service",{"_index":1794,"title":{},"body":{"controllers/StatsController.html":{},"modules/StatsModule.html":{}}}],["stats/stats.module",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/HomeModule.html":{}}}],["stats/stats.service",{"_index":1125,"title":{},"body":{"controllers/HomeController.html":{}}}],["statscontroller",{"_index":1788,"title":{"controllers/StatsController.html":{}},"body":{"controllers/StatsController.html":{},"modules/StatsModule.html":{},"coverage.html":{}}}],["statsmodule",{"_index":49,"title":{"modules/StatsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HomeModule.html":{},"modules/StatsModule.html":{},"modules.html":{},"overview.html":{}}}],["statsservice",{"_index":1124,"title":{"injectables/StatsService.html":{}},"body":{"controllers/HomeController.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"coverage.html":{},"overview.html":{}}}],["status",{"_index":1612,"title":{},"body":{"controllers/RootController.html":{},"license.html":{}}}],["statuscode",{"_index":1209,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["step",{"_index":2351,"title":{},"body":{"index.html":{}}}],["steps",{"_index":2434,"title":{},"body":{"license.html":{}}}],["storage",{"_index":2747,"title":{},"body":{"license.html":{}}}],["store",{"_index":3230,"title":{},"body":{"miscellaneous/variables.html":{}}}],["strategy",{"_index":1162,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/SitemapService.html":{},"controllers/ViewController.html":{}}}],["streamtopromise",{"_index":1697,"title":{},"body":{"injectables/SitemapService.html":{}}}],["streamtopromise(sitemapstream",{"_index":1723,"title":{},"body":{"injectables/SitemapService.html":{}}}],["strict",{"_index":728,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{}}}],["string",{"_index":158,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"injectables/GetLanguageMiddleware.html":{},"classes/GetPersonalities.html":{},"injectables/HistoryService.html":{},"classes/Logger.html":{},"injectables/OryService.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"classes/Source.html":{},"injectables/SourceService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{}}}],["strip",{"_index":729,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{}}}],["styled",{"_index":2306,"title":{},"body":{"dependencies.html":{}}}],["subdividing",{"_index":2969,"title":{},"body":{"license.html":{}}}],["subject",{"_index":954,"title":{},"body":{"injectables/EmailService.html":{},"license.html":{}}}],["sublicenses",{"_index":2998,"title":{},"body":{"license.html":{}}}],["sublicensing",{"_index":2670,"title":{},"body":{"license.html":{}}}],["submitsitemap",{"_index":1659,"title":{},"body":{"controllers/SitemapController.html":{},"injectables/SitemapService.html":{}}}],["submitsitemap(@request",{"_index":1678,"title":{},"body":{"controllers/SitemapController.html":{}}}],["submitsitemap(hostname",{"_index":1692,"title":{},"body":{"injectables/SitemapService.html":{}}}],["submitsitemap(req",{"_index":1664,"title":{},"body":{"controllers/SitemapController.html":{}}}],["submitted",{"_index":1726,"title":{},"body":{"injectables/SitemapService.html":{}}}],["submitting",{"_index":1727,"title":{},"body":{"injectables/SitemapService.html":{}}}],["subprograms",{"_index":2625,"title":{},"body":{"license.html":{}}}],["subroutine",{"_index":3166,"title":{},"body":{"license.html":{}}}],["subsection",{"_index":2779,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":2832,"title":{},"body":{"license.html":{}}}],["substantially",{"_index":2475,"title":{},"body":{"license.html":{}}}],["success",{"_index":1876,"title":{},"body":{"controllers/UsersController.html":{}}}],["successful",{"_index":1877,"title":{},"body":{"controllers/UsersController.html":{}}}],["successfully",{"_index":1470,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["such",{"_index":2422,"title":{},"body":{"license.html":{}}}],["sue",{"_index":3010,"title":{},"body":{"license.html":{}}}],["suffice",{"_index":2844,"title":{},"body":{"license.html":{}}}],["suffixes",{"_index":1350,"title":{},"body":{"injectables/ParserService.html":{}}}],["sum",{"_index":606,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["super",{"_index":1166,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["supplement",{"_index":2874,"title":{},"body":{"license.html":{}}}],["support",{"_index":2721,"title":{},"body":{"license.html":{},"modules.html":{}}}],["supports",{"_index":2788,"title":{},"body":{"license.html":{}}}],["sure",{"_index":2389,"title":{},"body":{"license.html":{}}}],["surrender",{"_index":2415,"title":{},"body":{"license.html":{}}}],["survive",{"_index":2918,"title":{},"body":{"license.html":{}}}],["sustained",{"_index":3111,"title":{},"body":{"license.html":{}}}],["svg",{"_index":2211,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["system",{"_index":2587,"title":{},"body":{"license.html":{}}}],["systematic",{"_index":2462,"title":{},"body":{"license.html":{}}}],["t",{"_index":1932,"title":{},"body":{"injectables/UtilService.html":{}}}],["table",{"_index":2206,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2205,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":449,"title":{},"body":{"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/Source.html":{}}}],["take",{"_index":2380,"title":{},"body":{"license.html":{}}}],["tangible",{"_index":2812,"title":{},"body":{"license.html":{}}}],["target",{"_index":1088,"title":{},"body":{"injectables/HistoryService.html":{}}}],["target(claim",{"_index":1100,"title":{},"body":{"injectables/HistoryService.html":{}}}],["targetid",{"_index":187,"title":{},"body":{"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/PersonalityController.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{}}}],["targetmodel",{"_index":423,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"classes/Source.html":{},"miscellaneous/enumerations.html":{}}}],["targetmodel.claim",{"_index":818,"title":{},"body":{"injectables/ClaimService.html":{}}}],["targetmodel.personality",{"_index":1550,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["technological",{"_index":2679,"title":{},"body":{"license.html":{}}}],["tells",{"_index":2564,"title":{},"body":{"license.html":{}}}],["template",{"_index":972,"title":{},"body":{"injectables/EmailService.html":{}}}],["template/email.html",{"_index":952,"title":{},"body":{"injectables/EmailService.html":{}}}],["templateoptions",{"_index":956,"title":{},"body":{"injectables/EmailService.html":{}}}],["templatepath",{"_index":950,"title":{},"body":{"injectables/EmailService.html":{}}}],["templates/userseed.html",{"_index":3288,"title":{},"body":{"miscellaneous/variables.html":{}}}],["term",{"_index":2638,"title":{},"body":{"license.html":{}}}],["terminal",{"_index":3149,"title":{},"body":{"license.html":{}}}],["terminate",{"_index":2925,"title":{},"body":{"license.html":{}}}],["terminated",{"_index":2947,"title":{},"body":{"license.html":{}}}],["terminates",{"_index":2933,"title":{},"body":{"license.html":{}}}],["termination",{"_index":2922,"title":{},"body":{"license.html":{}}}],["terms",{"_index":2430,"title":{},"body":{"license.html":{}}}],["text",{"_index":955,"title":{},"body":{"injectables/EmailService.html":{},"injectables/ParserService.html":{}}}],["text/xml",{"_index":1662,"title":{},"body":{"controllers/SitemapController.html":{}}}],["then(([claims",{"_index":325,"title":{},"body":{"controllers/ClaimController.html":{}}}],["then(([personalities",{"_index":1603,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["then(([reviews",{"_index":362,"title":{},"body":{"controllers/ClaimController.html":{}}}],["then(([stats",{"_index":376,"title":{},"body":{"controllers/ClaimController.html":{}}}],["then((history",{"_index":1063,"title":{},"body":{"controllers/HistoryController.html":{}}}],["then((response",{"_index":2144,"title":{},"body":{"injectables/WikidataService.html":{}}}],["then((sources",{"_index":1762,"title":{},"body":{"controllers/SourceController.html":{}}}],["then((values",{"_index":1809,"title":{},"body":{"injectables/StatsService.html":{}}}],["then(async",{"_index":3272,"title":{},"body":{"miscellaneous/variables.html":{}}}],["therefore",{"_index":2416,"title":{},"body":{"license.html":{}}}],["things",{"_index":2407,"title":{},"body":{"license.html":{}}}],["third",{"_index":2705,"title":{},"body":{"license.html":{}}}],["this._checkcaptcharesponse",{"_index":338,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["this._getclaim",{"_index":824,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this._getclaim({_id",{"_index":840,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this._getclaim({personality",{"_index":841,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this._getsentencebyhashandclaimid(sentencehash",{"_index":398,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this._reviewsbysentencehashaggregated(sentencehash",{"_index":618,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["this._reviewsbysentencehashaggregated(sentencehash).count",{"_index":616,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["this._topclassificationaccumulator",{"_index":611,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["this._verifyinputsquery(getclaimsdto",{"_index":321,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.calculateoverallstats(claim",{"_index":861,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimmodel(claim",{"_index":809,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimmodel.aggregate",{"_index":844,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimmodel.countdocuments().where(query",{"_index":805,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimmodel.find(query",{"_index":792,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimmodel.findone(match",{"_index":847,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimmodel.softdelete",{"_index":835,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimreview.agreggateclassification",{"_index":1578,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.claimreviewmodel(claimreview",{"_index":648,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["this.claimreviewmodel.aggregate",{"_index":604,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["this.claimreviewmodel.countdocuments().where(query",{"_index":608,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["this.claimreviewmodel.findone",{"_index":615,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["this.claimreviewservice.count",{"_index":1808,"title":{},"body":{"injectables/StatsService.html":{}}}],["this.claimreviewservice.countreviewsbysentencehash(sentencehash",{"_index":361,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimreviewservice.create",{"_index":497,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["this.claimreviewservice.delete(params.id",{"_index":504,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["this.claimreviewservice.getbyid(params.id",{"_index":501,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["this.claimreviewservice.getreviewsbyclaimid",{"_index":854,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/SitemapService.html":{}}}],["this.claimreviewservice.getreviewsbysentencehash",{"_index":359,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimreviewservice.getreviewstatsbyclaimid",{"_index":859,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimreviewservice.getreviewstatsbysentencehash({sentencehash",{"_index":371,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimreviewservice.getuserreviewbysentencehash",{"_index":374,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimrevisionmodel(claim",{"_index":735,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["this.claimrevisionmodel.findbyid(claimid",{"_index":715,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["this.claimrevisionservice.create(claim._id",{"_index":828,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimrevisionservice.create(newclaim._id",{"_index":810,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimrevisionservice.getrevision(revisionid)).toobject",{"_index":845,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimservice.count",{"_index":1806,"title":{},"body":{"injectables/StatsService.html":{}}}],["this.claimservice.count(queryinputs",{"_index":324,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimservice.create(createclaimdto",{"_index":347,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimservice.delete(claimid",{"_index":356,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimservice.getbyid(claimid",{"_index":350,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimservice.getbypersonalityidandclaimslug",{"_index":396,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimservice.listall",{"_index":323,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimservice.listall(0",{"_index":1715,"title":{},"body":{"injectables/SitemapService.html":{}}}],["this.claimservice.update(claimid",{"_index":353,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.configservice.get(\"authentication_type",{"_index":1882,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.configservice.get(\"ory",{"_index":1283,"title":{},"body":{"injectables/OryService.html":{}}}],["this.configservice.get(\"recaptcha_secret",{"_index":336,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["this.configservice.get(\"recaptcha_sitekey",{"_index":406,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.configservice.get(\"smtp_email_pass",{"_index":987,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get(\"smtp_email_user",{"_index":985,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get(\"smtp_host",{"_index":979,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get(\"smtp_port",{"_index":981,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get(\"smtp_secure",{"_index":983,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get(\"web_url",{"_index":975,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get('access_token",{"_index":1646,"title":{},"body":{"guards/SessionGuard.html":{}}}],["this.configservice.get('authentication_type",{"_index":1644,"title":{},"body":{"guards/SessionGuard.html":{}}}],["this.configservice.get('ory.url",{"_index":1645,"title":{},"body":{"guards/SessionGuard.html":{}}}],["this.count(queryinputs",{"_index":1602,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.createparagraphid",{"_index":1368,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.createsentenceid",{"_index":1392,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.createtransport",{"_index":988,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.extractclaimwithtextsummary(personality.claims",{"_index":1576,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.extractproperties",{"_index":2100,"title":{},"body":{"injectables/WikidataService.html":{}}}],["this.extractvalue",{"_index":2108,"title":{},"body":{"injectables/WikidataService.html":{}}}],["this.extractvalue(wikidata",{"_index":2105,"title":{},"body":{"injectables/WikidataService.html":{}}}],["this.getbyid(claimid",{"_index":832,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.getbyid(personalityid",{"_index":1586,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.getbyid(userid",{"_index":1918,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getcommonsthumburl(filename",{"_index":2120,"title":{},"body":{"injectables/WikidataService.html":{}}}],["this.getdeletedpersonalitybywikidata(personality.wikidata",{"_index":1540,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.getemailbody(templateoptions",{"_index":989,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.getreviewstats(personality._id",{"_index":1575,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.getsitelinkname(language",{"_index":2122,"title":{},"body":{"injectables/WikidataService.html":{}}}],["this.history.createhistory(history",{"_index":1551,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.history.gethistoryparams",{"_index":1548,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.historymodel(data",{"_index":1113,"title":{},"body":{"injectables/HistoryService.html":{}}}],["this.historymodel.find",{"_index":1115,"title":{},"body":{"injectables/HistoryService.html":{}}}],["this.historyservice",{"_index":1061,"title":{},"body":{"controllers/HistoryController.html":{}}}],["this.historyservice.createhistory(history",{"_index":820,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.historyservice.gethistoryparams",{"_index":816,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.httpservice.post",{"_index":303,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["this.listall",{"_index":1600,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.logger",{"_index":1191,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.error(\"failed",{"_index":2029,"title":{},"body":{"injectables/ViewService.html":{}}}],["this.logger.error(`error/recaptcha",{"_index":341,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.logger.error(e",{"_index":742,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"controllers/UsersController.html":{}}}],["this.logger.error(err",{"_index":1465,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["this.logger.error(error",{"_index":333,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["this.logger.error(message",{"_index":1730,"title":{},"body":{"injectables/SitemapService.html":{}}}],["this.logger.log",{"_index":329,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HistoryController.html":{},"injectables/LoggerMiddleware.html":{},"injectables/PersonalityService.html":{},"controllers/SourceController.html":{}}}],["this.logger.log(\"debug",{"_index":1193,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.log(\"error",{"_index":1194,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.log(\"info",{"_index":1192,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.log(\"verbose",{"_index":1195,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.log(\"warn",{"_index":1196,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.log(`found",{"_index":1557,"title":{},"body":{"injectables/PersonalityService.html":{},"injectables/UsersService.html":{}}}],["this.logger.log(`got",{"_index":1579,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.logger.log(`sending",{"_index":990,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.logger.log(`updated",{"_index":1591,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.logger.log(`user",{"_index":1922,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.next(request",{"_index":1652,"title":{},"body":{"guards/SessionGuard.html":{}}}],["this.optionstoupdate",{"_index":714,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{}}}],["this.ory",{"_index":1284,"title":{},"body":{"injectables/OryService.html":{}}}],["this.orypaths(req",{"_index":1249,"title":{},"body":{"controllers/OryController.html":{}}}],["this.oryservice.createidentity(newuser",{"_index":1911,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.oryservice.deleteidentity(oryuser.id",{"_index":1916,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.paragraphsequence",{"_index":1360,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.paragraphsequence}${this.sentencesequence}${sentencecontent",{"_index":1394,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.parserservice.parse(claim.content",{"_index":721,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["this.parsesentence(sentence",{"_index":1374,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.personalitymodel(personality",{"_index":1546,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.aggregate",{"_index":1529,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.countdocuments().where(query",{"_index":1593,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.find(query",{"_index":1532,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.findbyid",{"_index":1555,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.findbyid(id",{"_index":1577,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.findbyidandupdate",{"_index":1590,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.findone",{"_index":1554,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.softdelete",{"_index":1592,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalityservice",{"_index":1461,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["this.personalityservice.combinedlistall",{"_index":1129,"title":{},"body":{"controllers/HomeController.html":{}}}],["this.personalityservice.combinedlistall(getpersonalities",{"_index":1448,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["this.personalityservice.count",{"_index":1807,"title":{},"body":{"injectables/StatsService.html":{}}}],["this.personalityservice.create(createpersonality",{"_index":1450,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["this.personalityservice.delete(personalityid",{"_index":1469,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["this.personalityservice.getbyslug",{"_index":394,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{}}}],["this.personalityservice.listall",{"_index":1711,"title":{},"body":{"injectables/SitemapService.html":{}}}],["this.personalityservice.update(personalityid",{"_index":1467,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["this.postprocess",{"_index":803,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.postprocess(claim",{"_index":850,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.postprocess(personality",{"_index":1538,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.postprocess(personality.toobject",{"_index":1558,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.postprocesssentences(paragraph.sentences",{"_index":1369,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.reflector.get('public",{"_index":1638,"title":{},"body":{"guards/SessionGuard.html":{}}}],["this.req.user",{"_index":815,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["this.requestproperties(params",{"_index":2085,"title":{},"body":{"injectables/WikidataService.html":{}}}],["this.sentencesequence",{"_index":1361,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.server",{"_index":2023,"title":{},"body":{"injectables/ViewService.html":{}}}],["this.server.prepare",{"_index":2028,"title":{},"body":{"injectables/ViewService.html":{}}}],["this.sitemapservice.getsitemap",{"_index":1675,"title":{},"body":{"controllers/SitemapController.html":{}}}],["this.sitemapservice.submitsitemap",{"_index":1679,"title":{},"body":{"controllers/SitemapController.html":{}}}],["this.sourcemodel(data",{"_index":1785,"title":{},"body":{"injectables/SourceService.html":{}}}],["this.sourcemodel.find",{"_index":1787,"title":{},"body":{"injectables/SourceService.html":{}}}],["this.sourceservice",{"_index":1760,"title":{},"body":{"controllers/SourceController.html":{}}}],["this.sourceservice.create",{"_index":738,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["this.statsservice.gethomestats",{"_index":1133,"title":{},"body":{"controllers/HomeController.html":{},"controllers/StatsController.html":{}}}],["this.transformcontentobject",{"_index":857,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.usermodel(user",{"_index":1909,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.find().exec",{"_index":1907,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyid(userid",{"_index":1917,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.register",{"_index":1915,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice",{"_index":1873,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.util.formatstats(reviews",{"_index":609,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/PersonalityService.html":{}}}],["this.util.mergeobjectsinunique",{"_index":1536,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.verifyinputsquery(query",{"_index":1599,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.viewservice",{"_index":400,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/OryController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["this.wikidata.fetchproperties",{"_index":1567,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.wikidata.querywikibaseentities",{"_index":1534,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.wikidatacache",{"_index":2087,"title":{},"body":{"injectables/WikidataService.html":{}}}],["this.wikidatacache.findone",{"_index":2081,"title":{},"body":{"injectables/WikidataService.html":{}}}],["those",{"_index":2473,"title":{},"body":{"license.html":{}}}],["though",{"_index":2876,"title":{},"body":{"license.html":{}}}],["threatened",{"_index":2483,"title":{},"body":{"license.html":{}}}],["three",{"_index":2767,"title":{},"body":{"license.html":{}}}],["throttlerguard",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule.forroot",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["through",{"_index":802,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"license.html":{}}}],["throw",{"_index":346,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"controllers/UsersController.html":{}}}],["thus",{"_index":2661,"title":{},"body":{"license.html":{}}}],["ties",{"_index":636,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["time",{"_index":2943,"title":{},"body":{"license.html":{}}}],["title",{"_index":654,"title":{},"body":{"classes/ClaimRevision.html":{},"classes/CreateClaimDTO.html":{},"injectables/PersonalityService.html":{}}}],["titles",{"_index":2151,"title":{},"body":{"injectables/WikidataService.html":{}}}],["todo",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"injectables/SitemapService.html":{},"controllers/UsersController.html":{}}}],["tojson",{"_index":176,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Personality.html":{}}}],["token",{"_index":1293,"title":{},"body":{"injectables/OryService.html":{}}}],["toobject",{"_index":174,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Personality.html":{}}}],["tools",{"_index":2616,"title":{},"body":{"license.html":{}}}],["topclassification",{"_index":610,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{}}}],["topromise",{"_index":306,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["total",{"_index":1930,"title":{},"body":{"injectables/UtilService.html":{}}}],["totalchanges",{"_index":1064,"title":{},"body":{"controllers/HistoryController.html":{}}}],["totalclaims",{"_index":326,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{}}}],["totalclaimsreviewed",{"_index":757,"title":{},"body":{"injectables/ClaimService.html":{}}}],["totalpages",{"_index":327,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HistoryController.html":{},"injectables/PersonalityService.html":{},"controllers/SourceController.html":{}}}],["totalpersonalities",{"_index":1604,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["totalreviews",{"_index":363,"title":{},"body":{"controllers/ClaimController.html":{}}}],["totalreviews[0]?.count",{"_index":364,"title":{},"body":{"controllers/ClaimController.html":{}}}],["totalsources",{"_index":1763,"title":{},"body":{"controllers/SourceController.html":{}}}],["trace",{"_index":1183,"title":{},"body":{"classes/Logger.html":{}}}],["tracks",{"_index":560,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["trade",{"_index":2901,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":2900,"title":{},"body":{"license.html":{}}}],["trademarks",{"_index":2902,"title":{},"body":{"license.html":{}}}],["traits",{"_index":1296,"title":{},"body":{"injectables/OryService.html":{}}}],["transaction",{"_index":2849,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":2552,"title":{},"body":{"license.html":{}}}],["transferred",{"_index":2851,"title":{},"body":{"license.html":{}}}],["transferring",{"_index":2967,"title":{},"body":{"license.html":{}}}],["transform",{"_index":851,"title":{},"body":{"injectables/ClaimService.html":{},"miscellaneous/variables.html":{}}}],["transformcontentobject",{"_index":749,"title":{},"body":{"injectables/ClaimService.html":{}}}],["transformcontentobject(claimcontent",{"_index":772,"title":{},"body":{"injectables/ClaimService.html":{}}}],["transformer",{"_index":2242,"title":{},"body":{"dependencies.html":{}}}],["transformoptions",{"_index":3221,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transmission",{"_index":2801,"title":{},"body":{"license.html":{}}}],["transporter",{"_index":976,"title":{},"body":{"injectables/EmailService.html":{}}}],["transporter.close",{"_index":994,"title":{},"body":{"injectables/EmailService.html":{}}}],["transporter.sendmail",{"_index":993,"title":{},"body":{"injectables/EmailService.html":{}}}],["treated",{"_index":2875,"title":{},"body":{"license.html":{}}}],["treaty",{"_index":2686,"title":{},"body":{"license.html":{}}}],["trim:true",{"_index":1330,"title":{},"body":{"injectables/ParserService.html":{}}}],["true",{"_index":142,"title":{},"body":{"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/DisableBodyParserMiddleware.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"controllers/OryController.html":{},"injectables/OryService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"classes/Source.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/ViewController.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":651,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"injectables/SitemapService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ViewService.html":{}}}],["ts",{"_index":309,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/HomeController.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"injectables/UsersService.html":{},"controllers/ViewController.html":{}}}],["ttl",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["twitter\"].indexof(v",{"_index":664,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["two",{"_index":2433,"title":{},"body":{"license.html":{}}}],["type",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"injectables/GetLanguageMiddleware.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"injectables/JsonBodyMiddleware.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"injectables/OryService.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"injectables/StatsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"license.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":3187,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":719,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["types",{"_index":594,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/SourceService.html":{},"classes/UpdateClaimDTO.html":{},"dependencies.html":{}}}],["types.objectid(claim.personality",{"_index":807,"title":{},"body":{"injectables/ClaimService.html":{}}}],["types.objectid(claimreview.claim",{"_index":644,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["types.objectid(claimreview.personality",{"_index":642,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["types.objectid(claimreview.user",{"_index":646,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["types.objectid(data.targetid",{"_index":1782,"title":{},"body":{"injectables/SourceService.html":{}}}],["types.objectid(data.user",{"_index":1784,"title":{},"body":{"injectables/SourceService.html":{}}}],["types.objectid(dataid",{"_index":1111,"title":{},"body":{"injectables/HistoryService.html":{}}}],["types.objectid(query.personality",{"_index":791,"title":{},"body":{"injectables/ClaimService.html":{}}}],["types.objectid(targetid",{"_index":1116,"title":{},"body":{"injectables/HistoryService.html":{},"injectables/SourceService.html":{}}}],["types/jest",{"_index":2232,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":170,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"classes/Personality.html":{},"injectables/PersonalityService.html":{},"dependencies.html":{}}}],["typical",{"_index":2826,"title":{},"body":{"license.html":{}}}],["unacceptable",{"_index":2470,"title":{},"body":{"license.html":{}}}],["unclassified",{"_index":1742,"title":{},"body":{"classes/Source.html":{}}}],["undefined",{"_index":153,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"classes/Source.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["under",{"_index":2510,"title":{},"body":{"license.html":{}}}],["unique",{"_index":702,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"classes/Personality.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["unknown",{"_index":213,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WikidataService.html":{}}}],["unless",{"_index":2835,"title":{},"body":{"license.html":{}}}],["unlimited",{"_index":2644,"title":{},"body":{"license.html":{}}}],["unmodified",{"_index":2526,"title":{},"body":{"license.html":{}}}],["unnecessary",{"_index":2673,"title":{},"body":{"license.html":{}}}],["unpacking",{"_index":2872,"title":{},"body":{"license.html":{}}}],["unreliable",{"_index":1744,"title":{},"body":{"classes/Source.html":{}}}],["unsustainable",{"_index":466,"title":{},"body":{"classes/ClaimReview.html":{},"miscellaneous/enumerations.html":{}}}],["until",{"_index":2932,"title":{},"body":{"license.html":{}}}],["unverifiable",{"_index":468,"title":{},"body":{"classes/ClaimReview.html":{},"miscellaneous/enumerations.html":{}}}],["up",{"_index":690,"title":{},"body":{"modules/ClaimRevisionModule.html":{},"index.html":{}}}],["update",{"_index":208,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"miscellaneous/enumerations.html":{}}}],["update(@param(\"id",{"_index":352,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{}}}],["update(claimid",{"_index":260,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{}}}],["update(personalityid",{"_index":1440,"title":{},"body":{"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["updateclaimdto",{"_index":261,"title":{"classes/UpdateClaimDTO.html":{}},"body":{"controllers/ClaimController.html":{},"classes/UpdateClaimDTO.html":{},"coverage.html":{}}}],["updated",{"_index":783,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["updates",{"_index":2861,"title":{},"body":{"license.html":{}}}],["updation",{"_index":782,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["upsert",{"_index":712,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{}}}],["url",{"_index":279,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/OryController.html":{},"injectables/OryService.html":{},"controllers/PersonalityController.html":{},"injectables/SitemapService.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"injectables/WikidataService.html":{}}}],["url}/${this.adminendpoint}/identities",{"_index":1295,"title":{},"body":{"injectables/OryService.html":{}}}],["url}/${this.adminendpoint}/identities/${identityid",{"_index":1305,"title":{},"body":{"injectables/OryService.html":{}}}],["usando",{"_index":3285,"title":{},"body":{"miscellaneous/variables.html":{}}}],["use",{"_index":666,"title":{},"body":{"classes/ClaimRevision.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/GetLanguageMiddleware.html":{},"injectables/JsonBodyMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/Source.html":{},"license.html":{}}}],["use(req",{"_index":931,"title":{},"body":{"injectables/DisableBodyParserMiddleware.html":{},"injectables/GetLanguageMiddleware.html":{},"injectables/JsonBodyMiddleware.html":{}}}],["use(request",{"_index":1198,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["useclass",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["used",{"_index":1089,"title":{},"body":{"injectables/HistoryService.html":{},"controllers/ViewController.html":{},"license.html":{}}}],["usefactory",{"_index":1894,"title":{},"body":{"modules/UsersModule.html":{},"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["useful",{"_index":3144,"title":{},"body":{"license.html":{}}}],["useguards",{"_index":1847,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(localauthguard",{"_index":1857,"title":{},"body":{"controllers/UsersController.html":{}}}],["useless",{"_index":1582,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["usenewurlparser",{"_index":3251,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user",{"_index":369,"title":{"classes/User.html":{}},"body":{"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"injectables/OryService.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"classes/Source.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["user._id",{"_index":1299,"title":{},"body":{"injectables/OryService.html":{},"injectables/UsersService.html":{}}}],["user.changepassword(currentpassword",{"_index":1919,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.email",{"_index":1297,"title":{},"body":{"injectables/OryService.html":{}}}],["user.firstpasswordchanged",{"_index":1921,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.name",{"_index":1893,"title":{},"body":{"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["user.password",{"_index":1912,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.save",{"_index":1923,"title":{},"body":{"injectables/UsersService.html":{}}}],["user?._id",{"_index":375,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/HistoryService.html":{}}}],["user_id",{"_index":1298,"title":{},"body":{"injectables/OryService.html":{}}}],["useragent",{"_index":1205,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["userdata",{"_index":3270,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdata.email",{"_index":3273,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdata.password",{"_index":3297,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdata.sendauthdetails",{"_index":3275,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdocument",{"_index":1156,"title":{"interfaces/UserDocument.html":{}},"body":{"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userid",{"_index":590,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/UsersService.html":{}}}],["usermodel",{"_index":1154,"title":{},"body":{"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["usermodel.authenticate",{"_index":1169,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["usernamefield",{"_index":1167,"title":{},"body":{"injectables/LocalStrategy.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["userreview",{"_index":378,"title":{},"body":{"controllers/ClaimController.html":{}}}],["users",{"_index":2391,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["users.controller",{"_index":1891,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.map(async",{"_index":3295,"title":{},"body":{"miscellaneous/variables.html":{}}}],["users.service",{"_index":1849,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/schemas/user.schema",{"_index":458,"title":{},"body":{"classes/ClaimReview.html":{},"classes/History.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Source.html":{}}}],["users/users.module",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["userschema",{"_index":1825,"title":{},"body":{"classes/User.html":{},"interfaces/UserDocument.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":1829,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":3257,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userservice.register",{"_index":3271,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usersmodule",{"_index":33,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":1848,"title":{"injectables/UsersService.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":2829,"title":{},"body":{"license.html":{}}}],["useunifiedtopology",{"_index":3250,"title":{},"body":{"miscellaneous/variables.html":{}}}],["using",{"_index":2799,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["utf",{"_index":970,"title":{},"body":{"injectables/EmailService.html":{}}}],["util",{"_index":514,"title":{},"body":{"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{}}}],["utilservice",{"_index":509,"title":{"injectables/UtilService.html":{}},"body":{"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"injectables/UtilService.html":{},"coverage.html":{},"overview.html":{}}}],["v",{"_index":470,"title":{},"body":{"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/Source.html":{}}}],["v0alpha2api",{"_index":1278,"title":{},"body":{"injectables/OryService.html":{},"guards/SessionGuard.html":{}}}],["v0alpha2apiinterface",{"_index":1275,"title":{},"body":{"injectables/OryService.html":{}}}],["valid",{"_index":473,"title":{},"body":{"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/Source.html":{},"license.html":{}}}],["validate",{"_index":447,"title":{},"body":{"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Source.html":{}}}],["validationpipe",{"_index":3220,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validator",{"_index":469,"title":{},"body":{"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/Source.html":{},"dependencies.html":{}}}],["value",{"_index":553,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"injectables/HistoryService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/OryService.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/SourceService.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values[0",{"_index":1810,"title":{},"body":{"injectables/StatsService.html":{}}}],["values[1",{"_index":1811,"title":{},"body":{"injectables/StatsService.html":{}}}],["values[2",{"_index":1812,"title":{},"body":{"injectables/StatsService.html":{}}}],["variable",{"_index":2168,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":3193,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verbatim",{"_index":2370,"title":{},"body":{"license.html":{}}}],["verbose",{"_index":1174,"title":{},"body":{"classes/Logger.html":{}}}],["verbose(message",{"_index":1187,"title":{},"body":{"classes/Logger.html":{}}}],["verifyinputsquery",{"_index":1497,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["verifyinputsquery(query",{"_index":1522,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["version",{"_index":672,"title":{},"body":{"classes/ClaimRevision.html":{},"license.html":{},"properties.html":{}}}],["versions",{"_index":2386,"title":{},"body":{"license.html":{}}}],["via",{"_index":2334,"title":{},"body":{"index.html":{}}}],["view",{"_index":2567,"title":{},"body":{"license.html":{}}}],["view.controller",{"_index":2011,"title":{},"body":{"modules/ViewModule.html":{}}}],["view.service",{"_index":1992,"title":{},"body":{"controllers/ViewController.html":{},"modules/ViewModule.html":{}}}],["view/view.module",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/HomeModule.html":{},"modules/OryModule.html":{},"modules/PersonalityModule.html":{},"modules/UsersModule.html":{}}}],["view/view.service",{"_index":283,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/OryController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{}}}],["viewcontroller",{"_index":1960,"title":{"controllers/ViewController.html":{}},"body":{"controllers/ViewController.html":{},"modules/ViewModule.html":{},"coverage.html":{}}}],["viewmodule",{"_index":55,"title":{"modules/ViewModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/HomeModule.html":{},"modules/OryModule.html":{},"modules/PersonalityModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules.html":{},"overview.html":{}}}],["viewservice",{"_index":282,"title":{"injectables/ViewService.html":{}},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/OryController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"coverage.html":{},"overview.html":{}}}],["vinda(o",{"_index":3279,"title":{},"body":{"miscellaneous/variables.html":{}}}],["violates",{"_index":2867,"title":{},"body":{"license.html":{}}}],["violation",{"_index":2928,"title":{},"body":{"license.html":{}}}],["virtual",{"_index":621,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["virtuals",{"_index":175,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Personality.html":{}}}],["visible",{"_index":2561,"title":{},"body":{"license.html":{}}}],["voc",{"_index":3280,"title":{},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/GetLanguageMiddleware.html":{},"injectables/JsonBodyMiddleware.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/RootController.html":{},"license.html":{}}}],["volume",{"_index":2746,"title":{},"body":{"license.html":{}}}],["w",{"_index":3153,"title":{},"body":{"license.html":{}}}],["waive",{"_index":2695,"title":{},"body":{"license.html":{}}}],["waiver",{"_index":3125,"title":{},"body":{"license.html":{}}}],["want",{"_index":2404,"title":{},"body":{"license.html":{}}}],["warn",{"_index":1175,"title":{},"body":{"classes/Logger.html":{}}}],["warn(message",{"_index":1189,"title":{},"body":{"classes/Logger.html":{}}}],["warranties",{"_index":2565,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":2444,"title":{},"body":{"license.html":{}}}],["watch",{"_index":2026,"title":{},"body":{"injectables/ViewService.html":{}}}],["way",{"_index":2394,"title":{},"body":{"license.html":{}}}],["ways",{"_index":2757,"title":{},"body":{"license.html":{}}}],["wbentities",{"_index":1533,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["wbentity.description",{"_index":2148,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wbentity.id",{"_index":2149,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wbentity.label",{"_index":2147,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wbgetentities",{"_index":2092,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wbsearchentities",{"_index":2139,"title":{},"body":{"injectables/WikidataService.html":{}}}],["websites",{"_index":1358,"title":{},"body":{"injectables/ParserService.html":{}}}],["welcome",{"_index":3154,"title":{},"body":{"license.html":{}}}],["well",{"_index":2544,"title":{},"body":{"license.html":{}}}],["whatever",{"_index":2971,"title":{},"body":{"license.html":{}}}],["whether",{"_index":2423,"title":{},"body":{"license.html":{}}}],["whitelist",{"_index":3223,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whole",{"_index":2591,"title":{},"body":{"license.html":{}}}],["whose",{"_index":2809,"title":{},"body":{"license.html":{}}}],["widely",{"_index":2585,"title":{},"body":{"license.html":{}}}],["wikdiata",{"_index":1563,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["wikidata",{"_index":914,"title":{},"body":{"classes/CreatePersonality.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"injectables/WikidataService.html":{}}}],["wikidata.claims.p18",{"_index":2116,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata.claims.p18[0].mainsnak.datavalue.value",{"_index":2118,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata.claims.p31",{"_index":2110,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata.claims.p31[0].mainsnak.datavalue.value",{"_index":2112,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata.service",{"_index":2046,"title":{},"body":{"modules/WikidataModule.html":{}}}],["wikidata.sitelinks[sitelinkname",{"_index":2123,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata.sitelinks[sitelinkname].title",{"_index":2127,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata/wikidata.module",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/PersonalityModule.html":{}}}],["wikidata/wikidata.service",{"_index":1527,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["wikidata[property",{"_index":2134,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata[property][language",{"_index":2136,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata[property][languagefallback",{"_index":2137,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata[property][languagefallback].value",{"_index":2138,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidatacache",{"_index":2030,"title":{"classes/WikidataCache.html":{}},"body":{"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{}}}],["wikidatacache.name",{"_index":2049,"title":{},"body":{"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["wikidatacache.props",{"_index":2089,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidatacachedocument",{"_index":2038,"title":{},"body":{"classes/WikidataCache.html":{},"injectables/WikidataService.html":{},"miscellaneous/typealiases.html":{}}}],["wikidatacachemodel",{"_index":2048,"title":{},"body":{"modules/WikidataModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["wikidatacacheschema",{"_index":2040,"title":{},"body":{"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["wikidatacacheschema.index",{"_index":2050,"title":{},"body":{"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["wikidataextract",{"_index":1566,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["wikidataextract.isallowedprop",{"_index":1573,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["wikidataid",{"_index":1568,"title":{},"body":{"injectables/PersonalityService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["wikidatainstanceof",{"_index":2111,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidatainstanceof.id",{"_index":2114,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidatamodule",{"_index":37,"title":{"modules/WikidataModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PersonalityModule.html":{},"modules/WikidataModule.html":{},"modules.html":{},"overview.html":{}}}],["wikidataprops",{"_index":2102,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidataprops.description",{"_index":2107,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidataprops.image",{"_index":2119,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidataprops.isallowedprop",{"_index":2113,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidataprops.name",{"_index":2104,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidataprops.wikipedia",{"_index":2128,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidataservice",{"_index":1498,"title":{"injectables/WikidataService.html":{}},"body":{"injectables/PersonalityService.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"overview.html":{}}}],["wikilang",{"_index":2124,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikipedia",{"_index":915,"title":{},"body":{"classes/CreatePersonality.html":{},"injectables/WikidataService.html":{}}}],["wikipedia.org/wiki/${encodeuri(wikititle",{"_index":2131,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikititle",{"_index":2126,"title":{},"body":{"injectables/WikidataService.html":{}}}],["window",{"_index":2603,"title":{},"body":{"license.html":{}}}],["wipo",{"_index":2685,"title":{},"body":{"license.html":{}}}],["wish",{"_index":2402,"title":{},"body":{"license.html":{}}}],["withcredentials",{"_index":1292,"title":{},"body":{"injectables/OryService.html":{}}}],["within",{"_index":2912,"title":{},"body":{"license.html":{}}}],["without",{"_index":2529,"title":{},"body":{"license.html":{}}}],["withsuggestions",{"_index":1025,"title":{},"body":{"classes/GetPersonalities.html":{},"injectables/PersonalityService.html":{}}}],["work",{"_index":623,"title":{},"body":{"injectables/ClaimReviewService.html":{},"license.html":{}}}],["work's",{"_index":2615,"title":{},"body":{"license.html":{}}}],["working",{"_index":2586,"title":{},"body":{"license.html":{}}}],["works",{"_index":2376,"title":{},"body":{"license.html":{}}}],["worldwide",{"_index":3001,"title":{},"body":{"license.html":{}}}],["writing",{"_index":3086,"title":{},"body":{"license.html":{}}}],["written",{"_index":2766,"title":{},"body":{"license.html":{}}}],["x",{"_index":3214,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yarn",{"_index":2347,"title":{},"body":{"index.html":{}}}],["years",{"_index":2768,"title":{},"body":{"license.html":{}}}],["yes",{"_index":1181,"title":{},"body":{"classes/Logger.html":{}}}],["yourself",{"_index":3017,"title":{},"body":{"license.html":{}}}],["z])/g",{"_index":1345,"title":{},"body":{"injectables/ParserService.html":{}}}],["z][.](?:[a",{"_index":1356,"title":{},"body":{"injectables/ParserService.html":{}}}],["z][.])?)/g",{"_index":1357,"title":{},"body":{"injectables/ParserService.html":{}}}],["z][.][a",{"_index":1355,"title":{},"body":{"injectables/ParserService.html":{}}}],["za",{"_index":1344,"title":{},"body":{"injectables/ParserService.html":{}}}],["zoom",{"_index":132,"title":{},"body":{"modules/AuthModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/HomeModule.html":{},"modules/OryModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/app.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        configure\n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in server/app.module.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(options)\n                \n            \n\n\n            \n                \n                    Defined in server/app.module.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { DynamicModule, MiddlewareConsumer, Module, NestModule } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { UsersModule } from \"./users/users.module\";\nimport { AuthModule } from \"./auth/auth.module\";\nimport { WikidataModule } from \"./wikidata/wikidata.module\";\nimport { PersonalityModule } from \"./personality/personality.module\";\nimport { ClaimModule } from \"./claim/claim.module\";\nimport { ClaimReviewModule } from \"./claim-review/claim-review.module\";\nimport { SourceModule } from \"./source/source.module\";\nimport { StatsModule } from \"./stats/stats.module\";\nimport { RootController } from \"./root/root.controller\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { ViewModule } from \"./view/view.module\";\nimport { HomeModule } from \"./home/home.module\";\nimport { EmailModule } from \"./email/email.module\";\nimport { APP_FILTER, APP_GUARD } from \"@nestjs/core\";\nimport { NotFoundFilter } from \"./filters/not-found.filter\";\nimport { ThrottlerModule, ThrottlerGuard } from \"@nestjs/throttler\";\nimport { SitemapModule } from \"./sitemap/sitemap.module\";\nimport { ClaimRevisionModule } from \"./claim-revision/claim-revision.module\";\nimport { HistoryModule } from \"./history/history.module\";\nimport { LoggerMiddleware } from \"./middleware/logger.middleware\";\nimport OryModule from \"./ory/ory.module\";\nimport { SessionGuard } from \"./auth/session.guard\";\nimport { GetLanguageMiddleware } from \"./middleware/language.middleware\";\nimport { DisableBodyParserMiddleware } from \"./middleware/disable-body-parser.middleware\";\nimport OryController from \"./ory/ory.controller\";\nimport { JsonBodyMiddleware } from \"./middleware/json-body.middleware\";\n\n@Module({})\nexport class AppModule implements NestModule {\n    public configure(consumer: MiddlewareConsumer): void {\n        consumer\n            .apply(DisableBodyParserMiddleware)\n            .forRoutes(OryController)\n            .apply(JsonBodyMiddleware, LoggerMiddleware, GetLanguageMiddleware).forRoutes('*');\n    }\n\n    static register(options): DynamicModule {\n        // TODO: interface app with service-runner metrics interface\n        return {\n            module: AppModule,\n            imports: [\n                MongooseModule.forRoot(\n                    options.config.db.connection_uri,\n                    options.config.db.options\n                ),\n                ConfigModule.forRoot({\n                    load: [() => options.config || {}],\n                }),\n                ThrottlerModule.forRoot({\n                    ttl: options.config.throttle.ttl,\n                    limit: options.config.throttle.limit,\n                }),\n                UsersModule,\n                AuthModule,\n                WikidataModule,\n                PersonalityModule,\n                ClaimModule,\n                ClaimReviewModule,\n                ClaimRevisionModule,\n                HistoryModule,\n                SourceModule,\n                StatsModule,\n                ViewModule,\n                HomeModule,\n                EmailModule,\n                SitemapModule,\n                OryModule\n            ],\n            controllers: [RootController],\n            providers: [\n                {\n                    provide: APP_FILTER,\n                    useClass: NotFoundFilter,\n                },\n                {\n                    provide: APP_GUARD,\n                    useClass: ThrottlerGuard\n                },\n                {\n                    provide: APP_GUARD,\n                    useClass: SessionGuard\n                }\n            ],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nLocalSerializer\n\nLocalSerializer\n\nAuthModule -->\n\nLocalSerializer->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            LocalSerializer\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { UsersModule } from \"../users/users.module\";\nimport { PassportModule } from \"@nestjs/passport\";\nimport { LocalStrategy } from \"./local.strategy\";\nimport { LocalSerializer } from \"./local.serializer\";\n\n@Module({\n    imports: [UsersModule, PassportModule.register({ session: true })],\n    providers: [LocalStrategy, LocalSerializer],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Claim.html":{"url":"classes/Claim.html","title":"class - Claim","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Claim\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim/schemas/claim.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                latestRevision\n                            \n                            \n                                personality\n                            \n                            \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        latestRevision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ClaimRevision\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'ClaimRevision'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/schemas/claim.schema.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        personality\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Personality\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'Personality'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/schemas/claim.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/schemas/claim.schema.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport * as mongoose from \"mongoose\";\nimport { Personality } from \"../../personality/schemas/personality.schema\"\nimport { ClaimRevision } from \"../../claim-revision/schema/claim-revision.schema\"\nimport { softDeletePlugin } from 'mongoose-softdelete-typescript';\n\nexport type ClaimDocument = Claim & mongoose.Document & { revisions: any };\n\n@Schema({ toObject: {virtuals: true}, toJSON: {virtuals: true} })\nexport class Claim {\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"Personality\",\n    })\n    personality: Personality;\n    \n    @Prop({ required: true })\n    slug: string;\n\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"ClaimRevision\",\n    })\n    latestRevision: ClaimRevision\n}\nconst ClaimSchemaRaw = SchemaFactory.createForClass(Claim);\n\nClaimSchemaRaw.virtual('revisions', {\n    ref: 'ClaimRevision',\n    localField: '_id',\n    foreignField: 'claimId'\n})\n\nClaimSchemaRaw.virtual('sources', {\n    ref: 'Source',\n    localField: '_id',\n    foreignField: 'targetId'\n})\n\nClaimSchemaRaw.plugin(softDeletePlugin)\n\nexport const ClaimSchema = ClaimSchemaRaw;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ClaimController.html":{"url":"controllers/ClaimController.html","title":"controller - ClaimController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ClaimController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim/claim.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                _checkCaptchaResponse\n                            \n                            \n                                _getSentenceByHashAndClaimId\n                            \n                            \n                                _verifyInputsQuery\n                            \n                            \n                                    Public\n                                    Async\n                                claimCreatePage\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                getById\n                            \n                            \n                                    Public\n                                    Async\n                                getClaimReviewPage\n                            \n                            \n                                getSentenceReviewsByHash\n                            \n                            \n                                listAll\n                            \n                            \n                                    Public\n                                    Async\n                                personalityClaimPage\n                            \n                            \n                                    Public\n                                    Async\n                                personalityClaimPageWithRevision\n                            \n                            \n                                    Public\n                                    Async\n                                personalityHistoryPage\n                            \n                            \n                                    Public\n                                    Async\n                                sourcesClaimPage\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        _checkCaptchaResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    _checkCaptchaResponse(secret, response)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    secret\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _getSentenceByHashAndClaimId\n                        \n                    \n                \n            \n            \n                \n_getSentenceByHashAndClaimId(sentenceHash, claimId, req)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.controller.ts:162\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentenceHash\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _verifyInputsQuery\n                        \n                    \n                \n            \n            \n                \n_verifyInputsQuery(query)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        claimCreatePage\n                        \n                    \n                \n            \n            \n                \n                    \n                    claimCreatePage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('personality/:slug/claim/create/')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:225\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createClaimDTO: CreateClaimDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('api/claim')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createClaimDTO\n                                    \n                                                CreateClaimDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(claimId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('api/claim/:id')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getById\n                        \n                    \n                \n            \n            \n                \ngetById(claimId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('api/claim/:id')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getClaimReviewPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    getClaimReviewPage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('personality/:personalitySlug/claim/:claimSlug/sentence/:sentenceHash')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:193\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSentenceReviewsByHash\n                        \n                    \n                \n            \n            \n                \ngetSentenceReviewsByHash(params, getClaimsByHashDTO: GetClaimsByHashDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('api/claim/:claimId/sentence/:sentenceHash/reviews')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    getClaimsByHashDTO\n                                    \n                                                GetClaimsByHashDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        listAll\n                        \n                    \n                \n            \n            \n                \nlistAll(getClaimsDTO: GetClaimsDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('api/claim')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    getClaimsDTO\n                                    \n                                                GetClaimsDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        personalityClaimPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    personalityClaimPage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('personality/:personalitySlug/claim/:claimSlug')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:249\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        personalityClaimPageWithRevision\n                        \n                    \n                \n            \n            \n                \n                    \n                    personalityClaimPageWithRevision(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('personality/:personalitySlug/claim/:claimSlug/:revisionId')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:274\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        personalityHistoryPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    personalityHistoryPage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('personality/:personalitySlug/claim/:claimSlug/history')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:324\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        sourcesClaimPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    sourcesClaimPage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('personality/:personalitySlug/claim/:claimSlug/sources')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:301\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(claimId, updateClaimDTO: UpdateClaimDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('api/claim/:id')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateClaimDTO\n                                    \n                                                UpdateClaimDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get, Logger,\n    Param,\n    Post,\n    Put,\n    Query,\n    Req,\n    Res,\n} from \"@nestjs/common\";\nimport { ClaimReviewService } from \"../claim-review/claim-review.service\";\nimport { ClaimService } from \"./claim.service\";\nimport * as qs from \"querystring\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { HttpService } from \"@nestjs/axios\";\nimport { Request, Response } from \"express\";\nimport { parse } from \"url\";\nimport { PersonalityService } from \"../personality/personality.service\";\nimport { ViewService } from \"../view/view.service\";\nimport * as mongoose from \"mongoose\";\nimport { CreateClaimDTO } from \"./dto/create-claim.dto\";\nimport { GetClaimsDTO } from \"./dto/get-claims.dto\";\nimport { GetClaimsByHashDTO } from \"./dto/get-reviews-by-hash.dto\";\nimport { UpdateClaimDTO } from \"./dto/update-claim.dto\"\nimport {IsPublic} from \"../decorators/is-public.decorator\";\n\n@Controller()\nexport class ClaimController {\n    private readonly logger = new Logger(\"ClaimController\");\n    constructor(\n        private claimReviewService: ClaimReviewService,\n        private personalityService: PersonalityService,\n        private claimService: ClaimService,\n        private configService: ConfigService,\n        private httpService: HttpService,\n        private viewService: ViewService,\n    ) {}\n\n    async _checkCaptchaResponse(secret, response) {\n        const RECAPTCHA_API_URL = \"https://www.google.com/recaptcha/api\";\n        const { data } = await this.httpService.post(\n            `${RECAPTCHA_API_URL}/siteverify`,\n            qs.stringify({\n                secret,\n                response,\n            })\n        ).toPromise();\n\n        return data;\n    }\n    _verifyInputsQuery(query) {\n        const queryInputs = {};\n        if (query.personality) {\n            // @ts-ignore\n            queryInputs.personality = new mongoose.Types.ObjectId(query.personality);\n        }\n\n        return queryInputs;\n    }\n\n    @IsPublic()\n    @Get(\"api/claim\")\n    listAll(@Query() getClaimsDTO: GetClaimsDTO) {\n        const { page = 0, pageSize = 10, order = \"asc\" } = getClaimsDTO;\n        const queryInputs = this._verifyInputsQuery(getClaimsDTO);\n        return Promise.all([\n            this.claimService.listAll(\n                page,\n                pageSize,\n                order,\n                queryInputs\n            ),\n            this.claimService.count(queryInputs),\n        ]).then(([claims, totalClaims]) => {\n            const totalPages = Math.ceil(totalClaims / pageSize);\n\n            this.logger.log(\n                `Found ${totalClaims} claims. Page ${page} of ${totalPages}`\n            );\n\n            return {\n                claims,\n                totalClaims,\n                totalPages,\n                page,\n                pageSize,\n            };\n        }).catch((error) => this.logger.error(error));\n    }\n\n    @Post(\"api/claim\")\n    async create(@Body() createClaimDTO: CreateClaimDTO) {\n        const secret = this.configService.get(\"recaptcha_secret\");\n        const recaptchaCheck = await this._checkCaptchaResponse(\n            secret,\n            createClaimDTO && createClaimDTO.recaptcha\n        );\n\n        // @ts-ignore\n        if (!recaptchaCheck.success) {\n            this.logger.error(`error/recaptcha ${recaptchaCheck}`);\n            // next(\n            //     Requester.internalError(res, \"Error with your reCaptcha response\")\n            // );\n            throw Error();\n        }\n        return this.claimService.create(createClaimDTO)\n\n    }\n\n    @IsPublic()\n    @Get(\"api/claim/:id\")\n    getById(@Param(\"id\") claimId) {\n        return this.claimService.getById(claimId);\n    }\n\n    @Put(\"api/claim/:id\")\n    update(@Param(\"id\") claimId, @Body() updateClaimDTO: UpdateClaimDTO) {\n        return this.claimService.update(claimId, updateClaimDTO);\n    }\n\n    @Delete(\"api/claim/:id\")\n    delete(@Param(\"id\") claimId) {\n        return this.claimService.delete(claimId);\n    }\n\n    @IsPublic()\n    @Get(\"api/claim/:claimId/sentence/:sentenceHash/reviews\")\n    getSentenceReviewsByHash(@Param() params, @Query() getClaimsByHashDTO: GetClaimsByHashDTO) {\n        const { sentenceHash } = params;\n        const { page, pageSize, order } = getClaimsByHashDTO;\n\n        return Promise.all([\n            this.claimReviewService.getReviewsBySentenceHash(\n                sentenceHash,\n                page,\n                pageSize,\n                order || \"desc\"\n            ),\n            this.claimReviewService.countReviewsBySentenceHash(sentenceHash),\n        ]).then(([reviews, totalReviews]) => {\n            totalReviews = totalReviews[0]?.count;\n            // @ts-ignore\n            const totalPages = Math.ceil(totalReviews / parseInt(pageSize, 10));\n\n            this.logger.log(\n                `Found ${totalReviews} reviews for sentence hash ${sentenceHash}. Page ${page} of ${totalPages}`\n            );\n\n            return {\n                reviews,\n                totalReviews,\n                totalPages,\n                page,\n                pageSize,\n            };\n        });\n    }\n\n    _getSentenceByHashAndClaimId(sentenceHash, claimId, req) {\n        const user = req.user;\n        return Promise.all([\n            this.claimReviewService.getReviewStatsBySentenceHash({sentenceHash, isDeleted: false}),\n            this.claimService.getById(claimId),\n            this.claimReviewService.getUserReviewBySentenceHash(\n                sentenceHash,\n                user?._id\n            ),\n        ]).then(([stats, claimObj, userReview]) => {\n            let sentenceObj;\n\n            claimObj.content.object.forEach((p) => {\n                p.content.forEach((sentence) => {\n                    if (sentence.props[\"data-hash\"] === sentenceHash) {\n                        sentenceObj = sentence;\n                    }\n                });\n            });\n            return {\n                userReview,\n                date: claimObj.date,\n                personality: claimObj.personality,\n                stats,\n                ...sentenceObj,\n            };\n        });\n    }\n\n    @IsPublic()\n    @Get(\"personality/:personalitySlug/claim/:claimSlug/sentence/:sentenceHash\")\n    public async getClaimReviewPage(@Req() req: Request, @Res() res: Response) {\n        const { sentenceHash, personalitySlug, claimSlug } = req.params;\n        const parsedUrl = parse(req.url, true);\n        const personality = await this.personalityService.getBySlug(\n            personalitySlug,\n            // @ts-ignore\n            req.language\n        );\n\n        const claim = await this.claimService.getByPersonalityIdAndClaimSlug(\n            personality._id,\n            claimSlug\n        );\n\n        const sentence = await this._getSentenceByHashAndClaimId(sentenceHash, claim._id, req);\n\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/claim-review\",\n                Object.assign(parsedUrl.query, {\n                    personality,\n                    claim,\n                    sentence,\n                    sitekey: this.configService.get(\"recaptcha_sitekey\"),\n                })\n            );\n    }\n\n    @Get(\"personality/:slug/claim/create/\")\n    public async claimCreatePage(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n\n        const personality = await this.personalityService.getBySlug(\n            req.params.slug,\n            // @ts-ignore\n            req.language\n        );\n\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/claim-create\",\n                Object.assign(parsedUrl.query, {\n                    personality,\n                    sitekey: this.configService.get(\"recaptcha_sitekey\"),\n                })\n            );\n    }\n\n    @IsPublic()\n    @Get(\"personality/:personalitySlug/claim/:claimSlug\")\n    public async personalityClaimPage(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n\n        const personality = await this.personalityService.getBySlug(\n            req.params.personalitySlug,\n            // @ts-ignore\n            req.language\n        );\n        \n        const claim = await this.claimService.getByPersonalityIdAndClaimSlug(\n            personality._id,\n            req.params.claimSlug\n        );\n        \n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/claim-page\",\n                Object.assign(parsedUrl.query, { personality, claim })\n            );\n    }\n\n    @Get(\"personality/:personalitySlug/claim/:claimSlug/:revisionId\")\n    public async personalityClaimPageWithRevision(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n        const personality = await this.personalityService.getBySlug(\n            req.params.personalitySlug,\n            // @ts-ignore\n            req.language\n        );\n\n        const claim = await this.claimService.getByPersonalityIdAndClaimSlug(\n            personality._id,\n            req.params.claimSlug,\n            req?.params?.revisionId\n        );\n\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/claim-page\",\n                Object.assign(parsedUrl.query, { personality, claim })\n            );\n    }\n\n    @IsPublic()\n    @Get(\"personality/:personalitySlug/claim/:claimSlug/sources\")\n    public async sourcesClaimPage(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n\n        const personality = await this.personalityService.getBySlug(\n            req.params.personalitySlug\n        );\n\n        const claim = await this.claimService.getByPersonalityIdAndClaimSlug(\n            personality._id,\n            req.params.claimSlug\n        );\n\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/claim-sources-page\",\n                Object.assign(parsedUrl.query, { claimId: claim._id })\n            );\n    }\n\n    @Get(\"personality/:personalitySlug/claim/:claimSlug/history\")\n    public async personalityHistoryPage(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n\n        const personality = await this.personalityService.getBySlug(\n            req.params.personalitySlug\n        );\n\n        const claim = await this.claimService.getByPersonalityIdAndClaimSlug(\n            personality._id,\n            req.params.claimSlug\n        );\n\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/history-page\",\n                Object.assign(parsedUrl.query, { targetId: claim._id, targetModel: \"claim\" })\n            );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ClaimModule.html":{"url":"modules/ClaimModule.html","title":"module - ClaimModule","body":"\n                   \n\n\n\n\n    Modules\n    ClaimModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ClaimModule\n\n\n\ncluster_ClaimModule_imports\n\n\n\ncluster_ClaimModule_exports\n\n\n\ncluster_ClaimModule_providers\n\n\n\n\nClaimReviewModule\n\nClaimReviewModule\n\n\n\nClaimModule\n\nClaimModule\n\nClaimModule -->\n\nClaimReviewModule->ClaimModule\n\n\n\n\n\nClaimRevisionModule\n\nClaimRevisionModule\n\nClaimModule -->\n\nClaimRevisionModule->ClaimModule\n\n\n\n\n\nHistoryModule\n\nHistoryModule\n\nClaimModule -->\n\nHistoryModule->ClaimModule\n\n\n\n\n\nParserModule\n\nParserModule\n\nClaimModule -->\n\nParserModule->ClaimModule\n\n\n\n\n\nPersonalityModule\n\nPersonalityModule\n\nClaimModule -->\n\nPersonalityModule->ClaimModule\n\n\n\n\n\nSourceModule\n\nSourceModule\n\nClaimModule -->\n\nSourceModule->ClaimModule\n\n\n\n\n\nViewModule\n\nViewModule\n\nClaimModule -->\n\nViewModule->ClaimModule\n\n\n\n\n\nClaimService \n\nClaimService \n\nClaimService  -->\n\nClaimModule->ClaimService \n\n\n\n\n\nClaimService\n\nClaimService\n\nClaimModule -->\n\nClaimService->ClaimModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/claim/claim.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ClaimService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ClaimController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClaimReviewModule\n                        \n                        \n                            ClaimRevisionModule\n                        \n                        \n                            HistoryModule\n                        \n                        \n                            ParserModule\n                        \n                        \n                            PersonalityModule\n                        \n                        \n                            SourceModule\n                        \n                        \n                            ViewModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ClaimService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { Claim, ClaimSchema } from \"./schemas/claim.schema\";\nimport { ClaimService } from \"./claim.service\";\nimport { ClaimController } from \"./claim.controller\";\nimport { ClaimReviewModule } from \"../claim-review/claim-review.module\";\nimport { ParserModule } from \"../parser/parser.module\";\nimport { PersonalityModule } from \"../personality/personality.module\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { HttpModule } from \"@nestjs/axios\";\nimport { ViewModule } from \"../view/view.module\";\nimport { SourceModule } from \"../source/source.module\";\nimport { ClaimRevisionModule } from \"../claim-revision/claim-revision.module\"\nimport { HistoryModule } from \"../history/history.module\";\n\nconst ClaimModel = MongooseModule.forFeature([\n    {\n        name: Claim.name,\n        schema: ClaimSchema,\n    },\n]);\n\n@Module({\n    imports: [\n        ClaimModel,\n        ClaimReviewModule,\n        ClaimRevisionModule,\n        ParserModule,\n        PersonalityModule,\n        HistoryModule,\n        ConfigModule,\n        HttpModule,\n        ViewModule,\n        SourceModule,\n    ],\n    exports: [ClaimService],\n    providers: [ClaimService],\n    controllers: [ClaimController],\n})\nexport class ClaimModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClaimReview.html":{"url":"classes/ClaimReview.html","title":"class - ClaimReview","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClaimReview\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim-review/schemas/claim-review.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                claim\n                            \n                            \n                                classification\n                            \n                            \n                                isDeleted\n                            \n                            \n                                personality\n                            \n                            \n                                report\n                            \n                            \n                                sentence_content\n                            \n                            \n                                sentence_hash\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        claim\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Claim\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'ClaimRevision'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/schemas/claim-review.schema.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        classification\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, validate: undefined, message: tag => })\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/schemas/claim-review.schema.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDeleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/schemas/claim-review.schema.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        personality\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Personality\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'Personality'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/schemas/claim-review.schema.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        report\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/schemas/claim-review.schema.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sentence_content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/schemas/claim-review.schema.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sentence_hash\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/schemas/claim-review.schema.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/schemas/claim-review.schema.ts:74\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { Personality } from \"../../personality/schemas/personality.schema\";\nimport * as mongoose from \"mongoose\";\nimport { User } from \"../../users/schemas/user.schema\";\nimport { Claim } from \"../../claim/schemas/claim.schema\";\nimport { softDeletePlugin } from 'mongoose-softdelete-typescript';\n\nexport type ClaimReviewDocument = ClaimReview & mongoose.Document;\n\nexport enum ClassificationEnum {\n    \"not-fact\",\n    \"true\",\n    \"true-but\",\n    \"arguable\",\n    \"misleading\",\n    \"false\",\n    \"unsustainable\",\n    \"exaggerated\",\n    \"unverifiable\",\n};\n@Schema({ toObject: {virtuals: true}, toJSON: {virtuals: true} })\nexport class ClaimReview {\n    @Prop({\n        required: true,\n        validate: {\n            validator: (v) => {\n                return (\n                    [\n                        \"not-fact\",\n                        \"true\",\n                        \"true-but\",\n                        \"arguable\",\n                        \"misleading\",\n                        \"false\",\n                        \"unsustainable\",\n                        \"exaggerated\",\n                        \"unverifiable\",\n                    ].indexOf(v) !== -1\n                );\n            },\n        },\n        message: (tag) => `${tag} is not a valid classification.`,\n    })\n    classification: string;\n\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"ClaimRevision\",\n    })\n    claim: Claim;\n\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"Personality\",\n    })\n    personality: Personality;\n\n    @Prop({ required: true })\n    sentence_hash: string;\n\n    @Prop({ required: true })\n    sentence_content: string;\n\n    @Prop({ required: true })\n    report: string;\n\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"User\",\n    })\n    user: User;\n\n    @Prop({ required: false })\n    isDeleted: boolean;\n}\n\nconst ClaimReviewSchemaRaw = SchemaFactory.createForClass(ClaimReview);\n\nClaimReviewSchemaRaw.virtual('sources', {\n    ref: 'Source',\n    localField: '_id',\n    foreignField: 'targetId'\n});\n\nClaimReviewSchemaRaw.plugin(softDeletePlugin)\n\nexport const ClaimReviewSchema = ClaimReviewSchemaRaw;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ClaimReviewController.html":{"url":"controllers/ClaimReviewController.html","title":"controller - ClaimReviewController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ClaimReviewController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim-review/claim-review.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/claimreview\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                _checkCaptchaResponse\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        _checkCaptchaResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    _checkCaptchaResponse(secret, response)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    secret\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createClaimReview: CreateClaimReview, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in server/claim-review/claim-review.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createClaimReview\n                                    \n                                                CreateClaimReview\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(params)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in server/claim-review/claim-review.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(params)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get(':id')\n                \n            \n\n            \n                \n                    Defined in server/claim-review/claim-review.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Post, Req } from \"@nestjs/common\";\nimport { ClaimReviewService } from \"./claim-review.service\";\nimport * as qs from \"querystring\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { HttpService } from \"@nestjs/axios\";\nimport { CreateClaimReview } from \"./dto/create-claim-review.dto\";\nimport {IsPublic} from \"../decorators/is-public.decorator\";\n\n@Controller(\"api/claimreview\")\nexport class ClaimReviewController {\n    constructor(\n        private claimReviewService: ClaimReviewService,\n        private configService: ConfigService,\n        private httpService: HttpService\n    ) {}\n\n    async _checkCaptchaResponse(secret, response) {\n        const RECAPTCHA_API_URL = \"https://www.google.com/recaptcha/api\";\n        const { data } = await this.httpService.post(\n            `${RECAPTCHA_API_URL}/siteverify`,\n            qs.stringify({\n                secret,\n                response,\n            })\n        ).toPromise();\n\n        return data;\n    }\n\n    @Post()\n    async create(@Body() createClaimReview: CreateClaimReview, @Req() req) {\n        const secret = this.configService.get(\"recaptcha_secret\");\n        const recaptchaCheck = await this._checkCaptchaResponse(\n            secret,\n            createClaimReview && createClaimReview.recaptcha\n        );\n\n        // @ts-ignore\n        if (!recaptchaCheck.success) {\n            throw Error();\n            // app.logger.log(\"error/recaptcha\", recaptchaCheck);\n            // next(\n            //     Requester.internalError(res, \"Error with your reCaptcha response\")\n            // );\n        } else {\n            return this.claimReviewService.create({\n                ...createClaimReview,\n                user: req?.user?._id,\n            });\n        }\n    }\n\n    @IsPublic()\n    @Get(\":id\")\n    get(@Param() params) {\n        return this.claimReviewService.getById(params.id);\n    }\n\n    @Delete(\":id\")\n    delete(@Param() params) {\n        return this.claimReviewService.delete(params.id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ClaimReviewModule.html":{"url":"modules/ClaimReviewModule.html","title":"module - ClaimReviewModule","body":"\n                   \n\n\n\n\n    Modules\n    ClaimReviewModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ClaimReviewModule\n\n\n\ncluster_ClaimReviewModule_imports\n\n\n\ncluster_ClaimReviewModule_exports\n\n\n\ncluster_ClaimReviewModule_providers\n\n\n\n\nHistoryModule\n\nHistoryModule\n\n\n\nClaimReviewModule\n\nClaimReviewModule\n\nClaimReviewModule -->\n\nHistoryModule->ClaimReviewModule\n\n\n\n\n\nSourceModule\n\nSourceModule\n\nClaimReviewModule -->\n\nSourceModule->ClaimReviewModule\n\n\n\n\n\nClaimReviewService \n\nClaimReviewService \n\nClaimReviewService  -->\n\nClaimReviewModule->ClaimReviewService \n\n\n\n\n\nClaimReviewService\n\nClaimReviewService\n\nClaimReviewModule -->\n\nClaimReviewService->ClaimReviewModule\n\n\n\n\n\nUtilService\n\nUtilService\n\nClaimReviewModule -->\n\nUtilService->ClaimReviewModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/claim-review/claim-review.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ClaimReviewService\n                        \n                        \n                            UtilService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ClaimReviewController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            HistoryModule\n                        \n                        \n                            SourceModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ClaimReviewService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ClaimReview, ClaimReviewSchema } from \"./schemas/claim-review.schema\";\nimport { ClaimReviewService } from \"./claim-review.service\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { ClaimReviewController } from \"./claim-review.controller\";\nimport { UtilService } from \"../util\";\nimport { SourceModule } from \"../source/source.module\";\nimport { HttpModule } from \"@nestjs/axios\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { HistoryModule } from \"../history/history.module\";\n\nexport const ClaimReviewModel = MongooseModule.forFeature([\n    {\n        name: ClaimReview.name,\n        schema: ClaimReviewSchema,\n    },\n]);\n\n@Module({\n    imports: [\n        ClaimReviewModel,\n        HistoryModule,\n        SourceModule,\n        HttpModule,\n        ConfigModule\n    ],\n    providers: [UtilService, ClaimReviewService],\n    exports: [ClaimReviewService],\n    controllers: [ClaimReviewController],\n})\nexport class ClaimReviewModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClaimReviewService.html":{"url":"injectables/ClaimReviewService.html","title":"injectable - ClaimReviewService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClaimReviewService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim-review/claim-review.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                _reviewsBySentenceHashAggregated\n                            \n                            \n                                _topClassificationAccumulator\n                            \n                            \n                                agreggateClassification\n                            \n                            \n                                count\n                            \n                            \n                                countReviewsBySentenceHash\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                getById\n                            \n                            \n                                getReviewsByClaimId\n                            \n                            \n                                getReviewsBySentenceHash\n                            \n                            \n                                    Async\n                                getReviewStatsByClaimId\n                            \n                            \n                                    Async\n                                getReviewStatsBySentenceHash\n                            \n                            \n                                getUserReviewBySentenceHash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ClaimReviewModel, historyService: HistoryService, sourceService: SourceService, util: UtilService)\n                    \n                \n                        \n                            \n                                Defined in server/claim-review/claim-review.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ClaimReviewModel\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        historyService\n                                                  \n                                                        \n                                                                        HistoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sourceService\n                                                  \n                                                        \n                                                                        SourceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        util\n                                                  \n                                                        \n                                                                        UtilService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        _reviewsBySentenceHashAggregated\n                        \n                    \n                \n            \n            \n                \n_reviewsBySentenceHashAggregated(sentenceHash)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentenceHash\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _topClassificationAccumulator\n                        \n                    \n                \n            \n            \n                \n_topClassificationAccumulator()\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { $accumulator: { init: () => {}; accumulate: (state: any, classification: any) => any; accumulateArgs: {}; merge: (state1: any, state2: any) => any; finalize: (state: any) => { classification: any; count: any; }; lang: string; }; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        agreggateClassification\n                        \n                    \n                \n            \n            \n                \nagreggateClassification(match: any)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    match\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        count\n                        \n                    \n                \n            \n            \n                \ncount(query: any)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        countReviewsBySentenceHash\n                        \n                    \n                \n            \n            \n                \ncountReviewsBySentenceHash(sentenceHash)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentenceHash\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(claimReview)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:176\n                \n            \n\n\n            \n                \n                    This function creates a new claim review.\nAlso creates a History Module that tracks creation of claim reviews.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    claimReview\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ClaimReviewBody received of the client.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        Return a new claim review object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(claimReviewId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:224\n                \n            \n\n\n            \n                \n                    This function does a soft deletion, doesn't delete claim review in DataBase,\nbut omit its in the front page\nAlso creates a History Module that tracks deletion of claim reviews.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    claimReviewId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        claimId Claim id which wants to delete\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        Returns the claim review with the param isDeleted equal to true\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getById\n                        \n                    \n                \n            \n            \n                \ngetById(claimReviewId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:211\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimReviewId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getReviewsByClaimId\n                        \n                    \n                \n            \n            \n                \ngetReviewsByClaimId(claimId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:58\n                \n            \n\n\n            \n                \n                    get all personality claim claimIDs\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        claim Id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getReviewsBySentenceHash\n                        \n                    \n                \n            \n            \n                \ngetReviewsBySentenceHash(sentenceHash, page, pageSize, order)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentenceHash\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    page\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageSize\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    order\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getReviewStatsByClaimId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getReviewStatsByClaimId(claimId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getReviewStatsBySentenceHash\n                        \n                    \n                \n            \n            \n                \n                    \n                    getReviewStatsBySentenceHash(match: any)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    match\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserReviewBySentenceHash\n                        \n                    \n                \n            \n            \n                \ngetUserReviewBySentenceHash(sentenceHash, userId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentenceHash\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"ClaimReviewService\")\n                    \n                \n                    \n                        \n                                Defined in server/claim-review/claim-review.service.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from \"@nestjs/common\";\nimport { Model, Types } from \"mongoose\";\nimport { ClaimReview, ClaimReviewDocument } from \"./schemas/claim-review.schema\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport { UtilService } from \"../util\";\nimport { SourceService } from \"../source/source.service\";\nimport { HistoryService } from \"../history/history.service\";\nimport { HistoryType, TargetModel } from \"../history/schema/history.schema\";\nimport { ISoftDeletedModel } from 'mongoose-softdelete-typescript';\nimport { SourceTargetModel } from '../source/schemas/source.schema'\n\n@Injectable()\nexport class ClaimReviewService {\n    private readonly logger = new Logger(\"ClaimReviewService\");\n    constructor(\n        @InjectModel(ClaimReview.name)\n        private ClaimReviewModel: Model & ISoftDeletedModel,\n        private historyService: HistoryService,\n        private sourceService: SourceService,\n        private util: UtilService\n    ) {}\n\n    agreggateClassification(match: any) {\n        return this.ClaimReviewModel.aggregate([\n            { $match: match },\n            { $group: { _id: \"$classification\", count: { $sum: 1 } } },\n            { $sort: { count: -1 } },\n        ]);\n    }\n\n    count(query: any = {}) {\n        return this.ClaimReviewModel.countDocuments().where(query);\n    }\n\n    async getReviewStatsBySentenceHash(match: any) {\n        const reviews = await this.ClaimReviewModel.aggregate([\n            { $match: match },\n            { $group: { _id: \"$classification\", count: { $sum: 1 } } },\n            { $sort: { count: -1 } },\n        ]);\n        return this.util.formatStats(reviews);\n    }\n\n    async getReviewStatsByClaimId(claimId) {\n        const reviews = await this.ClaimReviewModel.aggregate([\n            { $match: { claim: claimId, isDeleted: false } },\n            { $group: { _id: \"$classification\", count: { $sum: 1 } } },\n            { $sort: { count: -1 } },\n        ]);\n        return this.util.formatStats(reviews);\n    }\n\n    /**\n     * get all personality claim claimIDs\n     * @param claimId claim Id\n     * @returns\n     */\n    getReviewsByClaimId(claimId) {\n        return this.ClaimReviewModel.aggregate([\n            { $match: { claim: claimId, isDeleted: false } },\n            {\n                $group: {\n                    _id: \"$sentence_hash\",\n                    topClassification: this._topClassificationAccumulator(),\n                },\n            },\n        ]).option({ serializeFunctions: true });\n    }\n\n    getUserReviewBySentenceHash(sentenceHash, userId) {\n        if (!userId) {\n            return Promise.resolve(undefined);\n        }\n        return this.ClaimReviewModel.findOne(\n            { sentence_hash: sentenceHash, user: userId, isDeleted: false },\n            {\n                sources: 1,\n                _id: 1,\n                classification: 1,\n                user: 1,\n            }\n        );\n    }\n\n    countReviewsBySentenceHash(sentenceHash) {\n        return this._reviewsBySentenceHashAggregated(sentenceHash).count(\n            \"count\"\n        );\n    }\n\n    getReviewsBySentenceHash(sentenceHash, page, pageSize, order) {\n        pageSize = parseInt(pageSize);\n        page = parseInt(page);\n\n        return this._reviewsBySentenceHashAggregated(sentenceHash)\n            .skip(page * pageSize)\n            .limit(pageSize)\n            .sort({ _id: order });\n    }\n\n    _reviewsBySentenceHashAggregated(sentenceHash) {\n        return this.ClaimReviewModel.aggregate([\n            { $match: { sentence_hash: sentenceHash, isDeleted: false } },\n            // Virtual Populates doesn't work with aggregate\n            // https://stackoverflow.com/questions/47669178/mongoose-virtual-populate-and-aggregates\n            {\n                $lookup: {\n                    from: 'sources',\n                    localField: '_id',\n                    foreignField: 'targetId',\n                    as: 'sources'\n                }\n            },\n            {\n                $project: {\n                    _id: 1,\n                    sources: 1,\n                    report: 1,\n                    classification: 1,\n                    user: 1,\n                },\n            },\n        ]);\n    }\n\n    _topClassificationAccumulator() {\n        return {\n            $accumulator: {\n                init: function () {\n                    return {};\n                },\n                accumulate: function (state, classification) {\n                    if (!state[classification]) {\n                        state[classification] = 1;\n                    } else {\n                        state[classification]++;\n                    }\n\n                    return state;\n                },\n                accumulateArgs: [\"$classification\"],\n                merge: function (state1, state2) {\n                    return { ...state1, ...state2 };\n                },\n                finalize: function (state) {\n                    // Find the classification with bigger count\n                    const topClassification = Object.keys(state).reduce(\n                        (acc, classification) => {\n                            if (!state[acc]) {\n                                return classification;\n                            } else {\n                                return state[acc] >= state[classification]\n                                    ? acc\n                                    : classification;\n                            }\n                        },\n                        \"\"\n                    );\n                    // TODO: what can we do about ties?\n                    return {\n                        classification: topClassification,\n                        count: state[topClassification],\n                    };\n                },\n                lang: \"js\",\n            },\n        };\n    }\n\n    /**\n     * This function creates a new claim review.\n     * Also creates a History Module that tracks creation of claim reviews.\n     * @param claimReview ClaimReviewBody received of the client.\n     * @returns Return a new claim review object.\n     */\n    async create(claimReview) {\n        // Cast ObjectId\n        claimReview.personality = Types.ObjectId(claimReview.personality);\n        claimReview.claim = Types.ObjectId(claimReview.claim);\n        claimReview.user = Types.ObjectId(claimReview.user);\n        const newClaimReview = new this.ClaimReviewModel(claimReview);\n        if (claimReview.sources && Array.isArray(claimReview.sources)) {\n            try {\n                for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClaimRevision.html":{"url":"classes/ClaimRevision.html","title":"class - ClaimRevision","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClaimRevision\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim-revision/schema/claim-revision.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                claimId\n                            \n                            \n                                content\n                            \n                            \n                                date\n                            \n                            \n                                personality\n                            \n                            \n                                slug\n                            \n                            \n                                title\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        claimId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Claim\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'Claim'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-revision/schema/claim-revision.schema.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-revision/schema/claim-revision.schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-revision/schema/claim-revision.schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        personality\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Personality\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'Personality'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-revision/schema/claim-revision.schema.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-revision/schema/claim-revision.schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-revision/schema/claim-revision.schema.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, validate: undefined, message: tag => })\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-revision/schema/claim-revision.schema.ts:38\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport * as mongoose from \"mongoose\";\nimport { Claim } from \"../../claim/schemas/claim.schema\";\nimport { Personality } from \"../../personality/schemas/personality.schema\"\n\nexport type ClaimRevisionDocument = ClaimRevision & mongoose.Document;\n\n@Schema({ toObject: {virtuals: true}, toJSON: {virtuals: true} })\nexport class ClaimRevision {\n    @Prop({ required: true })\n    title: string;\n\n    @Prop({ required: true })\n    slug: string;\n\n    @Prop({ type: Object, required: true })\n    content: object;\n\n    @Prop({ required: true })\n    date: Date;\n\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"Claim\",\n    })\n    claimId: Claim;\n\n    @Prop({\n        required: true,\n        validate: {\n            validator: (v) => {\n                return [\"speech\", \"twitter\"].indexOf(v) !== -1;\n            },\n        },\n        message: (tag) => `${tag} is not a valid claim type.`,\n    })\n    type: string;\n\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"Personality\",\n    })\n    personality: Personality;\n\n    // TODO: Let's not use the auto-increment yet\n    // mongodb will create a default _id field and we can use it for the first version\n    // @Prop({ required: true })\n    // revisionId: number;\n}\n\nconst ClaimRevisionSchemaRaw = SchemaFactory.createForClass(ClaimRevision);\n\nClaimRevisionSchemaRaw.virtual('reviews', {\n    ref: 'ClaimReview',\n    localField: '_id',\n    foreignField: 'claim'\n});\n\nexport const ClaimRevisionSchema = ClaimRevisionSchemaRaw;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ClaimRevisionModule.html":{"url":"modules/ClaimRevisionModule.html","title":"module - ClaimRevisionModule","body":"\n                   \n\n\n\n\n    Modules\n    ClaimRevisionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ClaimRevisionModule\n\n\n\ncluster_ClaimRevisionModule_exports\n\n\n\ncluster_ClaimRevisionModule_imports\n\n\n\ncluster_ClaimRevisionModule_providers\n\n\n\n\nParserModule\n\nParserModule\n\n\n\nClaimRevisionModule\n\nClaimRevisionModule\n\nClaimRevisionModule -->\n\nParserModule->ClaimRevisionModule\n\n\n\n\n\nSourceModule\n\nSourceModule\n\nClaimRevisionModule -->\n\nSourceModule->ClaimRevisionModule\n\n\n\n\n\nViewModule\n\nViewModule\n\nClaimRevisionModule -->\n\nViewModule->ClaimRevisionModule\n\n\n\n\n\nClaimRevisionService \n\nClaimRevisionService \n\nClaimRevisionService  -->\n\nClaimRevisionModule->ClaimRevisionService \n\n\n\n\n\nClaimRevisionService\n\nClaimRevisionService\n\nClaimRevisionModule -->\n\nClaimRevisionService->ClaimRevisionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/claim-revision/claim-revision.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ClaimRevisionService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ParserModule\n                        \n                        \n                            SourceModule\n                        \n                        \n                            ViewModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ClaimRevisionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { ClaimRevision, ClaimRevisionSchema } from \"./schema/claim-revision.schema\";\nimport { ParserModule } from \"../parser/parser.module\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { HttpModule } from \"@nestjs/axios\";\nimport { ViewModule } from \"../view/view.module\";\nimport { SourceModule } from \"../source/source.module\";\nimport { ClaimRevisionService } from \"./claim-revision.service\";\n\nconst ClaimRevisionModel = MongooseModule.forFeature([\n    {\n        name: ClaimRevision.name,\n        schema: ClaimRevisionSchema,\n    },\n]);\n\n@Module({\n    // TODO: clean-up Claim module after logic is fully migrated to ClaimRevision\n    imports: [\n        ClaimRevisionModel,\n        ParserModule,\n        ConfigModule,\n        HttpModule,\n        ViewModule,\n        SourceModule,\n    ],\n    exports: [ClaimRevisionService],\n    providers: [ClaimRevisionService],\n})\nexport class ClaimRevisionModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClaimRevisionService.html":{"url":"injectables/ClaimRevisionService.html","title":"injectable - ClaimRevisionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClaimRevisionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim-revision/claim-revision.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                optionsToUpdate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                getRevision\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ClaimRevisionModel: Model, sourceService: SourceService, parserService: ParserService)\n                    \n                \n                        \n                            \n                                Defined in server/claim-revision/claim-revision.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ClaimRevisionModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sourceService\n                                                  \n                                                        \n                                                                        SourceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        parserService\n                                                  \n                                                        \n                                                                        ParserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(claimId, claim)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-revision/claim-revision.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        an unique claim id\n\n                                    \n                                \n                                \n                                    claim\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Claim Content\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        Save the claimRevision in database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRevision\n                        \n                    \n                \n            \n            \n                \ngetRevision(claimId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-revision/claim-revision.service.ts:28\n                \n            \n\n\n            \n                \n                    get ClaimRevision by ID\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"ClaimService\")\n                    \n                \n                    \n                        \n                                Defined in server/claim-revision/claim-revision.service.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        optionsToUpdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in server/claim-revision/claim-revision.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {Injectable, Logger, NotFoundException} from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport { Model } from \"mongoose\";\nimport slugify from 'slugify'\nimport { ParserService } from \"../parser/parser.service\";\nimport { SourceService } from \"../source/source.service\";\nimport { SourceTargetModel } from \"../source/schemas/source.schema\";\nimport { ClaimRevision, ClaimRevisionDocument } from \"./schema/claim-revision.schema\";\n\n@Injectable()\nexport class ClaimRevisionService {\n    private optionsToUpdate: { new: boolean; upsert: boolean };\n    private readonly logger = new Logger(\"ClaimService\");\n\n    constructor(\n        @InjectModel(ClaimRevision.name)\n        private ClaimRevisionModel: Model,\n        private sourceService: SourceService,\n        private parserService: ParserService\n    ) {\n        this.optionsToUpdate = {\n            new: true,\n            upsert: true,\n        };\n    }\n\n    /** get ClaimRevision by ID */\n    getRevision(claimId) {\n        try {\n            return this.ClaimRevisionModel.findById(claimId)\n                .populate(\"personality\", \"_id name\")\n        } catch {\n            throw new NotFoundException()\n        }\n    }\n    /**\n     *\n     * @param claimId an unique claim id\n     * @param claim Claim Content\n     * @returns Save the claimRevision in database\n     */\n    async create(claimId, claim) {\n        claim.claimId = claimId;\n        if (typeof claim.content === \"string\") {\n            claim.content = this.parserService.parse(claim.content);\n        }\n        claim.slug = slugify(claim.title, {\n            lower: true,     // convert to lower case, defaults to `false`\n            strict: true     // strip special characters except replacement, defaults to `false`\n        })\n        const newClaimRevision = new this.ClaimRevisionModel(claim);\n        if (claim.sources && Array.isArray(claim.sources)) {\n            try {\n                for (let source of claim.sources) {\n                    await this.sourceService.create({\n                        link: source,\n                        targetId: claimId,\n                        targetModel: SourceTargetModel.Claim,\n                    });\n                }\n            } catch (e) {\n                this.logger.error(e);\n                throw e;\n            }\n        }\n        return newClaimRevision.save();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClaimService.html":{"url":"injectables/ClaimService.html","title":"injectable - ClaimService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClaimService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim/claim.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                optionsToUpdate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                _getClaim\n                            \n                            \n                                    Private\n                                calculateOverallStats\n                            \n                            \n                                count\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getByPersonalityIdAndClaimSlug\n                            \n                            \n                                    Async\n                                listAll\n                            \n                            \n                                    Private\n                                    Async\n                                postProcess\n                            \n                            \n                                    Private\n                                transformContentObject\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(req: Request, ClaimModel, claimReviewService: ClaimReviewService, historyService: HistoryService, claimRevisionService: ClaimRevisionService)\n                    \n                \n                        \n                            \n                                Defined in server/claim/claim.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        req\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        ClaimModel\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        claimReviewService\n                                                  \n                                                        \n                                                                        ClaimReviewService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        historyService\n                                                  \n                                                        \n                                                                        HistoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        claimRevisionService\n                                                  \n                                                        \n                                                                        ClaimRevisionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        _getClaim\n                        \n                    \n                \n            \n            \n                \n                    \n                    _getClaim(match: ClaimMatchParameters, revisionId, postprocess)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:161\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    match\n                                    \n                                                ClaimMatchParameters\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    revisionId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        undefined\n                                    \n\n                                \n                                \n                                    postprocess\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        calculateOverallStats\n                        \n                    \n                \n            \n            \n                \n                    \n                    calculateOverallStats(claim)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:221\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claim\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         { totalClaims: number; totalClaimsReviewed: number; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        count\n                        \n                    \n                \n            \n            \n                \ncount(query: any)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(claim)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:66\n                \n            \n\n\n            \n                \n                    This function will create a new claim and claim Revision and save it to the dataBase.\nAlso creates a History Module that tracks creation of claims.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    claim\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ClaimBody received of the client.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        Return a new claim object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(claimId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:137\n                \n            \n\n\n            \n                \n                    This function does a soft deletion, doesn't delete claim in DataBase,\nbut omit its in the front page\nAlso creates a History Module that tracks deletion of claims.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Claim id which wants to delete\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        Returns the claim with the param isDeleted equal to true\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(claimId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:153\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByPersonalityIdAndClaimSlug\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByPersonalityIdAndClaimSlug(personalityId, claimSlug, revisionId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    personalityId\n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    claimSlug\n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    revisionId\n\n                                    \n                                        No\n                                    \n\n                                    \n                                        undefined\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAll(page, pageSize, order, query)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    page\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageSize\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    order\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        postProcess\n                        \n                    \n                \n            \n            \n                \n                    \n                    postProcess(claim)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:193\n                \n            \n\n\n            \n                \n                    This function return all personality claims\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    claim\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        all personality claims\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        return all claims\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        transformContentObject\n                        \n                    \n                \n            \n            \n                \n                    \n                    transformContentObject(claimContent, reviews)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:240\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimContent\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    reviews\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(claimId, claimRevisionUpdate)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:101\n                \n            \n\n\n            \n                \n                    This function creates a new claim with the old claim data\nand overwrite with the new data, keeping data that hasn't changed.\nAlso creates a History Module that tracks updation of claims.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Claim id which wants updated.\n\n                                    \n                                \n                                \n                                    claimRevisionUpdate\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ClaimBody received of the client.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        Return a new claim object.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"ClaimService\")\n                    \n                \n                    \n                        \n                                Defined in server/claim/claim.service.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        optionsToUpdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in server/claim/claim.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, Logger, Scope, NotFoundException } from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport { FilterQuery, Model, Types } from \"mongoose\";\nimport { Claim, ClaimDocument } from \"../claim/schemas/claim.schema\";\nimport { ClaimReviewService } from \"../claim-review/claim-review.service\";\nimport { ClaimRevisionService } from \"../claim-revision/claim-revision.service\";\nimport { HistoryService } from \"../history/history.service\"\nimport { HistoryType, TargetModel } from \"../history/schema/history.schema\";\nimport { ISoftDeletedModel } from 'mongoose-softdelete-typescript';\nimport { REQUEST } from '@nestjs/core';\nimport { Request } from 'express';\n\ntype ClaimMatchParameters = ({ _id: string } | { personality: string, slug: string }) & FilterQuery;\n\n@Injectable({ scope: Scope.REQUEST })\nexport class ClaimService {\n    private optionsToUpdate: { new: boolean; upsert: boolean };\n    private readonly logger = new Logger(\"ClaimService\");\n\n    constructor(\n        @Inject(REQUEST) private req: Request,\n        @InjectModel(Claim.name)\n        private ClaimModel: ISoftDeletedModel & Model,\n        private claimReviewService: ClaimReviewService,\n        private historyService: HistoryService,\n        private claimRevisionService: ClaimRevisionService,\n    ) {\n        this.optionsToUpdate = {\n            new: true,\n            upsert: true,\n        };\n    }\n\n    async listAll(page, pageSize, order, query) {\n        if (query.personality) {\n            query.personality = Types.ObjectId(query.personality)\n        }\n        const claims = await this.ClaimModel.find(query)\n            .populate(\"latestRevision\")\n            .skip(page * pageSize)\n            .limit(pageSize)\n            .sort({ _id: order })\n            .lean();\n\n        return Promise.all(\n            claims.map(async (claim) => {\n                // This line may cause a false positive in sonarCloud because if we remove the await, we cannot iterate through the results\n                return this.postProcess({\n                    ...claim.latestRevision,\n                    ...claim\n                });\n            })\n        );\n    }\n\n    count(query: any = {}) {\n        return this.ClaimModel.countDocuments().where(query);\n    }\n\n    /**\n     * This function will create a new claim and claim Revision and save it to the dataBase.\n     * Also creates a History Module that tracks creation of claims.\n     * @param claim ClaimBody received of the client.\n     * @returns Return a new claim object.\n     */\n    async create(claim) {\n        claim.personality = Types.ObjectId(claim.personality);\n        const newClaim = new this.ClaimModel(claim);\n        const newClaimRevision = await this.claimRevisionService.create(newClaim._id, claim)\n        newClaim.latestRevision = newClaimRevision._id\n        newClaim.slug = newClaimRevision.slug\n\n        const user = this.req.user\n\n        const history =\n            this.historyService.getHistoryParams(\n                newClaim._id,\n                TargetModel.Claim,\n                user,\n                HistoryType.Create,\n                newClaim.latestRevision\n            )\n        await this.historyService.createHistory(history)\n\n        newClaim.save();\n\n        return {\n            ...newClaim.toObject(),\n            ...newClaimRevision.toObject()\n        }\n    }\n\n    /**\n     * This function creates a new claim with the old claim data\n     * and overwrite with the new data, keeping data that hasn't changed.\n     * Also creates a History Module that tracks updation of claims.\n     * @param claimId Claim id which wants updated.\n     * @param claimRevisionUpdate ClaimBody received of the client.\n     * @returns Return a new claim object.\n     */\n    async update(claimId, claimRevisionUpdate) {\n        const claim = await this._getClaim({ _id: claimId }, undefined, false);\n        const previousRevision = claim.toObject().latestRevision\n        delete previousRevision._id\n        const newClaimRevision =\n            await this.claimRevisionService.create(claim._id, {\n                ...previousRevision,\n                ...claimRevisionUpdate\n            })\n        claim.latestRevision = newClaimRevision._id\n        claim.slug = newClaimRevision.slug\n\n        const user = this.req.user\n\n        const history =\n            this.historyService.getHistoryParams(\n                claimId,\n                TargetModel.Claim,\n                user,\n                HistoryType.Update,\n                newClaimRevision,\n                previousRevision\n            )\n        await this.historyService.createHistory(history)\n\n        claim.save()\n        return newClaimRevision;\n    }\n\n    /**\n     * This function does a soft deletion, doesn't delete claim in DataBase,\n     * but omit its in the front page\n     * Also creates a History Module that tracks deletion of claims.\n     * @param claimId Claim id which wants to delete\n     * @returns Returns the claim with the param isDeleted equal to true\n     */\n    async delete(claimId) {\n        const user = this.req.user\n        const previousClaim = await this.getById(claimId)\n        const history = this.historyService.getHistoryParams(\n            claimId,\n            TargetModel.Claim,\n            user,\n            HistoryType.Delete,\n            null,\n            previousClaim\n        )\n        await this.historyService.createHistory(history)\n        return this.ClaimModel.softDelete({ _id: claimId });\n    }\n\n    // TODO: add optional revisionId that will fetch a specifc revision that matches\n    async getById(claimId) {\n        return this._getClaim({_id: claimId})\n    }\n\n    async getByPersonalityIdAndClaimSlug(personalityId, claimSlug, revisionId = undefined) {\n        return this._getClaim({personality: personalityId, slug: claimSlug}, revisionId)\n    }\n\n    private async _getClaim(match: ClaimMatchParameters, revisionId = undefined, postprocess = true) {\n        let claim\n        if(revisionId) {\n            const rawClaim = await this.ClaimModel.aggregate([\n                { $match: match },\n                { $project: { \"latestRevision\": 0}}\n            ])\n            // This line may cause a false positive in sonarCloud because if we remove the await, we cannot iterate through the results\n            const revision = (await this.claimRevisionService.getRevision(revisionId)).toObject()\n            claim = {\n                ...rawClaim[0],\n                revision\n            }\n        } else {\n            // This line may cause a false positive in sonarCloud because if we remove the await, we cannot iterate through the results\n            claim = await this.ClaimModel.findOne(match)\n                .populate(\"personality\", \"_id name\")\n                .populate(\"sources\", \"_id link classification\")\n                .populate(\"latestRevision\")\n            claim = claim.toObject()\n        }\n        if (!claim) {\n            throw new NotFoundException()\n        }\n        return postprocess === true ? this.postProcess(claim) : claim;\n    }\n\n    /**\n     * This function return all personality claims\n     * @param claim all personality claims\n     * @returns return all claims\n     */\n    private async postProcess(claim) {\n        // TODO: we should not transform the object in this function\n        claim = {\n            ...(claim?.latestRevision || claim?.revision),\n            ...claim,\n            latestRevision: undefined\n        }\n        const reviews = await this.claimReviewService.getReviewsByClaimId(\n            claim._id\n        );\n        if (claim) {\n            if (claim?.content?.object) {\n                claim.content.object = this.transformContentObject(\n                    claim.content.object,\n                    reviews\n                );\n            }\n            const reviewStats =\n                await this.claimReviewService.getReviewStatsByClaimId(\n                    claim._id\n                );\n            const overallStats = this.calculateOverallStats(claim);\n            const stats = { ...reviewStats, ...overallStats };\n            claim = Object.assign(claim, { stats });\n        }\n        return claim;\n    }\n\n    private calculateOverallStats(claim) {\n        let totalClaims = 0;\n        let totalClaimsReviewed = 0;\n        if (claim?.content?.object) {\n            claim.content.object.forEach((p) => {\n                totalClaims += p.content.length;\n                p.content.forEach((sentence) => {\n                    if (sentence.props.topClassification) {\n                        totalClaimsReviewed++;\n                    }\n                });\n            }, 0);\n        }\n        return {\n            totalClaims,\n            totalClaimsReviewed,\n        };\n    }\n\n    private transformContentObject(claimContent, reviews) {\n        if (!claimContent || reviews.length  {\n            paragraph.content.forEach((sentence, sentenceIndex) => {\n                const claimReview = reviews.find((review) => {\n                    return review._id === sentence.props[\"data-hash\"];\n                });\n                if (claimReview) {\n                    claimContent[paragraphIndex].content[sentenceIndex].props =\n                        Object.assign(sentence.props, {\n                            topClassification: claimReview.topClassification,\n                        });\n                }\n            });\n        });\n        return claimContent;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateClaimDTO.html":{"url":"classes/CreateClaimDTO.html","title":"class - CreateClaimDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateClaimDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim/dto/create-claim.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                date\n                            \n                            \n                                personality\n                            \n                            \n                                recaptcha\n                            \n                            \n                                sources\n                            \n                            \n                                title\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/create-claim.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/create-claim.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        personality\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Personality\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/create-claim.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recaptcha\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/create-claim.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sources\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ArrayNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/create-claim.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/create-claim.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@IsAlpha()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/create-claim.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArrayNotEmpty, IsAlpha, IsArray, IsDateString, IsNotEmpty, IsString } from 'class-validator';\nimport { Personality } from \"../../personality/schemas/personality.schema\";\n\nexport class CreateClaimDTO {\n    @IsNotEmpty()\n    @IsString()\n    title: string;\n\n    @IsNotEmpty()\n    @IsString()\n    content: string;\n\n    @IsNotEmpty()\n    @IsString()\n    @IsDateString()\n    date: string;\n\n    @IsNotEmpty()\n    @IsString()\n    @IsAlpha()\n    type: string;\n\n    @IsArray()\n    @ArrayNotEmpty()\n    sources: string[];\n\n    @IsNotEmpty()\n    @IsString()\n    recaptcha: string;\n\n    @IsNotEmpty()\n    @IsString()\n    personality: Personality;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateClaimReview.html":{"url":"classes/CreateClaimReview.html","title":"class - CreateClaimReview","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateClaimReview\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim-review/dto/create-claim-review.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                claim\n                            \n                            \n                                classification\n                            \n                            \n                                personality\n                            \n                            \n                                recaptcha\n                            \n                            \n                                report\n                            \n                            \n                                sentence_content\n                            \n                            \n                                sentence_hash\n                            \n                            \n                                sources\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        claim\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Claim\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsAlphanumeric()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/dto/create-claim-review.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        classification\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@IsEnum(ClassificationEnum)\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/dto/create-claim-review.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        personality\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Personality\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsAlphanumeric()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/dto/create-claim-review.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recaptcha\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/dto/create-claim-review.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        report\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/dto/create-claim-review.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sentence_content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/dto/create-claim-review.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sentence_hash\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsAlphanumeric()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/dto/create-claim-review.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sources\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/dto/create-claim-review.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsAlphanumeric, IsArray, IsEnum, IsNotEmpty, IsString } from 'class-validator';\nimport { Personality } from \"../../personality/schemas/personality.schema\";\nimport { Claim } from \"../../claim/schemas/claim.schema\";\nimport { ClassificationEnum } from \"../schemas/claim-review.schema\"\nexport class CreateClaimReview {\n    @IsNotEmpty()\n    @IsString()\n    @IsEnum(ClassificationEnum)\n    classification: string;\n\n    @IsString()\n    @IsAlphanumeric()\n    claim: Claim;\n\n    @IsAlphanumeric()\n    personality: Personality;\n\n    @IsString()\n    @IsAlphanumeric()\n    sentence_hash: string;\n\n    @IsString()\n    sentence_content: string;\n\n    @IsNotEmpty()\n    @IsString()\n    report: string;\n\n    @IsString()\n    recaptcha: string\n\n    @IsNotEmpty()\n    @IsArray()\n    sources: string[]\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePersonality.html":{"url":"classes/CreatePersonality.html","title":"class - CreatePersonality","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePersonality\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/personality/dto/create-personality.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                    Optional\n                                image\n                            \n                            \n                                    Optional\n                                isAllowedProp\n                            \n                            \n                                name\n                            \n                            \n                                wikidata\n                            \n                            \n                                    Optional\n                                wikipedia\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/create-personality.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/create-personality.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        isAllowedProp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/create-personality.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MinLength(3)\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/create-personality.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wikidata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/create-personality.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        wikipedia\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/create-personality.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsNotEmpty, IsOptional, IsString, MinLength } from 'class-validator';\nexport class CreatePersonality {\n    @IsNotEmpty()\n    @IsString()\n    @MinLength(3)\n    name: string;\n\n    @IsString()\n    description: string;\n\n    @IsString()\n    wikidata: string;\n\n    @IsBoolean()\n    @IsOptional()\n    isAllowedProp?: boolean\n\n    @IsString()\n    @IsOptional()\n    image?: string\n\n    @IsString()\n    @IsOptional()\n    wikipedia?: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DisableBodyParserMiddleware.html":{"url":"injectables/DisableBodyParserMiddleware.html","title":"injectable - DisableBodyParserMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DisableBodyParserMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/middleware/disable-body-parser.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, _res: Response, next: () => void)\n                \n            \n\n\n            \n                \n                    Defined in server/middleware/disable-body-parser.middleware.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    _res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Injectable, NestMiddleware} from '@nestjs/common';\nimport {Request, Response} from 'express';\n\n@Injectable()\nexport class DisableBodyParserMiddleware implements NestMiddleware {\n    use(req: Request, _res: Response, next: () => any) {\n        req['disableBodyParser'] = true\n        next();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailModule.html":{"url":"modules/EmailModule.html","title":"module - EmailModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_EmailModule_exports\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/email/email.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { EmailService } from \"./email.service\";\nimport { ConfigModule } from \"@nestjs/config\";\n\n\n@Module({\n    exports: [EmailService],\n    imports: [ConfigModule],\n    providers: [EmailService],\n})\nexport class EmailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/email/email.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTransport\n                            \n                            \n                                getEmailBody\n                            \n                            \n                                    Async\n                                sendEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in server/email/email.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createTransport\n                        \n                    \n                \n            \n            \n                \n                    \n                    createTransport()\n                \n            \n\n\n            \n                \n                    Defined in server/email/email.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEmailBody\n                        \n                    \n                \n            \n            \n                \ngetEmailBody(options, templatePath: string)\n                \n            \n\n\n            \n                \n                    Defined in server/email/email.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    templatePath\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"./template/email.html\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendEmail(to, subject, text, templateOptions, templatePath)\n                \n            \n\n\n            \n                \n                    Defined in server/email/email.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    to\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    subject\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    text\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    templateOptions\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    templatePath\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"EmailService\")\n                    \n                \n                    \n                        \n                                Defined in server/email/email.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nconst nodemailer = require(\"nodemailer\");\nconst handlebars = require(\"handlebars\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\n@Injectable()\nexport class EmailService {\n    private readonly logger = new Logger(\"EmailService\");\n\n    constructor(\n        private configService: ConfigService,\n    ) {}\n\n    getEmailBody (options, templatePath = \"./template/email.html\") {\n        const html = fs.readFileSync(path.resolve(__dirname, templatePath), {\n            encoding: \"utf-8\",\n        });\n        const template = handlebars.compile(html);\n        return template({\n            ...options,\n            baseUrl: this.configService.get(\"web_url\"),\n        });\n    }\n\n    async createTransport() {\n        const transporter = nodemailer.createTransport({\n            host: this.configService.get(\"smtp_host\"),\n            port: this.configService.get(\"smtp_port\"),\n            secure: this.configService.get(\"smtp_secure\"),\n            auth: {\n                user: this.configService.get(\"smtp_email_user\"),\n                pass: this.configService.get(\"smtp_email_pass\")\n            },\n        });\n        return transporter;\n    }\n\n    async sendEmail(to, subject, text, templateOptions, templatePath) {\n        const transporter = await this.createTransport();\n        const html = this.getEmailBody(templateOptions, templatePath);\n        const from = this.configService.get(\"smtp_email_user\")\n        this.logger.log(`Sending e-mail to ${to} ...`);\n        const emailResult = await transporter.sendMail({ from, to, subject, text, html })//.then(() => transporter.close());\n        return emailResult;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetClaimsByHashDTO.html":{"url":"classes/GetClaimsByHashDTO.html","title":"class - GetClaimsByHashDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetClaimsByHashDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim/dto/get-reviews-by-hash.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                language\n                            \n                            \n                                order\n                            \n                            \n                                page\n                            \n                            \n                                pageSize\n                            \n                            \n                                    Optional\n                                reviews\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsAlpha()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/get-reviews-by-hash.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/get-reviews-by-hash.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsInt()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/get-reviews-by-hash.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pageSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/get-reviews-by-hash.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        reviews\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/get-reviews-by-hash.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsAlpha, IsArray, IsInt, IsNumber, IsOptional, IsString, Min } from 'class-validator';\n\nexport class GetClaimsByHashDTO {\n    @IsNumber()\n    @IsInt()\n    @Min(0)\n    page: number;\n\n    @IsNumber()\n    @Min(0)\n    pageSize: number;\n\n    @IsString()\n    order: string;\n\n    @IsString()\n    @IsAlpha()\n    language: string;\n\n    @IsOptional()\n    @IsArray()\n    reviews?: string[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetClaimsDTO.html":{"url":"classes/GetClaimsDTO.html","title":"class - GetClaimsDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetClaimsDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim/dto/get-claims.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                language\n                            \n                            \n                                order\n                            \n                            \n                                page\n                            \n                            \n                                pageSize\n                            \n                            \n                                personality\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsAlpha()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/get-claims.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/get-claims.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsInt()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/get-claims.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pageSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/get-claims.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        personality\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/get-claims.dto.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsAlpha, IsInt, IsNumber, IsString, Min } from 'class-validator';\nexport class GetClaimsDTO {\n    @IsNumber()\n    @IsInt()\n    @Min(0)\n    page: number;\n\n    @IsNumber()\n    @Min(0)\n    pageSize: number;\n\n    @IsString()\n    order: string;\n\n    @IsString()\n    @IsAlpha()\n    language: string;\n\n    @IsString()\n    personality: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GetLanguageMiddleware.html":{"url":"injectables/GetLanguageMiddleware.html","title":"injectable - GetLanguageMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GetLanguageMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/middleware/language.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in server/middleware/language.middleware.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\n@Injectable()\nexport class GetLanguageMiddleware implements NestMiddleware {\n    use(req: Request & { language: string }, res: Response, next: NextFunction) {\n        req.language = req.headers[\"accept-language\"] || \"en\";\n        next();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPersonalities.html":{"url":"classes/GetPersonalities.html","title":"class - GetPersonalities","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPersonalities\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/personality/dto/get-personalities.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                language\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                order\n                            \n                            \n                                page\n                            \n                            \n                                pageSize\n                            \n                            \n                                    Optional\n                                withSuggestions\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsAlpha()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/get-personalities.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/get-personalities.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/get-personalities.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsInt()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/get-personalities.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pageSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/get-personalities.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        withSuggestions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/get-personalities.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsAlpha, IsBoolean, IsInt, IsNumber, IsOptional, IsString, Min } from 'class-validator';\nexport class GetPersonalities {\n    @IsNumber()\n    @IsInt()\n    @Min(0)\n    page: number;\n\n    @IsNumber()\n    @Min(0)\n    pageSize: number;\n\n    @IsString()\n    order: string;\n\n    @IsString()\n    @IsAlpha()\n    language: string;\n\n    @IsBoolean()\n    @IsOptional()\n    withSuggestions?: boolean;\n\n    @IsString()\n    @IsOptional()\n    name?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/History.html":{"url":"classes/History.html","title":"class - History","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  History\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/history/schema/history.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                date\n                            \n                            \n                                details\n                            \n                            \n                                targetId\n                            \n                            \n                                targetModel\n                            \n                            \n                                type\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Date, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/history/schema/history.schema.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        details\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/history/schema/history.schema.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        targetId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, refPath: 'onModel'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/history/schema/history.schema.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        targetModel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TargetModel\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/history/schema/history.schema.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HistoryType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/history/schema/history.schema.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/history/schema/history.schema.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport * as mongoose from \"mongoose\";\nimport { User } from \"../../users/schemas/user.schema\";\n\nexport type HistoryDocument = History & mongoose.Document;\n\nexport enum TargetModel { \n  Claim = 'Claim',\n  Personality = 'Personality',\n  ClaimReview = 'ClaimReview'\n}\n\nexport enum HistoryType { \n  Create = 'create',\n  Update = 'update',\n  Delete = 'delete'\n}\n@Schema({ toObject: {virtuals: true}, toJSON: {virtuals: true} })\nexport class History {\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        refPath: \"onModel\",\n    })\n    targetId: mongoose.Types.ObjectId;\n\n    @Prop({\n        required: true,\n    })\n    targetModel: TargetModel;\n\n    @Prop({\n      type: mongoose.Types.ObjectId,\n      required: true,\n      ref: \"User\",\n    })\n    user: User;\n        \n    @Prop({\n      required: true,\n    })\n    type: HistoryType //TODO: Validate if details field(after, before) it's optional or required based on type\n\n    @Prop({\n      type: Object,\n      required: true,\n    })\n    details: object\n\n    @Prop({\n      type: Date,\n      required: true,\n    })\n    date: mongoose.Date\n}\n\nexport const HistorySchema = SchemaFactory.createForClass(History);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HistoryController.html":{"url":"controllers/HistoryController.html","title":"controller - HistoryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HistoryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/history/history.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getHistory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getHistory\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHistory(param, getHistory: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('api/history/:targetModel/:targetId')\n                \n            \n\n            \n                \n                    Defined in server/history/history.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    param\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    getHistory\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    Logger,\n    Param,\n    Query,\n} from \"@nestjs/common\";\nimport { HistoryService } from \"./history.service\";\n\n@Controller()\nexport class HistoryController {\n    private readonly logger = new Logger(\"HistoryController\");\n    constructor(\n        private historyService: HistoryService\n    ) {}\n\n    @Get(\"api/history/:targetModel/:targetId\")\n    public async getHistory(@Param() param, @Query() getHistory: any) {\n        const { targetId, targetModel } = param;\n        const { page, order } = getHistory;\n        const pageSize = parseInt(getHistory.pageSize, 10);\n        return this.historyService\n            .getByTargetIdAndModel(targetId, targetModel, page, pageSize, order)\n            .then((history) => {\n                const totalChanges = history.length;\n                const totalPages = Math.ceil(totalChanges / pageSize);\n                this.logger.log(\n                    `Found ${totalChanges} changes for targetId ${targetId}. Page ${page} of ${totalPages}`\n                );\n                return { history, totalChanges, totalPages, page, pageSize };\n            })\n            .catch();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HistoryModule.html":{"url":"modules/HistoryModule.html","title":"module - HistoryModule","body":"\n                   \n\n\n\n\n    Modules\n    HistoryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HistoryModule\n\n\n\ncluster_HistoryModule_providers\n\n\n\ncluster_HistoryModule_exports\n\n\n\n\nHistoryService \n\nHistoryService \n\n\n\nHistoryModule\n\nHistoryModule\n\nHistoryService  -->\n\nHistoryModule->HistoryService \n\n\n\n\n\nHistoryService\n\nHistoryService\n\nHistoryModule -->\n\nHistoryService->HistoryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/history/history.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HistoryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            HistoryController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HistoryService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { HistorySchema } from \"./schema/history.schema\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { HistoryService } from \"./history.service\";\nimport { HistoryController } from \"./history.controller\";\n\nconst HistoryModel = MongooseModule.forFeature([\n    {\n        name: \"HISTORY_MODEL\",\n        schema: HistorySchema,\n    },\n]);\n\n@Module({\n    imports: [\n        HistoryModel,\n        ConfigModule\n    ],\n    exports: [HistoryService],\n    providers: [HistoryService],\n    controllers:[HistoryController]\n})\n\nexport class HistoryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HistoryService.html":{"url":"injectables/HistoryService.html","title":"injectable - HistoryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HistoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/history/history.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                optionsToUpdate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createHistory\n                            \n                            \n                                    Async\n                                getByTargetIdAndModel\n                            \n                            \n                                getHistoryParams\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(HistoryModel: Model)\n                    \n                \n                        \n                            \n                                Defined in server/history/history.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        HistoryModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createHistory\n                        \n                    \n                \n            \n            \n                \n                    \n                    createHistory(data)\n                \n            \n\n\n            \n                \n                    Defined in server/history/history.service.ts:58\n                \n            \n\n\n            \n                \n                    This function create a new history document to database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object with the history data\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        Returns a new history document to database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByTargetIdAndModel\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByTargetIdAndModel(targetId, targetModel, page, pageSize, order: string)\n                \n            \n\n\n            \n                \n                    Defined in server/history/history.service.ts:73\n                \n            \n\n\n            \n                \n                    This function queries the database for the history of changes on a target.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    targetId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The id of the target.\n\n                                    \n                                \n                                \n                                    targetModel\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The model of the target (claim or personality).\n\n                                    \n                                \n                                \n                                    page\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The page of results, used in combination with pageSize to paginate results.\n\n                                    \n                                \n                                \n                                    pageSize\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        How many results per page.\n\n                                    \n                                \n                                \n                                    order\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"asc\"\n                                    \n\n                                    \n                                        asc or desc.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        The paginated history of a target.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHistoryParams\n                        \n                    \n                \n            \n            \n                \ngetHistoryParams(dataId, targetModel, user, type, latestChange, previousChange: null)\n                \n            \n\n\n            \n                \n                    Defined in server/history/history.service.ts:31\n                \n            \n\n\n            \n                \n                    This function return an history object.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Target Id.\n\n                                    \n                                \n                                \n                                    targetModel\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The model of the target(claim or personality ).\n\n                                    \n                                \n                                \n                                    user\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        User who made the change.\n\n                                    \n                                \n                                \n                                    type\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Type of the change(create, personality or delete).\n\n                                    \n                                \n                                \n                                    latestChange\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Model latest change .\n\n                                    \n                                \n                                \n                                    previousChange\n                                    \n                                            null\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        null\n                                    \n\n                                    \n                                        Model previous change.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { targetId: any; targetModel: any; user: any; type: any; details: { after: any; before: any; }; date: any; }\n\n                    \n                    \n                        Returns an object with de params necessary to create an history.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"HistoryService\")\n                    \n                \n                    \n                        \n                                Defined in server/history/history.service.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        optionsToUpdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in server/history/history.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {Injectable, Logger} from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport { Model, Types } from \"mongoose\";\nimport { HistoryDocument } from \"./schema/history.schema\";\n\n@Injectable()\nexport class HistoryService {\n    private optionsToUpdate: { new: boolean; upsert: boolean };\n    private readonly logger = new Logger(\"HistoryService\");\n\n    constructor(\n        @InjectModel('HISTORY_MODEL')\n        private HistoryModel: Model,\n    ) {\n        this.optionsToUpdate = {\n            new: true,\n            upsert: true,\n        };\n    }\n\n    /**\n     * This function return an history object.\n     * @param dataId Target Id.\n     * @param targetModel The model of the target(claim or personality ).\n     * @param user User who made the change.\n     * @param type Type of the change(create, personality or delete).\n     * @param latestChange Model latest change .\n     * @param previousChange Model previous change.\n     * @returns Returns an object with de params necessary to create an history.\n     */\n    getHistoryParams(\n        dataId,\n        targetModel,\n        user,\n        type,\n        latestChange,\n        previousChange = null\n    ) {\n        const date = new Date()\n        return {\n            targetId: Types.ObjectId(dataId),\n            targetModel,\n            user: user?._id,\n            type,\n            details: {\n                after: latestChange,\n                before: previousChange\n            },\n            date,\n        }\n    }\n\n    /**\n     * This function create a new history document to database\n     * @param data Object with the history data\n     * @returns Returns a new history document to database\n     */\n    async createHistory(data) {\n        const newHistory = new this.HistoryModel(data);\n        return newHistory.save();\n    }\n\n\n    /**\n     * This function queries the database for the history of changes on a target.\n     * @param targetId The id of the target.\n     * @param targetModel The model of the target (claim or personality).\n     * @param page The page of results, used in combination with pageSize to paginate results.\n     * @param pageSize How many results per page.\n     * @param order asc or desc.\n     * @returns The paginated history of a target.\n     */\n    async getByTargetIdAndModel(targetId, targetModel, page, pageSize, order = \"asc\") {\n        return this.HistoryModel.find({\n            targetId: Types.ObjectId(targetId),\n            targetModel,\n        })\n        .populate(\"user\", \"_id name\")\n        .skip(page * pageSize)\n        .limit(pageSize)\n        .sort({ date: order });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HomeController.html":{"url":"controllers/HomeController.html","title":"controller - HomeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HomeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/home/home.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                showHome\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        showHome\n                        \n                    \n                \n            \n            \n                \n                    \n                    showHome(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('home')\n                \n            \n\n            \n                \n                    Defined in server/home/home.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Req, Res } from \"@nestjs/common\";\nimport { ViewService } from \"../view/view.service\";\nimport { Request, Response } from \"express\";\nimport { parse } from \"url\";\nimport { PersonalityService } from \"../personality/personality.service\";\nimport { StatsService } from \"../stats/stats.service\";\nimport { IsPublic } from \"../decorators/is-public.decorator\";\n\n@Controller(\"/\")\nexport class HomeController {\n    constructor(\n        private viewService: ViewService,\n        private personalityService: PersonalityService,\n        private statsService: StatsService\n    ) {}\n\n    @IsPublic()\n    @Get(\"home\")\n    public async showHome(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n        const { personalities } = await this.personalityService.combinedListAll({\n            // @ts-ignore\n            language: req.language,\n            order: 'random',\n            pageSize: 5,\n            fetchOnly: true\n        });\n        const stats = await this.statsService.getHomeStats();\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/home-page\",\n                Object.assign(parsedUrl.query, { personalities, stats })\n            );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HomeModule.html":{"url":"modules/HomeModule.html","title":"module - HomeModule","body":"\n                   \n\n\n\n\n    Modules\n    HomeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HomeModule\n\n\n\ncluster_HomeModule_imports\n\n\n\n\nPersonalityModule\n\nPersonalityModule\n\n\n\nHomeModule\n\nHomeModule\n\nHomeModule -->\n\nPersonalityModule->HomeModule\n\n\n\n\n\nStatsModule\n\nStatsModule\n\nHomeModule -->\n\nStatsModule->HomeModule\n\n\n\n\n\nViewModule\n\nViewModule\n\nHomeModule -->\n\nViewModule->HomeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/home/home.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HomeController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PersonalityModule\n                        \n                        \n                            StatsModule\n                        \n                        \n                            ViewModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { HomeController } from \"./home.controller\";\nimport {PersonalityModule} from \"../personality/personality.module\";\nimport {StatsModule} from \"../stats/stats.module\";\nimport {ViewModule} from \"../view/view.module\";\n\n@Module({\n    imports: [PersonalityModule, StatsModule, ViewModule],\n    providers: [],\n    controllers: [HomeController],\n})\nexport class HomeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JsonBodyMiddleware.html":{"url":"injectables/JsonBodyMiddleware.html","title":"injectable - JsonBodyMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JsonBodyMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/middleware/json-body.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: () => void)\n                \n            \n\n\n            \n                \n                    Defined in server/middleware/json-body.middleware.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Request, Response} from 'express';\nimport * as bodyParser from 'body-parser';\nimport {Injectable, NestMiddleware} from '@nestjs/common';\n\n@Injectable()\nexport class JsonBodyMiddleware implements NestMiddleware {\n    use(req: Request, res: Response, next: () => any) {\n        if (!req['disableBodyParser']) {\n            bodyParser.json()(req, res, next);\n        } else {\n            next()\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/auth/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard(\"local\") {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalSerializer.html":{"url":"injectables/LocalSerializer.html","title":"injectable - LocalSerializer","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalSerializer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/auth/local.serializer.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in server/auth/local.serializer.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Model } from \"mongoose\";\nimport * as passport from \"passport\";\nimport { User, UserDocument } from \"../users/schemas/user.schema\";\nimport { InjectModel } from \"@nestjs/mongoose\";\n\n@Injectable()\nexport class LocalSerializer {\n    constructor(\n        @InjectModel(User.name) private userModel: Model\n    ) {\n        // @ts-ignore\n        passport.serializeUser(this.userModel.serializeUser());\n        // @ts-ignore\n        passport.deserializeUser(this.userModel.deserializeUser());\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/auth/local.strategy.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in server/auth/local.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import { Strategy } from \"passport-local\";\nimport { Model } from \"mongoose\";\nimport { Injectable } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { User, UserDocument } from \"../users/schemas/user.schema\";\nimport { InjectModel } from \"@nestjs/mongoose\";\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n    constructor(\n        @InjectModel(User.name) private userModel: Model\n    ) {\n        // @ts-ignore\n        super({ usernameField: \"email\" }, userModel.authenticate());\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Logger.html":{"url":"classes/Logger.html","title":"class - Logger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Logger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/logger.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            LoggerService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                log\n                            \n                            \n                                verbose\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger)\n                    \n                \n                        \n                            \n                                Defined in server/logger.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in server/logger.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(message: any, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in server/logger.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: any, trace?: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in server/logger.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    trace\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(message)\n                \n            \n\n\n            \n                \n                    Defined in server/logger.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verbose\n                        \n                    \n                \n            \n            \n                \nverbose(message: any, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in server/logger.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(message: any, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in server/logger.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { LoggerService } from \"@nestjs/common\";\n\nexport default class Logger implements LoggerService {\n    private logger: any;\n    constructor(logger) {\n        this.logger = logger;\n    }\n\n    log(message) {\n        this.logger.log(\"info\", message);\n    }\n\n    debug(message: any, context?: string): any {\n        this.logger.log(\"debug\", message);\n    }\n\n    error(message: any, trace?: string, context?: string): any {\n        this.logger.log(\"error\", message + trace);\n    }\n\n    verbose(message: any, context?: string): any {\n        this.logger.log(\"verbose\", message);\n    }\n\n    warn(message: any, context?: string): any {\n        this.logger.log(\"warn\", message);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerMiddleware.html":{"url":"injectables/LoggerMiddleware.html","title":"injectable - LoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/middleware/logger.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(request: Request, response: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in server/middleware/logger.middleware.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('HTTP')\n                    \n                \n                    \n                        \n                                Defined in server/middleware/logger.middleware.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\n\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n  private logger = new Logger('HTTP');\n\n  use(request: Request, response: Response, next: NextFunction): void {\n    const { ip, method, originalUrl } = request;\n    const userAgent = request.get('user-agent') || '';\n\n    response.on('finish', () => {\n      const { statusCode } = response;\n      const contentLength = response.get('content-length');\n\n      this.logger.log(\n        `${method} ${originalUrl} ${statusCode} ${contentLength} - ${userAgent} ${ip}`,\n      );\n    });\n\n    next();\n  }\n} \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotFoundFilter.html":{"url":"classes/NotFoundFilter.html","title":"class - NotFoundFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotFoundFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/filters/not-found.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                Filters out not found exceptions and redirect to our custom 404 page, avoiding the default json error message\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: NotFoundException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in server/filters/not-found.filter.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            NotFoundException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, ExceptionFilter, NotFoundException } from '@nestjs/common'\nimport { Response } from 'express';\n\n/**\n * Filters out not found exceptions and redirect to our custom 404 page, avoiding the default json error message\n */\n@Catch(NotFoundException)\nexport class NotFoundFilter implements ExceptionFilter {\n  catch(exception: NotFoundException, host: ArgumentsHost) {\n    const context = host.switchToHttp();\n    const response = context.getResponse();\n\n    response.redirect('/404')\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OryController.html":{"url":"controllers/OryController.html","title":"controller - OryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/ory/ory.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getOryPaths\n                            \n                            \n                                    Private\n                                    Async\n                                oryPaths\n                            \n                            \n                                    Public\n                                    Async\n                                postOryPaths\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getOryPaths\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOryPaths(req: NextApiRequest, res: NextApiResponse)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('api/.ory/*')\n                \n            \n\n            \n                \n                    Defined in server/ory/ory.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            NextApiRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            NextApiResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        oryPaths\n                        \n                    \n                \n            \n            \n                \n                    \n                    oryPaths(req: NextApiRequest, res: NextApiResponse)\n                \n            \n\n\n            \n                \n                    Defined in server/ory/ory.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            NextApiRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            NextApiResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        postOryPaths\n                        \n                    \n                \n            \n            \n                \n                    \n                    postOryPaths(req: NextApiRequest, res: NextApiResponse)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Post('api/.ory/*')\n                \n            \n\n            \n                \n                    Defined in server/ory/ory.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            NextApiRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            NextApiResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get, Post,\n    Req,\n    Res,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { NextApiRequest, NextApiResponse } from 'next'\nimport { parse } from \"url\";\nimport { ViewService } from \"../view/view.service\";\nimport OryService from \"./ory.service\";\nimport { IsPublic } from \"../decorators/is-public.decorator\";\n\n@Controller()\nexport default class OryController {\n    constructor(\n        private configService: ConfigService,\n        private viewService: ViewService,\n        private oryService: OryService\n    ) {}\n\n    @IsPublic()\n    @Get(\"api/.ory/*\")\n    public async getOryPaths(@Req() req: NextApiRequest, @Res() res: NextApiResponse) {\n        await this.oryPaths(req, res)\n    }\n\n    @IsPublic()\n    @Post(\"api/.ory/*\")\n    public async postOryPaths(@Req() req: NextApiRequest, @Res() res: NextApiResponse) {\n        await this.oryPaths(req, res)\n    }\n\n    private async oryPaths(@Req() req: NextApiRequest, @Res() res: NextApiResponse) {\n        const parsedUrl = parse(req.url, true);\n        await this.viewService\n            .getNextServer()\n            .getRequestHandler()(\n                req,\n                res,\n                parsedUrl,\n            )\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OryModule.html":{"url":"modules/OryModule.html","title":"module - OryModule","body":"\n                   \n\n\n\n\n    Modules\n    OryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_OryModule\n\n\n\ncluster_OryModule_exports\n\n\n\ncluster_OryModule_imports\n\n\n\ncluster_OryModule_providers\n\n\n\n\nViewModule\n\nViewModule\n\n\n\nOryModule\n\nOryModule\n\nOryModule -->\n\nViewModule->OryModule\n\n\n\n\n\nOryService \n\nOryService \n\nOryService  -->\n\nOryModule->OryService \n\n\n\n\n\nOryService\n\nOryService\n\nOryModule -->\n\nOryService->OryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/ory/ory.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            OryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            OryController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ViewModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            OryService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport OryController from \"./ory.controller\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { ViewModule } from \"../view/view.module\";\nimport OryService from \"./ory.service\";\n\n@Module({\n    imports: [ViewModule],\n    controllers: [OryController],\n    providers: [OryService, ConfigService],\n    exports: [OryService],\n})\nexport default class OryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OryService.html":{"url":"injectables/OryService.html","title":"injectable - OryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/ory/ory.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                adminEndpoint\n                            \n                            \n                                    Readonly\n                                ory\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createIdentity\n                            \n                            \n                                deleteIdentity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in server/ory/ory.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createIdentity\n                        \n                    \n                \n            \n            \n                \ncreateIdentity(user, password)\n                \n            \n\n\n            \n                \n                    Defined in server/ory/ory.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteIdentity\n                        \n                    \n                \n            \n            \n                \ndeleteIdentity(identityId)\n                \n            \n\n\n            \n                \n                    Defined in server/ory/ory.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    identityId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        adminEndpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"api/kratos/admin\"\n                    \n                \n                    \n                        \n                                Defined in server/ory/ory.service.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        ory\n                        \n                    \n                \n            \n                \n                    \n                        Type :     V0alpha2ApiInterface\n\n                    \n                \n                    \n                        \n                                Defined in server/ory/ory.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport axios from \"axios\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { Configuration, V0alpha2Api, V0alpha2ApiInterface } from \"@ory/client\";\n\n@Injectable()\nexport default class OryService {\n    private readonly adminEndpoint: string = \"api/kratos/admin\";\n    readonly ory: V0alpha2ApiInterface;\n\n    constructor(private configService: ConfigService) {\n        const { access_token: accessToken, url } =\n            this.configService.get(\"ory\");\n        this.ory = new V0alpha2Api(\n            new Configuration({\n                basePath: url,\n                accessToken,\n                baseOptions: {\n                    // Ensures that cookies are included in CORS requests:\n                    withCredentials: true,\n                },\n            })\n        );\n    }\n\n    createIdentity(user, password): Promise {\n        const { access_token: token, url, schema_id } = this.configService.get(\"ory\");\n        return axios({\n            method: \"post\",\n            url: `${url}/${this.adminEndpoint}/identities`,\n            data: {\n                schema_id,\n                traits: { email: user.email, user_id: user._id },\n                credentials: {\n                    password: {\n                        config: { password },\n                    },\n                },\n            },\n            headers: { Authorization: `Bearer ${token}` },\n        });\n    }\n\n    deleteIdentity(identityId): Promise {\n        const { access_token: token, url } = this.configService.get(\"ory\");\n        return axios({\n            method: \"delete\",\n            url: `${url}/${this.adminEndpoint}/identities/${identityId}`,\n            headers: { Authorization: `Bearer ${token}` },\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ParserModule.html":{"url":"modules/ParserModule.html","title":"module - ParserModule","body":"\n                   \n\n\n\n\n    Modules\n    ParserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ParserModule\n\n\n\ncluster_ParserModule_exports\n\n\n\ncluster_ParserModule_providers\n\n\n\n\nParserService \n\nParserService \n\n\n\nParserModule\n\nParserModule\n\nParserService  -->\n\nParserModule->ParserService \n\n\n\n\n\nParserService\n\nParserService\n\nParserModule -->\n\nParserService->ParserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/parser/parser.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ParserService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ParserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ParserService } from \"./parser.service\";\nimport { Module } from \"@nestjs/common\";\n\n@Module({\n    exports: [ParserService],\n    providers: [ParserService],\n})\nexport class ParserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParserService.html":{"url":"injectables/ParserService.html","title":"injectable - ParserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/parser/parser.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                nlpOptions\n                            \n                            \n                                paragraphSequence\n                            \n                            \n                                sentenceSequence\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createParagraphId\n                            \n                            \n                                createSentenceId\n                            \n                            \n                                parse\n                            \n                            \n                                parseSentence\n                            \n                            \n                                postProcessSentences\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createParagraphId\n                        \n                    \n                \n            \n            \n                \ncreateParagraphId()\n                \n            \n\n\n            \n                \n                    Defined in server/parser/parser.service.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createSentenceId\n                        \n                    \n                \n            \n            \n                \ncreateSentenceId()\n                \n            \n\n\n            \n                \n                    Defined in server/parser/parser.service.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parse\n                        \n                    \n                \n            \n            \n                \nparse(content: string)\n                \n            \n\n\n            \n                \n                    Defined in server/parser/parser.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { object: {}; text: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parseSentence\n                        \n                    \n                \n            \n            \n                \nparseSentence(sentenceContent)\n                \n            \n\n\n            \n                \n                    Defined in server/parser/parser.service.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentenceContent\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { type: string; props: { id: number; \"data-hash\": any; }; content: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postProcessSentences\n                        \n                    \n                \n            \n            \n                \npostProcessSentences(sentences)\n                \n            \n\n\n            \n                \n                    Defined in server/parser/parser.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentences\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        nlpOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : { trim:true }\n                    \n                \n                    \n                        \n                                Defined in server/parser/parser.service.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        paragraphSequence\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in server/parser/parser.service.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sentenceSequence\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in server/parser/parser.service.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nconst md5 = require(\"md5\");\nconst nlp = require('compromise')\nnlp.extend(require('compromise-sentences'))\nnlp.extend(require('compromise-paragraphs'))\n\n// TODO: regex for future rules\n// const alphabets = /([A-Za-z])/g;\nconst prefixes = /(Mr|St|Mrs|Ms|Dr)[.]/g;\nconst phdRegex = /Ph\\.D\\./g;\n// const suffixes = \"(Inc|Ltd|Jr|Sr|Co)\";\n// const starters = /(Mr|Mrs|Ms|Dr|He\\s|She\\s|It\\s|They\\s|Their\\s|Our\\s|We\\s|But\\s|However\\s|That\\s|This\\s|Wherever)/g;\n// const acronyms = /([A-Z][.][A-Z][.](?:[A-Z][.])?)/g;\n// const websites = /[.](com|net|org|io|gov)/g;\n\n@Injectable()\nexport class ParserService {\n    paragraphSequence: number;\n    sentenceSequence: number;\n    nlpOptions: object = { trim:true };\n\n    parse(content: string) {\n        this.paragraphSequence = 0;\n        this.sentenceSequence = 0;\n        const result = [];\n        const nlpContent = nlp(content);\n        const paragraphs = nlpContent.paragraphs();\n\n        paragraphs.forEach((paragraph) => {\n            const paragraphId = this.createParagraphId();\n            const sentences = this.postProcessSentences(paragraph.sentences());\n\n            if (sentences && sentences.length) {\n                result.push({\n                    type: \"paragraph\",\n                    props: {\n                        id: paragraphId,\n                    },\n                    content: sentences.map((sentence) => this.parseSentence(sentence)),\n                });\n            }\n        });\n\n        return {\n            object: result,\n            text: nlpContent.text(this.nlpOptions),\n        };\n    }\n\n    postProcessSentences(sentences) {\n        let newSentences = [];\n        sentences.forEach(sentence => {\n            const sentenceText = sentence.text(this.nlpOptions);\n            // Extract semicolon sentences\n            let semicolonSentences = sentenceText.split(\";\");\n            if (sentenceText.includes(\";\")) {\n                semicolonSentences = semicolonSentences.map(\n                    (semicolonSentence, index) => {\n                        return index !== (semicolonSentences.length - 1)\n                            ? `${semicolonSentence};`.trim()\n                            : semicolonSentence.trim();\n                    }\n                );\n            }\n            newSentences = newSentences.concat(semicolonSentences);\n        });\n        return newSentences;\n    }\n\n    parseSentence(sentenceContent) {\n        const sentenceId = this.createSentenceId();\n        const sentenceDataHash = md5(\n            `${this.paragraphSequence}${this.sentenceSequence}${sentenceContent}`\n        );\n\n        return {\n            type: \"sentence\",\n            props: {\n                id: sentenceId,\n                \"data-hash\": sentenceDataHash,\n            },\n            content: sentenceContent,\n        };\n    }\n\n    createParagraphId() {\n        this.paragraphSequence++;\n        return this.paragraphSequence;\n    }\n\n    createSentenceId() {\n        this.sentenceSequence++;\n        return this.sentenceSequence;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Personality.html":{"url":"classes/Personality.html","title":"class - Personality","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Personality\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/personality/schemas/personality.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                name\n                            \n                            \n                                slug\n                            \n                            \n                                wikidata\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/schemas/personality.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/schemas/personality.schema.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/schemas/personality.schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wikidata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true, sparse: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/schemas/personality.schema.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { softDeletePlugin } from 'mongoose-softdelete-typescript';\nimport * as mongoose from \"mongoose\";\n\nexport type PersonalityDocument = Personality & mongoose.Document;\n\n@Schema({ toJSON: { virtuals: true }, toObject: { virtuals: true } })\nexport class Personality {\n    @Prop({ required: true })\n    name: string;\n\n    @Prop({ required: true })\n    slug: string;\n\n    @Prop({ required: true })\n    description: string;\n\n    @Prop({ unique: true, sparse: true })\n    wikidata: string;\n}\n\n\nconst PersonalitySchemaRaw = SchemaFactory.createForClass(Personality);\n\nPersonalitySchemaRaw.virtual('claims', {\n    ref: 'Claim',\n    localField: '_id',\n    foreignField: 'personality'\n});\n\nPersonalitySchemaRaw.plugin(softDeletePlugin)\n\nexport const PersonalitySchema = PersonalitySchemaRaw;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PersonalityController.html":{"url":"controllers/PersonalityController.html","title":"controller - PersonalityController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PersonalityController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/personality/personality.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                getReviewStats\n                            \n                            \n                                    Async\n                                listAll\n                            \n                            \n                                    Public\n                                    Async\n                                personalityCreateSearch\n                            \n                            \n                                    Public\n                                    Async\n                                personalityHistoryPage\n                            \n                            \n                                    Public\n                                    Async\n                                personalityList\n                            \n                            \n                                    Public\n                                    Async\n                                personalityPage\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createPersonality: CreatePersonality)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('api/personality')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createPersonality\n                                    \n                                                CreatePersonality\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(personalityId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('api/personality/:id')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    personalityId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(personalityId, query)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('api/personality/:id')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    personalityId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getReviewStats\n                        \n                    \n                \n            \n            \n                \ngetReviewStats(personalityId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('api/personality/:id/reviews')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    personalityId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAll(getPersonalities: GetPersonalities)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('api/personality')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    getPersonalities\n                                    \n                                                GetPersonalities\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        personalityCreateSearch\n                        \n                    \n                \n            \n            \n                \n                    \n                    personalityCreateSearch(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('personality/search')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        personalityHistoryPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    personalityHistoryPage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('personality/:slug/history')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        personalityList\n                        \n                    \n                \n            \n            \n                \n                    \n                    personalityList(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('personality')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        personalityPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    personalityPage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('personality/:slug')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(personalityId, body)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('api/personality/:id')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    personalityId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Logger,\n    Param,\n    Post,\n    Put,\n    Query,\n    Req,\n    Res\n} from \"@nestjs/common\";\nimport { parse } from \"url\";\nimport { Request, Response } from \"express\";\nimport { ViewService } from \"../view/view.service\";\nimport { PersonalityService } from \"./personality.service\";\nimport { GetPersonalities } from \"./dto/get-personalities.dto\";\nimport { CreatePersonality } from \"./dto/create-personality.dto\";\nimport {IsPublic} from \"../decorators/is-public.decorator\";\n\n@Controller()\nexport class PersonalityController {\n    private readonly logger = new Logger(\"PersonalityController\");\n    constructor(\n        private personalityService: PersonalityService,\n        private viewService: ViewService\n    ) {}\n\n    @IsPublic()\n    @Get(\"api/personality\")\n    async listAll(@Query() getPersonalities: GetPersonalities) {\n        return this.personalityService.combinedListAll(getPersonalities);\n    }\n\n    @Post(\"api/personality\")\n    async create(@Body() createPersonality: CreatePersonality) {\n        try {\n            return this.personalityService.create(createPersonality);\n        } catch (error) {\n            if (\n                error.name === \"MongoError\" &&\n                error.keyPattern &&\n                error.keyPattern.wikidata\n            ) {\n                error.message = `Personality with wikidata id ${error.keyValue.wikidata} already exists`;\n            }\n            this.logger.error(error);\n        }\n    }\n\n    @IsPublic()\n    @Get(\"api/personality/:id\")\n    async get(@Param(\"id\") personalityId, @Query() query) {\n        return this.personalityService\n            .getById(personalityId, query.language) // TODO: get language from request object in the future\n            .catch((err) => {\n                this.logger.error(err);\n            });\n    }\n\n    @Put(\"api/personality/:id\")\n    async update(@Param(\"id\") personalityId, @Body() body) {\n        return this.personalityService.update(personalityId, body)\n    }\n\n    @Delete(\"api/personality/:id\")\n    async delete(@Param(\"id\") personalityId) {\n        try {\n            await this.personalityService.delete(personalityId);\n            return { message: \"Personality successfully deleted\" };\n        } catch (error) {\n            this.logger.error(error);\n        }\n    }\n\n    @IsPublic()\n    @Get(\"api/personality/:id/reviews\")\n    getReviewStats(@Param(\"id\") personalityId) {\n        return this.personalityService\n            .getReviewStats(personalityId)\n            .catch((err) => {\n                this.logger.error(err);\n            });\n    }\n\n    @Get(\"personality/search\")\n    public async personalityCreateSearch(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/personality-create-search\",\n                Object.assign(parsedUrl.query)\n            );\n    }\n\n    @IsPublic()\n    @Get(\"personality/:slug\")\n    public async personalityPage(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n\n        const personality = await this.personalityService.getBySlug(\n            req.params.slug,\n            // @ts-ignore\n            req.language\n        );\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/personality-page\",\n                Object.assign(parsedUrl.query, { personality })\n            );\n    }\n\n    @IsPublic()\n    @Get(\"personality\")\n    public async personalityList(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/personality-list\",\n                Object.assign(parsedUrl.query, {})\n            );\n    }\n\n    @Get(\"personality/:slug/history\")\n    public async personalityHistoryPage(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n\n        const personality = await this.personalityService.getBySlug(\n            req.params.slug\n        );\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/history-page\",\n                Object.assign(parsedUrl.query, { targetId: personality._id, targetModel: \"personality\" })\n            );\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PersonalityModule.html":{"url":"modules/PersonalityModule.html","title":"module - PersonalityModule","body":"\n                   \n\n\n\n\n    Modules\n    PersonalityModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PersonalityModule\n\n\n\ncluster_PersonalityModule_providers\n\n\n\ncluster_PersonalityModule_exports\n\n\n\ncluster_PersonalityModule_imports\n\n\n\n\nClaimReviewModule\n\nClaimReviewModule\n\n\n\nPersonalityModule\n\nPersonalityModule\n\nPersonalityModule -->\n\nClaimReviewModule->PersonalityModule\n\n\n\n\n\nClaimRevisionModule\n\nClaimRevisionModule\n\nPersonalityModule -->\n\nClaimRevisionModule->PersonalityModule\n\n\n\n\n\nHistoryModule\n\nHistoryModule\n\nPersonalityModule -->\n\nHistoryModule->PersonalityModule\n\n\n\n\n\nViewModule\n\nViewModule\n\nPersonalityModule -->\n\nViewModule->PersonalityModule\n\n\n\n\n\nWikidataModule\n\nWikidataModule\n\nPersonalityModule -->\n\nWikidataModule->PersonalityModule\n\n\n\n\n\nPersonalityService \n\nPersonalityService \n\nPersonalityService  -->\n\nPersonalityModule->PersonalityService \n\n\n\n\n\nPersonalityService\n\nPersonalityService\n\nPersonalityModule -->\n\nPersonalityService->PersonalityModule\n\n\n\n\n\nUtilService\n\nUtilService\n\nPersonalityModule -->\n\nUtilService->PersonalityModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/personality/personality.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PersonalityService\n                        \n                        \n                            UtilService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PersonalityController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClaimReviewModule\n                        \n                        \n                            ClaimRevisionModule\n                        \n                        \n                            HistoryModule\n                        \n                        \n                            ViewModule\n                        \n                        \n                            WikidataModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PersonalityService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PersonalityService } from \"./personality.service\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { Personality, PersonalitySchema } from \"./schemas/personality.schema\";\nimport { UtilService } from \"../util\";\nimport { WikidataModule } from \"../wikidata/wikidata.module\";\nimport { ClaimReviewModule } from \"../claim-review/claim-review.module\";\nimport { ClaimRevisionModule } from \"../claim-revision/claim-revision.module\";\nimport { HistoryModule } from \"../history/history.module\";\nimport { PersonalityController } from \"./personality.controller\";\nimport Logger from \"../logger\";\nimport { ViewModule } from \"../view/view.module\";\n\nconst PersonalityModel = MongooseModule.forFeature([\n    {\n        name: Personality.name,\n        schema: PersonalitySchema,\n    },\n]);\n\n@Module({\n    imports: [\n        PersonalityModel,\n        WikidataModule,\n        ClaimReviewModule,\n        ClaimRevisionModule,\n        HistoryModule,\n        ViewModule\n    ],\n    exports: [PersonalityService],\n    providers: [UtilService, PersonalityService, Logger],\n    controllers: [PersonalityController],\n})\nexport class PersonalityModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PersonalityService.html":{"url":"injectables/PersonalityService.html","title":"injectable - PersonalityService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PersonalityService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/personality/personality.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                    Readonly\n                                optionsToUpdate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                combinedListAll\n                            \n                            \n                                count\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                extractClaimWithTextSummary\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getBySlug\n                            \n                            \n                                getDeletedPersonalityByWikidata\n                            \n                            \n                                    Async\n                                getReviewStats\n                            \n                            \n                                    Async\n                                listAll\n                            \n                            \n                                    Async\n                                postProcess\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                verifyInputsQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(req: Request, PersonalityModel, claimReview: ClaimReviewService, history: HistoryService, wikidata: WikidataService, util: UtilService)\n                    \n                \n                        \n                            \n                                Defined in server/personality/personality.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        req\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        PersonalityModel\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        claimReview\n                                                  \n                                                        \n                                                                        ClaimReviewService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        history\n                                                  \n                                                        \n                                                                        HistoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        wikidata\n                                                  \n                                                        \n                                                                        WikidataService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        util\n                                                  \n                                                        \n                                                                        UtilService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        combinedListAll\n                        \n                    \n                \n            \n            \n                \ncombinedListAll(query)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:283\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        count\n                        \n                    \n                \n            \n            \n                \ncount(query: any)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:260\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(personality)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:82\n                \n            \n\n\n            \n                \n                    This function will create a new personality and save it to the dataBase.\nAlso creates a History Module that tracks creation of personalities.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    personality\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        PersonalityBody received of the client.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        Return a new personality.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(personalityId)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:245\n                \n            \n\n\n            \n                \n                    This function does a soft deletion, doesn't delete claim in DataBase,\nbut omit its in the front page\nAlso creates a History Module that tracks deletion of personalities.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    personalityId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Personality Id which wants to delete\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        Returns the personality with the param isDeleted equal to true\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        extractClaimWithTextSummary\n                        \n                    \n                \n            \n            \n                \nextractClaimWithTextSummary(claims: any)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:264\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claims\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(personalityId, language: string)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    personalityId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"en\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getBySlug\n                        \n                    \n                \n            \n            \n                \n                    \n                    getBySlug(personalitySlug, language: string)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    personalitySlug\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"en\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDeletedPersonalityByWikidata\n                        \n                    \n                \n            \n            \n                \ngetDeletedPersonalityByWikidata(wikidata)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    wikidata\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getReviewStats\n                        \n                    \n                \n            \n            \n                \n                    \n                    getReviewStats(id)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:185\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAll(page, pageSize, order, query, language, withSuggestions)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    page\n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    pageSize\n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    order\n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    language\n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    withSuggestions\n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postProcess\n                        \n                    \n                \n            \n            \n                \n                    \n                    postProcess(personality, language: string)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:160\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    personality\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"en\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(personalityId, newPersonalityBody)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:203\n                \n            \n\n\n            \n                \n                    This function overwrites personality data with the new data,\nkeeping data that has not changed.\nAlso creates a History Module that tracks updation of personalities.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    personalityId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Personality id which wants updated.\n\n                                    \n                                \n                                \n                                    newPersonalityBody\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        PersonalityBody received of the client.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        Return changed personality.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifyInputsQuery\n                        \n                    \n                \n            \n            \n                \nverifyInputsQuery(query)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:274\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"PersonalityService\")\n                    \n                \n                    \n                        \n                                Defined in server/personality/personality.service.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        optionsToUpdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n        new: true,\n        upsert: true,\n    }\n                    \n                \n                    \n                        \n                                Defined in server/personality/personality.service.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, Logger, Scope, NotFoundException } from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport { Model } from \"mongoose\";\nimport slugify from 'slugify'\nimport { Personality, PersonalityDocument } from \"./schemas/personality.schema\";\nimport { WikidataService } from \"../wikidata/wikidata.service\";\nimport { UtilService } from \"../util\";\nimport { ClaimReviewService } from \"../claim-review/claim-review.service\";\nimport { HistoryService } from \"../history/history.service\";\nimport { HistoryType, TargetModel } from \"../history/schema/history.schema\";\nimport { ISoftDeletedModel } from 'mongoose-softdelete-typescript';\nimport { REQUEST } from '@nestjs/core';\nimport { Request } from 'express';\n\n@Injectable({ scope: Scope.REQUEST })\nexport class PersonalityService {\n    private readonly logger = new Logger(\"PersonalityService\");\n    private readonly optionsToUpdate = {\n        new: true,\n        upsert: true,\n    };\n\n    constructor(\n        @Inject(REQUEST) private req: Request,\n        @InjectModel(Personality.name)\n        private PersonalityModel: ISoftDeletedModel & Model,\n        private claimReview: ClaimReviewService,\n        private history: HistoryService,\n        private wikidata: WikidataService,\n        private util: UtilService\n    ) {}\n    async listAll(\n        page,\n        pageSize,\n        order,\n        query,\n        language,\n        withSuggestions = false\n    ) {\n        let personalities;\n\n        if (order === 'random') {\n            // This line may cause a false positive in sonarCloud because if we remove the await, we cannot iterate through the results\n            personalities = await this.PersonalityModel.aggregate([\n                { $match: query },\n                { $sample: { size: pageSize } },\n            ])\n\n            \n        } else {\n            // This line may cause a false positive in sonarCloud because if we remove the await, we cannot iterate through the results\n            personalities = await this.PersonalityModel.find(query)\n                .skip(page * pageSize)\n                .limit(pageSize)\n                .sort({ _id: order })\n                .lean()\n        }\n\n        if (withSuggestions) {\n            const wbentities = await this.wikidata.queryWikibaseEntities(\n                query.name.$regex,\n                language\n            );\n            personalities = this.util.mergeObjectsInUnique(\n                [...wbentities, ...personalities],\n                \"wikidata\"\n            );\n        }\n        return Promise.all(\n            personalities.map(async (personality) => {\n                return await this.postProcess(personality, language);\n            })\n        );\n    }\n\n    /**\n     * This function will create a new personality and save it to the dataBase.\n     * Also creates a History Module that tracks creation of personalities.\n     * @param personality PersonalityBody received of the client.\n     * @returns Return a new personality.\n     */\n    async create(personality) {\n        try {\n            const personalityExists = \n                await this.getDeletedPersonalityByWikidata(personality.wikidata)\n\n            if(personalityExists) {\n                return personalityExists.restore()\n            } else {\n                personality.slug = slugify(personality.name, {\n                    lower: true,     // convert to lower case, defaults to `false`\n                    strict: true     // strip special characters except replacement, defaults to `false`\n                })\n                const newPersonality = new this.PersonalityModel(personality);\n                this.logger.log(\n                    `Attempting to create new personality with data ${personality}`\n                );\n    \n                const user = this.req.user\n    \n                const history = this.history.getHistoryParams(\n                    newPersonality._id,\n                    TargetModel.Personality,\n                    user,\n                    HistoryType.Create,\n                    personality\n                )\n    \n                this.history.createHistory(history)\n    \n                return newPersonality.save();\n            }\n        } catch (err) {}\n    }\n\n    getDeletedPersonalityByWikidata(wikidata) {\n        return this.PersonalityModel.findOne({\n            isDeleted: true,\n            wikidata\n        })\n    }\n\n    async getById(personalityId, language = \"en\") {\n        const personality = await this.PersonalityModel.findById(\n            personalityId\n        ).populate({\n            path: \"claims\",\n            select: \"_id title content\",\n        });\n        this.logger.log(`Found personality ${personality._id}`);\n        return await this.postProcess(personality.toObject(), language);\n    }\n\n    async getBySlug(personalitySlug, language = \"en\") {\n        try {\n             // This line may cause a false positive in sonarCloud because if we remove the await, we cannot iterate through the results\n            const personality: any = await this.PersonalityModel.findOne({\n                slug: personalitySlug\n            }).populate({\n                path: \"claims\",\n                populate: {\n                    path: \"latestRevision\",\n                    select: \"_id title content\"\n                },\n                select: \"_id\",\n            });\n            personality.claims = await Promise.all(personality.claims.map((claim) => {\n                return {\n                    ...claim.lastestRevision,\n                    ...claim\n                }\n            })) \n            this.logger.log(`Found personality ${personality._id}`);\n            return await this.postProcess(personality.toObject(), language);\n        } catch {\n            throw new NotFoundException()\n        }\n    }\n\n    async postProcess(personality, language: string = \"en\") {\n        if (personality) {\n            // TODO: allow wikdiata resolver to fetch in batches\n            const wikidataExtract = await this.wikidata.fetchProperties({\n                wikidataId: personality.wikidata,\n                language,\n            });\n            // bail out if wikidata property is not allowed\n            if (wikidataExtract.isAllowedProp === false) {\n                return;\n            }\n            return Object.assign(\n                wikidataExtract,\n                personality, {\n                stats:\n                    personality._id &&\n                    (await this.getReviewStats(personality._id)),\n                claims:\n                    personality.claims &&\n                    this.extractClaimWithTextSummary(personality.claims),\n            });\n        }\n        return personality;\n    }\n\n    async getReviewStats(id) {\n        const personality = await this.PersonalityModel.findById(id);\n        const reviews = await this.claimReview.agreggateClassification({\n            personality: personality._id,\n            isDeleted: false,\n        });\n        this.logger.log(`Got stats ${reviews}`);\n        return this.util.formatStats(reviews, true);\n    }\n\n    /**\n     * This function overwrites personality data with the new data,\n     * keeping data that has not changed.\n     * Also creates a History Module that tracks updation of personalities.\n     * @param personalityId Personality id which wants updated.\n     * @param newPersonalityBody PersonalityBody received of the client.\n     * @returns Return changed personality.\n     */\n    async update(personalityId, newPersonalityBody) {\n        // eslint-disable-next-line no-useless-catch\n        if(newPersonalityBody.name) {\n            newPersonalityBody.slug = slugify(newPersonalityBody.name, {\n                lower: true,\n                strict: true\n            })\n        }\n        const personality = await this.getById(personalityId);\n        const previousPersonality = {...personality}\n        const newPersonality = Object.assign(personality, newPersonalityBody);\n        const personalityUpdate =\n            await this.PersonalityModel.findByIdAndUpdate(\n                personalityId,\n                newPersonality,\n                this.optionsToUpdate\n            );\n        this.logger.log(`Updated personality with data ${newPersonality}`);\n\n        const user = this.req.user;\n\n        const history =\n            this.history.getHistoryParams(\n                personalityId,\n                TargetModel.Personality,\n                user,\n                HistoryType.Update,\n                personalityUpdate,\n                previousPersonality\n            )\n        await this.history.createHistory(history)\n        \n        return personalityUpdate;\n    }\n\n    /**\n     * This function does a soft deletion, doesn't delete claim in DataBase,\n     * but omit its in the front page\n     * Also creates a History Module that tracks deletion of personalities.\n     * @param personalityId Personality Id which wants to delete\n     * @returns Returns the personality with the param isDeleted equal to true\n     */\n    async delete(personalityId) {\n        const user = this.req.user\n        const previousPersonality = await this.getById(personalityId)\n        const history = this.history.getHistoryParams(\n            personalityId,\n            TargetModel.Personality,\n            user,\n            HistoryType.Delete,\n            null,\n            previousPersonality\n        )\n        await this.history.createHistory(history)\n        return this.PersonalityModel.softDelete({ _id: personalityId });\n    }\n\n    count(query: any = {}) {\n        return this.PersonalityModel.countDocuments().where(query);\n    }\n\n    extractClaimWithTextSummary(claims: any) {\n        claims = Array.isArray(claims) ? claims : [claims];\n        return claims.map((claim) => {\n            if (!claim.content) {\n                return claim;\n            }\n            return { ...claim, content: claim.content.text };\n        });\n    }\n\n    verifyInputsQuery(query) {\n        const queryInputs = {};\n        if (query.name) {\n            // @ts-ignore\n            queryInputs.name = { $regex: query.name, $options: \"i\" };\n        }\n        return queryInputs;\n    }\n\n    combinedListAll(query) : any {\n        const { page = 0, pageSize = 10, order = \"asc\" } = query;\n        const queryInputs = this.verifyInputsQuery(query);\n\n        return Promise.all([\n            this.listAll(\n                page,\n                parseInt(pageSize, 10),\n                order,\n                queryInputs,\n                query.language,\n                query.withSuggestions\n            ),\n            this.count(queryInputs),\n        ])\n            .then(([personalities, totalPersonalities]) => {\n                const totalPages = Math.ceil(\n                    totalPersonalities / parseInt(pageSize, 10)\n                );\n\n                this.logger.log(\n                    `Found ${totalPersonalities} personalities. Page ${page} of ${totalPages}`\n                );\n\n                return {\n                    personalities,\n                    totalPersonalities,\n                    totalPages,\n                    page,\n                    pageSize,\n                };\n            })\n            .catch((error) => this.logger.error(error));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RootController.html":{"url":"controllers/RootController.html","title":"controller - RootController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RootController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/root/root.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                health\n                            \n                            \n                                robots\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        health\n                        \n                    \n                \n            \n            \n                \nhealth()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('health')\n                \n            \n\n            \n                \n                    Defined in server/root/root.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { status: string; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        robots\n                        \n                    \n                \n            \n            \n                \nrobots(res, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('robots.txt')\n                \n            \n\n            \n                \n                    Defined in server/root/root.controller.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Req, Res } from \"@nestjs/common\";\nimport { IsPublic } from \"../decorators/is-public.decorator\";\n\n@Controller(\"api\")\nexport class RootController {\n    @IsPublic()\n    @Get(\"robots.txt\")\n    robots(@Res() res, @Req() req) {\n        const host = req.protocol + \"://\" + req.get(\"host\");\n        res.type(\"text/plain\").end(\n            `User-agent: *\\nDisallow: /api\\nSitemap: ${host}/sitemap.xml`\n        );\n    }\n\n    @IsPublic()\n    @Get(\"health\")\n    health() {\n        return { status: \"ok\" };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/SessionGuard.html":{"url":"guards/SessionGuard.html","title":"guard - SessionGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    SessionGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                server/auth/session.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                next\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in server/auth/session.guard.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in server/auth/session.guard.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        next\n                        \n                    \n                \n            \n            \n                \nnext(request, response, isPublic)\n                \n            \n\n\n            \n                \n                    Defined in server/auth/session.guard.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    isPublic\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n    CanActivate,\n    ExecutionContext, Injectable,\n} from \"@nestjs/common\";\nimport { Configuration, V0alpha2Api } from '@ory/client';\nimport { Reflector } from \"@nestjs/core\";\nimport {ConfigService} from \"@nestjs/config\";\n\n@Injectable()\nexport class SessionGuard implements CanActivate {\n    constructor(\n        private configService: ConfigService,\n        private readonly reflector: Reflector\n    ) {}\n\n    // @ts-ignore\n    async canActivate(context: ExecutionContext): Promise> {\n        const isPublic = this.reflector.get('public', context.getHandler());\n\n        const httpContext = context.switchToHttp();\n        const request = httpContext.getRequest();\n        const response = httpContext.getResponse();\n        const type = this.configService.get('authentication_type')\n\n        try {\n            if (type === 'ory') {\n                const ory = new V0alpha2Api(\n                    new Configuration({\n                        basePath: this.configService.get('ory.url'),\n                        accessToken: this.configService.get('access_token'),\n                    })\n                );\n                const { data: session } = await ory.toSession(undefined, request.header('Cookie'))\n                request.user = { _id: session?.identity?.traits?.user_id };\n                return true\n            }\n            if ((type === 'passport') && request.isAuthenticated && request.isAuthenticated()) {\n                return true;\n            }\n            return this.next(request, response, isPublic);\n        } catch (e) {\n            // TODO: logging\n            return this.next(request, response, isPublic);\n        }\n    }\n\n    next(request, response, isPublic) {\n        if (isPublic) {\n            return true\n        }\n        if (request.url.startsWith(\"/api\")) {\n            return false;\n        } else {\n            response.redirect(\"/login\");\n        }\n    }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SitemapController.html":{"url":"controllers/SitemapController.html","title":"controller - SitemapController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SitemapController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/sitemap/sitemap.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getSitemap\n                            \n                            \n                                    Async\n                                submitSitemap\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSitemap\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSitemap(res, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('sitemap.xml')@Header('Content-Type', 'text/xml')\n                \n            \n\n            \n                \n                    Defined in server/sitemap/sitemap.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitSitemap\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitSitemap(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('submit-sitemap')\n                \n            \n\n            \n                \n                    Defined in server/sitemap/sitemap.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    Header,\n    Request,\n    Res,\n} from \"@nestjs/common\";\nimport { SitemapService } from \"./sitemap.service\";\nimport {IsPublic} from \"../decorators/is-public.decorator\";\n\n@Controller(\"/\")\nexport class SitemapController {\n    constructor(private sitemapService: SitemapService) {}\n\n    @IsPublic()\n    @Get(\"sitemap.xml\")\n    @Header(\"Content-Type\", \"text/xml\")\n    async getSitemap(@Res() res, @Request() req) {\n        const sitemapXml = await this.sitemapService.getSitemap(\n            req.protocol + \"://\" + req.get(\"host\")\n        );\n        res.send(sitemapXml);\n    }\n\n    @Get(\"submit-sitemap\")\n    async submitSitemap(@Request() req) {\n        return this.sitemapService.submitSitemap(\n            req.protocol + \"://\" + req.get(\"host\")\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SitemapModule.html":{"url":"modules/SitemapModule.html","title":"module - SitemapModule","body":"\n                   \n\n\n\n\n    Modules\n    SitemapModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SitemapModule\n\n\n\ncluster_SitemapModule_imports\n\n\n\ncluster_SitemapModule_exports\n\n\n\ncluster_SitemapModule_providers\n\n\n\n\nClaimModule\n\nClaimModule\n\n\n\nSitemapModule\n\nSitemapModule\n\nSitemapModule -->\n\nClaimModule->SitemapModule\n\n\n\n\n\nClaimReviewModule\n\nClaimReviewModule\n\nSitemapModule -->\n\nClaimReviewModule->SitemapModule\n\n\n\n\n\nPersonalityModule\n\nPersonalityModule\n\nSitemapModule -->\n\nPersonalityModule->SitemapModule\n\n\n\n\n\nSitemapService \n\nSitemapService \n\nSitemapService  -->\n\nSitemapModule->SitemapService \n\n\n\n\n\nSitemapService\n\nSitemapService\n\nSitemapModule -->\n\nSitemapService->SitemapModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/sitemap/sitemap.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SitemapService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SitemapController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClaimModule\n                        \n                        \n                            ClaimReviewModule\n                        \n                        \n                            PersonalityModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SitemapService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { SitemapController } from \"./sitemap.controller\";\nimport { PersonalityModule } from \"../personality/personality.module\";\nimport { ClaimModule } from \"../claim/claim.module\";\nimport { ClaimReviewModule } from \"../claim-review/claim-review.module\";\nimport { SitemapService } from \"./sitemap.service\";\n\n@Module({\n    imports: [PersonalityModule, ClaimModule, ClaimReviewModule],\n    controllers: [SitemapController],\n    providers: [SitemapService],\n    exports: [SitemapService],\n})\nexport class SitemapModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SitemapService.html":{"url":"injectables/SitemapService.html","title":"injectable - SitemapService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SitemapService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/sitemap/sitemap.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getSitemap\n                            \n                            \n                                    Async\n                                submitSitemap\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(personalityService: PersonalityService, claimService: ClaimService, claimReviewService: ClaimReviewService)\n                    \n                \n                        \n                            \n                                Defined in server/sitemap/sitemap.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        personalityService\n                                                  \n                                                        \n                                                                        PersonalityService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        claimService\n                                                  \n                                                        \n                                                                        ClaimService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        claimReviewService\n                                                  \n                                                        \n                                                                        ClaimReviewService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSitemap\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSitemap(hostname)\n                \n            \n\n\n            \n                \n                    Defined in server/sitemap/sitemap.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    hostname\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitSitemap\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitSitemap(hostname)\n                \n            \n\n\n            \n                \n                    Defined in server/sitemap/sitemap.service.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    hostname\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"SitemapService\")\n                    \n                \n                    \n                        \n                                Defined in server/sitemap/sitemap.service.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from \"@nestjs/common\";\nimport { SitemapStream, streamToPromise } from \"sitemap\";\nimport { PersonalityService } from \"../personality/personality.service\";\nimport { ClaimService } from \"../claim/claim.service\";\nimport { ClaimReviewService } from \"../claim-review/claim-review.service\";\nconst axios = require(\"axios\");\n\n@Injectable()\nexport class SitemapService {\n    constructor(\n        private personalityService: PersonalityService,\n        private claimService: ClaimService,\n        private claimReviewService: ClaimReviewService\n    ) {}\n    private readonly logger = new Logger(\"SitemapService\");\n\n    async getSitemap(hostname) {\n        const sites: any[] = [\n            { url: \"/\" },\n            { url: \"/home\" },\n            { url: \"/about\" },\n            { url: \"/privacy-policy\" },\n            { url: \"/code-of-conduct\" },\n            { url: \"/login\" },\n            { url: \"/profile\" },\n            { url: \"/personality\" },\n        ];\n\n        // TODO: Add a loop strategy that paginates the results to improve performance\n        const personalities: any[] = await this.personalityService.listAll(\n            0,\n            0,\n            \"asc\",\n            {},\n            \"pt\",\n            false\n        );\n\n        for (const personality of personalities) {\n            sites.push({ url: `/personality/${personality.slug}` });\n            const claims = await this.claimService.listAll(0, 0, \"asc\", {\n                personality: personality._id,\n            });\n\n            for (const claim of claims) {\n                sites.push({\n                    url: `/personality/${personality.slug}/claim/${claim.slug}`,\n                });\n                // This line may cause a false positive in sonarCloud because if we remove the await, we cannot iterate through the results\n                const reviews =\n                    await this.claimReviewService.getReviewsByClaimId(\n                        claim._id\n                    );\n                for (const review of reviews) {\n                    sites.push({\n                        url: `/personality/${personality.slug}/claim/${claim.slug}/sentence/${review._id}`,\n                        priority: 0.9,\n                    });\n                }\n            }\n        }\n        const sitemapStream = new SitemapStream({\n            hostname,\n        });\n        for (const site of sites) {\n            sitemapStream.write(site);\n        }\n        sitemapStream.end();\n\n        return streamToPromise(sitemapStream);\n    }\n\n    async submitSitemap(hostname) {\n        try {\n            await axios.get(\n                `https://google.com/ping?sitemap=${hostname}/sitemap.xml`\n            );\n            return \"Sitemap submitted\";\n        } catch (e) {\n            const message =\n                \"Error while submitting sitemap to search engine: \" + e.message;\n            this.logger.error(message);\n            return message;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Source.html":{"url":"classes/Source.html","title":"class - Source","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Source\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/source/schemas/source.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                classification\n                            \n                            \n                                description\n                            \n                            \n                                link\n                            \n                            \n                                targetId\n                            \n                            \n                                targetModel\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        classification\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({validate: undefined, message: tag => })\n                        \n                    \n                \n                    \n                        \n                                Defined in server/source/schemas/source.schema.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/source/schemas/source.schema.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        link\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/source/schemas/source.schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        targetId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, refPath: 'onModel'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/source/schemas/source.schema.ts:41\n                        \n                    \n\n            \n                \n                    Use Dynamic ref https://mongoosejs.com/docs/populate.html#dynamic-ref\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        targetModel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SourceTargetModel\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/source/schemas/source.schema.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/source/schemas/source.schema.ts:53\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport * as mongoose from \"mongoose\";\nimport { User } from \"../../users/schemas/user.schema\";\n\nexport type SourceDocument = Source & mongoose.Document;\n\nexport enum SourceTargetModel {\n    Claim = 'Claim',\n    ClaimReview = 'ClaimReview'\n} \n@Schema()\nexport class Source {\n    @Prop({ required: true })\n    link: string;\n\n    @Prop({\n        validate: {\n            validator: (v) => {\n                return (\n                    [\"unclassified\", \"reliable\", \"unreliable\", \"fake\"].indexOf(\n                        v\n                    ) !== -1\n                );\n            },\n        },\n        message: (tag) => `${tag} is not a valid classification.`,\n    })\n    classification: string;\n\n    @Prop()\n    description: string;\n\n    /**\n     * Use Dynamic ref https://mongoosejs.com/docs/populate.html#dynamic-ref\n     */\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        refPath: \"onModel\",\n    })\n    targetId: mongoose.Types.ObjectId;\n\n    @Prop({\n        required: true,\n    })\n    targetModel: SourceTargetModel;\n\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"User\",\n    })\n    user: User;\n}\n\nexport const SourceSchema = SchemaFactory.createForClass(Source);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SourceController.html":{"url":"controllers/SourceController.html","title":"controller - SourceController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SourceController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/source/source.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getSourcesClaim\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getSourcesClaim\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSourcesClaim(params, getSources: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('api/source/:targetId')\n                \n            \n\n            \n                \n                    Defined in server/source/source.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    getSources\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Logger, Param, Query } from \"@nestjs/common\";\nimport { SourceService } from \"./source.service\";\n\n@Controller()\nexport class SourceController {\n    private readonly logger = new Logger(\"SourceController\");\n    constructor(private sourceService: SourceService) {}\n\n    @Get(\"api/source/:targetId\")\n    public async getSourcesClaim(@Param() params, @Query() getSources: any) {\n        const { targetId } = params;\n        const { page, order } = getSources;\n        const pageSize = parseInt(getSources.pageSize, 10)\n        return this.sourceService\n            .getByTargetId(targetId, page, pageSize, order)\n            .then((sources) => {\n                const totalSources = sources.length;\n                const totalPages = Math.ceil(\n                    totalSources / pageSize\n                );\n                this.logger.log(\n                    `Found ${totalSources} sources for targetId ${targetId}. Page ${page} of ${totalPages}`\n                );\n                return { sources, totalSources, totalPages, page, pageSize };\n            })\n            .catch();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SourceModule.html":{"url":"modules/SourceModule.html","title":"module - SourceModule","body":"\n                   \n\n\n\n\n    Modules\n    SourceModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SourceModule\n\n\n\ncluster_SourceModule_exports\n\n\n\ncluster_SourceModule_providers\n\n\n\n\nSourceService \n\nSourceService \n\n\n\nSourceModule\n\nSourceModule\n\nSourceService  -->\n\nSourceModule->SourceService \n\n\n\n\n\nSourceService\n\nSourceService\n\nSourceModule -->\n\nSourceService->SourceModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/source/source.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SourceService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SourceController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SourceService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { Source, SourceSchema } from \"./schemas/source.schema\";\nimport { SourceController } from \"./source.controller\";\nimport { SourceService } from \"./source.service\";\n\nconst SourceModel = MongooseModule.forFeature([\n    {\n        name: Source.name,\n        schema: SourceSchema,\n    },\n]);\n\n@Module({\n    imports: [SourceModel],\n    providers: [SourceService],\n    exports: [SourceService],\n    controllers: [SourceController],\n})\nexport class SourceModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SourceService.html":{"url":"injectables/SourceService.html","title":"injectable - SourceService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SourceService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/source/source.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                getByTargetId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(SourceModel: Model)\n                    \n                \n                        \n                            \n                                Defined in server/source/source.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        SourceModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data)\n                \n            \n\n\n            \n                \n                    Defined in server/source/source.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByTargetId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByTargetId(targetId, page, pageSize, order: string)\n                \n            \n\n\n            \n                \n                    Defined in server/source/source.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    targetId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    page\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    pageSize\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    order\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"asc\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Model, Types } from \"mongoose\";\nimport { SourceDocument, Source } from \"./schemas/source.schema\";\nimport { InjectModel } from \"@nestjs/mongoose\";\n\n@Injectable()\nexport class SourceService {\n    constructor(\n        @InjectModel(Source.name)\n        private SourceModel: Model\n    ) {}\n    async create(data) {\n        data.targetId = Types.ObjectId(data.targetId);\n        data.user = Types.ObjectId(data.user);\n        const source = new this.SourceModel(data);\n        await source.save();\n        return source;\n    }\n\n    async getByTargetId(targetId, page, pageSize, order = \"asc\") {\n        targetId = Types.ObjectId(targetId);\n\n        return this.SourceModel.find({ targetId })\n        .skip(page * pageSize)\n        .limit(pageSize)\n        .sort({ _id: order });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StatsController.html":{"url":"controllers/StatsController.html","title":"controller - StatsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StatsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/stats/stats.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/stats\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHomeStats\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHomeStats\n                        \n                    \n                \n            \n            \n                \ngetHomeStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('home')\n                \n            \n\n            \n                \n                    Defined in server/stats/stats.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport {StatsService} from \"./stats.service\";\n\n@Controller(\"api/stats\")\nexport class StatsController {\n    constructor(\n        private statsService: StatsService,\n    ) {}\n    @Get(\"home\")\n    getHomeStats() {\n        return this.statsService.getHomeStats();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StatsModule.html":{"url":"modules/StatsModule.html","title":"module - StatsModule","body":"\n                   \n\n\n\n\n    Modules\n    StatsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StatsModule\n\n\n\ncluster_StatsModule_imports\n\n\n\ncluster_StatsModule_providers\n\n\n\ncluster_StatsModule_exports\n\n\n\n\nClaimModule\n\nClaimModule\n\n\n\nStatsModule\n\nStatsModule\n\nStatsModule -->\n\nClaimModule->StatsModule\n\n\n\n\n\nClaimReviewModule\n\nClaimReviewModule\n\nStatsModule -->\n\nClaimReviewModule->StatsModule\n\n\n\n\n\nPersonalityModule\n\nPersonalityModule\n\nStatsModule -->\n\nPersonalityModule->StatsModule\n\n\n\n\n\nStatsService \n\nStatsService \n\nStatsService  -->\n\nStatsModule->StatsService \n\n\n\n\n\nStatsService\n\nStatsService\n\nStatsModule -->\n\nStatsService->StatsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/stats/stats.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StatsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StatsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClaimModule\n                        \n                        \n                            ClaimReviewModule\n                        \n                        \n                            PersonalityModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StatsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { StatsController } from \"./stats.controller\";\nimport { PersonalityModule } from \"../personality/personality.module\";\nimport { ClaimModule } from \"../claim/claim.module\";\nimport { ClaimReviewModule } from \"../claim-review/claim-review.module\";\nimport {StatsService} from \"./stats.service\";\n\n@Module({\n    imports: [PersonalityModule, ClaimModule, ClaimReviewModule],\n    controllers: [StatsController],\n    providers: [StatsService],\n    exports: [StatsService]\n})\nexport class StatsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StatsService.html":{"url":"injectables/StatsService.html","title":"injectable - StatsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StatsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/stats/stats.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHomeStats\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(claimReviewService: ClaimReviewService, personalityService: PersonalityService, claimService: ClaimService)\n                    \n                \n                        \n                            \n                                Defined in server/stats/stats.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        claimReviewService\n                                                  \n                                                        \n                                                                        ClaimReviewService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        personalityService\n                                                  \n                                                        \n                                                                        PersonalityService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        claimService\n                                                  \n                                                        \n                                                                        ClaimService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHomeStats\n                        \n                    \n                \n            \n            \n                \ngetHomeStats()\n                \n            \n\n\n            \n                \n                    Defined in server/stats/stats.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Injectable} from \"@nestjs/common\";\nimport {ClaimReviewService} from \"../claim-review/claim-review.service\";\nimport {PersonalityService} from \"../personality/personality.service\";\nimport {ClaimService} from \"../claim/claim.service\";\n\n@Injectable()\nexport class StatsService {\n    constructor(\n        private claimReviewService: ClaimReviewService,\n        private personalityService: PersonalityService,\n        private claimService: ClaimService\n    ) {}\n\n    getHomeStats() {\n        return Promise.all([\n            this.claimService.count(),\n            this.personalityService.count(),\n            this.claimReviewService.count(),\n        ]).then((values) => {\n            return {\n                claims: values[0],\n                personalities: values[1],\n                reviews: values[2],\n            };\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateClaimDTO.html":{"url":"classes/UpdateClaimDTO.html","title":"class - UpdateClaimDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateClaimDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim/dto/update-claim.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/mapped-types\"\nimport { CreateClaimDTO } from \"./create-claim.dto\";\n\nexport class UpdateClaimDTO extends PartialType(CreateClaimDTO){}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/users/schemas/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstPasswordChanged\n                            \n                            \n                                name\n                            \n                            \n                                oryId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/users/schemas/user.schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstPasswordChanged\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/users/schemas/user.schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/users/schemas/user.schema.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        oryId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/users/schemas/user.schema.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { Document } from \"mongoose\";\n\nexport interface UserDocument extends User, Document {\n    authenticate(): any;\n}\n\n@Schema()\nexport class User {\n    @Prop({ required: true })\n    name: string;\n\n    @Prop({ required: true, unique: true })\n    email: string;\n\n    @Prop({ required: true, unique: true })\n    oryId: string;\n\n    @Prop({ required: true, default: false })\n    firstPasswordChanged: boolean;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserDocument.html":{"url":"interfaces/UserDocument.html","title":"interface - UserDocument","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserDocument\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/users/schemas/user.schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        User\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        authenticate\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate()\n                \n            \n\n\n            \n                \n                    Defined in server/users/schemas/user.schema.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { Document } from \"mongoose\";\n\nexport interface UserDocument extends User, Document {\n    authenticate(): any;\n}\n\n@Schema()\nexport class User {\n    @Prop({ required: true })\n    name: string;\n\n    @Prop({ required: true, unique: true })\n    email: string;\n\n    @Prop({ required: true, unique: true })\n    oryId: string;\n\n    @Prop({ required: true, default: false })\n    firstPasswordChanged: boolean;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/users/users.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Public\n                                    Async\n                                personalityList\n                            \n                            \n                                    Public\n                                    Async\n                                profile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    changePassword(req, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('api/user/:id/password')\n                \n            \n\n            \n                \n                    Defined in server/users/users.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('api/user/validate')\n                \n            \n\n            \n                \n                    Defined in server/users/users.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@UseGuards(LocalAuthGuard)@Post('api/user/signin')\n                \n            \n\n            \n                \n                    Defined in server/users/users.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        personalityList\n                        \n                    \n                \n            \n            \n                \n                    \n                    personalityList(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('login')\n                \n            \n\n            \n                \n                    Defined in server/users/users.controller.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        profile\n                        \n                    \n                \n            \n            \n                \n                    \n                    profile(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('profile')\n                \n            \n\n            \n                \n                    Defined in server/users/users.controller.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get, Logger,\n    Post, Put, Req,\n    Res,\n    UseGuards,\n} from \"@nestjs/common\";\nimport {Request, Response} from \"express\";\nimport { UsersService } from \"./users.service\";\nimport { LocalAuthGuard } from \"../auth/local-auth.guard\";\nimport { parse } from \"url\";\nimport { ViewService } from \"../view/view.service\";\nimport * as mongoose from \"mongoose\";\nimport {ConfigService} from \"@nestjs/config\";\nimport {IsPublic} from \"../decorators/is-public.decorator\";\n\n@Controller()\nexport class UsersController {\n    private readonly logger = new Logger(\"UserController\");\n    constructor(\n        private readonly usersService: UsersService,\n        private viewService: ViewService,\n        private configService: ConfigService\n    ) {}\n\n    // TODO: this seems to be deprecated\n    @Get(\"api/user/validate\")\n    async findAll(@Req() req): Promise {\n        return { login: true, user: req.user };\n    }\n\n    @IsPublic()\n    @UseGuards(LocalAuthGuard)\n    @Post(\"api/user/signin\")\n    async login(@Req() req, @Res() res) {\n        return req.logIn(req.user, (err) => {\n            return res.send({ login: true });\n        });\n    }\n\n    // TODO: move old logic to ory\n    @Put(\"api/user/:id/password\")\n    async changePassword(@Req() req, @Res() res) {\n        const { currentPassword, newPassword, repeatedNewPassword } = req.body;\n\n        try {\n            if (req.params.id !== req.user._id.toString()) {\n                throw Error(\"Invalid user attempting to change password\");\n            }\n            if (newPassword !== repeatedNewPassword) {\n                throw Error(\"Repeated password doesn't match\");\n            }\n            this.usersService\n                .changePassword(mongoose.Types.ObjectId(req.params.id), currentPassword, newPassword)\n                .then(() => {\n                    res.status(200).json({\n                        success: true,\n                        message: \"Password reset successful\"\n                    });\n                }).catch(e => {\n                    this.logger.error(e);\n                    res.status(500).json({ message: e.message });\n                });\n        } catch (e) {\n            this.logger.error(e);\n            res.status(500).json({ message: e.message });\n        }\n    }\n\n    @IsPublic()\n    @Get(\"login\")\n    public async personalityList(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        const authType = this.configService.get(\"authentication_type\")\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/login\",\n                Object.assign(parsedUrl.query, { authType })\n            );\n    }\n\n    @Get(\"profile\")\n    public async profile(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/profile-page\",\n                Object.assign(parsedUrl.query, {})\n            );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_imports\n\n\n\n\nOryModule\n\nOryModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nOryModule->UsersModule\n\n\n\n\n\nViewModule\n\nViewModule\n\nUsersModule -->\n\nViewModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            OryModule\n                        \n                        \n                            ViewModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { User, UserSchema } from \"./schemas/user.schema\";\nimport { UsersService } from \"./users.service\";\nimport { UsersController } from \"./users.controller\";\nimport { ViewModule } from \"../view/view.module\";\nimport OryModule from \"../ory/ory.module\";\nimport {ConfigModule} from \"@nestjs/config\";\n\nconst UserModel = MongooseModule.forFeatureAsync([\n    {\n        name: User.name,\n        useFactory: () => {\n            const schema = UserSchema;\n            schema.plugin(require(\"passport-local-mongoose\"), {\n                usernameField: \"email\",\n            });\n            return schema;\n        },\n    },\n]);\n\n@Module({\n    imports: [UserModel, ViewModule, OryModule, ConfigModule],\n    exports: [UsersService, UserModel],\n    controllers: [UsersController],\n    providers: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(UserModel: Model, oryService: OryService)\n                    \n                \n                        \n                            \n                                Defined in server/users/users.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        UserModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        oryService\n                                                  \n                                                        \n                                                                        OryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    changePassword(userId, currentPassword, newPassword)\n                \n            \n\n\n            \n                \n                    Defined in server/users/users.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentPassword\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newPassword\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in server/users/users.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(userId)\n                \n            \n\n\n            \n                \n                    Defined in server/users/users.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(user)\n                \n            \n\n\n            \n                \n                    Defined in server/users/users.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"UserService\")\n                    \n                \n                    \n                        \n                                Defined in server/users/users.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Model } from \"mongoose\";\nimport {Injectable, Logger} from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport { User, UserDocument } from \"./schemas/user.schema\";\nimport OryService from \"../ory/ory.service\";\n\n@Injectable()\nexport class UsersService {\n    private readonly logger = new Logger(\"UserService\");\n    constructor(\n        @InjectModel(User.name) private UserModel: Model,\n        private oryService: OryService\n    ) {}\n\n    async findAll(): Promise {\n        return this.UserModel.find().exec();\n    }\n\n    async register(user) {\n        const newUser = new this.UserModel(user)\n        const { data: oryUser } = await this.oryService.createIdentity(newUser, user.password);\n        newUser.oryId = oryUser.id;\n        try {\n            // @ts-ignore\n            return this.UserModel.register(\n                newUser,\n                user.password\n            );\n        } catch (e) {\n            await this.oryService.deleteIdentity(oryUser.id)\n        }\n    }\n\n    async getById(userId) {\n        const user = await this.UserModel.findById(userId);\n        this.logger.log(`Found user ${user._id}`);\n        return user;\n    }\n\n    async changePassword(userId, currentPassword, newPassword) {\n        const user = await this.getById(userId);\n        // @ts-ignore\n        return user.changePassword(currentPassword, newPassword).then(() => {\n            if (user.firstPasswordChanged === false) {\n                this.logger.log(`User ${user._id} changed first password`);\n                user.firstPasswordChanged = true;\n            }\n            this.logger.log(`User ${user._id} changed password`);\n            user.save();\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UtilService.html":{"url":"injectables/UtilService.html","title":"injectable - UtilService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UtilService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/util.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                formatStats\n                            \n                            \n                                mergeObjectsInUnique\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        formatStats\n                        \n                    \n                \n            \n            \n                \nformatStats(reviews, slice)\n                \n            \n\n\n            \n                \n                    Defined in server/util.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    reviews\n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    slice\n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { total: any; reviews: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mergeObjectsInUnique\n                        \n                    \n                \n            \n            \n                \nmergeObjectsInUnique(array: T[], property: any)\n                \n            \n\n\n            \n                \n                    Defined in server/util.ts:26\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    https://medium.com/javascript-in-plain-english/javascript-merge-duplicate-objects-in-array-of-objects-9a76c3a1c35c\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    array\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    property\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\n@Injectable()\nexport class UtilService {\n    formatStats(reviews, slice = false) {\n        const total = reviews.reduce((agg, review) => {\n            agg += review.count;\n            return agg;\n        }, 0);\n        const result = reviews.map((review) => {\n            const percentage = (review.count / total) * 100;\n            return {\n                _id: review._id,\n                percentage: percentage.toFixed(0),\n                count: review.count,\n            };\n        });\n        return { total, reviews: slice ? result.slice(0, 3) : result };\n    }\n\n    /**\n     * https://medium.com/javascript-in-plain-english/javascript-merge-duplicate-objects-in-array-of-objects-9a76c3a1c35c\n     * @param array\n     * @param property\n     */\n    mergeObjectsInUnique(array: T[], property: any): T[] {\n        const newArray = new Map();\n\n        array.forEach((item: T) => {\n            const propertyValue = item[property];\n            newArray.has(propertyValue)\n                ? newArray.set(propertyValue, {\n                      ...item,\n                      ...newArray.get(propertyValue),\n                  })\n                : newArray.set(propertyValue, item);\n        });\n\n        return Array.from(newArray.values());\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ViewController.html":{"url":"controllers/ViewController.html","title":"controller - ViewController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ViewController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/view/view.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                assets\n                            \n                            \n                                    Public\n                                    Async\n                                codeOfConductPage\n                            \n                            \n                                    Async\n                                handler\n                            \n                            \n                                    Public\n                                    Async\n                                show404\n                            \n                            \n                                    Public\n                                    Async\n                                showAboutPage\n                            \n                            \n                                    Public\n                                    Async\n                                showHome\n                            \n                            \n                                    Public\n                                    Async\n                                showPrivacyPolicyPage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        assets\n                        \n                    \n                \n            \n            \n                \n                    \n                    assets(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('_next*')\n                \n            \n\n            \n                \n                    Defined in server/view/view.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        codeOfConductPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    codeOfConductPage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('code-of-conduct')\n                \n            \n\n            \n                \n                    Defined in server/view/view.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handler\n                        \n                    \n                \n            \n            \n                \n                    \n                    handler(req: Request, res: Response)\n                \n            \n\n\n            \n                \n                    Defined in server/view/view.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        show404\n                        \n                    \n                \n            \n            \n                \n                    \n                    show404(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('404')\n                \n            \n\n            \n                \n                    Defined in server/view/view.controller.ts:81\n                \n            \n\n\n            \n                \n                    Redirects to our custom 404 page.\nThe render404() method was not used here as it conflicts with our i18n strategy.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        showAboutPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    showAboutPage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('about')\n                \n            \n\n            \n                \n                    Defined in server/view/view.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        showHome\n                        \n                    \n                \n            \n            \n                \n                    \n                    showHome(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get()\n                \n            \n\n            \n                \n                    Defined in server/view/view.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        showPrivacyPolicyPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    showPrivacyPolicyPage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('privacy-policy')\n                \n            \n\n            \n                \n                    Defined in server/view/view.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Res, Req } from \"@nestjs/common\";\nimport { Request, Response } from \"express\";\nimport { parse } from \"url\";\nimport { ViewService } from \"./view.service\";\nimport {IsPublic} from \"../decorators/is-public.decorator\";\n\n@Controller(\"/\")\nexport class ViewController {\n    constructor(private viewService: ViewService) {}\n\n    async handler(req: Request, res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n\n        await this.viewService\n            .getNextServer()\n            .render(req, res, parsedUrl.pathname, parsedUrl.query);\n    }\n\n    @IsPublic()\n    @Get()\n    public async showHome(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n\n        await this.viewService\n            .getNextServer()\n            .render(req, res, \"/landing-page\", Object.assign(parsedUrl.query));\n    }\n\n    @IsPublic()\n    @Get(\"about\")\n    public async showAboutPage(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n\n        await this.viewService\n            .getNextServer()\n            .render(req, res, \"/about-page\", Object.assign(parsedUrl.query));\n    }\n\n    @IsPublic()\n    @Get(\"privacy-policy\")\n    public async showPrivacyPolicyPage(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n\n        await this.viewService\n            .getNextServer()\n            .render(req, res, \"/privacy-policy-page\", Object.assign(parsedUrl.query));\n    }\n\n    @IsPublic()\n    @Get(\"code-of-conduct\")\n    public async codeOfConductPage(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n\n        await this.viewService\n            .getNextServer()\n            .render(req, res, \"/code-of-conduct-page\", Object.assign(parsedUrl.query));\n    }\n\n    @IsPublic()\n    @Get(\"_next*\")\n    public async assets(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n\n        await this.viewService\n            .getNextServer()\n            .render(req, res, parsedUrl.pathname, parsedUrl.query);\n    }\n\n    /**\n     * Redirects to our custom 404 page.\n     * The render404() method was not used here as it conflicts with our i18n strategy.\n     */\n    @IsPublic()\n    @Get(\"404\")\n    public async show404(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n\n        await this.viewService\n            .getNextServer()\n            .render(req, res, \"/404-page\", Object.assign(parsedUrl.query));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ViewModule.html":{"url":"modules/ViewModule.html","title":"module - ViewModule","body":"\n                   \n\n\n\n\n    Modules\n    ViewModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ViewModule\n\n\n\ncluster_ViewModule_exports\n\n\n\ncluster_ViewModule_providers\n\n\n\n\nViewService \n\nViewService \n\n\n\nViewModule\n\nViewModule\n\nViewService  -->\n\nViewModule->ViewService \n\n\n\n\n\nViewService\n\nViewService\n\nViewModule -->\n\nViewService->ViewModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/view/view.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ViewService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ViewController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ViewService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ViewController } from \"./view.controller\";\nimport { ViewService } from \"./view.service\";\n\n@Module({\n    imports: [],\n    providers: [ViewService],\n    controllers: [ViewController],\n    exports: [ViewService]\n})\nexport class ViewModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ViewService.html":{"url":"injectables/ViewService.html","title":"injectable - ViewService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ViewService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/view/view.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getNextServer\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in server/view/view.service.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getNextServer\n                        \n                    \n                \n            \n            \n                \ngetNextServer()\n                \n            \n\n\n            \n                \n                    Defined in server/view/view.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     NextServer\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in server/view/view.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"ViewService\")\n                    \n                \n                    \n                        \n                                Defined in server/view/view.service.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     NextServer\n\n                    \n                \n                    \n                        \n                                Defined in server/view/view.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {Injectable, Logger, OnModuleInit} from \"@nestjs/common\";\nimport createServer from \"next\";\nimport { NextServer } from \"next/dist/server/next\";\n\n@Injectable()\nexport class ViewService implements OnModuleInit {\n    private server: NextServer;\n    private readonly logger = new Logger(\"ViewService\");\n\n    constructor() {}\n\n    async onModuleInit(): Promise {\n        try {\n            this.server = await createServer({\n                dev: process.env.ENVIRONMENT === \"watch-dev\",\n                dir: \"./\",\n            });\n            await this.server.prepare();\n        } catch (error) {\n            this.logger.error(\"Failed to load NextServer\", error);\n        }\n    }\n\n    getNextServer(): NextServer {\n        return this.server;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WikidataCache.html":{"url":"classes/WikidataCache.html","title":"class - WikidataCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WikidataCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/wikidata/schemas/wikidata.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                language\n                            \n                            \n                                props\n                            \n                            \n                                wikidataId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/wikidata/schemas/wikidata.schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/wikidata/schemas/wikidata.schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        props\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/wikidata/schemas/wikidata.schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wikidataId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/wikidata/schemas/wikidata.schema.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { Document } from \"mongoose\";\n\nexport type WikidataCacheDocument = WikidataCache & Document;\n\n@Schema()\nexport class WikidataCache {\n    @Prop({ required: true })\n    wikidataId: string;\n\n    @Prop({ required: true })\n    language: string;\n\n    @Prop({ type: Object, required: true })\n    props: object;\n\n    @Prop({ default: Date.now })\n    createdAt: Date;\n}\n\nexport const WikidataCacheSchema = SchemaFactory.createForClass(WikidataCache);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WikidataModule.html":{"url":"modules/WikidataModule.html","title":"module - WikidataModule","body":"\n                   \n\n\n\n\n    Modules\n    WikidataModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_WikidataModule\n\n\n\ncluster_WikidataModule_providers\n\n\n\ncluster_WikidataModule_exports\n\n\n\n\nWikidataService \n\nWikidataService \n\n\n\nWikidataModule\n\nWikidataModule\n\nWikidataService  -->\n\nWikidataModule->WikidataService \n\n\n\n\n\nWikidataService\n\nWikidataService\n\nWikidataModule -->\n\nWikidataService->WikidataModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/wikidata/wikidata.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            WikidataService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            WikidataService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { WikidataService } from \"./wikidata.service\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { WikidataCache, WikidataCacheSchema } from \"./schemas/wikidata.schema\";\n\nconst WikidataCacheModel = MongooseModule.forFeatureAsync([\n    {\n        name: WikidataCache.name,\n        useFactory: () => {\n            const wikidataCacheSchema = WikidataCacheSchema;\n            wikidataCacheSchema.index(\n                { wikidataId: 1, language: 1 },\n                { unique: true }\n            );\n            wikidataCacheSchema.index(\n                { createdAt: 1 },\n                { expireAfterSeconds: 86400 }\n            );\n            return wikidataCacheSchema;\n        },\n    },\n]);\n\n@Module({\n    imports: [WikidataCacheModel],\n    exports: [WikidataService],\n    providers: [WikidataService],\n})\nexport class WikidataModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WikidataService.html":{"url":"injectables/WikidataService.html","title":"injectable - WikidataService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WikidataService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/wikidata/wikidata.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                extractProperties\n                            \n                            \n                                extractValue\n                            \n                            \n                                    Async\n                                fetchProperties\n                            \n                            \n                                    Async\n                                getCommonsThumbURL\n                            \n                            \n                                getSiteLinkName\n                            \n                            \n                                queryWikibaseEntities\n                            \n                            \n                                    Async\n                                requestProperties\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(WikidataCache: Model)\n                    \n                \n                        \n                            \n                                Defined in server/wikidata/wikidata.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        WikidataCache\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        extractProperties\n                        \n                    \n                \n            \n            \n                \n                    \n                    extractProperties(wikidata, language: string)\n                \n            \n\n\n            \n                \n                    Defined in server/wikidata/wikidata.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    wikidata\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"en\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        extractValue\n                        \n                    \n                \n            \n            \n                \nextractValue(wikidata, property, language)\n                \n            \n\n\n            \n                \n                    Defined in server/wikidata/wikidata.service.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    wikidata\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    property\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    language\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        fetchProperties\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchProperties(params)\n                \n            \n\n\n            \n                \n                    Defined in server/wikidata/wikidata.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCommonsThumbURL\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCommonsThumbURL(imageTitle)\n                \n            \n\n\n            \n                \n                    Defined in server/wikidata/wikidata.service.ts:153\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imageTitle\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSiteLinkName\n                        \n                    \n                \n            \n            \n                \ngetSiteLinkName(language)\n                \n            \n\n\n            \n                \n                    Defined in server/wikidata/wikidata.service.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    language\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        queryWikibaseEntities\n                        \n                    \n                \n            \n            \n                \nqueryWikibaseEntities(query, language: string)\n                \n            \n\n\n            \n                \n                    Defined in server/wikidata/wikidata.service.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"en\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        requestProperties\n                        \n                    \n                \n            \n            \n                \n                    \n                    requestProperties(params)\n                \n            \n\n\n            \n                \n                    Defined in server/wikidata/wikidata.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Model } from \"mongoose\";\nimport { Injectable } from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport {\n    WikidataCache,\n    WikidataCacheDocument,\n} from \"./schemas/wikidata.schema\";\n\nconst axios = require(\"axios\");\n\nconst languageVariantMap = {\n    \"pt-br\": \"pt\",\n};\n\n@Injectable()\nexport class WikidataService {\n    constructor(\n        @InjectModel(WikidataCache.name)\n        private WikidataCache: Model\n    ) {}\n\n    async fetchProperties(params) {\n        const wikidataCache = await this.WikidataCache.findOne({\n            wikidataId: params.wikidataId,\n            language: params.language,\n        }).exec();\n        if (!wikidataCache) {\n            const props = await this.requestProperties(params);\n            const newWikidataCache = new this.WikidataCache({\n                ...params,\n                props,\n            });\n            newWikidataCache.save();\n            return props;\n        }\n        return wikidataCache.props;\n    }\n\n    async requestProperties(params) {\n        const { data } = await axios.get(\"https://www.wikidata.org/w/api.php\", {\n            params: {\n                action: \"wbgetentities\",\n                ids: encodeURIComponent(params.wikidataId),\n                format: \"json\",\n                formatversion: \"2\",\n            },\n        });\n        const entities = data && data.entities;\n        return this.extractProperties(\n            entities && entities[params.wikidataId],\n            params.language\n        );\n    }\n\n    async extractProperties(wikidata, language = \"en\"): Promise {\n        const wikidataProps = {\n            name: undefined,\n            description: undefined,\n            isAllowedProp: undefined,\n            image: undefined,\n            wikipedia: undefined,\n        };\n        if (!wikidata) {\n            return {};\n        }\n\n        // Get label for the personality name\n        wikidataProps.name = this.extractValue(wikidata, \"labels\", language);\n\n        // Get description for the personality description\n        wikidataProps.description = this.extractValue(\n            wikidata,\n            \"descriptions\",\n            language\n        );\n\n        if (wikidata.claims.P31) {\n            const wikidataInstanceof =\n                wikidata.claims.P31[0].mainsnak.datavalue.value;\n            wikidataProps.isAllowedProp = wikidataInstanceof.id === \"Q5\";\n        } else {\n            wikidataProps.isAllowedProp = false;\n        }\n        \n        // Extract image if it exists\n        if (wikidata.claims.P18) {\n            const fileName = wikidata.claims.P18[0].mainsnak.datavalue.value;\n            wikidataProps.image = await this.getCommonsThumbURL(fileName);\n        }\n        const siteLinkName = this.getSiteLinkName(language);\n        if (wikidata.sitelinks[siteLinkName]) {\n            const wikiLang = siteLinkName.match(/^(.*)wiki$/)[1];\n            const wikiTitle = wikidata.sitelinks[siteLinkName].title;\n            if (wikiLang && wikiTitle) {\n                wikidataProps.wikipedia = `https://${wikiLang.replace(\n                    \"_\",\n                    \"-\"\n                )}.wikipedia.org/wiki/${encodeURI(wikiTitle)}`;\n            }\n        }\n        return wikidataProps;\n    }\n\n    getSiteLinkName(language) {\n        if (languageVariantMap[language]) {\n            language = languageVariantMap[language];\n        }\n        return `${language}wiki`;\n    }\n\n    extractValue(wikidata, property, language) {\n        if (!wikidata[property]) {\n            return;\n        }\n        const languageFallback =\n            wikidata[property] && wikidata[property][language]\n                ? language\n                : \"en\";\n        return (\n            wikidata[property][languageFallback] &&\n            wikidata[property][languageFallback].value\n        );\n    }\n\n    queryWikibaseEntities(query, language = \"en\") {\n        const params = {\n            action: \"wbsearchentities\",\n            search: query,\n            format: \"json\",\n            errorformat: \"plaintext\",\n            language,\n            type: \"item\",\n            origin: \"*\",\n        };\n\n        return axios\n            .get(`https://www.wikidata.org/w/api.php`, { params })\n            .then((response) => {\n                const { search } = response && response.data;\n                return search.map((wbentity) => {\n                    if (!wbentity.label) {\n                        return;\n                    }\n                    return {\n                        name: wbentity.label,\n                        description: wbentity.description,\n                        wikidata: wbentity.id,\n                    };\n                });\n            });\n    }\n\n    async getCommonsThumbURL(imageTitle) {\n        const { data } = await axios.get(\n            \"https://commons.wikimedia.org/w/api.php\",\n            {\n                params: {\n                    action: \"query\",\n                    titles: `File:${imageTitle}`,\n                    prop: \"imageinfo\",\n                    iiprop: \"url\",\n                    iiurlwidth: 400,\n                    format: \"json\",\n                    formatversion: \"2\",\n                },\n            }\n        );\n        const { pages } = data && data.query;\n        if (pages.length \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                server/auth/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/auth/local.serializer.ts\n            \n            injectable\n            LocalSerializer\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/auth/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/auth/session.guard.ts\n            \n            guard\n            SessionGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                server/claim-review/claim-review.controller.ts\n            \n            controller\n            ClaimReviewController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                server/claim-review/claim-review.module.ts\n            \n            variable\n            ClaimReviewModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim-review/claim-review.service.ts\n            \n            injectable\n            ClaimReviewService\n            \n                18 %\n                (3/16)\n            \n        \n        \n            \n                \n                server/claim-review/dto/create-claim-review.dto.ts\n            \n            class\n            CreateClaimReview\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                server/claim-review/schemas/claim-review.schema.ts\n            \n            class\n            ClaimReview\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                server/claim-review/schemas/claim-review.schema.ts\n            \n            variable\n            ClaimReviewSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim-review/schemas/claim-review.schema.ts\n            \n            variable\n            ClaimReviewSchemaRaw\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim-revision/claim-revision.module.ts\n            \n            variable\n            ClaimRevisionModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim-revision/claim-revision.service.ts\n            \n            injectable\n            ClaimRevisionService\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                server/claim-revision/schema/claim-revision.schema.ts\n            \n            class\n            ClaimRevision\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                server/claim-revision/schema/claim-revision.schema.ts\n            \n            variable\n            ClaimRevisionSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim-revision/schema/claim-revision.schema.ts\n            \n            variable\n            ClaimRevisionSchemaRaw\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim/claim.controller.ts\n            \n            controller\n            ClaimController\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                server/claim/claim.module.ts\n            \n            variable\n            ClaimModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim/claim.service.ts\n            \n            injectable\n            ClaimService\n            \n                26 %\n                (4/15)\n            \n        \n        \n            \n                \n                server/claim/dto/create-claim.dto.ts\n            \n            class\n            CreateClaimDTO\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                server/claim/dto/get-claims.dto.ts\n            \n            class\n            GetClaimsDTO\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                server/claim/dto/get-reviews-by-hash.dto.ts\n            \n            class\n            GetClaimsByHashDTO\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                server/claim/dto/update-claim.dto.ts\n            \n            class\n            UpdateClaimDTO\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim/schemas/claim.schema.ts\n            \n            class\n            Claim\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                server/claim/schemas/claim.schema.ts\n            \n            variable\n            ClaimSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim/schemas/claim.schema.ts\n            \n            variable\n            ClaimSchemaRaw\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/decorators/is-public.decorator.ts\n            \n            variable\n            IsPublic\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/email/email.service.ts\n            \n            injectable\n            EmailService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                server/email/email.service.ts\n            \n            variable\n            fs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/email/email.service.ts\n            \n            variable\n            handlebars\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/email/email.service.ts\n            \n            variable\n            nodemailer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/email/email.service.ts\n            \n            variable\n            path\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/filters/not-found.filter.ts\n            \n            class\n            NotFoundFilter\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                server/history/history.controller.ts\n            \n            controller\n            HistoryController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/history/history.module.ts\n            \n            variable\n            HistoryModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/history/history.service.ts\n            \n            injectable\n            HistoryService\n            \n                42 %\n                (3/7)\n            \n        \n        \n            \n                \n                server/history/schema/history.schema.ts\n            \n            class\n            History\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                server/history/schema/history.schema.ts\n            \n            variable\n            HistorySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/home/home.controller.ts\n            \n            controller\n            HomeController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/logger.ts\n            \n            class\n            Logger\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                server/main.ts\n            \n            variable\n            cookieParser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/main.ts\n            \n            variable\n            initApp\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/main.ts\n            \n            variable\n            MongoStore\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/middleware/disable-body-parser.middleware.ts\n            \n            injectable\n            DisableBodyParserMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/middleware/json-body.middleware.ts\n            \n            injectable\n            JsonBodyMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/middleware/language.middleware.ts\n            \n            injectable\n            GetLanguageMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/middleware/logger.middleware.ts\n            \n            injectable\n            LoggerMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                server/ory/ory.controller.ts\n            \n            controller\n            OryController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                server/ory/ory.service.ts\n            \n            injectable\n            OryService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                server/parser/parser.service.ts\n            \n            injectable\n            ParserService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                server/parser/parser.service.ts\n            \n            variable\n            md5\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/parser/parser.service.ts\n            \n            variable\n            nlp\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/parser/parser.service.ts\n            \n            variable\n            phdRegex\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/parser/parser.service.ts\n            \n            variable\n            prefixes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/personality/dto/create-personality.dto.ts\n            \n            class\n            CreatePersonality\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                server/personality/dto/get-personalities.dto.ts\n            \n            class\n            GetPersonalities\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                server/personality/personality.controller.ts\n            \n            controller\n            PersonalityController\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                server/personality/personality.module.ts\n            \n            variable\n            PersonalityModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/personality/personality.service.ts\n            \n            injectable\n            PersonalityService\n            \n                17 %\n                (3/17)\n            \n        \n        \n            \n                \n                server/personality/schemas/personality.schema.ts\n            \n            class\n            Personality\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                server/personality/schemas/personality.schema.ts\n            \n            variable\n            PersonalitySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/personality/schemas/personality.schema.ts\n            \n            variable\n            PersonalitySchemaRaw\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/root/root.controller.ts\n            \n            controller\n            RootController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                server/seed.ts\n            \n            variable\n            initApp\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/seed.ts\n            \n            variable\n            mongodb_host\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/seed.ts\n            \n            variable\n            mongodb_name\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/server.ts\n            \n            variable\n            ServiceRunner\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/sitemap/sitemap.controller.ts\n            \n            controller\n            SitemapController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                server/sitemap/sitemap.service.ts\n            \n            injectable\n            SitemapService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                server/sitemap/sitemap.service.ts\n            \n            variable\n            axios\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/source/schemas/source.schema.ts\n            \n            class\n            Source\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                server/source/schemas/source.schema.ts\n            \n            variable\n            SourceSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/source/source.controller.ts\n            \n            controller\n            SourceController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/source/source.module.ts\n            \n            variable\n            SourceModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/source/source.service.ts\n            \n            injectable\n            SourceService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                server/stats/stats.controller.ts\n            \n            controller\n            StatsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/stats/stats.service.ts\n            \n            injectable\n            StatsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                server/users/schemas/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                server/users/schemas/user.schema.ts\n            \n            interface\n            UserDocument\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/users/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                server/users/users.module.ts\n            \n            variable\n            UserModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                server/util.ts\n            \n            injectable\n            UtilService\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                server/view/view.controller.ts\n            \n            controller\n            ViewController\n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                server/view/view.service.ts\n            \n            injectable\n            ViewService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                server/wikidata/schemas/wikidata.schema.ts\n            \n            class\n            WikidataCache\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                server/wikidata/schemas/wikidata.schema.ts\n            \n            variable\n            WikidataCacheSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/wikidata/wikidata.module.ts\n            \n            variable\n            WikidataCacheModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/wikidata/wikidata.service.ts\n            \n            injectable\n            WikidataService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                server/wikidata/wikidata.service.ts\n            \n            variable\n            axios\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/wikidata/wikidata.service.ts\n            \n            variable\n            languageVariantMap\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @ant-design/icons : ^4.6.2\n        \n            @ant-design/icons-svg : ^4.1.0\n        \n            @babel/polyfill : ^7.12.1\n        \n            @compodoc/compodoc : ^1.1.18\n        \n            @dhaiwat10/react-link-preview : ^1.9.1\n        \n            @nestjs/axios : ^0.0.1\n        \n            @nestjs/common : ^8.0.6\n        \n            @nestjs/config : ^1.0.1\n        \n            @nestjs/core : ^8.0.6\n        \n            @nestjs/mapped-types : ^1.0.1\n        \n            @nestjs/mongoose : ^8.0.0\n        \n            @nestjs/passport : ^8.0.1\n        \n            @nestjs/platform-express : ^8.0.6\n        \n            @nestjs/throttler : ^2.0.0\n        \n            @ory/cli : ^0.1.24\n        \n            @ory/client : 0.0.1-alpha.153\n        \n            @ory/integrations : ^0.2.5\n        \n            @types/jest : ^27.4.0\n        \n            @typescript-eslint/eslint-plugin : ^4.29.0\n        \n            accept-language-parser : ^1.5.0\n        \n            antd : ^4.18.5\n        \n            axios : ^0.21.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            compromise : ^13.11.4\n        \n            compromise-paragraphs : ^0.0.5\n        \n            compromise-sentences : ^0.3.0\n        \n            connect-mongo : ^4.6.0\n        \n            cookie-parser : ^1.4.5\n        \n            domino : ^2.1.6\n        \n            draft-js : ^0.11.7\n        \n            draft-js-export-html : ^1.4.1\n        \n            draft-js-import-html : ^1.4.1\n        \n            express : ^4.17.1\n        \n            express-session : ^1.17.2\n        \n            handlebars : ^4.7.7\n        \n            i18next : ^21.6.10\n        \n            md5 : ^2.3.0\n        \n            mongoose : ^  5.13.5\n        \n            mongoose-softdelete-typescript : ^0.0.3\n        \n            next : ^12.1.0\n        \n            next-i18next : ^10.2.0\n        \n            next-plugin-antd-less : ^1.8.0\n        \n            next-seo : ^5.4.0\n        \n            nodemailer : ^6.7.0\n        \n            passport : ^0.4.1\n        \n            passport-local : ^1.0.0\n        \n            passport-local-mongoose : ^6.1.0\n        \n            react : ^17.0.2\n        \n            react-cookie-consent : ^6.4.1\n        \n            react-countdown : ^2.3.2\n        \n            react-dom : ^17.0.2\n        \n            react-google-recaptcha : ^2.1.0\n        \n            react-is : ^17.0.2\n        \n            react-markdown : ^8.0.0\n        \n            react-redux : ^7.2.4\n        \n            react-share : ^4.4.0\n        \n            react-social-icons : ^5.5.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rehype-raw : ^6.1.1\n        \n            rxjs : ^7.3.0\n        \n            service-runner : ^2.8.4\n        \n            set-cookie-parser : ^2.4.8\n        \n            sitemap : 5\n        \n            slugify : ^1.6.1\n        \n            styled-components : ^5.3.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ClassificationEnum   (server/.../claim-review.schema.ts)\n                        \n                        \n                            HistoryType   (server/.../history.schema.ts)\n                        \n                        \n                            SourceTargetModel   (server/.../source.schema.ts)\n                        \n                        \n                            TargetModel   (server/.../history.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    server/claim-review/schemas/claim-review.schema.ts\n    \n        \n            \n                \n                    \n                        \n                        ClassificationEnum\n                    \n                \n                        \n                            \n                                 not-fact\n                            \n                        \n                        \n                            \n                                 true\n                            \n                        \n                        \n                            \n                                 true-but\n                            \n                        \n                        \n                            \n                                 arguable\n                            \n                        \n                        \n                            \n                                 misleading\n                            \n                        \n                        \n                            \n                                 false\n                            \n                        \n                        \n                            \n                                 unsustainable\n                            \n                        \n                        \n                            \n                                 exaggerated\n                            \n                        \n                        \n                            \n                                 unverifiable\n                            \n                        \n            \n        \n\n    server/history/schema/history.schema.ts\n    \n        \n            \n                \n                    \n                        \n                        HistoryType\n                    \n                \n                        \n                            \n                                 Create\n                            \n                        \n                        \n                            \n                                Value : create\n                            \n                        \n                        \n                            \n                                 Update\n                            \n                        \n                        \n                            \n                                Value : update\n                            \n                        \n                        \n                            \n                                 Delete\n                            \n                        \n                        \n                            \n                                Value : delete\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        TargetModel\n                    \n                \n                        \n                            \n                                 Claim\n                            \n                        \n                        \n                            \n                                Value : Claim\n                            \n                        \n                        \n                            \n                                 Personality\n                            \n                        \n                        \n                            \n                                Value : Personality\n                            \n                        \n                        \n                            \n                                 ClaimReview\n                            \n                        \n                        \n                            \n                                Value : ClaimReview\n                            \n                        \n            \n        \n\n    server/source/schemas/source.schema.ts\n    \n        \n            \n                \n                    \n                        \n                        SourceTargetModel\n                    \n                \n                        \n                            \n                                 Claim\n                            \n                        \n                        \n                            \n                                Value : Claim\n                            \n                        \n                        \n                            \n                                 ClaimReview\n                            \n                        \n                        \n                            \n                                Value : ClaimReview\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nAletheia\n\nPlataforma de análise de discursos de personalidades públicas e combate a Fake News.\n\nInstalação\n\nFork this repo and clone it locally:git clone https://github.com//aletheia\ncd aletheia\nStartup Mongo DB via Docker:docker-compose up -d\nInstall packages:yarn install\nTo run in dev modeyarn dev\nAccess http://localhost:3000 in your browser.\n\nDevelopment DB\n\nRun seeder:\nyarn seedBuild to production\n\nThe build step should be run as follow:\nyarn build\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\n                GNU GENERAL PUBLIC LICENSE\n                   Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n                        Preamble  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n                   TERMS AND CONDITIONS\nDefinitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\nSource Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n  The Corresponding Source for a work in source code form is that\nsame work.\n\nBasic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\nProtecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\nConveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\nConveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\na) The work must carry prominent notices stating that you modified\nit, and giving a relevant date.\n\nb) The work must carry prominent notices stating that it is\nreleased under this License and any conditions added under section\n7.  This requirement modifies the requirement in section 4 to\n\"keep intact all notices\".\n\nc) You must license the entire work, as a whole, under this\nLicense to anyone who comes into possession of a copy.  This\nLicense will therefore apply, along with any applicable section 7\nadditional terms, to the whole of the work, and all its parts,\nregardless of how they are packaged.  This License gives no\npermission to license the work in any other way, but it does not\ninvalidate such permission if you have separately received it.\n\nd) If the work has interactive user interfaces, each must display\nAppropriate Legal Notices; however, if the Program has interactive\ninterfaces that do not display Appropriate Legal Notices, your\nwork need not make them do so.  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\nConveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\na) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by the\nCorresponding Source fixed on a durable physical medium\ncustomarily used for software interchange.\n\nb) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by a\nwritten offer, valid for at least three years and valid for as\nlong as you offer spare parts or customer support for that product\nmodel, to give anyone who possesses the object code either (1) a\ncopy of the Corresponding Source for all the software in the\nproduct that is covered by this License, on a durable physical\nmedium customarily used for software interchange, for a price no\nmore than your reasonable cost of physically performing this\nconveying of source, or (2) access to copy the\nCorresponding Source from a network server at no charge.\n\nc) Convey individual copies of the object code with a copy of the\nwritten offer to provide the Corresponding Source.  This\nalternative is allowed only occasionally and noncommercially, and\nonly if you received the object code with such an offer, in accord\nwith subsection 6b.\n\nd) Convey the object code by offering access from a designated\nplace (gratis or for a charge), and offer equivalent access to the\nCorresponding Source in the same way through the same place at no\nfurther charge.  You need not require recipients to copy the\nCorresponding Source along with the object code.  If the place to\ncopy the object code is a network server, the Corresponding Source\nmay be on a different server (operated by you or a third party)\nthat supports equivalent copying facilities, provided you maintain\nclear directions next to the object code saying where to find the\nCorresponding Source.  Regardless of what server hosts the\nCorresponding Source, you remain obligated to ensure that it is\navailable for as long as needed to satisfy these requirements.\n\ne) Convey the object code using peer-to-peer transmission, provided\nyou inform other peers where the object code and Corresponding\nSource of the work are being offered to the general public at no\ncharge under subsection 6d.  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\nAdditional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\na) Disclaiming warranty or limiting liability differently from the\nterms of sections 15 and 16 of this License; or\n\nb) Requiring preservation of specified reasonable legal notices or\nauthor attributions in that material or in the Appropriate Legal\nNotices displayed by works containing it; or\n\nc) Prohibiting misrepresentation of the origin of that material, or\nrequiring that modified versions of such material be marked in\nreasonable ways as different from the original version; or\n\nd) Limiting the use for publicity purposes of names of licensors or\nauthors of the material; or\n\ne) Declining to grant rights under trademark law for use of some\ntrade names, trademarks, or service marks; or\n\nf) Requiring indemnification of licensors and authors of that\nmaterial by anyone who conveys the material (or modified versions of\nit) with contractual assumptions of liability to the recipient, for\nany liability that these contractual assumptions directly impose on\nthose licensors and authors.  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\nTermination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\nAcceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\nAutomatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\nPatents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\nNo Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\nUse with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\nRevised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\nDisclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\nLimitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\nInterpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n                 END OF TERMS AND CONDITIONS\n\n        How to Apply These Terms to Your New Programs  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\nCopyright (C)   \n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see .Also add information on how to contact you by electronic and paper mail.\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n  Copyright (C)   \nThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.The hypothetical commands show w' and show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\nhttps://www.gnu.org/licenses/.\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\nhttps://www.gnu.org/licenses/why-not-lgpl.html.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ClaimModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ClaimReviewModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ClaimRevisionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HistoryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HomeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ParserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PersonalityModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SitemapModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SourceModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StatsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ViewModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        WikidataModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ClaimModule\n\n\n\ncluster_ClaimModule_imports\n\n\n\ncluster_ClaimModule_exports\n\n\n\ncluster_ClaimModule_providers\n\n\n\ncluster_ClaimReviewModule\n\n\n\ncluster_ClaimReviewModule_exports\n\n\n\ncluster_ClaimReviewModule_providers\n\n\n\ncluster_ClaimRevisionModule\n\n\n\ncluster_ClaimRevisionModule_exports\n\n\n\ncluster_ClaimRevisionModule_providers\n\n\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_HistoryModule\n\n\n\ncluster_HistoryModule_exports\n\n\n\ncluster_HistoryModule_providers\n\n\n\ncluster_HomeModule\n\n\n\ncluster_HomeModule_imports\n\n\n\ncluster_OryModule\n\n\n\ncluster_OryModule_exports\n\n\n\ncluster_OryModule_providers\n\n\n\ncluster_ParserModule\n\n\n\ncluster_ParserModule_exports\n\n\n\ncluster_ParserModule_providers\n\n\n\ncluster_PersonalityModule\n\n\n\ncluster_PersonalityModule_imports\n\n\n\ncluster_PersonalityModule_exports\n\n\n\ncluster_PersonalityModule_providers\n\n\n\ncluster_SitemapModule\n\n\n\ncluster_SitemapModule_exports\n\n\n\ncluster_SitemapModule_providers\n\n\n\ncluster_SourceModule\n\n\n\ncluster_SourceModule_exports\n\n\n\ncluster_SourceModule_providers\n\n\n\ncluster_StatsModule\n\n\n\ncluster_StatsModule_exports\n\n\n\ncluster_StatsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_ViewModule\n\n\n\ncluster_ViewModule_exports\n\n\n\ncluster_ViewModule_providers\n\n\n\ncluster_WikidataModule\n\n\n\ncluster_WikidataModule_exports\n\n\n\ncluster_WikidataModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nLocalSerializer\n\nLocalSerializer\n\nAuthModule -->\n\nLocalSerializer->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nClaimReviewModule\n\nClaimReviewModule\n\n\n\nPersonalityModule\n\nPersonalityModule\n\nPersonalityModule -->\n\nClaimReviewModule->PersonalityModule\n\n\n\n\n\nClaimModule\n\nClaimModule\n\nClaimModule -->\n\nClaimReviewModule->ClaimModule\n\n\n\n\n\nClaimReviewService \n\nClaimReviewService \n\nClaimReviewService  -->\n\nClaimReviewModule->ClaimReviewService \n\n\n\n\n\nStatsModule\n\nStatsModule\n\nStatsModule -->\n\nClaimReviewModule->StatsModule\n\n\n\n\n\nSitemapModule\n\nSitemapModule\n\nSitemapModule -->\n\nClaimReviewModule->SitemapModule\n\n\n\n\n\nClaimRevisionModule\n\nClaimRevisionModule\n\nPersonalityModule -->\n\nClaimRevisionModule->PersonalityModule\n\n\n\nClaimModule -->\n\nClaimRevisionModule->ClaimModule\n\n\n\n\n\nClaimRevisionService \n\nClaimRevisionService \n\nClaimRevisionService  -->\n\nClaimRevisionModule->ClaimRevisionService \n\n\n\n\n\nHistoryModule\n\nHistoryModule\n\nClaimReviewModule -->\n\nHistoryModule->ClaimReviewModule\n\n\n\nPersonalityModule -->\n\nHistoryModule->PersonalityModule\n\n\n\nClaimModule -->\n\nHistoryModule->ClaimModule\n\n\n\n\n\nHistoryService \n\nHistoryService \n\nHistoryService  -->\n\nHistoryModule->HistoryService \n\n\n\n\n\nParserModule\n\nParserModule\n\nClaimRevisionModule -->\n\nParserModule->ClaimRevisionModule\n\n\n\nClaimModule -->\n\nParserModule->ClaimModule\n\n\n\n\n\nParserService \n\nParserService \n\nParserService  -->\n\nParserModule->ParserService \n\n\n\nClaimModule -->\n\nPersonalityModule->ClaimModule\n\n\n\nStatsModule -->\n\nPersonalityModule->StatsModule\n\n\n\n\n\nHomeModule\n\nHomeModule\n\nHomeModule -->\n\nPersonalityModule->HomeModule\n\n\n\n\n\nPersonalityService \n\nPersonalityService \n\nPersonalityService  -->\n\nPersonalityModule->PersonalityService \n\n\n\nSitemapModule -->\n\nPersonalityModule->SitemapModule\n\n\n\n\n\nSourceModule\n\nSourceModule\n\nClaimReviewModule -->\n\nSourceModule->ClaimReviewModule\n\n\n\nClaimRevisionModule -->\n\nSourceModule->ClaimRevisionModule\n\n\n\nClaimModule -->\n\nSourceModule->ClaimModule\n\n\n\n\n\nSourceService \n\nSourceService \n\nSourceService  -->\n\nSourceModule->SourceService \n\n\n\n\n\nViewModule\n\nViewModule\n\nUsersModule -->\n\nViewModule->UsersModule\n\n\n\nClaimRevisionModule -->\n\nViewModule->ClaimRevisionModule\n\n\n\nPersonalityModule -->\n\nViewModule->PersonalityModule\n\n\n\nClaimModule -->\n\nViewModule->ClaimModule\n\n\n\nHomeModule -->\n\nViewModule->HomeModule\n\n\n\n\n\nOryModule\n\nOryModule\n\nOryModule -->\n\nViewModule->OryModule\n\n\n\n\n\nViewService \n\nViewService \n\nViewService  -->\n\nViewModule->ViewService \n\n\n\n\n\nClaimService \n\nClaimService \n\nClaimService  -->\n\nClaimModule->ClaimService \n\n\n\nStatsModule -->\n\nClaimModule->StatsModule\n\n\n\nSitemapModule -->\n\nClaimModule->SitemapModule\n\n\n\n\n\nClaimService\n\nClaimService\n\nClaimModule -->\n\nClaimService->ClaimModule\n\n\n\n\n\nClaimReviewService\n\nClaimReviewService\n\nClaimReviewModule -->\n\nClaimReviewService->ClaimReviewModule\n\n\n\n\n\nUtilService\n\nUtilService\n\nClaimReviewModule -->\n\nUtilService->ClaimReviewModule\n\n\n\nPersonalityModule -->\n\nUtilService->PersonalityModule\n\n\n\n\n\nClaimRevisionService\n\nClaimRevisionService\n\nClaimRevisionModule -->\n\nClaimRevisionService->ClaimRevisionModule\n\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\nHistoryService\n\nHistoryService\n\nHistoryModule -->\n\nHistoryService->HistoryModule\n\n\n\nHomeModule -->\n\nStatsModule->HomeModule\n\n\n\n\n\nStatsService \n\nStatsService \n\nStatsService  -->\n\nStatsModule->StatsService \n\n\n\nUsersModule -->\n\nOryModule->UsersModule\n\n\n\n\n\nOryService \n\nOryService \n\nOryService  -->\n\nOryModule->OryService \n\n\n\n\n\nOryService\n\nOryService\n\nOryModule -->\n\nOryService->OryModule\n\n\n\n\n\nParserService\n\nParserService\n\nParserModule -->\n\nParserService->ParserModule\n\n\n\n\n\nWikidataModule\n\nWikidataModule\n\nPersonalityModule -->\n\nWikidataModule->PersonalityModule\n\n\n\n\n\nWikidataService \n\nWikidataService \n\nWikidataService  -->\n\nWikidataModule->WikidataService \n\n\n\n\n\nPersonalityService\n\nPersonalityService\n\nPersonalityModule -->\n\nPersonalityService->PersonalityModule\n\n\n\n\n\nSitemapService \n\nSitemapService \n\nSitemapService  -->\n\nSitemapModule->SitemapService \n\n\n\n\n\nSitemapService\n\nSitemapService\n\nSitemapModule -->\n\nSitemapService->SitemapModule\n\n\n\n\n\nSourceService\n\nSourceService\n\nSourceModule -->\n\nSourceService->SourceModule\n\n\n\n\n\nStatsService\n\nStatsService\n\nStatsModule -->\n\nStatsService->StatsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nViewService\n\nViewService\n\nViewModule -->\n\nViewService->ViewModule\n\n\n\n\n\nWikidataService\n\nWikidataService\n\nWikidataModule -->\n\nWikidataService->WikidataModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        17 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    12 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    22 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    17 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : Crowd-sourced fact-checking platform.\n        \n            Keywords : aletheia, REST, API, react, fact-checking\n        \n            License : MIT\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ClaimDocument   (server/.../claim.schema.ts)\n                        \n                        \n                            ClaimMatchParameters   (server/.../claim.service.ts)\n                        \n                        \n                            ClaimReviewDocument   (server/.../claim-review.schema.ts)\n                        \n                        \n                            ClaimRevisionDocument   (server/.../claim-revision.schema.ts)\n                        \n                        \n                            HistoryDocument   (server/.../history.schema.ts)\n                        \n                        \n                            PersonalityDocument   (server/.../personality.schema.ts)\n                        \n                        \n                            SourceDocument   (server/.../source.schema.ts)\n                        \n                        \n                            WikidataCacheDocument   (server/.../wikidata.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    server/claim/schemas/claim.schema.ts\n    \n    \n        \n            \n                \n                    \n                    ClaimDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    server/claim/claim.service.ts\n    \n    \n        \n            \n                \n                    \n                    ClaimMatchParameters\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    server/claim-review/schemas/claim-review.schema.ts\n    \n    \n        \n            \n                \n                    \n                    ClaimReviewDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    server/claim-revision/schema/claim-revision.schema.ts\n    \n    \n        \n            \n                \n                    \n                    ClaimRevisionDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    server/history/schema/history.schema.ts\n    \n    \n        \n            \n                \n                    \n                    HistoryDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    server/personality/schemas/personality.schema.ts\n    \n    \n        \n            \n                \n                    \n                    PersonalityDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    server/source/schemas/source.schema.ts\n    \n    \n        \n            \n                \n                    \n                    SourceDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    server/wikidata/schemas/wikidata.schema.ts\n    \n    \n        \n            \n                \n                    \n                    WikidataCacheDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            axios   (server/.../sitemap.service.ts)\n                        \n                        \n                            axios   (server/.../wikidata.service.ts)\n                        \n                        \n                            ClaimModel   (server/.../claim.module.ts)\n                        \n                        \n                            ClaimReviewModel   (server/.../claim-review.module.ts)\n                        \n                        \n                            ClaimReviewSchema   (server/.../claim-review.schema.ts)\n                        \n                        \n                            ClaimReviewSchemaRaw   (server/.../claim-review.schema.ts)\n                        \n                        \n                            ClaimRevisionModel   (server/.../claim-revision.module.ts)\n                        \n                        \n                            ClaimRevisionSchema   (server/.../claim-revision.schema.ts)\n                        \n                        \n                            ClaimRevisionSchemaRaw   (server/.../claim-revision.schema.ts)\n                        \n                        \n                            ClaimSchema   (server/.../claim.schema.ts)\n                        \n                        \n                            ClaimSchemaRaw   (server/.../claim.schema.ts)\n                        \n                        \n                            cookieParser   (server/.../main.ts)\n                        \n                        \n                            fs   (server/.../email.service.ts)\n                        \n                        \n                            handlebars   (server/.../email.service.ts)\n                        \n                        \n                            HistoryModel   (server/.../history.module.ts)\n                        \n                        \n                            HistorySchema   (server/.../history.schema.ts)\n                        \n                        \n                            initApp   (server/.../main.ts)\n                        \n                        \n                            initApp   (server/.../seed.ts)\n                        \n                        \n                            IsPublic   (server/.../is-public.decorator.ts)\n                        \n                        \n                            languageVariantMap   (server/.../wikidata.service.ts)\n                        \n                        \n                            md5   (server/.../parser.service.ts)\n                        \n                        \n                            mongodb_host   (server/.../seed.ts)\n                        \n                        \n                            mongodb_name   (server/.../seed.ts)\n                        \n                        \n                            MongoStore   (server/.../main.ts)\n                        \n                        \n                            nlp   (server/.../parser.service.ts)\n                        \n                        \n                            nodemailer   (server/.../email.service.ts)\n                        \n                        \n                            path   (server/.../email.service.ts)\n                        \n                        \n                            PersonalityModel   (server/.../personality.module.ts)\n                        \n                        \n                            PersonalitySchema   (server/.../personality.schema.ts)\n                        \n                        \n                            PersonalitySchemaRaw   (server/.../personality.schema.ts)\n                        \n                        \n                            phdRegex   (server/.../parser.service.ts)\n                        \n                        \n                            prefixes   (server/.../parser.service.ts)\n                        \n                        \n                            ServiceRunner   (server/.../server.ts)\n                        \n                        \n                            SourceModel   (server/.../source.module.ts)\n                        \n                        \n                            SourceSchema   (server/.../source.schema.ts)\n                        \n                        \n                            UserModel   (server/.../users.module.ts)\n                        \n                        \n                            UserSchema   (server/.../user.schema.ts)\n                        \n                        \n                            WikidataCacheModel   (server/.../wikidata.module.ts)\n                        \n                        \n                            WikidataCacheSchema   (server/.../wikidata.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    server/sitemap/sitemap.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        axios\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"axios\")\n                    \n                \n\n\n        \n    \n\n    server/wikidata/wikidata.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        axios\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"axios\")\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        languageVariantMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    \"pt-br\": \"pt\",\n}\n                    \n                \n\n\n        \n    \n\n    server/claim/claim.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ClaimModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeature([\n    {\n        name: Claim.name,\n        schema: ClaimSchema,\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/claim-review/claim-review.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ClaimReviewModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeature([\n    {\n        name: ClaimReview.name,\n        schema: ClaimReviewSchema,\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/claim-review/schemas/claim-review.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ClaimReviewSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ClaimReviewSchemaRaw\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ClaimReviewSchemaRaw\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(ClaimReview)\n                    \n                \n\n\n        \n    \n\n    server/claim-revision/claim-revision.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ClaimRevisionModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeature([\n    {\n        name: ClaimRevision.name,\n        schema: ClaimRevisionSchema,\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/claim-revision/schema/claim-revision.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ClaimRevisionSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ClaimRevisionSchemaRaw\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ClaimRevisionSchemaRaw\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(ClaimRevision)\n                    \n                \n\n\n        \n    \n\n    server/claim/schemas/claim.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ClaimSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ClaimSchemaRaw\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ClaimSchemaRaw\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Claim)\n                    \n                \n\n\n        \n    \n\n    server/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cookieParser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"cookie-parser\")\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initApp\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (options) => {\n    const corsOptions = {\n        origin: options?.config?.cors || \"*\",\n        credentials: true,\n        methods: \"GET,HEAD,PUT,PATCH,POST,DELETE, OPTIONS\",\n        allowedHeaders: [\"accept\", \"x-requested-with\", \"content-type\"],\n    };\n\n    const app = await NestFactory.create(\n        AppModule.register(options),\n        {\n            bodyParser: false,\n            logger: new Logger(options.logger) || undefined,\n            cors: corsOptions,\n        }\n    );\n\n    app.useGlobalPipes(\n        new ValidationPipe({\n            transform: true,\n            transformOptions: {enableImplicitConversion: true},\n            whitelist: true,\n            forbidNonWhitelisted: true,\n        }),\n    )\n\n    app.use(cookieParser());\n    app.use(\n        session({\n            secret: \"replace_me\",\n            resave: false,\n            saveUninitialized: false,\n            store: MongoStore.create({\n                mongoUrl: options.config.db.connection_uri,\n                mongoOptions: options.config.db.options\n            })\n        })\n    );\n    app.use(passport.initialize());\n    app.use(passport.session());\n    app.useStaticAssets(join(__dirname, \"..\", \"public\"));\n    // app.setGlobalPrefix(\"api\");\n    await app.listen(options.config.port);\n    options.logger.log(\n        \"info\",\n        `${options.name} with PID ${process.pid} listening on ${\n            options.config.interface || \"*\"\n        }:${options.config.port}`\n    );\n    return app;\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MongoStore\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"connect-mongo\")\n                    \n                \n\n\n        \n    \n\n    server/email/email.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        fs\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"fs\")\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handlebars\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"handlebars\")\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nodemailer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"nodemailer\")\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"path\")\n                    \n                \n\n\n        \n    \n\n    server/history/history.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        HistoryModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeature([\n    {\n        name: \"HISTORY_MODEL\",\n        schema: HistorySchema,\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/history/schema/history.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        HistorySchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(History)\n                    \n                \n\n\n        \n    \n\n    server/seed.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        initApp\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (options) => {\n    options.db = {\n        connection_uri: `mongodb://${mongodb_host}/${mongodb_name}`,\n        options: {\n            useUnifiedTopology: true,\n            useNewUrlParser: true,\n        }\n    }\n    options.logger.log(\"info\", `Loading AppModule`);\n    const app = await NestFactory.create(\n        AppModule.register(options),\n        {\n            logger: new Logger(options.logger) || undefined\n        }\n    );\n    options.logger.log(\"info\", `AppModule loaded`);\n    const emailService = app.get(EmailService);\n    const configService = app.get(ConfigService);\n    const userService = app.get(UsersService);\n    const users = configService.get(\"users\");\n    const disableSMTP = configService.get(\"disable_smtp\");\n\n    const generatePassword = (isTestUser = false, forcePassword = null) => {\n        const buf = randomBytes(8);\n\n        if (isTestUser) {\n            return forcePassword ? `${forcePassword}` : process.env.DEVELOPMENT_PASSWORD;\n        }\n\n        return buf.toString(\"hex\");\n    };\n\n    const seedSingleUser = async (userData, password) => {\n        return userService.register({ ...userData, password})\n            .then(async (user) => {\n                options.logger.log(\"info\", `${userData.email} seeded`);\n                if (userData.sendAuthDetails && !disableSMTP) {\n                    const emailResponse = await emailService.sendEmail(\n                        userData.email,\n                        \"Bem-vinda(o) a Aletheia\",\n                        \"Você poderá acessar o sistema usando as credenciais abaixo\",\n                        { ...userData, password },\n                        \"./templates/userSeed.html\"\n                    );\n                    options.logger.log(\"info\", emailResponse);\n                    options.logger.log(\"info\", `E-mail sent to ${userData.email}`);\n                }\n                return user;\n            })\n            .catch((e) => {\n                options.logger.log(\"error\", e);\n                options.logger.log(\"info\", `Error while seeding ${userData.email}`);\n                return null;\n            });\n    };\n    // Using await Promise.all to force loop to finish before continuing\n    await Promise.all(\n        users.map(async (userData) => {\n            const password = generatePassword(userData.isTestUser, userData.password);\n            return seedSingleUser(userData, password);\n        })\n    );\n\n    options.logger.log(\n        \"info\",\n        \"Seed is finished\"\n    );\n    await app.close();\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mongodb_host\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.MONGODB_HOST || \"localhost\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mongodb_name\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.MONGODB_NAME || \"Aletheia\"\n                    \n                \n\n\n        \n    \n\n    server/decorators/is-public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsPublic\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata('public', true)\n                    \n                \n\n\n        \n    \n\n    server/parser/parser.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        md5\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"md5\")\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nlp\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('compromise')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phdRegex\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /Ph\\.D\\./g\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prefixes\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /(Mr|St|Mrs|Ms|Dr)[.]/g\n                    \n                \n\n\n        \n    \n\n    server/personality/personality.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PersonalityModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeature([\n    {\n        name: Personality.name,\n        schema: PersonalitySchema,\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/personality/schemas/personality.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PersonalitySchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : PersonalitySchemaRaw\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PersonalitySchemaRaw\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Personality)\n                    \n                \n\n\n        \n    \n\n    server/server.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ServiceRunner\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"service-runner\")\n                    \n                \n\n\n        \n    \n\n    server/source/source.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SourceModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeature([\n    {\n        name: Source.name,\n        schema: SourceSchema,\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/source/schemas/source.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SourceSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Source)\n                    \n                \n\n\n        \n    \n\n    server/users/users.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeatureAsync([\n    {\n        name: User.name,\n        useFactory: () => {\n            const schema = UserSchema;\n            schema.plugin(require(\"passport-local-mongoose\"), {\n                usernameField: \"email\",\n            });\n            return schema;\n        },\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/users/schemas/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n    server/wikidata/wikidata.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        WikidataCacheModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeatureAsync([\n    {\n        name: WikidataCache.name,\n        useFactory: () => {\n            const wikidataCacheSchema = WikidataCacheSchema;\n            wikidataCacheSchema.index(\n                { wikidataId: 1, language: 1 },\n                { unique: true }\n            );\n            wikidataCacheSchema.index(\n                { createdAt: 1 },\n                { expireAfterSeconds: 86400 }\n            );\n            return wikidataCacheSchema;\n        },\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/wikidata/schemas/wikidata.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        WikidataCacheSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(WikidataCache)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}

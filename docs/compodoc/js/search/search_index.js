var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,0.736,1,3.132]],["body/modules/AppModule.html",[0,1.069,1,4.547,2,1.198,3,0.091,4,0.071,5,0.081,6,3.72,7,0.664,8,2.61,9,3.72,10,5.297,11,6.722,12,0.491,13,3.72,14,1.059,15,0.011,16,0.591,17,0.332,18,0.972,19,4.65,20,1.001,21,2.958,22,5.297,23,3.266,24,5.297,25,3.72,26,2.415,27,6.169,28,0.191,29,5.297,30,0.359,31,1.701,32,0.744,33,3.65,34,3.72,35,3.439,36,3.266,37,2.958,38,2.564,39,3.257,40,2.966,41,2.831,42,1.499,43,1.533,44,2.415,45,2.958,46,2.564,47,3.439,48,3.266,49,3.905,50,3.72,51,1.988,52,1.393,53,2.61,54,2.176,55,3.65,56,3.72,57,3.65,58,3.72,59,5.297,60,6.169,61,2.564,62,3.905,63,3.72,64,3.72,65,3.72,66,5.297,67,3.266,68,3.65,69,3.72,70,3.257,71,2.176,72,2.966,73,3.099,74,2.742,75,3.439,76,2.258,77,2.176,78,3.266,79,3.905,80,3.72,81,3.439,82,3.266,83,3.439,84,3.266,85,4.547,86,3.72,87,3.905,88,3.72,89,2.742,90,3.72,91,2.077,92,3.72,93,2.564,94,3.72,95,2.742,96,3.72,97,3.72,98,3.257,99,2.966,100,3.257,101,2.966,102,3.257,103,2.966,104,3.439,105,3.266,106,0.091,107,0.12,108,2.077,109,3.72,110,3.72,111,3.72,112,3.72,113,1.907,114,3.257,115,3.266,116,2.966,117,2.742,118,3.72,119,0.787,120,3.72,121,0.904,122,1.31,123,3.72,124,3.72,125,3.72,126,3.72,127,3.266,128,3.72,129,3.72,130,3.266,131,3.72,132,2.966,133,3.72,134,1.069,135,1.31,136,5.415,137,5.297,138,3.72,139,0.006,140,0.006]],["title/modules/CaptchaModule.html",[0,0.736,98,2.612]],["body/modules/CaptchaModule.html",[0,1.245,2,1.9,3,0.144,4,0.112,5,0.128,15,0.011,28,0.175,30,0.569,51,3.841,52,2.208,98,5.236,106,0.144,107,0.19,122,2.077,135,2.53,139,0.009,140,0.009,141,2.384,142,5.178,143,5.178,144,5.178,145,5.403,146,2.53,147,2.077,148,1.9,149,5.899,150,2.69,151,6.309,152,4.348,153,5.899]],["title/injectables/CaptchaService.html",[145,2.612,154,0.634]],["body/injectables/CaptchaService.html",[3,0.114,4,0.089,5,0.102,7,1.106,12,0.687,14,1.391,15,0.011,16,0.776,17,0.553,18,1.277,20,1.172,28,0.161,30,0.451,52,1.752,106,0.114,107,0.151,119,1.471,139,0.008,140,0.008,145,3.814,152,3.45,154,0.926,155,1.464,156,4.108,157,0.401,158,1.387,159,1.873,160,2.868,161,2.689,162,2.151,163,6.203,164,4.274,165,1.638,166,4.68,167,7.921,168,4.319,169,6.203,170,6.203,171,3.387,172,4.68,173,7.408,174,2.057,175,6.203,176,1.555,177,4.68,178,6.203,179,1.344,180,1.648,181,1.999,182,6.203,183,6.203,184,4.108,185,0.889,186,4.68,187,4.68,188,6.203,189,4.68,190,4.68,191,3.315,192,1.998,193,4.68,194,4.68,195,2.399,196,4.68,197,4.68,198,4.68,199,4.68,200,2.306,201,5.444,202,4.68,203,1.867]],["title/classes/Claim.html",[42,1.032,107,0.137]],["body/classes/Claim.html",[3,0.119,4,0.121,5,0.106,12,0.658,15,0.011,17,0.714,28,0.169,32,0.973,42,1.828,106,0.173,107,0.157,121,2.01,139,0.008,140,0.008,157,0.417,158,1.423,176,1.423,185,0.734,204,1.568,205,3.587,206,5.228,207,2.913,208,4.604,209,4.924,210,1.723,211,3.263,212,3.136,213,3.328,214,4.471,215,4.867,216,4.867,217,2.495,218,4.867,219,3.319,220,1.881,221,2.225,222,2.037,223,3.159,224,2.993,225,3.587,226,3.88,227,2.993,228,2.993,229,3.88,230,2.495,231,4.867,232,2.847,233,3.723,234,2.847,235,3.723,236,5.074,237,4.272,238,4.867,239,4.132,240,2.713,241,4.132,242,3.159,243,4.867,244,2.495,245,4.867,246,3.587]],["title/controllers/ClaimController.html",[247,1.22,248,3.132]],["body/controllers/ClaimController.html",[3,0.049,4,0.038,5,0.043,7,0.586,8,3.776,12,0.668,14,1.44,15,0.011,16,0.803,17,0.586,18,1.322,20,1.361,28,0.163,30,0.193,42,1.802,43,0.825,52,0.749,76,1.783,77,1.17,91,1.835,106,0.049,107,0.064,119,1.389,121,1.476,134,0.575,139,0.004,140,0.004,145,2.572,157,0.171,159,1.541,160,0.825,161,1.193,162,2.132,165,0.528,168,2.235,171,3.535,174,0.664,181,1.201,185,0.928,192,2.51,203,0.798,207,2.44,210,1.684,222,0.944,242,4.39,244,1.026,247,0.944,248,2.423,249,1.756,250,3.286,251,3.286,252,3.286,253,1.518,254,2.235,255,2.021,256,3.286,257,2.265,258,4.182,259,3.286,260,3.671,261,3.286,262,1.835,263,3.286,264,2.001,265,2.635,266,3.286,267,2.001,268,1.685,269,2.001,270,3.535,271,4.224,272,2.001,273,2.001,274,3.464,275,2.001,276,3.962,277,2.001,278,2.001,279,1.756,280,2.001,281,2.001,282,1.756,283,2.001,284,2.001,285,2.001,286,2.001,287,2.001,288,2.001,289,4.478,290,2.001,291,2.001,292,2.001,293,2.001,294,2.001,295,2.001,296,2.001,297,2.001,298,1.756,299,2.001,300,2.001,301,2.001,302,2.001,303,2.001,304,1.756,305,4.676,306,2.001,307,2.001,308,0.915,309,1.299,310,1.475,311,2.061,312,1.17,313,2.447,314,1.756,315,0.883,316,1.17,317,0.986,318,2.235,319,1.475,320,2.061,321,1.299,322,1.299,323,2.885,324,1.595,325,2.001,326,1.595,327,2.727,328,1.069,329,1.069,330,1.756,331,2.572,332,1.595,333,1.685,334,1.379,335,2.001,336,3.286,337,1.756,338,3.962,339,3.962,340,2.001,341,2.001,342,2.001,343,1.756,344,2.451,345,1.117,346,2.214,347,1.299,348,1.45,349,1.379,350,2.885,351,2.001,352,2.133,353,2.001,354,2.001,355,2.001,356,3.671,357,2.882,358,2.001,359,1.379,360,1.299,361,2.133,362,1.756,363,1.595,364,2.001,365,1.595,366,2.885,367,1.756,368,2.001,369,1.23,370,1.756,371,1.756,372,1.756,373,2.001,374,2.001,375,1.756,376,3.286,377,2.001,378,1.756,379,2.001,380,2.001,381,1.756,382,2.001,383,2.001,384,1.475,385,1.475,386,2.001,387,2.001,388,2.001,389,2.885,390,4.182,391,2.001,392,1.756,393,1.756,394,2.572,395,1.23,396,2.001,397,2.001,398,1.475,399,2.001,400,2.001,401,2.885,402,2.885,403,2.001,404,3.535,405,3.535,406,5.047,407,3.569,408,5.349,409,3.943,410,2.001,411,3.334,412,2.133,413,1.756,414,3.286,415,3.732,416,3.286,417,3.286,418,2.001,419,2.001,420,1.756,421,2.001,422,4.842,423,4.842,424,2.978,425,2.833,426,3.143,427,2.001,428,2.001,429,2.001,430,2.001,431,2.001,432,1.299,433,2.001,434,1.069,435,1.756]],["title/modules/ClaimModule.html",[0,0.736,39,2.612]],["body/modules/ClaimModule.html",[0,1.023,2,1.4,3,0.106,4,0.083,5,0.094,15,0.011,16,0.484,28,0.186,30,0.419,31,1.987,32,0.869,37,4.329,38,2.995,39,5.413,41,4.143,42,1.747,43,1.791,44,2.821,45,4.329,46,2.995,51,3.154,52,1.627,53,3.82,54,2.542,70,4.768,71,2.542,72,3.465,73,4.535,74,3.203,75,5.033,76,2.516,77,2.542,78,3.815,98,4.768,99,3.465,106,0.106,107,0.14,122,2.078,134,1.695,135,2.078,139,0.007,140,0.007,141,1.958,146,2.078,147,1.53,148,1.4,150,2.209,185,0.502,220,1.284,246,4.351,248,4.94,313,4.921,314,3.815,436,3.815,437,3.815,438,3.815,439,3.815,440,5.033,441,3.465,442,4.346,443,4.346,444,3.815,445,4.351,446,2.061,447,3.815]],["title/classes/ClaimReview.html",[107,0.137,448,2.015]],["body/classes/ClaimReview.html",[3,0.104,4,0.111,5,0.092,12,0.715,15,0.011,17,0.742,28,0.171,32,0.85,42,1.871,106,0.162,107,0.137,121,2.063,139,0.007,140,0.007,157,0.364,158,1.3,176,1.3,185,0.671,204,1.37,207,2.826,209,3.576,210,1.871,211,3.652,212,3.51,213,3.511,214,4.547,217,2.981,219,3.479,220,1.718,221,1.944,222,1.904,223,2.76,226,3.39,227,2.615,228,2.615,230,2.18,232,2.487,233,3.402,234,2.487,235,4.168,239,2.76,240,1.812,241,2.76,244,2.18,265,3.265,385,4.885,448,3.143,449,3.046,450,5.813,451,3.134,452,4.29,453,4.302,454,4.252,455,3.247,456,4.252,457,4.252,458,4.252,459,4.252,460,2.627,461,4.252,462,2.93,463,3.39,464,2.93,465,3.39,466,4.636,467,3.732,468,4.252,469,4.252,470,3.134]],["title/controllers/ClaimReviewController.html",[247,1.22,471,2.612]],["body/controllers/ClaimReviewController.html",[3,0.121,4,0.094,5,0.107,7,1.148,12,0.664,14,1.43,15,0.011,16,0.797,17,0.442,18,1.313,20,1.351,28,0.164,30,0.477,42,1.564,43,3.121,91,3.594,106,0.121,107,0.159,119,1.512,134,1.422,139,0.008,140,0.008,157,0.424,159,1.203,162,1.942,165,1.308,174,1.642,210,1.738,247,1.849,253,2.596,254,3.822,265,3.731,274,3.463,308,2.264,309,3.214,311,3.524,312,2.896,322,3.214,327,3.053,328,2.646,329,2.646,449,2.925,453,3.214,471,3.958,472,4.346,473,4.951,474,6.039,475,4.951,476,4.951,477,4.951,478,4.951,479,4.951,480,5.582,481,4.951,482,4.951,483,4.951,484,4.951,485,4.951,486,4.346,487,4.346,488,4.951,489,4.951,490,4.951,491,4.951,492,4.951,493,4.951,494,4.951]],["title/controllers/ClaimReviewController-1.html",[247,1.017,471,2.178,495,1.815]],["body/controllers/ClaimReviewController-1.html",[3,0.079,4,0.062,5,0.07,7,0.855,8,3.468,12,0.653,14,1.407,15,0.011,16,0.785,17,0.628,18,1.292,20,1.33,28,0.169,30,0.312,42,1.385,76,3.537,77,4.26,91,2.675,106,0.079,107,0.104,119,1.488,121,0.787,134,0.931,139,0.006,140,0.006,145,3.506,157,0.278,159,1.385,162,2.266,165,0.856,171,2.88,174,2.23,176,1.573,180,2.007,181,1.376,185,0.776,192,1.837,210,1.71,247,1.376,253,1.739,255,2.946,262,3.183,265,3.468,268,2.456,270,2.88,271,3.608,274,2.78,308,1.481,309,2.103,310,2.388,315,1.429,316,1.895,317,1.596,320,2.809,321,2.103,322,2.103,324,2.583,326,2.583,327,2.272,328,1.731,329,1.731,330,2.844,331,3.506,332,2.583,344,2.202,345,1.809,346,2.88,347,2.103,348,2.114,352,2.103,357,3.302,365,2.583,366,5.53,367,4.206,369,2.946,370,4.206,371,4.206,372,4.206,375,2.844,404,1.992,405,1.992,413,2.844,415,2.103,424,1.992,425,1.895,426,2.103,449,2.813,471,2.946,486,2.844,495,1.661,496,2.844,497,4.791,498,4.206,499,3.82,500,3.24,501,4.09,502,3.24,503,3.24,504,4.791,505,3.24,506,3.24,507,3.24,508,2.561,509,3.24,510,5.368,511,3.24,512,3.24,513,2.844,514,3.24,515,3.24,516,2.583,517,3.24,518,3.24,519,2.844,520,5.53,521,4.341,522,3.24,523,3.24,524,3.532,525,3.24,526,3.24,527,3.24,528,3.24,529,2.103,530,1.895,531,3.24,532,2.844,533,2.844,534,3.24,535,3.24,536,2.844,537,3.24,538,4.791,539,3.24,540,3.24,541,3.24,542,3.24,543,3.24,544,3.24,545,3.24,546,3.24,547,3.24,548,3.24,549,3.24,550,2.844,551,3.24,552,2.583,553,3.24]],["title/modules/ClaimReviewModule.html",[0,0.736,41,2.27]],["body/modules/ClaimReviewModule.html",[0,1.125,2,1.617,3,0.122,4,0.096,5,0.109,15,0.011,16,0.56,28,0.183,30,0.484,31,2.295,32,1.003,41,4.618,42,1.578,43,2.069,45,4.509,46,3.459,51,3.47,52,1.879,73,4.724,74,3.7,106,0.158,107,0.162,122,2.286,134,1.865,135,2.286,139,0.008,140,0.008,141,2.154,146,2.286,147,1.767,148,1.617,150,2.431,185,0.579,220,1.483,311,4.237,312,2.936,446,2.381,448,2.381,449,1.939,470,4.787,471,4.427,554,4.406,555,4.406,556,4.406,557,5.019,558,4.509,559,4.002,560,3.7,561,4.406,562,5.019,563,3.7,564,4.787,565,4.406]],["title/injectables/ClaimReviewService.html",[154,0.634,311,2.093]],["body/injectables/ClaimReviewService.html",[0,0.899,3,0.055,4,0.043,5,0.049,7,0.645,12,0.678,14,1.435,15,0.011,16,0.8,17,0.463,18,1.318,20,1.44,28,0.144,30,0.217,32,0.45,42,1.947,43,3.062,76,3.06,106,0.055,107,0.072,113,1.153,119,1.546,121,1.55,139,0.006,140,0.004,154,0.54,155,0.704,157,0.193,158,0.808,159,1.475,160,1.867,161,1.883,162,2.071,165,0.954,174,1.885,179,1.038,180,1.272,181,1.906,185,0.79,192,1.955,203,2.07,207,1.272,222,1.038,227,1.383,228,1.383,239,3.368,240,3.06,241,3.368,242,4.141,253,1.312,254,3.244,255,2.222,265,3.461,268,1.153,308,2.599,311,1.78,333,1.153,334,1.55,344,1.396,369,1.383,384,4.19,385,3.34,389,3.172,434,3.244,448,2.696,449,2.87,452,3.545,453,1.46,460,0.792,465,1.793,495,3.401,508,2.773,529,4.444,558,2.897,560,1.658,561,1.974,563,3.825,564,2.664,566,1.974,567,3.614,568,3.614,569,3.614,570,3.614,571,3.614,572,3.614,573,2.249,574,3.562,575,3.614,576,3.614,577,2.249,578,4.717,579,2.664,580,2.249,581,3.614,582,2.249,583,3.368,584,4.839,585,4.137,586,2.881,587,3.94,588,2.322,589,3.614,590,2.664,591,2.664,592,1.652,593,3.614,594,2.249,595,2.881,596,4.137,597,2.881,598,2.49,599,2.881,600,2.881,601,5.188,602,2.881,603,3.614,604,2.249,605,3.614,606,2.249,607,3.614,608,2.249,609,3.614,610,3.614,611,2.249,612,3.614,613,2.249,614,3.614,615,2.249,616,3.614,617,1.652,618,1.153,619,1.067,620,1.793,621,1.55,622,2.881,623,2.249,624,5.684,625,5.188,626,5.188,627,5.188,628,5.188,629,5.188,630,2.941,631,2.249,632,3.172,633,2.346,634,1.974,635,2.249,636,2.249,637,2.249,638,2.249,639,2.249,640,2.249,641,2.881,642,2.249,643,1.974,644,2.249,645,1.793,646,2.249,647,2.249,648,2.249,649,2.249,650,2.249,651,2.249,652,2.249,653,2.249,654,4.53,655,2.249,656,2.249,657,3.614,658,2.249,659,2.249,660,3.172,661,2.249,662,3.614,663,1.793,664,3.172,665,2.249,666,2.249,667,2.249,668,1.46,669,1.974,670,1.46,671,1.46,672,1.46,673,1.55,674,1.55,675,1.46,676,1.55,677,1.46,678,2.249,679,2.249,680,1.793,681,1.46,682,2.249]],["title/classes/ClaimReviewTask.html",[107,0.137,412,2.758]],["body/classes/ClaimReviewTask.html",[3,0.131,4,0.103,5,0.117,12,0.63,15,0.011,17,0.697,28,0.162,32,1.077,42,1.309,76,3.56,106,0.182,107,0.174,121,2.053,139,0.008,140,0.008,157,0.462,158,1.519,176,1.519,185,0.622,204,1.736,210,1.651,211,2.763,213,3.331,219,3.284,220,2.008,221,2.464,222,1.952,230,2.763,232,3.153,233,3.975,234,3.153,265,3.667,322,3.499,412,4.832,449,2.875,524,3.973,592,3.107,683,5.487,684,3.973,685,5.669,686,5.389,687,4.731,688,5.389,689,4.297,690,3.314,691,3.973,692,4.731]],["title/modules/ClaimReviewTaskModule.html",[0,0.736,75,2.758]],["body/modules/ClaimReviewTaskModule.html",[0,1.106,2,1.574,3,0.119,4,0.093,5,0.106,15,0.011,16,0.545,28,0.182,30,0.471,31,2.233,32,0.977,41,4.284,42,1.726,43,2.014,44,3.171,53,3.95,54,2.858,75,5.637,76,3.332,77,2.858,81,5.204,82,4.288,98,4.929,99,3.895,106,0.156,107,0.157,122,2.246,134,1.833,135,2.246,139,0.008,140,0.008,141,2.116,146,2.246,147,1.72,148,1.574,150,2.388,185,0.564,220,1.444,331,5.267,332,3.895,412,3.171,446,2.317,449,1.887,471,4.369,560,3.601,691,4.703,693,4.288,694,4.288,695,4.288,696,4.288,697,3.895,698,4.288,699,4.885,700,4.703,701,4.288]],["title/injectables/ClaimReviewTaskService.html",[154,0.634,331,2.612]],["body/injectables/ClaimReviewTaskService.html",[3,0.075,4,0.059,5,0.067,7,0.824,12,0.665,14,1.432,15,0.011,16,0.84,17,0.617,18,1.315,20,1.306,28,0.16,30,0.297,32,0.616,42,1.6,43,1.271,76,3.549,77,4.311,106,0.075,107,0.099,119,1.515,139,0.007,140,0.006,154,0.69,155,0.965,157,0.264,159,1.345,162,2.046,165,1.22,174,1.837,176,1.685,179,0.886,180,2.433,181,1.327,185,0.886,192,1.981,195,1.581,200,1.519,203,1.23,206,2.273,207,1.626,208,2.998,222,0.886,240,1.969,253,1.676,255,2.84,257,3.183,262,3.092,265,3.713,268,1.581,311,3.531,312,1.804,322,2.002,326,2.458,331,2.84,344,1.191,346,2.811,348,2.713,369,1.896,412,3.594,449,2.847,452,2.468,460,1.086,487,2.707,501,3.991,519,2.707,520,5.397,521,4.237,524,3.404,529,2.998,536,4.054,560,2.273,579,3.404,617,3.276,618,1.581,619,1.462,630,2.002,645,2.458,668,2.002,671,2.002,672,2.002,673,2.125,674,2.125,675,2.002,676,2.125,677,2.002,685,2.125,689,2.458,698,2.707,700,3.404,702,2.707,703,4.618,704,3.084,705,4.407,706,3.084,707,3.084,708,4.618,709,3.084,710,4.618,711,4.618,712,3.084,713,3.084,714,4.618,715,3.084,716,3.682,717,3.084,718,5.537,719,3.084,720,3.084,721,3.084,722,3.084,723,3.084,724,2.125,725,2.125,726,4.902,727,3.991,728,3.084,729,5.397,730,3.084,731,3.084,732,3.084,733,3.084,734,4.618,735,3.084,736,3.084,737,3.084,738,3.084,739,2.458,740,3.084,741,3.084,742,3.084,743,4.618,744,4.618,745,3.084,746,3.084,747,4.618,748,3.084,749,4.618,750,4.86,751,3.084,752,3.084,753,3.084,754,4.618,755,3.084,756,2.707,757,3.084,758,3.084,759,3.084,760,3.084,761,1.722,762,3.084,763,3.084,764,3.084]],["title/classes/ClaimRevision.html",[107,0.137,209,2.612]],["body/classes/ClaimRevision.html",[3,0.094,4,0.073,5,0.083,12,0.711,15,0.011,17,0.735,28,0.148,32,0.767,42,1.862,106,0.166,107,0.124,113,1.967,119,0.811,121,2.064,139,0.007,140,0.007,157,0.329,158,1.21,164,3.732,176,1.524,179,1.102,185,0.625,204,1.236,207,2.756,208,4.073,209,3.858,210,1.862,211,3.217,212,3.358,213,3.478,214,4.371,217,3.494,219,3.512,220,1.6,221,1.754,222,1.555,223,2.491,224,4.814,230,1.967,232,2.245,233,3.168,234,2.245,235,4.205,239,3.515,240,2.675,241,3.515,242,4.073,253,1.393,395,4.42,448,1.82,449,3.024,462,2.644,530,2.245,668,4.073,765,2.644,766,6.816,767,5.508,768,3.837,769,4.42,770,3.837,771,5.003,772,3.33,773,5.003,774,3.837,775,3.837,776,3.837,777,3.837,778,3.837,779,3.059,780,2.829,781,4.753,782,1.891,783,5.003,784,3.837,785,3.837,786,2.829,787,3.837,788,3.33,789,3.837,790,3.837,791,3.837,792,3.837,793,2.829,794,3.059,795,3.368,796,4.317,797,3.368,798,3.837,799,3.837,800,2.829]],["title/modules/ClaimRevisionModule.html",[0,0.736,70,2.612]],["body/modules/ClaimRevisionModule.html",[0,1.213,2,1.527,3,0.116,4,0.09,5,0.103,15,0.011,16,0.528,28,0.184,30,0.457,31,2.167,32,0.948,42,1.52,45,4.439,46,3.267,51,3.343,52,1.774,53,3.917,54,2.773,70,5.358,71,2.773,100,4.889,101,3.779,102,4.889,103,3.779,106,0.116,107,0.153,113,2.43,122,2.202,135,2.202,139,0.008,140,0.008,141,2.075,146,2.202,147,1.669,148,1.527,150,2.342,151,5.491,152,3.494,185,0.547,209,3.847,220,1.401,225,3.494,440,5.161,444,4.161,446,2.248,449,1.831,800,4.611,801,4.161,802,4.161,803,4.161,804,4.161,805,5.535,806,3.779,807,4.161,808,4.161,809,4.611,810,4.161,811,4.74,812,4.161,813,4.74,814,4.74,815,4.74]],["title/injectables/ClaimRevisionService.html",[154,0.634,805,2.758]],["body/injectables/ClaimRevisionService.html",[3,0.092,4,0.119,5,0.082,7,0.956,12,0.663,14,1.244,15,0.011,16,0.755,17,0.555,18,1.143,20,1.176,28,0.169,30,0.364,32,0.756,42,1.895,71,4.342,106,0.092,107,0.122,119,1.133,121,1.645,139,0.007,140,0.007,154,0.8,155,1.183,157,0.324,158,1.198,159,1.927,160,2.565,161,2.457,162,1.69,165,1.415,174,1.254,176,0.845,179,1.086,180,1.331,181,2.132,185,0.618,192,1.726,195,2.747,200,2.64,203,2.137,209,4.395,222,1.086,225,2.787,240,1.612,242,4.395,244,1.938,253,1.945,308,2.45,333,1.938,369,3.295,449,2.868,455,2.992,508,3.618,578,2.605,588,1.938,598,3.692,617,3.096,619,1.793,670,2.454,690,3.295,761,2.992,779,3.014,805,3.478,807,3.319,809,3.95,816,3.319,817,4.588,818,5.358,819,3.781,820,4.465,821,4.955,822,5.358,823,5.358,824,3.781,825,2.864,826,3.95,827,5.358,828,3.781,829,4.703,830,2.787,831,3.781,832,3.95,833,4.272,834,3.781,835,3.319,836,2.787,837,3.319,838,3.95,839,3.781,840,2.787,841,3.781,842,3.319,843,3.014,844,3.781,845,3.319,846,3.781,847,4.703,848,3.319,849,3.014,850,4.703,851,3.319,852,3.319,853,3.014,854,3.319,855,3.014,856,3.319,857,3.781,858,3.014,859,3.781,860,3.781,861,3.781,862,3.781,863,3.319,864,3.781,865,5.358,866,3.781,867,3.781,868,3.781,869,3.781,870,3.781]],["title/injectables/ClaimService.html",[154,0.634,313,2.485]],["body/injectables/ClaimService.html",[0,0.927,3,0.042,4,0.033,5,0.038,7,0.52,12,0.652,14,1.353,15,0.011,16,0.77,17,0.477,18,1.268,20,1.386,28,0.143,30,0.167,32,0.346,42,2.026,43,0.714,61,1.194,71,1.013,106,0.042,107,0.056,113,1.495,119,1.613,121,1.383,139,0.006,140,0.004,154,0.435,155,0.542,157,0.148,158,0.652,159,1.882,160,1.556,161,1.607,162,2.117,165,0.77,174,1.982,176,0.844,179,1.272,180,1.559,181,2.107,185,0.873,191,2.86,192,2.334,203,1.766,206,2.783,207,1.739,208,1.893,212,2.637,222,0.838,227,1.065,228,1.065,229,1.381,240,2.426,242,4.289,253,1.607,254,3.042,255,1.793,257,2.009,262,1.628,268,2.27,270,2.258,274,1.286,279,2.559,282,2.559,304,2.559,308,2.602,311,2.805,312,1.013,313,1.706,315,0.764,333,0.888,334,1.194,337,2.559,344,1.458,345,2.472,346,2.024,348,1.954,352,1.125,356,3.886,361,4.483,369,1.793,384,2.149,392,1.521,393,1.521,398,2.149,402,3.886,411,2.325,434,3.323,435,3.314,445,2.783,448,1.383,455,1.628,460,1.884,462,1.194,508,2.366,529,1.893,530,1.706,574,3.178,578,1.194,579,2.149,583,4.037,584,4.765,585,4.267,586,2.325,587,3.207,588,2.27,590,3.264,591,3.264,592,2.258,595,2.325,596,3.53,597,2.325,598,3.051,599,2.325,600,2.325,602,2.325,617,1.333,618,0.888,619,0.822,620,1.381,621,1.194,622,2.325,630,1.125,633,1.893,660,3.314,663,1.381,664,3.314,669,1.521,670,1.125,671,2.451,672,2.451,673,2.601,674,2.601,675,2.451,676,2.601,677,2.451,680,1.381,681,1.125,716,2.325,724,1.194,725,1.194,726,4.765,727,3.88,795,5.459,805,3.695,808,1.521,817,2.783,825,2.86,826,2.149,829,2.559,830,1.277,832,2.783,838,2.149,840,1.277,842,1.521,843,2.325,845,1.521,858,3.01,863,3.886,871,1.381,872,2.916,873,2.916,874,2.916,875,4.698,876,2.916,877,1.521,878,2.916,879,2.916,880,3.886,881,1.733,882,2.916,883,1.733,884,4.427,885,1.733,886,2.916,887,1.733,888,5.353,889,4.427,890,1.733,891,1.733,892,2.916,893,1.733,894,2.325,895,1.733,896,2.916,897,1.733,898,2.916,899,1.733,900,3.775,901,4.94,902,1.733,903,2.916,904,2.916,905,2.559,906,2.916,907,2.149,908,2.559,909,2.559,910,1.733,911,1.521,912,2.325,913,2.916,914,1.521,915,1.521,916,1.733,917,1.733,918,1.733,919,1.733,920,1.733,921,2.916,922,1.733,923,1.733,924,1.733,925,1.733,926,1.733,927,1.733,928,2.916,929,2.916,930,1.733,931,2.916,932,3.314,933,1.733,934,1.733,935,1.733,936,1.733,937,1.733,938,3.775,939,1.733,940,1.733,941,1.733,942,1.521,943,1.733,944,2.916,945,1.733,946,1.733,947,1.277,948,1.521,949,1.733,950,1.733,951,1.733,952,1.733,953,1.733,954,3.775,955,2.916,956,1.733,957,1.733,958,1.733,959,1.733,960,1.521,961,1.733,962,1.733,963,1.521,964,1.733,965,2.916,966,1.733,967,2.916,968,1.733,969,2.916,970,1.733,971,1.733,972,1.733,973,1.733,974,1.733,975,1.733,976,1.733,977,1.733,978,1.733,979,1.733,980,1.733,981,1.733,982,1.733]],["title/classes/CreateClaimDTO.html",[107,0.137,276,2.928]],["body/classes/CreateClaimDTO.html",[3,0.122,4,0.095,5,0.108,12,0.761,15,0.011,17,0.732,28,0.156,42,1.212,106,0.122,107,0.208,139,0.008,140,0.008,157,0.428,158,1.446,176,1.921,204,1.607,207,2.839,210,1.994,223,3.239,224,3.068,225,3.678,276,4.458,395,4.414,432,4.66,668,4.66,767,6.301,771,3.978,782,2.459,825,3.836,983,7.302,984,3.978,985,5.292,986,5.599,987,4.99,988,4.99,989,4.99,990,4.99,991,4.99,992,4.99,993,4.99,994,4.99,995,4.99,996,4.99,997,6.469,998,4.38,999,5.679,1000,6.469,1001,5.656,1002,4.801,1003,4.99]],["title/classes/CreateClaimReview.html",[107,0.137,474,3.132]],["body/classes/CreateClaimReview.html",[3,0.122,4,0.095,5,0.109,12,0.748,15,0.011,17,0.72,28,0.165,42,2.099,106,0.122,107,0.209,139,0.008,140,0.008,157,0.428,158,1.448,176,1.86,204,1.61,207,2.84,210,1.96,223,3.246,265,3.54,432,4.664,449,3.172,452,3.84,462,3.445,463,3.986,474,4.775,633,4.664,782,2.463,986,3.685,998,4.389,999,5.686,1001,5.238,1002,4.606,1004,7.207,1005,4.389,1006,6.477,1007,5,1008,5,1009,5,1010,7.874,1011,5,1012,5,1013,5,1014,5,1015,5,1016,3.685,1017,5]],["title/classes/CreateClaimReviewTaskDTO.html",[107,0.137,501,2.758]],["body/classes/CreateClaimReviewTaskDTO.html",[3,0.121,4,0.094,5,0.107,12,0.664,15,0.011,17,0.7,28,0.17,42,1.99,76,3.54,106,0.174,107,0.207,139,0.008,140,0.008,157,0.424,158,1.439,176,1.918,180,1.743,204,1.595,207,2.518,210,1.738,223,3.214,265,3.867,432,3.214,448,2.348,449,2.925,452,2.646,453,4.178,460,2.266,462,3.412,463,3.948,464,3.412,501,4.178,633,3.214,685,5.544,782,2.44,985,5.272,986,4.745,1001,5.218,1002,4.184,1016,4.745,1018,6.037,1019,3.65,1020,4.951,1021,4.951,1022,4.951,1023,4.951,1024,6.437,1025,5.65,1026,4.951,1027,4.346,1028,4.346,1029,3.948,1030,3.214]],["title/classes/CreatePersonality.html",[107,0.137,1031,3.132]],["body/classes/CreatePersonality.html",[3,0.124,4,0.097,5,0.11,12,0.764,15,0.011,16,0.806,17,0.735,18,1.532,28,0.11,106,0.124,107,0.211,139,0.008,140,0.008,157,0.434,158,1.461,176,1.925,204,1.633,210,2.001,455,3.649,588,3.708,782,2.498,1001,4.504,1002,4.933,1031,4.817,1032,7.326,1033,4.45,1034,6.349,1035,6.349,1036,6.349,1037,4.984,1038,6.349,1039,6.349,1040,5.069,1041,5.069,1042,5.069,1043,4.45,1044,5.069,1045,5.069,1046,5.069,1047,5.069,1048,5.069,1049,5.737,1050,6.941,1051,5.069,1052,5.069]],["title/injectables/DisableBodyParserMiddleware.html",[89,3.132,154,0.634]],["body/injectables/DisableBodyParserMiddleware.html",[3,0.143,4,0.112,5,0.127,7,1.278,12,0.545,14,1.174,15,0.011,16,0.655,17,0.524,18,1.078,20,1.109,21,4.002,28,0.156,30,0.566,89,5.283,91,4.002,106,0.143,107,0.189,108,3.279,121,1.427,139,0.009,140,0.009,154,1.07,155,1.837,157,0.503,171,3.683,270,3.683,274,2.591,315,2.591,583,3.812,788,4.407,1053,6.291,1054,5.154,1055,5.714,1056,7.736,1057,4.305,1058,5.872,1059,5.283,1060,5.154]],["title/modules/EmailModule.html",[0,0.736,57,2.928]],["body/modules/EmailModule.html",[0,1.256,2,1.927,3,0.146,4,0.114,5,0.13,15,0.011,28,0.169,30,0.577,51,3.873,52,2.239,57,5.885,106,0.146,107,0.193,122,2.106,135,2.552,139,0.009,140,0.009,141,2.404,146,2.552,147,2.106,148,1.927,150,2.713,1061,5.251,1062,5.251,1063,5.251,1064,5.713,1065,5.982,1066,5.982]],["title/injectables/EmailService.html",[154,0.634,1064,2.758]],["body/injectables/EmailService.html",[3,0.106,4,0.083,5,0.094,7,1.053,12,0.697,14,1.34,15,0.011,16,0.747,17,0.527,18,1.23,20,1.266,26,4.351,28,0.128,30,0.419,52,1.627,106,0.106,107,0.14,119,1.417,139,0.007,140,0.007,154,0.881,155,1.36,157,0.372,158,1.319,159,1.747,160,2.763,161,2.609,162,2.105,165,1.559,168,4.143,174,1.958,176,1.319,179,1.695,180,2.078,181,1.695,185,0.963,192,1.901,460,1.53,727,2.821,761,2.427,1064,3.831,1067,3.465,1068,7.189,1069,6.702,1070,5.902,1071,3.203,1072,5.902,1073,4.346,1074,4.346,1075,8.069,1076,4.346,1077,5.902,1078,5.902,1079,6.311,1080,6.311,1081,6.702,1082,4.346,1083,5.902,1084,3.203,1085,3.815,1086,3.203,1087,3.815,1088,3.465,1089,3.815,1090,3.815,1091,5.883,1092,4.346,1093,4.346,1094,4.346,1095,4.346,1096,5.902,1097,4.346,1098,4.346,1099,4.346,1100,6.702,1101,4.346,1102,3.465,1103,4.346,1104,3.815,1105,4.346,1106,4.346,1107,4.346,1108,4.346,1109,5.902,1110,3.815,1111,4.346,1112,4.346,1113,4.346,1114,4.346,1115,3.203,1116,5.902,1117,4.346,1118,4.346]],["title/classes/GetClaimsDTO.html",[107,0.137,289,3.132]],["body/classes/GetClaimsDTO.html",[3,0.134,4,0.104,5,0.119,12,0.751,15,0.011,17,0.722,28,0.119,106,0.134,107,0.221,139,0.008,140,0.008,157,0.47,158,1.535,176,1.847,204,1.766,207,2.641,210,1.967,289,5.063,344,2.898,346,3.429,348,3.31,530,4.6,782,2.701,1002,4.833,1119,7.252,1120,4.812,1121,3.696,1122,4.812,1123,5.482,1124,5.482,1125,4.37,1126,5.482,1127,4.37,1128,5.482,1129,5.482,1130,6.029,1131,5.476,1132,5.981,1133,4.37,1134,5.476]],["title/injectables/GetLanguageMiddleware.html",[87,3.132,154,0.634]],["body/injectables/GetLanguageMiddleware.html",[3,0.142,4,0.111,5,0.126,7,1.271,12,0.54,14,1.163,15,0.011,16,0.649,17,0.519,18,1.068,20,1.099,21,3.249,28,0.155,30,0.561,87,5.254,106,0.142,107,0.187,108,3.249,139,0.009,140,0.009,154,1.064,155,1.821,157,0.499,171,3.671,176,1.301,270,3.258,271,3.95,274,2.567,315,2.567,407,4.289,788,4.383,1055,5.682,1057,4.291,1059,5.254,1121,3.511,1135,5.107,1136,7.048,1137,5.818,1138,5.818,1139,4.639]],["title/classes/GetPersonalities.html",[107,0.137,1140,3.132]],["body/classes/GetPersonalities.html",[3,0.128,4,0.1,5,0.114,12,0.758,15,0.011,16,0.819,17,0.728,18,1.42,28,0.114,106,0.128,107,0.215,139,0.008,140,0.008,157,0.449,158,1.491,176,1.825,204,1.686,210,1.984,344,2.837,346,3.357,348,3.24,455,3.725,530,4.523,782,2.579,1002,4.672,1039,4.595,1043,4.595,1049,5.856,1050,6.446,1121,3.618,1122,4.595,1125,4.174,1127,4.174,1130,5.856,1131,5.319,1132,5.855,1133,4.174,1134,5.319,1140,4.918,1141,7.284,1142,4.595,1143,6.446,1144,5.235,1145,5.235,1146,5.235,1147,5.235,1148,5.235,1149,5.235]],["title/classes/GetTasksDTO.html",[107,0.137,510,3.132]],["body/classes/GetTasksDTO.html",[3,0.135,4,0.106,5,0.121,12,0.733,15,0.011,17,0.705,28,0.121,76,3.465,106,0.135,107,0.223,139,0.008,140,0.008,157,0.476,158,1.548,176,1.766,180,2.656,204,1.789,210,1.919,344,2.915,346,3.45,348,3.329,449,3.14,510,5.104,530,4.621,782,2.736,1002,4.755,1125,4.427,1127,4.427,1131,5.521,1132,6.016,1133,4.427,1134,5.521,1150,7.135,1151,4.874,1152,5.553,1153,5.553,1154,5.553,1155,5.553]],["title/classes/History.html",[107,0.137,434,2.27]],["body/classes/History.html",[3,0.107,4,0.084,5,0.095,12,0.722,15,0.011,17,0.765,18,0.807,28,0.146,32,0.879,42,1.446,106,0.184,107,0.142,113,2.255,121,2.072,139,0.007,140,0.007,157,0.377,158,1.33,164,3.031,185,0.508,204,1.417,207,2.095,210,1.89,211,3.704,212,2.932,213,3.566,214,3.322,217,3.05,219,3.51,220,1.758,221,2.011,222,1.709,230,2.255,232,2.573,233,3.481,234,2.573,235,4.226,244,3.457,253,2.16,254,3.18,262,3.322,333,3.989,395,4.642,434,3.604,448,2.822,460,2.849,464,3.031,592,3.303,621,4.647,780,4.386,1156,3.031,1157,5.76,1158,5.95,1159,4.398,1160,4.398,1161,5.223,1162,5.223,1163,4.398,1164,4.398,1165,4.398,1166,4.398,1167,3.506,1168,4.398,1169,3.506,1170,4.398,1171,3.861,1172,3.242,1173,3.861]],["title/controllers/HistoryController.html",[247,1.22,1174,3.132]],["body/controllers/HistoryController.html",[3,0.125,4,0.098,5,0.111,7,1.175,8,3.584,12,0.476,14,1.025,15,0.011,16,0.572,17,0.458,18,0.942,20,0.969,28,0.143,30,0.495,106,0.125,107,0.165,119,1.392,134,1.474,139,0.008,140,0.008,157,0.44,159,1.6,160,2.115,161,2.39,162,1.975,165,1.355,174,1.702,181,1.474,185,0.916,200,2.528,210,1.246,244,3.729,247,1.892,268,3.376,308,3.509,333,3.376,344,3.066,346,3.509,347,3.33,348,2.906,357,5.013,359,3.535,360,3.33,434,2.742,574,4.061,1174,4.855,1175,4.503,1176,8.122,1177,5.13,1178,5.13,1179,5.13,1180,4.503,1181,5.13,1182,5.13,1183,5.13,1184,5.13,1185,5.13,1186,4.503,1187,5.13,1188,7.274,1189,5.13,1190,5.13,1191,3.782]],["title/modules/HistoryModule.html",[0,0.736,73,2.485]],["body/modules/HistoryModule.html",[0,1.202,2,1.793,3,0.136,4,0.106,5,0.121,15,0.011,16,0.62,28,0.18,30,0.537,31,2.544,32,1.112,51,3.706,52,2.083,73,4.92,106,0.136,107,0.179,122,1.959,134,1.599,135,2.441,139,0.008,140,0.008,141,2.3,146,2.441,147,1.959,148,1.793,150,2.596,185,0.642,220,1.645,446,2.64,574,4.869,1172,5.111,1174,5.111,1180,4.885,1192,4.885,1193,4.885,1194,4.885,1195,4.437,1196,4.885,1197,5.565,1198,5.111,1199,4.885,1200,5.565]],["title/injectables/HistoryService.html",[154,0.634,574,2.372]],["body/injectables/HistoryService.html",[3,0.076,4,0.059,5,0.067,7,0.827,12,0.642,14,1.232,15,0.011,16,0.736,17,0.712,18,1.131,20,1.451,28,0.134,30,0.299,32,0.619,42,1.126,106,0.076,107,0.1,119,1.395,121,1.126,139,0.009,140,0.006,154,0.692,155,0.97,157,0.266,158,1.036,159,1.744,160,2.289,161,2.237,162,1.88,165,1.224,174,1.537,176,1.036,179,1.595,180,1.955,181,2.207,185,0.535,191,3.294,207,2.438,222,0.89,240,1.321,244,3.383,253,2.237,254,2.477,308,3.612,333,3.999,344,2.851,346,3.281,348,2.911,349,4.247,395,4.057,434,4.308,455,2.588,460,2.656,480,3.417,508,3.294,574,2.588,583,4.495,588,2.847,592,3.166,598,4.772,617,3.612,618,1.588,619,1.47,630,2.011,681,4.001,724,2.135,725,2.135,817,4.093,830,2.284,838,3.417,840,2.284,1157,3.695,1167,2.47,1169,3.695,1186,4.069,1191,3.417,1196,2.72,1198,3.417,1201,2.72,1202,4.635,1203,4.635,1204,5.553,1205,3.098,1206,4.635,1207,4.635,1208,3.098,1209,4.247,1210,3.098,1211,4.635,1212,7.683,1213,3.695,1214,4.069,1215,4.635,1216,4.635,1217,4.635,1218,4.635,1219,4.635,1220,3.098,1221,6.598,1222,6.598,1223,3.098,1224,5.553,1225,4.635,1226,4.069,1227,5.104,1228,4.635,1229,4.635,1230,4.069,1231,4.069,1232,4.069,1233,4.635,1234,3.098,1235,3.098,1236,3.098,1237,3.098,1238,3.098,1239,3.098,1240,3.098,1241,3.098,1242,2.72,1243,3.098]],["title/controllers/HomeController.html",[247,1.22,1244,3.132]],["body/controllers/HomeController.html",[3,0.113,4,0.088,5,0.101,7,1.101,8,3.415,12,0.573,14,1.234,15,0.011,16,0.688,17,0.414,18,1.133,20,1.166,28,0.178,30,0.448,106,0.113,107,0.15,119,0.982,121,1.5,134,1.334,139,0.008,140,0.008,157,0.398,159,1.684,162,1.882,165,1.227,171,3.377,185,0.8,192,2.233,210,1.5,247,1.773,271,4.251,274,3.259,308,2.124,315,2.05,316,2.718,317,2.289,318,3.705,319,3.425,320,3.415,321,3.016,327,2.928,328,2.483,329,2.483,344,1.795,346,2.124,348,2.05,398,4.55,404,2.857,405,2.857,407,3.425,415,3.016,424,2.857,425,2.718,426,3.016,618,2.382,1121,2.289,1244,4.55,1245,4.078,1246,3.425,1247,6.085,1248,6.173,1249,4.646,1250,6.173,1251,4.646,1252,4.646,1253,5.445,1254,4.646,1255,4.646,1256,4.263,1257,4.646,1258,6.173,1259,4.646,1260,4.646,1261,4.646,1262,4.646,1263,4.646,1264,4.254,1265,4.078,1266,3.704,1267,4.078,1268,4.078,1269,4.078]],["title/modules/HomeModule.html",[0,0.736,55,2.928]],["body/modules/HomeModule.html",[0,1.233,2,1.87,3,0.142,4,0.111,5,0.126,15,0.011,28,0.179,30,0.56,37,4.679,38,4.001,47,5.44,48,5.096,53,4.129,54,3.396,55,5.987,106,0.142,107,0.187,122,2.506,134,2.044,135,2.044,139,0.009,140,0.009,141,2.361,146,2.506,147,2.044,148,1.87,1244,5.674,1270,5.096,1271,5.096,1272,5.805,1273,5.805]],["title/injectables/JsonBodyMiddleware.html",[95,3.132,154,0.634]],["body/injectables/JsonBodyMiddleware.html",[3,0.141,4,0.11,5,0.125,7,1.264,12,0.535,14,1.153,15,0.011,16,0.643,17,0.514,18,1.058,20,1.089,21,3.957,28,0.167,30,0.556,91,3.219,95,5.224,106,0.141,107,0.186,108,3.219,139,0.009,140,0.009,154,1.058,155,1.804,157,0.494,171,3.66,270,3.66,271,4.104,274,2.544,315,2.544,583,3.743,788,4.358,1055,5.651,1057,4.392,1059,5.224,1060,5.061,1274,6.221,1275,5.061,1276,5.766,1277,5.061,1278,4.597,1279,5.766]],["title/classes/Logger.html",[107,0.137,161,1.542]],["body/classes/Logger.html",[3,0.114,4,0.089,5,0.102,7,1.108,12,0.75,14,1.584,15,0.011,16,0.883,17,0.688,18,1.455,20,1.457,21,2.618,28,0.102,30,0.452,106,0.114,107,0.151,108,3.467,139,0.008,140,0.008,157,0.402,158,1.388,159,1.692,161,2.934,165,1.238,176,1.932,179,1.347,204,1.51,772,5.158,1030,5.526,1280,4.115,1281,6.964,1282,5.451,1283,4.031,1284,6.21,1285,6.21,1286,6.21,1287,6.21,1288,6.21,1289,6.21,1290,4.688,1291,7.712,1292,6.21,1293,7.413,1294,4.688,1295,6.21,1296,4.688,1297,6.21,1298,4.688,1299,6.21,1300,4.688,1301,4.688,1302,4.688,1303,4.688,1304,4.688,1305,4.688,1306,4.688]],["title/injectables/LoggerMiddleware.html",[79,3.132,154,0.634]],["body/injectables/LoggerMiddleware.html",[3,0.127,4,0.1,5,0.113,7,1.188,12,0.618,14,1.044,15,0.011,16,0.582,17,0.466,18,0.959,20,0.987,21,3.72,28,0.145,30,0.504,79,4.912,106,0.127,107,0.168,108,2.917,139,0.008,140,0.008,154,0.995,155,1.635,157,0.448,158,1.489,159,1.782,161,2.804,171,3.839,179,1.501,180,1.839,181,1.914,185,0.892,270,3.731,315,2.305,359,3.6,788,4.097,1057,4.129,1059,4.912,1136,6.782,1307,4.586,1308,6.663,1309,5.224,1310,6.663,1311,5.224,1312,6.663,1313,5.312,1314,6.663,1315,6.663,1316,5.224,1317,4.586,1318,5.224,1319,6.663,1320,6.663,1321,5.224,1322,5.224]],["title/classes/NotFoundFilter.html",[62,3.132,107,0.137]],["body/classes/NotFoundFilter.html",[3,0.134,4,0.104,5,0.119,7,1.225,12,0.509,14,1.096,15,0.011,16,0.611,17,0.489,18,1.006,20,1.035,21,3.061,28,0.149,30,0.528,62,5.063,106,0.134,107,0.177,108,3.835,139,0.008,140,0.008,148,2.213,157,0.47,171,3.14,179,1.973,185,0.793,200,3.696,204,1.766,315,2.419,344,2.653,360,4.459,588,2.81,772,4.224,832,5.796,1030,3.559,1102,5.981,1247,6.029,1283,4.459,1323,6.029,1324,4.812,1325,6.869,1326,6.029,1327,6.029,1328,6.029,1329,6.869,1330,6.029,1331,7.501,1332,6.869,1333,7.863,1334,5.482,1335,5.482,1336,5.482,1337,5.482,1338,5.482,1339,5.482]],["title/controllers/OryController.html",[93,2.928,247,1.22]],["body/controllers/OryController.html",[3,0.111,4,0.087,5,0.099,7,1.087,8,3.873,12,0.637,14,1.372,15,0.011,16,0.765,17,0.612,18,1.26,20,1.297,28,0.174,30,0.439,52,1.705,93,4.198,106,0.111,107,0.147,121,1.107,134,1.308,139,0.007,140,0.007,157,0.39,159,1.91,162,2.243,165,1.203,168,3.668,179,1.308,185,0.526,192,2.211,210,1.48,247,1.75,271,4.432,274,3.599,309,2.957,316,2.664,317,2.244,320,3.382,321,2.957,327,3.255,328,2.434,329,2.434,404,3.746,405,2.801,424,2.801,425,2.664,1057,2.434,1340,3.998,1341,6.092,1342,6.092,1343,6.092,1344,4.555,1345,8.345,1346,8.345,1347,4.555,1348,4.555,1349,4.555,1350,4.555,1351,4.555,1352,4.555,1353,4.555,1354,4.221,1355,3.998,1356,4.555,1357,4.555,1358,6.092,1359,4.555,1360,4.555,1361,4.555,1362,4.555]],["title/modules/OryModule.html",[0,0.736,83,2.758]],["body/modules/OryModule.html",[0,1.22,2,1.837,3,0.139,4,0.109,5,0.124,15,0.011,28,0.178,30,0.55,52,2.134,53,4.111,54,3.335,83,5.589,93,5.262,106,0.139,107,0.184,122,2.478,134,2.022,135,2.478,139,0.009,140,0.009,141,2.335,146,2.478,147,2.007,148,1.837,150,2.635,168,3.762,179,1.638,1354,5.379,1355,5.005,1363,5.005,1364,5.005,1365,5.702,1366,5.005,1367,5.702,1368,5.702]],["title/injectables/OryService.html",[154,0.634,1354,2.612]],["body/injectables/OryService.html",[3,0.096,4,0.075,5,0.085,7,0.984,12,0.698,14,1.378,15,0.011,16,0.769,17,0.568,18,1.266,20,1.202,28,0.15,30,0.38,52,1.474,106,0.096,107,0.127,119,1.345,121,0.957,139,0.007,140,0.007,154,0.823,155,1.232,157,0.337,158,1.233,159,1.546,160,3.1,165,1.04,168,4.02,176,1.233,179,1.584,180,1.386,181,1.584,185,0.796,191,2.947,254,2.104,309,2.556,310,2.903,317,3.882,460,1.941,1071,2.903,1313,5.073,1354,3.391,1369,3.456,1370,6.363,1371,4.385,1372,5.514,1373,5.514,1374,5.514,1375,5.514,1376,5.514,1377,5.59,1378,3.938,1379,4.883,1380,5.514,1381,3.938,1382,3.938,1383,5.514,1384,3.938,1385,5.514,1386,3.938,1387,6.363,1388,4.711,1389,4.396,1390,4.84,1391,3.139,1392,2.714,1393,5.496,1394,4.84,1395,6.894,1396,3.938,1397,3.456,1398,3.938,1399,3.938,1400,3.938,1401,3.456,1402,3.456,1403,3.938,1404,3.938,1405,6.602,1406,5.496,1407,3.938,1408,4.84,1409,3.8,1410,4.84,1411,4.84,1412,4.84,1413,4.396,1414,4.84,1415,6.363,1416,5.585,1417,6.363,1418,3.938,1419,3.938]],["title/classes/Paragraph.html",[107,0.137,1420,2.612]],["body/classes/Paragraph.html",[3,0.124,4,0.097,5,0.111,12,0.71,15,0.011,17,0.769,28,0.157,32,1.019,106,0.177,107,0.164,121,2.004,139,0.008,140,0.008,157,0.437,158,1.467,176,1.813,179,1.885,185,0.757,204,1.643,210,1.86,211,3.718,212,2.512,213,3.457,214,2.847,217,2.614,219,3.496,220,1.939,221,2.331,222,1.885,230,2.614,235,2.983,394,4.709,592,3.501,825,3.876,1420,4.872,1421,3.759,1422,5.783,1423,4.998,1424,5.099,1425,5.099,1426,5.099,1427,5.099,1428,5.099,1429,4.066,1430,5.23,1431,4.476,1432,3.759]],["title/modules/ParagraphModule.html",[0,0.736,102,2.612]],["body/modules/ParagraphModule.html",[0,1.226,2,1.853,3,0.14,4,0.11,5,0.125,15,0.011,16,0.641,28,0.174,30,0.555,31,2.63,32,1.15,102,5.209,106,0.14,107,0.185,122,2.025,135,2.492,139,0.009,140,0.009,141,2.348,146,2.492,147,2.025,148,1.853,150,2.649,185,0.664,220,1.7,446,2.729,1420,3.538,1432,5.217,1433,5.05,1434,5.05,1435,5.05,1436,5.685,1437,4.587,1438,5.05,1439,5.753,1440,5.217,1441,5.05]],["title/injectables/ParagraphService.html",[154,0.634,1436,2.758]],["body/injectables/ParagraphService.html",[3,0.136,4,0.106,5,0.121,7,1.238,12,0.644,14,1.388,15,0.011,16,0.774,17,0.498,18,1.275,20,1.054,28,0.172,30,0.538,32,1.115,106,0.136,107,0.18,119,1.468,139,0.008,140,0.008,154,1.037,155,1.745,157,0.478,159,1.355,162,2.053,165,1.834,174,1.85,181,1.602,185,0.644,192,2.237,222,1.602,253,2.52,617,3.617,619,2.645,1420,4.27,1429,4.447,1436,4.507,1438,4.896,1440,5.118,1442,4.896,1443,5.577,1444,5.577,1445,6.943,1446,5.577,1447,5.577,1448,5.577,1449,5.577,1450,5.577,1451,5.577,1452,5.577,1453,5.577]],["title/modules/ParserModule.html",[0,0.736,440,2.758]],["body/modules/ParserModule.html",[0,1.193,2,1.773,3,0.134,4,0.105,5,0.12,15,0.011,28,0.176,30,0.531,100,5.086,101,4.389,102,5.086,103,4.389,104,5.369,105,4.832,106,0.134,107,0.177,122,2.425,135,2.425,139,0.008,140,0.008,141,2.284,146,2.425,147,1.938,148,1.773,150,2.578,440,5.676,821,5.653,1454,4.832,1455,4.832,1456,4.832,1457,4.832,1458,5.505,1459,5.505]],["title/injectables/ParserService.html",[154,0.634,821,2.758]],["body/injectables/ParserService.html",[3,0.082,4,0.064,5,0.073,7,0.881,12,0.716,14,1.285,15,0.011,16,0.716,17,0.61,18,1.18,20,1.292,28,0.148,30,0.326,106,0.082,107,0.109,113,1.731,119,1.6,139,0.006,140,0.006,154,0.738,155,1.057,157,0.5,158,1.104,159,1.419,162,1.586,165,1.304,176,1.306,179,0.97,180,1.189,185,0.973,192,1.088,316,2.889,345,2.758,495,1.731,508,2.64,530,4.179,592,2.67,821,3.206,825,3.434,1080,2.964,1379,3.791,1422,3.938,1423,3.404,1436,4.79,1460,2.692,1461,5.84,1462,5.84,1463,5.84,1464,6.426,1465,6.426,1466,4.939,1467,4.939,1468,3.377,1469,4.637,1470,4.79,1471,3.377,1472,3.377,1473,3.377,1474,4.939,1475,3.377,1476,4.939,1477,7.143,1478,3.377,1479,4.939,1480,4.939,1481,3.377,1482,6.002,1483,4.939,1484,3.377,1485,3.377,1486,3.377,1487,3.377,1488,3.377,1489,3.377,1490,2.489,1491,3.377,1492,4.305,1493,2.964,1494,2.692,1495,2.964,1496,4.939,1497,3.938,1498,2.692,1499,2.692,1500,2.964,1501,3.377,1502,3.377,1503,3.377,1504,2.692,1505,2.964,1506,2.692,1507,2.964,1508,3.377,1509,3.377,1510,3.377,1511,3.377,1512,3.377,1513,3.377,1514,3.377,1515,3.377,1516,3.377,1517,3.377,1518,5.84,1519,5.84,1520,2.692,1521,3.377,1522,3.377,1523,3.377,1524,3.377,1525,3.377,1526,4.939,1527,3.377,1528,3.377,1529,3.377,1530,3.377,1531,3.377,1532,3.377,1533,3.377,1534,3.377,1535,3.377,1536,3.377,1537,5.84,1538,3.377,1539,3.377,1540,3.377,1541,2.964,1542,3.377,1543,4.939,1544,3.377,1545,3.377,1546,3.377,1547,3.377,1548,3.377,1549,3.377,1550,3.377,1551,3.377,1552,4.939,1553,3.377,1554,4.939,1555,3.377,1556,3.377]],["title/classes/Personality.html",[107,0.137,207,1.496]],["body/classes/Personality.html",[3,0.122,4,0.096,5,0.109,12,0.706,15,0.011,16,0.803,17,0.703,28,0.156,32,1.003,42,1.219,106,0.176,107,0.162,121,2.089,139,0.008,140,0.008,157,0.43,158,1.452,176,1.862,185,0.749,204,1.617,207,2.68,208,4.673,210,1.849,213,3.069,214,2.803,217,3.69,219,3.478,220,1.919,221,2.295,222,2.068,226,4.002,227,3.086,228,3.086,230,2.573,232,2.936,233,3.799,234,2.936,239,3.258,240,2.14,241,3.258,588,3.69,687,4.406,690,3.086,1037,4.961,1557,3.7,1558,5.019,1559,5.019,1560,5.019,1561,6.494,1562,5.019,1563,4.002,1564,5.177,1565,4.406,1566,5.019,1567,5.019,1568,3.7]],["title/controllers/PersonalityController.html",[247,1.22,1569,3.132]],["body/controllers/PersonalityController.html",[3,0.066,4,0.051,5,0.058,7,0.743,8,3.772,12,0.687,14,1.481,15,0.011,16,0.826,17,0.585,18,1.36,20,1.399,28,0.161,30,0.26,91,3.661,106,0.066,107,0.087,113,1.381,119,1.386,121,1.507,134,0.774,139,0.005,140,0.005,157,0.231,159,1.238,160,1.11,161,1.512,162,2.292,165,0.711,171,3.546,174,2.057,181,0.774,185,0.789,192,2.336,195,2.136,200,2.053,207,2.487,210,1.8,244,1.381,247,1.197,253,1.849,254,2.723,257,2.872,260,3.658,262,2.327,268,3.179,270,3.447,271,4.228,274,3.422,298,2.365,308,1.232,309,1.749,310,1.986,315,1.189,316,1.576,317,1.327,318,2.723,320,2.511,321,1.749,322,1.749,324,2.148,327,3.11,328,1.44,329,1.44,333,2.136,334,1.856,338,1.856,339,1.856,343,2.365,344,1.61,346,1.232,348,1.189,363,3.322,365,2.148,378,2.365,381,2.365,404,3.527,405,3.527,406,3.658,407,3.072,409,1.986,415,3.723,420,3.658,424,3.527,425,3.355,426,3.723,434,1.44,499,3.322,508,1.44,516,2.148,552,2.148,592,1.232,618,1.381,641,2.148,772,1.657,894,5.632,1031,4.834,1037,1.856,1121,2.053,1140,4.834,1253,4.227,1264,2.872,1265,2.365,1266,2.148,1267,2.365,1268,2.365,1283,2.705,1499,2.148,1569,3.072,1570,2.365,1571,3.658,1572,4.167,1573,4.167,1574,2.694,1575,2.694,1576,2.694,1577,2.365,1578,2.694,1579,2.694,1580,2.694,1581,2.694,1582,2.694,1583,4.167,1584,2.694,1585,2.694,1586,2.694,1587,2.694,1588,2.694,1589,2.694,1590,2.694,1591,2.694,1592,2.694,1593,2.694,1594,2.694,1595,2.694,1596,2.694,1597,2.694,1598,2.694,1599,2.365,1600,2.694,1601,2.694,1602,2.365,1603,2.694,1604,2.694,1605,2.694,1606,2.694,1607,2.694,1608,2.694,1609,2.694,1610,2.694,1611,2.694,1612,2.694,1613,2.694,1614,2.694,1615,2.694,1616,2.365,1617,2.694,1618,2.694,1619,4.167,1620,2.365,1621,2.365,1622,4.167,1623,4.167,1624,2.694,1625,2.694,1626,2.694,1627,2.694,1628,2.694,1629,2.694,1630,2.694,1631,2.694,1632,2.694,1633,2.694,1634,2.148,1635,2.694,1636,2.694,1637,2.694,1638,2.365,1639,2.694,1640,2.694,1641,2.365]],["title/modules/PersonalityModule.html",[0,0.736,37,2.372]],["body/modules/PersonalityModule.html",[0,1.079,2,1.516,3,0.115,4,0.09,5,0.102,15,0.011,16,0.525,28,0.185,30,0.454,31,2.151,32,0.941,35,5.15,36,4.13,37,4.889,41,4.24,42,1.512,43,1.94,44,3.055,53,3.909,54,2.753,70,4.878,71,2.753,72,3.752,73,4.641,74,3.469,106,0.115,107,0.152,122,2.192,134,1.788,135,2.192,139,0.008,140,0.008,141,2.065,146,2.192,147,1.657,148,1.516,150,2.33,161,2.532,185,0.543,207,1.657,220,1.39,318,4.552,446,2.232,558,4.43,563,3.469,739,3.752,1568,4.589,1569,5.142,1602,4.13,1642,4.13,1643,4.13,1644,4.13,1645,4.13,1646,3.752,1647,4.13,1648,4.705,1649,4.589]],["title/injectables/PersonalityService.html",[154,0.634,318,2.27]],["body/injectables/PersonalityService.html",[0,0.905,3,0.04,4,0.032,5,0.036,7,0.5,12,0.664,14,1.387,15,0.011,16,0.773,17,0.497,18,1.273,20,1.386,26,1.074,28,0.148,30,0.159,32,0.331,42,1.269,43,0.682,61,1.14,106,0.04,107,0.053,113,0.848,119,1.644,121,1.619,139,0.006,140,0.003,148,0.533,154,0.419,155,0.518,157,0.142,158,0.627,159,1.619,160,2.154,161,1.56,162,2.098,165,0.74,174,1.943,176,1.245,179,1.6,180,1.96,181,1.956,185,0.886,191,3.13,192,2.453,195,1.437,200,1.798,201,1.452,203,2.435,206,1.219,207,2.854,208,1.074,222,0.805,227,1.017,228,1.017,240,2.05,253,1.746,254,2.792,255,1.724,257,2.515,262,1.566,268,3.003,270,2.199,274,1.237,308,2.389,311,2.117,312,0.968,315,0.73,318,1.498,333,0.848,334,1.14,338,1.14,339,1.14,344,2.358,345,0.924,346,2.546,347,2.369,348,2.457,349,1.14,350,3.772,352,1.82,357,2.515,359,1.932,360,1.074,361,3.615,362,1.452,363,1.319,369,1.017,384,3.168,385,1.219,398,2.067,401,2.461,409,3.168,434,3.561,448,1.731,460,1.84,508,2.57,529,1.82,558,2.399,563,3.168,574,2.399,578,1.14,579,2.067,583,3.392,584,4.166,585,4.166,586,2.235,587,1.82,588,1.871,590,3.168,591,3.168,592,0.756,595,2.235,596,3.426,597,2.235,598,2.961,599,2.235,600,2.235,602,2.235,617,1.282,619,0.785,620,1.319,621,1.14,622,2.235,630,1.074,632,1.452,663,1.319,668,1.82,671,2.79,672,2.369,673,2.515,674,2.515,675,2.369,676,2.515,677,2.369,680,1.319,681,1.074,716,1.319,724,1.14,725,1.14,726,2.91,727,2.369,729,3.203,750,1.452,817,2.69,825,1.95,826,2.067,832,2.067,833,2.235,838,2.067,840,1.219,843,1.319,847,3.203,848,1.452,849,1.319,850,2.461,851,2.461,852,1.452,853,1.319,854,1.452,855,1.319,856,1.452,858,1.319,875,2.461,877,1.452,894,5.035,905,2.461,907,3.168,908,2.461,909,2.461,911,1.452,912,2.235,914,1.452,915,1.452,932,3.203,942,1.452,948,1.452,1037,3.837,1057,0.884,1121,3.572,1139,4.166,1143,3.772,1264,4.691,1266,1.319,1498,1.319,1563,1.319,1571,2.461,1577,2.461,1599,2.461,1620,2.461,1621,1.452,1641,3.203,1647,1.452,1649,2.69,1650,1.452,1651,2.804,1652,2.804,1653,2.804,1654,2.804,1655,2.804,1656,2.79,1657,1.654,1658,2.804,1659,1.654,1660,1.654,1661,2.804,1662,1.654,1663,4.297,1664,1.654,1665,2.804,1666,1.654,1667,1.654,1668,2.804,1669,1.654,1670,2.804,1671,1.654,1672,2.804,1673,1.654,1674,1.654,1675,2.804,1676,1.654,1677,4.81,1678,1.654,1679,2.804,1680,2.804,1681,1.654,1682,2.804,1683,1.654,1684,1.654,1685,1.654,1686,1.654,1687,1.654,1688,1.654,1689,1.654,1690,1.654,1691,2.804,1692,1.654,1693,1.654,1694,1.654,1695,1.654,1696,1.654,1697,1.654,1698,1.654,1699,1.654,1700,1.654,1701,1.654,1702,1.654,1703,4.297,1704,1.654,1705,1.654,1706,3.649,1707,1.654,1708,3.649,1709,1.654,1710,2.804,1711,1.654,1712,2.461,1713,2.804,1714,2.804,1715,1.654,1716,1.654,1717,1.452,1718,1.654,1719,1.654,1720,1.654,1721,2.804,1722,1.654,1723,1.14,1724,1.654,1725,1.654,1726,1.219,1727,1.452,1728,1.654,1729,1.654,1730,1.654,1731,1.654,1732,1.654,1733,1.654,1734,1.654,1735,1.654,1736,1.654,1737,1.654,1738,1.654,1739,1.654,1740,2.804,1741,4.297,1742,1.654,1743,3.649,1744,1.654,1745,1.654,1746,1.654,1747,1.654,1748,1.654,1749,1.654,1750,1.654,1751,2.804,1752,1.654,1753,1.654,1754,1.654,1755,2.804,1756,1.654,1757,1.654,1758,1.654,1759,4.297,1760,1.452]],["title/classes/Report.html",[107,0.137,452,2.27]],["body/classes/Report.html",[3,0.099,4,0.078,5,0.088,12,0.737,15,0.011,17,0.728,28,0.141,32,0.813,106,0.171,107,0.131,119,0.86,121,2.113,139,0.007,140,0.007,157,0.349,158,1.261,164,3.888,176,1.886,185,0.651,203,2.25,204,1.311,210,1.93,211,2.086,212,2.78,213,3.438,214,3.616,217,3.995,219,3.559,220,1.667,221,1.86,222,1.621,230,2.086,232,2.38,233,3.3,234,2.38,235,2.38,239,2.642,240,1.735,241,2.642,265,3.191,432,4.204,448,1.93,452,4.165,453,4.204,460,2.586,464,2.804,495,2.086,633,4.54,772,3.469,773,5.163,780,3,782,2.005,783,3.244,786,3,1016,3,1027,5.684,1028,5.684,1029,5.163,1761,2.804,1762,4.069,1763,4.069,1764,4.069,1765,4.069,1766,4.069,1767,4.069,1768,4.069,1769,4.069,1770,3.244,1771,4.498,1772,4.952,1773,4.952,1774,4.952,1775,4.952,1776,4.952,1777,4.069,1778,4.498,1779,3.572,1780,4.069,1781,3]],["title/controllers/ReportController.html",[247,1.22,1782,3.132]],["body/controllers/ReportController.html",[3,0.145,4,0.113,5,0.129,7,1.289,12,0.552,14,1.19,15,0.011,16,0.664,17,0.531,18,1.093,20,1.125,28,0.157,30,0.574,106,0.145,107,0.192,119,1.259,134,1.71,139,0.009,140,0.009,157,0.51,159,1.447,162,2.113,165,1.572,174,1.975,176,1.74,210,1.447,247,2.076,265,3.561,308,2.722,498,6.344,513,5.226,550,5.226,705,4.786,1782,5.328,1783,5.226,1784,5.954,1785,5.954,1786,5.226,1787,5.954,1788,5.954]],["title/modules/ReportModule.html",[0,0.736,81,2.758]],["body/modules/ReportModule.html",[0,1.174,2,1.729,3,0.131,4,0.102,5,0.117,15,0.011,16,0.598,28,0.181,30,0.517,31,2.454,32,1.073,45,4.589,46,3.698,51,3.622,52,2.009,81,5.531,106,0.131,107,0.173,122,2.386,134,1.947,135,2.386,139,0.008,140,0.008,141,2.248,146,2.386,147,1.889,148,1.729,150,2.537,185,0.619,220,1.586,446,2.545,452,2.868,705,5.337,1781,4.996,1782,5.476,1786,4.711,1789,4.711,1790,5.367,1791,4.711,1792,4.711,1793,4.279,1794,4.711,1795,5.367,1796,4.996,1797,4.711]],["title/injectables/ReportService.html",[154,0.634,705,2.612]],["body/injectables/ReportService.html",[3,0.13,4,0.101,5,0.115,7,1.201,12,0.686,14,1.478,15,0.011,16,0.824,17,0.474,18,1.357,20,1.272,28,0.178,30,0.512,32,1.062,106,0.13,107,0.171,139,0.008,140,0.008,154,1.005,155,1.662,157,0.455,159,1.636,162,2.008,165,1.778,174,1.762,181,1.526,185,0.613,195,2.723,222,1.526,253,2.444,265,2.617,345,2.966,452,3.598,617,3.554,619,2.519,705,4.14,756,4.662,820,4.87,835,4.662,836,3.915,837,4.662,1770,4.234,1794,4.662,1796,4.963,1798,4.662,1799,6.733,1800,5.311,1801,5.311,1802,6.733,1803,5.311,1804,5.311,1805,5.311,1806,5.311,1807,5.311,1808,5.311,1809,5.311]],["title/controllers/RootController.html",[49,3.132,247,1.22]],["body/controllers/RootController.html",[3,0.135,4,0.106,5,0.12,7,1.233,12,0.642,14,1.108,15,0.011,16,0.618,18,1.017,20,1.306,21,3.094,28,0.15,30,0.534,49,5.097,106,0.135,107,0.178,119,1.172,134,1.592,139,0.008,140,0.008,157,0.475,176,1.239,185,0.639,210,1.68,247,1.986,271,3.864,274,3.584,327,3.575,328,2.961,329,2.961,460,1.951,1102,4.418,1317,4.864,1810,4.864,1811,7.894,1812,6.915,1813,5.541,1814,5.541,1815,6.07,1816,5.541,1817,5.541,1818,5.541,1819,5.541,1820,5.541,1821,4.864,1822,4.864,1823,5.541,1824,5.541,1825,5.541,1826,5.541,1827,5.541,1828,5.541,1829,5.541]],["title/classes/Sentence.html",[107,0.137,394,2.612]],["body/classes/Sentence.html",[3,0.127,4,0.1,5,0.113,12,0.717,15,0.011,17,0.762,28,0.145,32,1.044,106,0.179,107,0.168,121,2.04,139,0.008,140,0.008,157,0.448,158,1.489,176,1.877,179,1.914,185,0.769,204,1.683,210,1.877,211,3.416,213,3.479,217,3.416,219,3.522,220,1.969,221,2.388,222,1.914,230,2.678,394,4.908,592,3.533,825,3.921,1422,5.849,1423,5.056,1830,3.851,1831,5.224,1832,5.224,1833,5.224,1834,5.224,1835,4.165,1836,5.312,1837,4.586,1838,3.851]],["title/modules/SentenceModule.html",[0,0.736,104,2.758]],["body/modules/SentenceModule.html",[0,1.226,2,1.853,3,0.14,4,0.11,5,0.125,15,0.011,16,0.641,28,0.174,30,0.555,31,2.63,32,1.15,104,5.499,106,0.14,107,0.185,122,2.025,135,2.492,139,0.009,140,0.009,141,2.348,146,2.492,147,2.025,148,1.853,150,2.649,185,0.664,220,1.7,394,3.538,446,2.729,1470,5.685,1838,5.217,1839,5.05,1840,5.05,1841,5.05,1842,4.587,1843,5.05,1844,5.753,1845,5.217,1846,5.05]],["title/injectables/SentenceService.html",[154,0.634,1470,2.758]],["body/injectables/SentenceService.html",[3,0.139,4,0.108,5,0.123,7,1.254,12,0.652,14,1.405,15,0.011,16,0.784,17,0.507,18,1.29,20,1.075,28,0.173,30,0.548,32,1.137,106,0.139,107,0.183,119,1.203,139,0.009,140,0.009,154,1.05,155,1.78,157,0.487,159,1.382,162,2.071,165,1.856,174,1.887,181,1.634,185,0.657,192,1.833,222,1.634,253,2.551,394,3.498,617,3.643,619,2.698,1470,4.563,1835,4.536,1843,4.994,1845,5.181,1847,4.994,1848,5.689,1849,5.689,1850,7.029,1851,5.689,1852,5.689,1853,5.689,1854,5.689,1855,5.689,1856,5.689]],["title/guards/SessionGuard.html",[85,3.132,1857,3.387]],["body/guards/SessionGuard.html",[3,0.11,4,0.086,5,0.098,7,1.079,12,0.633,14,1.365,15,0.011,16,0.761,17,0.651,18,1.253,20,1.143,28,0.158,30,0.434,52,1.687,61,3.106,85,4.459,106,0.11,107,0.145,108,2.516,113,2.31,119,1.609,121,1.47,139,0.007,140,0.007,154,0.903,157,0.386,159,1.47,160,1.858,162,1.854,165,1.597,168,4.188,171,3.583,181,1.737,185,0.924,191,2.408,192,1.452,195,2.31,200,2.22,203,1.798,240,1.921,270,2.765,327,3.797,338,3.106,339,3.106,455,2.516,761,2.516,1030,2.925,1057,3.232,1071,3.322,1371,4.168,1379,3.926,1389,4.822,1390,5.309,1391,3.593,1394,3.956,1397,3.956,1858,4.507,1859,3.956,1860,6.405,1861,8.005,1862,4.507,1863,6.049,1864,6.405,1865,4.507,1866,6.049,1867,4.507,1868,4.507,1869,4.507,1870,3.956,1871,3.956,1872,3.956,1873,4.507,1874,4.507,1875,4.507,1876,4.507,1877,3.956,1878,4.507,1879,4.507,1880,3.956,1881,4.507,1882,6.049,1883,4.507,1884,4.507,1885,4.507]],["title/controllers/SitemapController.html",[247,1.22,1886,3.132]],["body/controllers/SitemapController.html",[3,0.129,4,0.101,5,0.115,7,1.196,12,0.622,14,1.341,15,0.011,16,0.748,17,0.598,18,1.231,20,1.267,28,0.16,30,0.509,106,0.129,107,0.17,119,1.116,134,1.516,139,0.008,140,0.008,157,0.452,162,2.222,174,1.751,185,0.609,192,1.7,210,1.629,247,1.926,270,3.066,271,3.779,274,3.533,327,3.181,328,2.821,329,2.821,1246,3.891,1392,3.637,1821,5.887,1822,5.887,1886,4.944,1887,4.633,1888,5.887,1889,5.887,1890,5.278,1891,5.278,1892,6.707,1893,5.278,1894,5.278,1895,5.278,1896,5.347,1897,5.278,1898,5.278,1899,4.785,1900,4.633,1901,5.278,1902,5.278,1903,5.278,1904,5.278,1905,5.278,1906,5.278,1907,5.278,1908,5.278,1909,5.278]],["title/modules/SitemapModule.html",[0,0.736,68,2.928]],["body/modules/SitemapModule.html",[0,1.179,2,1.74,3,0.132,4,0.103,5,0.117,15,0.011,28,0.179,30,0.521,37,4.596,38,3.722,39,5.062,40,4.306,41,4.399,42,1.312,43,2.226,44,3.506,68,6.012,106,0.132,107,0.174,122,2.396,134,1.955,135,2.396,139,0.008,140,0.008,141,2.257,146,2.396,147,1.901,148,1.74,150,2.547,1886,5.492,1899,5.639,1900,4.741,1910,4.741,1911,4.741,1912,4.741,1913,5.401,1914,5.401,1915,5.401]],["title/injectables/SitemapService.html",[154,0.634,1899,2.758]],["body/injectables/SitemapService.html",[3,0.093,4,0.073,5,0.083,7,0.964,12,0.632,14,1.252,15,0.011,16,0.698,17,0.341,18,1.15,20,1.021,28,0.156,30,0.369,42,1.313,43,1.577,76,1.631,106,0.093,107,0.123,113,2.77,119,1.324,139,0.008,140,0.007,154,0.807,155,1.197,157,0.328,158,1.208,159,1.811,160,2.582,161,2.47,162,2.024,165,1.427,174,1.792,179,1.099,180,1.347,181,1.8,185,0.941,192,2.313,195,1.961,200,1.885,203,2.155,207,2.206,311,3.774,312,2.238,313,4.481,317,3.973,318,3.982,319,2.82,345,3.498,349,3.724,361,3.508,409,2.82,411,3.05,587,3.508,671,2.484,672,2.484,673,2.637,674,2.637,675,2.484,676,2.637,677,2.484,761,2.136,772,3.323,947,2.82,963,3.358,1191,2.82,1227,2.82,1264,3.724,1283,2.484,1388,2.484,1634,3.05,1888,4.743,1889,4.743,1896,4.995,1899,3.508,1916,3.05,1917,3.826,1918,3.826,1919,5.403,1920,3.826,1921,6.265,1922,5.403,1923,3.826,1924,5.403,1925,3.826,1926,6.265,1927,3.826,1928,3.358,1929,3.05,1930,5.403,1931,3.358,1932,3.358,1933,2.82,1934,3.358,1935,3.358,1936,3.358,1937,3.358,1938,3.358,1939,3.826,1940,3.826,1941,3.358,1942,3.826,1943,3.05,1944,6.265,1945,3.826,1946,3.826,1947,3.826,1948,3.826,1949,3.826,1950,3.826,1951,3.826,1952,3.826,1953,3.826,1954,3.826,1955,3.826,1956,3.826,1957,3.358,1958,3.826,1959,3.826,1960,3.826,1961,3.826,1962,3.826,1963,3.826]],["title/classes/Source.html",[4,0.081,107,0.137]],["body/classes/Source.html",[3,0.108,4,0.138,5,0.096,12,0.724,15,0.011,17,0.733,28,0.147,32,0.888,42,1.456,106,0.177,107,0.143,119,0.94,121,1.971,139,0.007,140,0.007,157,0.381,158,1.339,164,3.062,176,1.745,185,0.513,204,1.431,210,1.896,211,3.072,212,3.34,213,3.327,214,4.358,217,3.072,219,3.579,220,1.771,221,2.032,222,1.721,230,2.278,235,4.244,244,3.475,333,3.475,448,2.842,460,2.856,464,3.062,495,2.278,588,3.475,633,4.71,670,4.401,772,3.685,773,5.405,780,3.276,782,2.19,783,4.777,786,3.276,788,3.685,836,4.997,1161,5.26,1162,5.26,1964,3.062,1965,4.444,1966,4.444,1967,4.444,1968,4.444,1969,4.444,1970,5.992,1971,5.992,1972,4.444,1973,4.444,1974,3.543,1975,4.444,1976,4.444,1977,4.444,1978,4.444,1979,3.276,1980,3.901]],["title/controllers/SourceController.html",[247,1.22,1981,3.132]],["body/controllers/SourceController.html",[3,0.126,4,0.098,5,0.112,7,1.178,8,3.591,12,0.478,14,1.03,15,0.011,16,0.574,17,0.459,18,0.946,20,0.973,28,0.143,30,0.497,106,0.126,107,0.166,119,1.396,134,1.48,139,0.008,140,0.008,157,0.441,159,1.251,160,2.123,161,2.396,162,1.979,174,1.708,181,1.48,185,0.917,200,2.538,210,1.251,244,3.736,247,1.897,268,3.385,308,2.355,344,3.07,346,3.514,347,3.344,348,2.913,357,5.022,359,3.549,360,3.344,432,4.286,480,5.372,820,4.263,1392,3.549,1760,4.521,1981,4.867,1982,4.521,1983,6.603,1984,5.151,1985,7.686,1986,5.151,1987,5.151,1988,4.521,1989,5.151,1990,5.151,1991,5.151,1992,5.151,1993,5.151,1994,4.521,1995,5.151,1996,7.686,1997,5.151]],["title/modules/SourceModule.html",[0,0.736,45,2.372]],["body/modules/SourceModule.html",[0,1.211,2,1.816,3,0.138,4,0.133,5,0.122,15,0.011,16,0.629,28,0.177,30,0.544,31,2.578,32,1.127,45,4.71,106,0.138,107,0.182,122,1.985,134,2.008,135,2.461,139,0.009,140,0.009,141,2.319,146,2.461,147,1.985,148,1.816,150,2.617,185,0.651,220,1.666,446,2.674,820,5.11,1979,5.153,1981,5.601,1988,4.95,1998,4.95,1999,4.95,2000,4.95,2001,4.496,2002,4.95,2003,5.639,2004,5.153,2005,4.95]],["title/injectables/SourceService.html",[154,0.634,820,2.485]],["body/injectables/SourceService.html",[3,0.123,4,0.145,5,0.109,7,1.16,12,0.669,14,1.44,15,0.011,16,0.803,17,0.58,18,1.323,20,1.228,28,0.165,30,0.485,32,1.005,106,0.123,107,0.162,119,1.375,139,0.008,140,0.008,154,0.971,155,1.574,157,0.431,159,1.222,162,2.194,165,1.717,174,2.157,176,1.454,179,1.445,180,1.771,181,1.445,185,0.58,191,2.688,192,1.62,222,1.445,240,2.144,244,3.694,253,2.36,344,2.783,346,3.483,348,3.361,349,4.481,617,3.483,618,2.578,619,2.385,630,3.265,724,3.466,725,3.466,820,3.804,1242,4.415,1974,4.01,1994,5.707,2002,4.415,2004,4.793,2006,4.415,2007,6.502,2008,5.029,2009,5.029,2010,6.502,2011,5.029,2012,5.029,2013,5.029,2014,5.029,2015,5.029,2016,5.029,2017,5.029,2018,5.029,2019,5.029,2020,5.029]],["title/classes/Speech.html",[107,0.137,769,2.612]],["body/classes/Speech.html",[3,0.134,4,0.104,5,0.119,12,0.637,15,0.011,17,0.756,28,0.163,32,1.096,106,0.183,107,0.177,121,1.967,139,0.008,140,0.008,157,0.47,158,1.535,176,1.535,179,1.575,185,0.793,204,1.766,210,1.669,211,2.81,212,2.701,213,3.198,214,3.061,219,3.31,220,2.03,221,2.506,222,1.973,230,2.81,232,3.207,233,4.018,234,3.207,235,3.207,769,4.98,825,4.009,1420,4.835,1490,4.041,2021,4.041,2022,5.482,2023,4.812,2024,5.482,2025,5.482,2026,5.476,2027,4.812,2028,4.041]],["title/modules/SpeechModule.html",[0,0.736,100,2.612]],["body/modules/SpeechModule.html",[0,1.226,2,1.853,3,0.14,4,0.11,5,0.125,15,0.011,16,0.641,28,0.174,30,0.555,31,2.63,32,1.15,100,5.209,106,0.14,107,0.185,122,2.025,135,2.492,139,0.009,140,0.009,141,2.348,146,2.492,147,2.025,148,1.853,150,2.649,185,0.664,220,1.7,446,2.729,769,3.538,1469,5.685,2028,5.217,2029,5.05,2030,5.05,2031,5.05,2032,4.587,2033,5.05,2034,5.753,2035,5.217,2036,5.05]],["title/injectables/SpeechService.html",[154,0.634,1469,2.758]],["body/injectables/SpeechService.html",[3,0.142,4,0.111,5,0.126,7,1.269,12,0.66,14,1.423,15,0.011,16,0.793,17,0.518,18,1.307,20,1.097,28,0.174,30,0.56,32,1.16,106,0.142,107,0.187,119,1.227,139,0.009,140,0.009,154,1.063,155,1.817,157,0.497,159,1.41,165,1.879,181,1.668,222,1.668,253,2.583,617,3.668,619,2.753,769,3.57,1469,4.62,1490,4.279,2033,5.096,2035,5.246,2037,5.096,2038,5.805,2039,5.805,2040,7.117,2041,5.805,2042,5.805,2043,5.805,2044,5.805]],["title/controllers/StatsController.html",[247,1.22,2045,3.132]],["body/controllers/StatsController.html",[3,0.151,4,0.118,5,0.134,7,1.317,12,0.572,15,0.011,20,1.165,28,0.16,30,0.595,106,0.151,107,0.199,119,1.304,134,1.772,139,0.009,140,0.009,157,0.529,159,1.499,165,1.629,210,1.499,247,1.772,1246,4.548,1256,4.86,1269,5.415,2045,5.443,2046,5.415,2047,6.169,2048,7.19,2049,6.169,2050,6.169,2051,5.415,2052,6.169,2053,6.169]],["title/modules/StatsModule.html",[0,0.736,47,2.758]],["body/modules/StatsModule.html",[0,1.182,2,1.747,3,0.132,4,0.103,5,0.118,15,0.011,28,0.179,30,0.523,37,4.601,38,3.738,39,5.067,40,4.324,41,4.404,42,1.318,43,2.236,44,3.521,47,5.666,106,0.132,107,0.175,122,2.402,134,1.96,135,2.402,139,0.008,140,0.008,141,2.263,146,2.402,147,1.909,148,1.747,150,2.554,1256,5.344,2045,5.503,2051,4.761,2054,4.761,2055,4.761,2056,5.424,2057,4.761,2058,5.424,2059,5.424]],["title/injectables/StatsService.html",[154,0.634,1256,2.612]],["body/injectables/StatsService.html",[3,0.137,4,0.107,5,0.122,7,1.242,12,0.646,14,1.12,15,0.011,16,0.624,17,0.5,18,1.028,20,1.058,28,0.172,30,0.54,42,1.361,43,2.309,106,0.137,107,0.18,119,1.472,139,0.009,140,0.009,154,1.04,155,1.753,157,0.48,159,1.84,165,1.839,311,4.093,312,3.277,313,4.927,318,4.501,319,4.129,352,3.636,361,3.636,587,3.636,1256,4.281,1264,3.86,1928,4.917,2048,6.956,2060,4.917,2061,5.602,2062,5.602,2063,5.602,2064,5.602,2065,5.602,2066,5.602,2067,5.602,2068,5.602,2069,5.602,2070,5.602]],["title/classes/UpdateClaimDTO.html",[107,0.137,305,3.132]],["body/classes/UpdateClaimDTO.html",[3,0.159,4,0.124,5,0.142,15,0.011,28,0.166,106,0.159,107,0.21,139,0.009,140,0.009,204,2.104,253,2.37,276,4.501,305,5.63,323,5.733,618,3.348,984,5.207,2071,5.733,2072,5.733,2073,5.207,2074,4.815,2075,6.531]],["title/classes/UpdateClaimReviewTaskDTO.html",[107,0.137,521,2.928]],["body/classes/UpdateClaimReviewTaskDTO.html",[3,0.145,4,0.113,5,0.129,12,0.551,15,0.011,17,0.53,28,0.169,42,1.889,76,3.532,106,0.145,107,0.232,139,0.009,140,0.009,157,0.509,158,1.613,176,1.613,204,1.913,210,1.443,253,2.156,449,2.788,501,4.685,521,4.974,524,4.379,618,3.045,782,2.927,985,5.731,986,4.379,1001,4.974,1002,4.222,1019,4.379,2072,6.335,2073,4.736,2074,4.379,2076,6.335,2077,5.94]],["title/classes/User.html",[107,0.137,460,1.496]],["body/classes/User.html",[3,0.128,4,0.1,5,0.114,12,0.717,15,0.011,16,0.819,17,0.69,28,0.145,32,1.046,106,0.179,107,0.169,114,3.219,121,2.101,139,0.008,140,0.008,157,0.449,158,1.491,176,1.825,179,1.916,185,0.604,203,2.661,204,1.686,210,1.879,213,3.296,217,3.964,219,3.524,220,1.971,221,2.393,222,1.504,455,3.725,460,2.585,690,4.755,1209,4.598,1409,5.061,2074,3.859,2078,3.859,2079,5.855,2080,5.855,2081,5.235,2082,5.235,2083,5.235,2084,5.235,2085,3.608,2086,4.595,2087,3.608,2088,4.174]],["title/interfaces/UserDocument.html",[114,2.612,2085,2.928]],["body/interfaces/UserDocument.html",[3,0.139,4,0.109,5,0.124,7,1.257,12,0.53,15,0.011,16,0.637,20,1.079,28,0.153,32,1.142,106,0.186,107,0.184,114,3.514,121,2.028,139,0.009,140,0.009,157,0.49,176,1.709,179,1.641,185,0.659,203,2.279,213,3.402,219,3.617,220,2.083,221,2.613,222,1.641,455,3.191,460,2.691,690,4.334,1209,4.857,1409,3.938,2074,5.196,2078,4.212,2079,4.556,2080,4.556,2085,4.857,2086,7.005,2087,3.938,2088,4.556,2089,5.016,2090,5.714]],["title/controllers/UsersController.html",[247,1.22,2091,3.132]],["body/controllers/UsersController.html",[3,0.107,4,0.084,5,0.095,7,1.06,8,4.039,12,0.625,14,1.347,15,0.011,16,0.751,17,0.53,18,1.237,20,1.273,28,0.176,30,0.423,52,1.644,106,0.107,107,0.141,119,0.928,121,1.444,134,1.261,139,0.007,140,0.007,157,0.376,159,1.637,160,1.81,161,1.594,162,2.226,165,1.159,168,3.601,171,3.635,174,1.456,185,0.833,192,2.17,210,1.637,247,1.707,268,2.251,270,3.301,271,4.287,274,3.509,315,1.937,316,2.568,317,2.163,320,3.32,321,2.85,327,3.195,328,2.346,329,2.346,344,1.696,404,3.655,405,3.655,415,3.858,424,3.655,425,3.477,426,3.858,460,2.092,499,4.738,516,3.5,552,3.5,618,2.251,1253,5.322,1935,3.854,1936,5.914,2091,4.381,2092,3.854,2093,5.943,2094,4.391,2095,4.391,2096,4.391,2097,5.217,2098,4.391,2099,4.391,2100,4.391,2101,4.391,2102,4.391,2103,4.374,2104,3.854,2105,4.391,2106,5.943,2107,4.391,2108,4.391,2109,4.391,2110,4.391,2111,4.391,2112,4.391,2113,4.391]],["title/modules/UsersModule.html",[0,0.736,33,2.928]],["body/modules/UsersModule.html",[0,1.159,2,1.693,3,0.128,4,0.1,5,0.114,15,0.011,16,0.586,28,0.183,30,0.507,31,2.403,32,1.051,33,5.932,51,3.575,52,1.968,53,4.027,54,3.075,83,5.306,84,4.614,106,0.128,107,0.169,122,2.355,134,1.921,135,2.355,139,0.008,140,0.008,141,2.219,146,2.355,147,1.851,148,1.693,150,2.504,185,0.607,220,1.553,446,2.493,460,1.851,2087,4.61,2091,5.423,2103,5.618,2104,4.614,2114,4.614,2115,4.614,2116,5.257,2117,4.614,2118,4.191,2119,4.614,2120,5.257,2121,5.423,2122,4.614]],["title/injectables/UsersService.html",[154,0.634,2103,2.758]],["body/injectables/UsersService.html",[3,0.096,4,0.075,5,0.085,7,0.984,12,0.698,14,1.451,15,0.011,16,0.861,17,0.351,18,1.332,20,1.302,23,4.84,26,2.556,28,0.158,30,0.38,32,0.787,106,0.096,107,0.127,119,1.345,121,0.957,139,0.007,140,0.007,154,0.823,155,1.232,157,0.337,158,1.233,159,1.763,160,2.623,161,2.502,162,2.247,165,1.456,174,1.829,179,1.131,180,1.386,181,2.085,185,0.837,191,2.104,192,2.221,195,2.019,200,1.94,203,1.571,222,1.131,240,1.679,255,3.391,338,2.714,339,2.714,453,3.58,460,2.774,495,2.827,508,2.947,578,2.714,617,3.152,619,1.868,761,2.199,793,2.903,907,2.903,1354,4.749,1371,3.8,1377,2.714,1379,3.58,1410,3.456,1412,4.84,1498,3.139,1712,3.456,2085,2.714,2097,4.84,2103,3.58,2119,3.456,2121,4.065,2123,3.456,2124,5.514,2125,5.514,2126,3.938,2127,5.514,2128,5.514,2129,3.938,2130,5.514,2131,3.938,2132,5.514,2133,3.938,2134,5.514,2135,3.938,2136,5.514,2137,3.938,2138,3.938,2139,5.514,2140,3.938,2141,3.456,2142,6.363,2143,3.938,2144,5.514,2145,3.938,2146,4.84,2147,3.938,2148,4.84,2149,3.938,2150,3.938,2151,6.363,2152,3.938,2153,3.938,2154,3.938,2155,3.938,2156,3.938,2157,3.938,2158,3.938,2159,3.938,2160,3.938,2161,5.514,2162,3.938,2163,3.938]],["title/injectables/UtilService.html",[154,0.634,558,2.372]],["body/injectables/UtilService.html",[3,0.107,4,0.084,5,0.096,7,1.063,12,0.626,14,1.445,15,0.011,16,0.752,17,0.602,18,1.239,20,1.275,28,0.129,30,0.425,76,1.878,106,0.107,107,0.142,119,1.646,139,0.007,140,0.007,154,0.89,155,1.379,157,0.378,179,1.266,180,1.551,181,1.266,185,0.898,203,2.376,240,1.878,308,2.723,345,2.46,529,2.86,558,3.326,587,4.381,681,4.693,1520,4.749,1726,5.33,2164,3.867,2165,5.957,2166,5.957,2167,5.957,2168,5.957,2169,4.406,2170,7.23,2171,5.957,2172,7.553,2173,4.406,2174,5.957,2175,5.957,2176,7.959,2177,4.406,2178,5.957,2179,5.957,2180,5.957,2181,5.957,2182,5.957,2183,7.23,2184,7.23,2185,5.957,2186,4.406,2187,4.406,2188,4.406,2189,5.957,2190,6.749,2191,4.406,2192,5.957,2193,3.867,2194,4.406,2195,4.406,2196,4.406,2197,4.406,2198,4.406,2199,4.406,2200,4.406,2201,4.406,2202,5.957,2203,4.749,2204,4.406,2205,4.406,2206,4.406,2207,4.406,2208,4.406,2209,4.406]],["title/controllers/ViewController.html",[247,1.22,2210,3.132]],["body/controllers/ViewController.html",[3,0.084,4,0.066,5,0.075,7,0.896,8,4.078,12,0.668,14,1.439,15,0.011,16,0.803,17,0.642,18,1.322,20,1.36,28,0.15,30,0.333,106,0.084,107,0.111,121,1.749,134,0.992,139,0.006,140,0.006,157,0.296,162,2.286,171,3.866,185,0.831,192,2.319,210,1.677,247,1.442,270,3.866,271,4.466,274,3.564,315,1.524,316,2.021,317,1.702,320,2.915,327,3.415,328,1.846,329,1.846,344,2.781,404,4.428,405,4.428,415,4.217,424,4.428,425,4.212,1213,4.004,1246,2.546,1313,4.004,1327,4.408,1328,5.194,1392,2.38,1931,3.032,1932,5.194,1933,2.546,1934,5.194,1938,4.408,2210,3.702,2211,3.032,2212,4.408,2213,5.022,2214,5.022,2215,5.022,2216,5.022,2217,5.022,2218,3.454,2219,3.454,2220,3.454,2221,3.454,2222,3.454,2223,3.454,2224,5.022,2225,3.454,2226,3.454,2227,3.454,2228,3.454,2229,5.022,2230,5.022,2231,5.022,2232,5.022,2233,5.022,2234,3.454,2235,3.454,2236,3.454,2237,3.454,2238,3.454,2239,3.454,2240,3.032,2241,7.2,2242,5.022,2243,5.022,2244,3.454,2245,3.454,2246,3.454,2247,3.454,2248,3.454,2249,3.454,2250,3.454,2251,3.454,2252,3.454,2253,3.454]],["title/modules/ViewModule.html",[0,0.736,53,2.093]],["body/modules/ViewModule.html",[0,1.244,2,1.896,3,0.144,4,0.112,5,0.128,15,0.011,28,0.175,30,0.567,51,3.835,52,2.203,53,4.193,106,0.144,107,0.19,122,2.072,134,2.062,135,2.527,139,0.009,140,0.009,141,2.381,146,2.527,147,2.072,148,1.896,150,2.687,320,4.328,2210,5.708,2240,5.166,2254,5.166,2255,5.166,2256,5.166,2257,5.885,2258,5.885]],["title/injectables/ViewService.html",[154,0.634,320,2.093]],["body/injectables/ViewService.html",[3,0.124,4,0.097,5,0.11,7,1.166,12,0.734,14,1.013,15,0.011,16,0.565,17,0.583,18,0.931,20,1.234,28,0.166,30,0.489,52,1.898,106,0.124,107,0.163,108,2.83,119,1.072,127,4.45,139,0.008,140,0.008,154,0.976,155,1.586,157,0.434,158,1.461,159,1.967,160,2.981,161,2.773,162,1.964,165,1.339,168,4.327,179,1.456,180,1.785,181,1.877,192,1.633,195,2.599,200,2.498,320,3.22,425,4.469,1057,2.709,1071,3.737,1283,4.242,1379,4.242,1392,3.493,2259,4.45,2260,6.349,2261,8.097,2262,6.535,2263,5.069,2264,8.097,2265,5.069,2266,6.535,2267,5.069,2268,6.535,2269,5.069,2270,6.535,2271,5.737,2272,5.069,2273,5.069,2274,4.45,2275,5.069,2276,5.069,2277,5.069]],["title/classes/WikidataCache.html",[107,0.137,2278,2.928]],["body/classes/WikidataCache.html",[3,0.13,4,0.102,5,0.116,12,0.723,15,0.011,17,0.732,28,0.147,32,1.068,106,0.181,107,0.172,121,1.994,139,0.008,140,0.008,157,0.458,158,1.511,176,1.742,179,1.535,185,0.617,204,1.722,210,1.893,211,2.74,212,2.633,213,3.321,217,3.465,219,3.546,220,1.998,221,2.443,222,1.535,395,4.157,592,3.562,1121,3.653,1209,4.658,1423,5.109,1723,5.109,2023,4.691,2278,5.109,2279,3.94,2280,5.911,2281,5.344,2282,5.344,2283,5.344,2284,5.344,2285,4.261,2286,5.344,2287,3.94,2288,4.691]],["title/modules/WikidataModule.html",[0,0.736,35,2.758]],["body/modules/WikidataModule.html",[0,1.176,2,1.732,3,0.131,4,0.102,5,0.117,15,0.011,16,0.6,28,0.17,30,0.518,31,2.459,32,1.075,35,5.419,106,0.131,107,0.173,119,1.137,121,1.307,122,1.893,135,2.389,139,0.008,140,0.008,141,2.251,146,2.389,147,1.893,148,1.732,150,2.54,185,0.783,495,3.812,690,3.307,1121,2.65,1656,5.636,1723,3.706,2278,3.706,2280,4.288,2287,5.757,2289,4.721,2290,4.721,2291,4.721,2292,4.288,2293,5.378,2294,4.721,2295,5.411,2296,4.721,2297,4.721,2298,4.721,2299,5.957,2300,4.721,2301,4.721]],["title/injectables/WikidataService.html",[154,0.634,1656,2.758]],["body/injectables/WikidataService.html",[3,0.071,4,0.055,5,0.063,7,0.789,12,0.672,14,1.448,15,0.011,16,0.857,17,0.533,18,1.329,20,1.328,28,0.13,30,0.281,32,0.582,106,0.071,107,0.094,119,1.648,139,0.005,140,0.005,154,0.66,155,0.911,157,0.249,159,0.707,162,2.116,165,1.168,171,1.331,174,1.774,176,1.436,179,1.27,180,1.557,181,0.836,185,0.948,191,3.192,192,2.178,203,1.161,207,1.557,212,3.332,219,1.285,222,0.836,268,2.742,317,1.435,480,5.181,588,3.062,617,2.731,619,1.381,1034,2.556,1035,3.882,1036,2.556,1037,4.426,1038,2.556,1121,3.992,1139,5.121,1330,4.694,1379,2.871,1388,2.871,1423,3.685,1541,2.556,1616,2.556,1634,3.526,1656,2.871,1723,2.006,1726,3.942,1929,2.321,1943,3.526,1957,2.556,2193,2.556,2203,2.321,2278,4.426,2285,2.321,2294,2.556,2302,2.321,2303,4.423,2304,4.423,2305,4.423,2306,4.423,2307,4.423,2308,4.423,2309,4.423,2310,2.912,2311,2.912,2312,4.423,2313,2.912,2314,4.423,2315,2.912,2316,4.423,2317,2.912,2318,4.423,2319,5.973,2320,2.912,2321,2.912,2322,4.423,2323,2.912,2324,4.423,2325,2.912,2326,4.423,2327,2.912,2328,2.321,2329,2.556,2330,2.912,2331,2.912,2332,2.912,2333,4.423,2334,2.912,2335,2.912,2336,2.912,2337,2.912,2338,2.912,2339,2.912,2340,2.912,2341,5.348,2342,2.912,2343,2.912,2344,2.912,2345,4.264,2346,4.423,2347,3.882,2348,4.423,2349,2.912,2350,2.912,2351,2.912,2352,4.423,2353,2.912,2354,2.912,2355,2.912,2356,2.912,2357,2.912,2358,2.912,2359,2.912,2360,2.912,2361,2.912,2362,2.912,2363,4.423,2364,2.912,2365,2.912,2366,2.912,2367,2.912,2368,2.912,2369,2.912,2370,4.423,2371,2.912,2372,2.912,2373,2.912,2374,2.912,2375,2.912,2376,4.423,2377,2.912,2378,4.423,2379,2.912,2380,2.912,2381,2.912,2382,2.912,2383,2.912,2384,4.423,2385,2.912,2386,4.423,2387,2.912,2388,2.912,2389,2.912,2390,2.912,2391,2.912,2392,2.912,2393,2.912,2394,2.321,2395,2.912,2396,2.912,2397,2.912,2398,2.912,2399,4.423,2400,2.912,2401,2.912,2402,2.912,2403,2.912,2404,2.912,2405,2.912,2406,2.912,2407,2.912,2408,2.556,2409,2.912,2410,2.912]],["title/coverage.html",[2411,4.633]],["body/coverage.html",[4,0.042,5,0.047,15,0.011,17,0.195,42,1.24,43,1.832,49,1.611,62,1.611,71,2.066,76,3.229,77,2.599,79,1.611,85,1.611,87,1.611,89,1.611,91,1.22,93,1.506,95,1.611,107,0.261,114,1.344,117,1.611,139,0.004,140,0.004,145,1.344,154,1.217,156,1.918,161,0.793,181,0.628,205,3.276,207,0.769,209,1.344,224,2.733,236,1.742,246,1.611,247,2.149,248,1.611,249,1.918,276,1.506,289,1.611,305,1.611,311,1.077,313,1.278,318,1.168,320,1.077,327,1.036,331,1.344,345,4.991,394,1.344,412,1.419,434,1.168,441,1.742,445,1.611,448,1.036,449,3.061,450,3.276,451,3.276,452,1.168,460,0.769,466,1.742,470,1.611,471,2.172,472,1.918,474,1.611,496,1.918,501,1.419,510,1.611,521,1.506,558,1.22,559,1.742,564,1.611,566,1.918,574,1.22,683,2.603,684,2.603,691,1.611,697,1.742,700,1.611,702,1.918,705,1.344,727,1.419,765,3.062,769,1.344,796,1.742,800,1.611,805,1.419,806,1.742,809,1.611,816,1.918,820,1.278,821,1.419,871,1.742,983,1.918,984,2.816,1004,1.918,1005,1.918,1018,1.742,1019,2.603,1031,1.611,1032,1.918,1033,1.918,1053,1.918,1054,1.918,1064,1.419,1067,4.466,1084,1.611,1086,1.611,1088,1.742,1119,1.918,1120,1.918,1135,1.918,1140,1.611,1141,1.918,1142,1.918,1150,1.918,1151,1.918,1156,2.434,1172,1.611,1174,1.611,1175,1.918,1195,1.742,1198,1.611,1201,1.918,1244,1.611,1245,1.918,1256,1.344,1274,1.918,1275,1.918,1280,1.918,1307,1.918,1323,1.918,1324,1.918,1340,1.918,1354,1.344,1369,1.918,1388,2.292,1420,1.344,1421,3.276,1430,1.742,1432,1.611,1436,1.419,1437,1.742,1440,1.611,1442,1.918,1460,4.466,1469,1.419,1470,1.419,1492,1.611,1494,1.742,1504,1.742,1506,1.742,1557,3.276,1564,1.742,1568,1.611,1569,1.611,1570,1.918,1646,1.742,1649,1.611,1650,1.918,1656,1.419,1761,3.062,1778,1.742,1781,1.611,1782,1.611,1783,1.918,1793,1.742,1796,1.611,1798,1.918,1810,1.918,1830,3.276,1836,1.742,1838,1.611,1842,1.742,1845,1.611,1847,1.918,1857,1.742,1859,1.918,1886,1.611,1887,1.918,1899,1.419,1916,2.816,1964,2.434,1979,1.611,1981,1.611,1982,1.918,2001,1.742,2004,1.611,2006,1.918,2021,3.276,2026,1.742,2028,1.611,2032,1.742,2035,1.611,2037,1.918,2045,1.611,2046,1.918,2060,1.918,2071,1.918,2076,1.918,2078,3.276,2085,1.506,2087,1.506,2091,1.611,2092,1.918,2103,1.419,2118,1.742,2121,1.611,2123,1.918,2164,1.918,2210,1.611,2211,1.918,2259,1.918,2278,1.506,2279,2.603,2287,1.611,2292,1.742,2295,1.742,2302,3.543,2328,1.742,2411,1.742,2412,2.185,2413,1.918,2414,2.185,2415,6.563,2416,6.563,2417,6.306,2418,8.697,2419,8.705,2420,5.602,2421,6.779,2422,6.962,2423,2.185,2424,2.185,2425,1.918,2426,2.185,2427,2.185,2428,2.185,2429,2.185,2430,4.444,2431,3.1,2432,3.1,2433,1.918,2434,1.918,2435,2.185,2436,2.185,2437,2.185,2438,2.185,2439,3.1,2440,1.918,2441,3.1,2442,2.185,2443,2.185,2444,2.185,2445,2.185,2446,3.531,2447,1.918,2448,1.918,2449,3.1,2450,3.531,2451,1.918,2452,1.918,2453,1.918,2454,1.918,2455,1.918,2456,1.918,2457,1.918,2458,1.918,2459,1.918,2460,2.185,2461,2.185,2462,2.185]],["title/dependencies.html",[141,1.696,2463,3.108]],["body/dependencies.html",[15,0.011,28,0.09,30,0.399,32,0.828,52,1.55,61,2.854,67,3.636,106,0.101,107,0.184,116,3.302,117,3.053,139,0.007,140,0.007,141,1.374,152,3.053,184,3.636,222,1.641,227,2.547,228,3.512,315,2.884,618,2.123,670,2.689,782,2.041,833,3.302,985,3.053,1057,3.765,1084,3.053,1086,3.053,1091,5.013,1121,2.041,1278,5.211,1388,2.689,1391,3.302,1482,3.636,1492,3.053,1497,3.302,1877,3.636,1896,3.302,2073,3.302,2464,5.711,2465,5.711,2466,4.142,2467,3.636,2468,4.142,2469,4.142,2470,4.142,2471,4.142,2472,4.142,2473,4.142,2474,4.142,2475,4.142,2476,5.711,2477,6.537,2478,5.711,2479,5.711,2480,4.142,2481,4.142,2482,4.142,2483,4.142,2484,4.142,2485,4.142,2486,4.142,2487,4.142,2488,4.142,2489,4.142,2490,5.711,2491,4.142,2492,4.142,2493,4.142,2494,3.302,2495,4.142,2496,5.711,2497,4.142,2498,4.142,2499,4.142,2500,4.142,2501,4.142,2502,6.537,2503,4.142,2504,4.142,2505,4.142,2506,6.537,2507,4.142,2508,3.636,2509,4.142,2510,5.711,2511,4.142,2512,4.142,2513,4.142,2514,6.537,2515,6.537,2516,4.142,2517,5.711,2518,4.142,2519,4.142,2520,4.142,2521,5.711,2522,4.142,2523,4.142,2524,4.142,2525,4.142,2526,4.142,2527,4.142,2528,4.142,2529,4.142,2530,4.142,2531,4.142,2532,4.142,2533,7.265,2534,6.537,2535,4.142,2536,4.142,2537,4.142,2538,4.142,2539,4.142,2540,4.142,2541,4.142,2542,4.142,2543,3.636,2544,4.142,2545,4.142,2546,4.142,2547,4.142,2548,3.636,2549,4.142,2550,4.142,2551,4.142,2552,4.142,2553,4.142,2554,4.142,2555,4.142,2556,4.142,2557,4.142,2558,4.142,2559,4.142,2560,4.142,2561,4.142,2562,3.636,2563,4.142,2564,4.142,2565,4.142,2566,4.142,2567,4.142,2568,4.142]],["title/miscellaneous/enumerations.html",[2569,2.299,2570,4.488]],["body/miscellaneous/enumerations.html",[15,0.011,42,1.948,121,1.727,139,0.009,140,0.009,157,0.496,180,3.058,203,2.31,207,2.502,224,3.562,253,2.579,254,3.798,262,3.968,333,3.643,448,3.803,449,2.237,621,4.898,765,4.898,769,4.37,771,5.666,781,6.238,836,5.239,1016,5.239,1156,3.991,1761,3.991,1771,4.618,1772,5.084,1773,5.084,1774,5.084,1775,5.084,1776,5.084,1964,3.991,2569,3.76,2570,5.084,2571,4.618,2572,4.618,2573,5.666,2574,4.618]],["title/index.html",[157,0.303,2575,3.108,2576,3.108]],["body/index.html",[15,0.011,17,0.64,121,1.625,139,0.007,140,0.007,158,1.316,176,1.316,203,1.728,213,1.846,220,1.977,253,2.137,262,2.418,317,3.699,344,2.275,508,3.575,592,2.692,668,3.823,761,3.288,793,4.341,812,5.169,826,4.932,947,3.193,1029,3.453,1115,3.193,1191,3.193,1227,4.932,1231,5.873,1371,4.058,1377,2.985,1389,5.334,1393,3.453,1405,5.169,1406,3.453,1408,3.802,1409,5.174,1411,5.169,1413,3.453,1933,4.341,2141,3.802,2148,5.169,2271,5.169,2345,3.453,2408,3.802,2413,5.169,2577,4.695,2578,4.331,2579,4.331,2580,4.331,2581,4.331,2582,4.331,2583,4.331,2584,4.331,2585,4.331,2586,4.331,2587,4.331,2588,4.331,2589,5.888,2590,4.331,2591,4.331,2592,4.331,2593,4.331,2594,4.331,2595,5.169,2596,6.69,2597,4.331,2598,4.331,2599,3.802,2600,5.169,2601,4.331,2602,5.873,2603,4.331,2604,5.169,2605,4.331,2606,3.802,2607,3.802,2608,4.331,2609,5.888,2610,4.331,2611,4.331,2612,4.331,2613,4.331,2614,3.802,2615,4.331,2616,4.331,2617,3.802,2618,4.331,2619,4.331,2620,5.873,2621,6.69,2622,4.331,2623,4.331,2624,5.169,2625,3.802,2626,4.331,2627,5.888,2628,5.888,2629,3.802,2630,4.331,2631,4.331,2632,5.888,2633,5.888,2634,4.331,2635,3.802,2636,3.802,2637,4.331,2638,4.331,2639,4.331,2640,4.331,2641,4.331,2642,4.331,2643,4.331,2644,4.331,2645,4.331,2646,4.331,2647,6.69,2648,4.331,2649,3.802,2650,3.802,2651,3.802,2652,6.69,2653,5.888,2654,6.69,2655,3.802,2656,6.69,2657,3.802,2658,4.331,2659,4.331,2660,4.331,2661,3.802]],["title/license.html",[2575,3.108,2576,3.108,2662,2.823]],["body/license.html",[4,0.139,5,0.031,7,0.136,8,3.145,12,0.071,15,0.002,17,0.126,19,2.15,21,0.427,26,0.497,28,0.017,42,0.343,91,0.427,107,0.025,114,2.197,116,1.126,119,0.162,132,1.126,136,2.52,139,0.002,140,0.002,148,0.246,159,0.186,181,1.026,191,1.052,213,1.044,315,0.623,347,1.278,348,0.623,360,0.497,361,1.59,395,0.471,426,0.497,460,1.866,495,1.471,530,0.826,532,1.24,533,3.136,590,2.851,592,2.757,617,0.35,634,1.727,641,0.61,643,0.672,645,1.569,670,0.497,671,0.497,672,0.917,675,0.917,677,1.59,685,0.527,761,0.789,786,1.805,788,3.875,793,1.041,794,5.088,825,0.409,849,1.126,853,1.953,855,1.953,907,0.564,912,0.61,947,1.805,1030,0.497,1057,0.409,1079,0.672,1110,0.672,1115,0.564,1121,0.696,1157,1.126,1171,2.846,1209,1.356,1213,3.822,1214,0.672,1226,1.24,1227,2.116,1230,1.24,1232,1.24,1326,1.24,1377,0.527,1401,1.727,1416,0.672,1420,0.869,1497,0.61,1499,1.126,1500,0.672,1520,0.61,1638,1.24,1717,0.672,1726,0.564,1727,1.727,1815,0.672,1933,5.119,1941,0.672,2089,1.727,2146,4.369,2203,0.61,2212,0.672,2260,2.52,2345,0.61,2347,2.52,2394,0.61,2411,1.126,2425,1.24,2494,1.126,2508,1.727,2543,4.032,2548,1.24,2562,0.672,2599,1.727,2600,2.15,2602,3.395,2604,2.846,2607,0.672,2614,1.727,2617,2.52,2620,5.602,2624,2.52,2625,1.24,2629,2.846,2635,0.672,2636,0.672,2649,0.672,2650,3.395,2655,0.672,2657,1.24,2661,1.727,2662,6.616,2663,5.82,2664,6.217,2665,2.87,2666,0.765,2667,0.765,2668,1.968,2669,6.725,2670,3.868,2671,5.929,2672,6.53,2673,3.242,2674,0.765,2675,0.765,2676,1.413,2677,2.87,2678,2.87,2679,1.968,2680,5.146,2681,0.765,2682,0.765,2683,0.765,2684,1.413,2685,4.794,2686,3.242,2687,0.765,2688,3.242,2689,0.765,2690,3.868,2691,0.765,2692,0.765,2693,0.765,2694,5.146,2695,7.478,2696,5.146,2697,1.968,2698,1.968,2699,3.629,2700,1.413,2701,8.239,2702,1.413,2703,3.572,2704,3.572,2705,5.146,2706,3.242,2707,0.765,2708,0.765,2709,2.449,2710,3.868,2711,1.413,2712,3.868,2713,1.968,2714,0.765,2715,1.413,2716,0.765,2717,1.968,2718,5.82,2719,1.413,2720,2.449,2721,0.765,2722,0.765,2723,1.413,2724,2.449,2725,2.449,2726,1.413,2727,4.794,2728,1.413,2729,2.87,2730,6.031,2731,2.87,2732,1.413,2733,2.449,2734,3.572,2735,0.765,2736,6.84,2737,1.968,2738,3.572,2739,0.765,2740,0.765,2741,0.765,2742,3.868,2743,1.413,2744,4.594,2745,4.375,2746,2.87,2747,1.413,2748,0.765,2749,0.765,2750,5.301,2751,0.765,2752,0.765,2753,4.977,2754,1.413,2755,1.968,2756,0.765,2757,0.765,2758,0.765,2759,0.765,2760,0.765,2761,0.765,2762,0.765,2763,0.765,2764,0.765,2765,0.765,2766,1.413,2767,0.765,2768,0.765,2769,0.765,2770,1.413,2771,0.765,2772,1.968,2773,1.413,2774,0.765,2775,0.765,2776,1.413,2777,1.413,2778,5.146,2779,0.765,2780,1.413,2781,1.413,2782,0.765,2783,0.765,2784,1.413,2785,1.968,2786,1.968,2787,1.24,2788,0.765,2789,0.765,2790,3.242,2791,0.765,2792,0.765,2793,2.87,2794,0.765,2795,0.765,2796,0.765,2797,0.765,2798,1.413,2799,1.968,2800,0.765,2801,4.134,2802,0.765,2803,5.146,2804,2.449,2805,2.87,2806,3.242,2807,0.765,2808,1.968,2809,5.704,2810,1.413,2811,0.765,2812,0.765,2813,0.765,2814,1.968,2815,7.354,2816,4.375,2817,0.765,2818,0.765,2819,1.413,2820,1.413,2821,0.765,2822,4.375,2823,0.765,2824,2.449,2825,0.765,2826,1.968,2827,1.968,2828,1.413,2829,7.247,2830,1.968,2831,4.134,2832,2.449,2833,1.413,2834,0.765,2835,1.413,2836,1.968,2837,4.134,2838,4.375,2839,0.765,2840,1.413,2841,1.413,2842,2.449,2843,2.449,2844,3.629,2845,0.765,2846,1.968,2847,0.765,2848,6.458,2849,1.413,2850,0.765,2851,3.868,2852,0.765,2853,1.968,2854,3.868,2855,0.765,2856,5.301,2857,2.449,2858,1.413,2859,3.868,2860,4.594,2861,3.242,2862,0.765,2863,0.765,2864,0.765,2865,0.765,2866,3.868,2867,0.765,2868,1.413,2869,0.765,2870,0.765,2871,1.968,2872,0.765,2873,1.968,2874,0.765,2875,0.765,2876,0.765,2877,1.968,2878,1.968,2879,0.765,2880,0.765,2881,0.765,2882,1.413,2883,4.375,2884,0.765,2885,3.242,2886,0.765,2887,0.765,2888,2.87,2889,1.968,2890,1.968,2891,3.242,2892,1.968,2893,0.765,2894,0.765,2895,2.87,2896,2.87,2897,3.242,2898,0.765,2899,0.765,2900,0.765,2901,1.413,2902,1.968,2903,0.765,2904,0.765,2905,1.968,2906,0.765,2907,0.765,2908,0.765,2909,1.413,2910,0.765,2911,6.217,2912,0.765,2913,3.868,2914,0.765,2915,3.242,2916,1.413,2917,0.765,2918,0.765,2919,1.413,2920,1.413,2921,2.449,2922,0.765,2923,0.765,2924,0.765,2925,0.765,2926,1.413,2927,1.968,2928,2.87,2929,0.765,2930,1.413,2931,0.765,2932,0.765,2933,3.242,2934,0.765,2935,2.449,2936,0.765,2937,4.375,2938,3.572,2939,2.449,2940,0.765,2941,2.87,2942,0.765,2943,1.413,2944,0.765,2945,0.765,2946,1.968,2947,1.968,2948,1.968,2949,0.765,2950,0.765,2951,0.765,2952,1.968,2953,1.968,2954,3.242,2955,0.672,2956,0.765,2957,1.413,2958,1.413,2959,1.413,2960,0.765,2961,4.977,2962,1.413,2963,0.765,2964,0.765,2965,0.765,2966,0.765,2967,0.765,2968,0.765,2969,1.968,2970,0.765,2971,5.301,2972,0.765,2973,0.765,2974,0.765,2975,2.87,2976,2.87,2977,0.765,2978,0.765,2979,1.968,2980,0.765,2981,0.765,2982,2.449,2983,0.765,2984,1.413,2985,0.765,2986,0.765,2987,0.765,2988,0.765,2989,0.765,2990,0.765,2991,1.413,2992,1.413,2993,0.765,2994,1.968,2995,0.765,2996,0.765,2997,1.413,2998,0.765,2999,0.765,3000,0.765,3001,0.765,3002,1.413,3003,1.413,3004,1.413,3005,4.134,3006,1.413,3007,3.242,3008,0.765,3009,0.765,3010,1.413,3011,1.968,3012,1.968,3013,2.449,3014,2.449,3015,1.968,3016,2.449,3017,1.968,3018,0.765,3019,2.87,3020,2.87,3021,1.727,3022,1.968,3023,0.765,3024,1.413,3025,1.413,3026,2.87,3027,1.413,3028,2.449,3029,2.449,3030,1.413,3031,1.968,3032,5.146,3033,2.87,3034,0.765,3035,0.765,3036,0.765,3037,1.968,3038,1.413,3039,1.413,3040,0.765,3041,0.765,3042,0.765,3043,0.765,3044,1.413,3045,0.765,3046,0.765,3047,0.765,3048,1.968,3049,0.765,3050,0.765,3051,1.413,3052,1.968,3053,0.765,3054,0.765,3055,1.968,3056,0.765,3057,1.413,3058,1.413,3059,3.242,3060,6.031,3061,1.968,3062,1.413,3063,1.413,3064,1.413,3065,1.413,3066,2.449,3067,1.413,3068,0.765,3069,0.765,3070,0.765,3071,0.765,3072,3.572,3073,3.242,3074,1.413,3075,0.765,3076,0.765,3077,0.765,3078,0.765,3079,1.413,3080,0.765,3081,1.413,3082,0.765,3083,2.87,3084,3.868,3085,2.449,3086,0.765,3087,4.594,3088,0.765,3089,0.765,3090,0.765,3091,0.765,3092,0.765,3093,1.413,3094,0.765,3095,0.765,3096,0.765,3097,1.413,3098,1.968,3099,2.87,3100,2.15,3101,2.449,3102,1.413,3103,0.765,3104,0.765,3105,1.413,3106,0.765,3107,0.765,3108,0.765,3109,1.413,3110,0.765,3111,0.765,3112,1.968,3113,0.765,3114,1.413,3115,0.765,3116,0.765,3117,1.968,3118,0.765,3119,0.765,3120,0.765,3121,0.765,3122,0.765,3123,1.413,3124,0.765,3125,0.765,3126,0.765,3127,0.765,3128,0.765,3129,1.968,3130,0.765,3131,0.765,3132,0.765,3133,0.765,3134,0.765,3135,2.87,3136,0.765,3137,0.765,3138,1.413,3139,2.449,3140,3.868,3141,0.765,3142,0.765,3143,0.765,3144,0.765,3145,0.765,3146,0.765,3147,0.765,3148,0.765,3149,3.572,3150,1.968,3151,0.765,3152,2.449,3153,0.765,3154,0.765,3155,1.968,3156,0.765,3157,0.765,3158,1.968,3159,0.765,3160,1.413,3161,0.765,3162,0.765,3163,0.765,3164,0.765,3165,0.765,3166,0.765,3167,0.765,3168,0.765,3169,1.413,3170,0.765,3171,0.765,3172,0.765,3173,0.765,3174,1.413,3175,0.765,3176,0.765,3177,1.968,3178,0.765,3179,0.765,3180,1.413,3181,0.765,3182,1.413,3183,0.765,3184,1.968,3185,3.572,3186,0.765,3187,1.413,3188,0.765,3189,1.413,3190,0.765,3191,0.765,3192,0.765,3193,0.765,3194,0.765,3195,1.413,3196,2.449,3197,0.765,3198,2.87,3199,0.765,3200,0.765,3201,0.765,3202,0.765,3203,0.765,3204,0.765,3205,1.413,3206,1.413,3207,1.413,3208,1.968,3209,0.765,3210,1.413,3211,1.413,3212,0.765,3213,1.413,3214,1.968,3215,0.765,3216,1.413,3217,0.765,3218,1.413,3219,0.765,3220,1.413,3221,0.765,3222,0.765,3223,1.413,3224,6.217,3225,0.765,3226,2.87,3227,4.375,3228,1.968,3229,0.765,3230,0.765,3231,0.765,3232,2.449,3233,0.765,3234,0.765,3235,1.968,3236,0.672,3237,1.413,3238,0.765,3239,0.765,3240,0.765,3241,2.449,3242,0.765,3243,0.765,3244,0.765,3245,0.765,3246,0.765,3247,2.449,3248,0.765,3249,0.765,3250,1.968,3251,0.765,3252,1.413,3253,1.968,3254,0.765,3255,1.413,3256,0.765,3257,0.765,3258,0.765,3259,0.765,3260,1.413,3261,1.968,3262,0.765,3263,0.765,3264,1.413,3265,0.765,3266,1.413,3267,0.765,3268,0.765,3269,0.765,3270,0.765,3271,1.968,3272,1.413,3273,0.765,3274,0.765,3275,2.449,3276,0.765,3277,1.968,3278,0.765,3279,0.765,3280,0.765,3281,0.765,3282,0.765,3283,0.765,3284,1.968,3285,1.413,3286,1.413,3287,0.765,3288,3.572,3289,1.413,3290,1.968,3291,0.765,3292,0.765,3293,1.413,3294,0.765,3295,1.968,3296,0.765,3297,1.413,3298,0.765,3299,0.765,3300,0.765,3301,0.765,3302,1.968,3303,1.968,3304,1.413,3305,0.765,3306,1.413,3307,0.765,3308,0.765,3309,1.413,3310,1.413,3311,0.765,3312,0.765,3313,1.413,3314,0.765,3315,0.765,3316,0.765,3317,0.765,3318,0.765,3319,0.765,3320,0.765,3321,0.765,3322,0.765,3323,2.449,3324,1.413,3325,1.968,3326,0.765,3327,0.765,3328,0.765,3329,0.765,3330,0.765,3331,1.413,3332,0.765,3333,0.765,3334,0.765,3335,0.765,3336,0.765,3337,0.765,3338,0.765,3339,0.765,3340,0.765,3341,0.765,3342,0.765,3343,0.765,3344,0.765,3345,0.765,3346,2.449,3347,0.765,3348,1.413,3349,0.765,3350,0.765,3351,0.765,3352,0.765,3353,0.765,3354,0.765,3355,0.765,3356,0.765,3357,0.765,3358,0.765,3359,1.968,3360,0.765,3361,0.765,3362,0.765,3363,1.413,3364,0.765,3365,0.765,3366,0.765,3367,0.765,3368,0.765,3369,0.765,3370,0.765,3371,1.413,3372,1.413,3373,2.87,3374,0.765,3375,1.413,3376,0.765,3377,0.765,3378,0.765,3379,0.765,3380,1.968,3381,1.413,3382,0.765,3383,1.413,3384,1.413,3385,1.413,3386,0.765,3387,0.765,3388,0.765,3389,0.765,3390,0.765,3391,0.765,3392,0.765,3393,0.765,3394,1.413,3395,0.765,3396,0.765,3397,1.968,3398,0.765,3399,0.765,3400,0.765,3401,0.765,3402,0.765,3403,0.765,3404,0.765,3405,0.765,3406,0.765,3407,0.765,3408,0.765,3409,1.413,3410,0.765,3411,0.765,3412,0.765,3413,1.413,3414,0.765,3415,0.765,3416,0.765,3417,0.765,3418,0.765,3419,0.765,3420,0.765,3421,0.765,3422,0.765,3423,0.765,3424,0.765,3425,0.765,3426,0.765,3427,0.765,3428,0.765,3429,0.765,3430,1.968,3431,1.413,3432,0.765,3433,0.765,3434,0.765,3435,0.765,3436,0.765,3437,0.765,3438,0.765,3439,1.413,3440,1.968,3441,0.765,3442,0.765,3443,0.765,3444,0.765,3445,0.765,3446,0.765,3447,0.765,3448,1.413,3449,0.765,3450,0.765,3451,0.765,3452,0.765,3453,0.765,3454,0.765,3455,0.765,3456,0.765,3457,0.765,3458,0.765,3459,0.765,3460,0.765,3461,0.765,3462,0.765,3463,0.765,3464,0.765,3465,0.765,3466,0.765,3467,0.765,3468,0.765,3469,0.765,3470,0.765]],["title/modules.html",[2,1.872]],["body/modules.html",[1,3.948,2,1.725,15,0.008,33,3.691,35,3.477,37,2.99,39,3.293,41,2.862,45,2.99,47,3.477,53,2.639,55,3.691,57,3.691,68,3.691,70,3.293,73,3.133,75,3.477,81,3.477,83,3.477,98,3.293,100,3.293,102,3.293,104,3.477,139,0.008,140,0.008,440,3.477,2467,7.805,2606,7.805,2844,4.701,3021,7.805,3471,5.356,3472,8.905]],["title/overview.html",[3473,5.101]],["body/overview.html",[2,0.906,15,0.011,33,5.06,35,4.331,37,4.633,39,5.184,41,4.303,45,4.1,47,5.02,53,3.81,55,4.936,57,4.358,68,5.253,70,4.988,73,4.19,75,5.136,81,4.65,83,4.65,98,4.27,100,4.27,102,4.27,104,4.331,114,1.729,134,0.808,139,0.005,140,0.005,141,1.429,142,2.469,143,2.469,144,2.469,145,4.27,146,1.516,147,0.99,148,0.906,155,0.88,204,0.906,311,3.421,313,4.062,318,3.711,320,3.421,331,4.27,436,2.469,437,2.469,438,2.469,439,2.469,440,5.082,495,2.208,554,2.469,555,2.469,556,2.469,558,3.276,574,3.877,693,2.469,694,2.469,695,2.469,696,2.469,705,4.27,801,2.469,802,2.469,803,2.469,804,2.469,805,4.508,820,4.062,821,4.508,1061,2.469,1062,2.469,1063,2.469,1064,4.508,1192,2.469,1193,2.469,1194,2.469,1256,4.27,1270,2.469,1271,2.469,1354,4.27,1363,2.469,1364,2.469,1366,2.469,1433,2.469,1434,2.469,1435,2.469,1436,4.508,1454,2.469,1455,2.469,1456,2.469,1457,2.469,1469,4.508,1470,4.508,1642,2.469,1643,2.469,1644,2.469,1645,2.469,1656,4.508,1789,2.469,1791,2.469,1792,2.469,1839,2.469,1840,2.469,1841,2.469,1857,2.242,1899,4.508,1910,2.469,1911,2.469,1912,2.469,1998,2.469,1999,2.469,2000,2.469,2029,2.469,2030,2.469,2031,2.469,2054,2.469,2055,2.469,2057,2.469,2103,4.508,2114,2.469,2115,2.469,2117,2.469,2254,2.469,2255,2.469,2256,2.469,2289,2.469,2290,2.469,2291,2.469,2449,2.469,2459,2.469,3473,2.469,3474,2.812,3475,2.812]],["title/properties.html",[158,1.143,2463,3.108]],["body/properties.html",[15,0.011,139,0.009,140,0.009,158,1.468,588,3.365,794,5.234,1771,6.107,2533,5.762,2577,5.234,2662,5.234,3476,6.565,3477,6.565,3478,6.565,3479,7.66,3480,6.565,3481,6.565,3482,6.565,3483,6.565,3484,6.565]],["title/miscellaneous/typealiases.html",[2569,2.299,3485,5.113]],["body/miscellaneous/typealiases.html",[15,0.008,17,0.672,42,1.831,76,3.582,139,0.008,140,0.008,157,0.475,205,4.085,224,3.407,229,5.513,449,3.049,450,4.085,451,5.097,465,5.513,683,4.085,684,5.097,685,4.765,689,5.513,765,4.765,779,5.513,830,5.097,871,4.418,880,6.07,1018,4.418,1019,5.557,1025,6.07,1156,3.819,1167,5.513,1253,5.097,1421,4.085,1429,5.513,1490,5.097,1557,4.085,1563,5.513,1761,3.819,1770,5.513,1830,4.085,1835,5.513,1964,3.819,1974,5.513,2021,4.085,2279,4.085,2285,5.513,2569,3.597,2571,4.418,2572,6.01,2573,4.418,2574,4.418,3486,5.541,3487,5.541,3488,4.864,3489,5.541,3490,6.915,3491,4.864,3492,4.864,3493,4.864,3494,4.864,3495,4.864,3496,5.541]],["title/miscellaneous/variables.html",[2569,2.299,3497,4.488]],["body/miscellaneous/variables.html",[1,2.368,3,0.078,7,0.347,8,0.959,15,0.011,16,0.81,17,0.47,26,3.091,43,0.802,71,1.138,76,2.418,77,1.138,115,3.6,117,3.51,119,1.326,121,1.705,130,1.708,132,1.551,139,0.004,140,0.004,157,0.167,161,1.166,162,1.293,168,1.04,179,2.477,180,3.035,181,1.514,185,0.861,192,2.213,195,0.998,203,0.776,205,1.434,212,1.583,220,2.073,224,1.197,236,3.27,237,1.708,240,1.369,246,3.024,270,0.89,317,0.959,327,1.523,352,2.085,441,1.551,445,2.368,446,3.328,447,1.708,449,2.191,450,1.434,451,3.024,460,1.444,466,3.27,467,1.708,470,3.024,495,2.103,558,1.087,559,2.561,564,2.368,565,1.708,591,2.368,592,2.177,681,3.091,683,1.434,684,2.368,690,1.197,691,3.024,692,1.708,697,2.561,700,2.368,701,1.708,727,2.085,739,1.551,761,1.794,765,2.827,796,3.27,797,1.708,800,3.024,806,2.561,809,2.368,810,1.708,825,1.04,960,1.708,1030,1.263,1064,1.263,1067,1.551,1084,2.368,1085,1.708,1086,2.368,1087,1.708,1088,2.561,1089,1.708,1090,1.708,1104,1.708,1115,1.434,1121,0.959,1156,1.341,1169,1.551,1172,3.024,1173,1.708,1195,1.551,1198,2.368,1199,1.708,1277,1.708,1278,1.551,1282,1.708,1283,1.263,1371,2.214,1377,3.631,1388,3.091,1393,1.551,1402,2.82,1406,1.551,1409,1.341,1413,1.551,1414,1.708,1421,1.434,1430,3.27,1431,1.708,1432,3.024,1437,1.551,1440,2.368,1441,1.708,1460,1.551,1492,2.368,1493,1.708,1494,2.561,1495,1.708,1504,2.561,1505,1.708,1506,2.561,1507,1.708,1557,1.434,1564,3.27,1565,1.708,1568,3.024,1646,1.551,1649,2.368,1723,1.341,1761,1.341,1778,3.27,1779,1.708,1781,3.024,1793,1.551,1796,2.368,1797,1.708,1830,1.434,1836,3.27,1837,1.708,1838,3.024,1842,1.551,1845,2.368,1846,1.708,1860,1.708,1864,1.708,1870,1.708,1871,1.708,1872,1.708,1880,1.708,1916,1.551,1929,2.561,1937,1.708,1943,2.561,1964,1.341,1979,3.024,1980,1.708,2001,1.551,2004,2.368,2005,1.708,2021,1.434,2026,3.27,2027,1.708,2028,3.024,2032,1.551,2035,2.368,2036,1.708,2078,1.434,2079,1.551,2080,1.551,2087,2.827,2088,1.551,2118,1.551,2121,2.368,2122,1.708,2274,1.708,2279,1.434,2280,1.551,2287,3.884,2288,1.708,2292,1.551,2295,2.561,2296,1.708,2297,1.708,2298,1.708,2299,2.82,2300,1.708,2301,1.708,2302,1.551,2328,2.561,2329,1.708,2394,1.551,2431,1.708,2432,4.625,2433,1.708,2434,2.82,2439,1.708,2440,2.82,2441,4.179,2447,1.708,2448,1.708,2451,1.708,2452,2.82,2453,1.708,2454,2.82,2455,1.708,2456,2.82,2457,1.708,2458,2.82,2494,1.551,2569,1.263,2571,2.561,2572,5.002,2573,1.551,2574,1.551,2577,1.551,2595,1.708,2651,1.708,2699,1.708,2787,1.708,2955,1.708,3100,1.708,3236,1.708,3488,2.82,3491,2.82,3492,2.82,3493,2.82,3494,2.82,3495,1.708,3497,1.708,3498,1.946,3499,3.212,3500,1.946,3501,3.212,3502,4.761,3503,1.946,3504,1.946,3505,1.946,3506,4.761,3507,1.946,3508,1.946,3509,1.946,3510,3.212,3511,1.946,3512,1.946,3513,1.946,3514,1.946,3515,1.946,3516,1.946,3517,1.946,3518,1.946,3519,1.946,3520,1.946,3521,1.946,3522,1.946,3523,3.212,3524,1.946,3525,1.946,3526,1.946,3527,1.946,3528,1.946,3529,3.212,3530,3.212,3531,3.212,3532,1.946,3533,1.946,3534,1.946,3535,1.946,3536,1.946,3537,1.946,3538,1.946,3539,1.946,3540,1.946,3541,1.946,3542,3.212,3543,1.946,3544,1.946,3545,1.946,3546,1.946,3547,1.946,3548,1.946,3549,5.673,3550,1.946,3551,1.946,3552,1.946,3553,1.946,3554,1.946,3555,1.946,3556,1.946,3557,1.946,3558,3.212,3559,1.946,3560,1.946,3561,4.761,3562,1.946,3563,1.946,3564,4.761,3565,1.946,3566,1.946,3567,3.212,3568,1.946,3569,1.946,3570,1.946,3571,1.946,3572,1.946,3573,1.946,3574,1.946,3575,1.946,3576,1.946,3577,1.946,3578,1.946,3579,1.946,3580,1.946,3581,1.946,3582,1.946,3583,1.946,3584,1.946,3585,1.946,3586,1.946,3587,1.946,3588,1.946,3589,1.946,3590,1.946,3591,1.946,3592,1.946,3593,1.946,3594,3.212,3595,1.946,3596,1.946,3597,1.946,3598,1.946,3599,1.946,3600,1.946,3601,1.946,3602,1.946,3603,1.946,3604,1.946,3605,1.946,3606,1.946,3607,1.946,3608,1.946,3609,1.946,3610,1.946,3611,1.946,3612,1.946,3613,1.946,3614,1.946,3615,1.946,3616,1.946,3617,1.946,3618,1.946,3619,3.212,3620,1.946,3621,1.946,3622,1.946]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"modules/CaptchaModule.html":{},"injectables/CaptchaService.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimReviewTask.html":{},"modules/ClaimReviewTaskModule.html":{},"injectables/ClaimReviewTaskService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreateClaimReviewTaskDTO.html":{},"classes/CreatePersonality.html":{},"injectables/DisableBodyParserMiddleware.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/GetClaimsDTO.html":{},"injectables/GetLanguageMiddleware.html":{},"classes/GetPersonalities.html":{},"classes/GetTasksDTO.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/JsonBodyMiddleware.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"modules/OryModule.html":{},"injectables/OryService.html":{},"classes/Paragraph.html":{},"modules/ParagraphModule.html":{},"injectables/ParagraphService.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"classes/Report.html":{},"controllers/ReportController.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"controllers/RootController.html":{},"classes/Sentence.html":{},"modules/SentenceModule.html":{},"injectables/SentenceService.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"classes/Speech.html":{},"modules/SpeechModule.html":{},"injectables/SpeechService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimDTO.html":{},"classes/UpdateClaimReviewTaskDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":345,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{},"injectables/ClaimService.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"injectables/ReportService.html":{},"injectables/SitemapService.html":{},"injectables/UtilService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":2476,"title":{},"body":{"dependencies.html":{}}}],["0.0.2",{"_index":3476,"title":{},"body":{"properties.html":{}}}],["0.0.3",{"_index":2525,"title":{},"body":{"dependencies.html":{}}}],["0.0.5",{"_index":2504,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":2554,"title":{},"body":{"dependencies.html":{}}}],["0.1.24",{"_index":2483,"title":{},"body":{"dependencies.html":{}}}],["0.11.7",{"_index":2516,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":2501,"title":{},"body":{"dependencies.html":{}}}],["0.2.5",{"_index":2486,"title":{},"body":{"dependencies.html":{}}}],["0.21.2",{"_index":2498,"title":{},"body":{"dependencies.html":{}}}],["0.3.0",{"_index":2505,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":2500,"title":{},"body":{"dependencies.html":{}}}],["0.9",{"_index":1952,"title":{},"body":{"injectables/SitemapService.html":{}}}],["0/1",{"_index":2419,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2442,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":2443,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":2427,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2421,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2422,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2415,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2416,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2430,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2417,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2420,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2446,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":495,"title":{"controllers/ClaimReviewController-1.html":{}},"body":{"controllers/ClaimReviewController-1.html":{},"injectables/ClaimReviewService.html":{},"injectables/ParserService.html":{},"classes/Report.html":{},"classes/Source.html":{},"injectables/UsersService.html":{},"modules/WikidataModule.html":{},"license.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.0.1",{"_index":2478,"title":{},"body":{"dependencies.html":{}}}],["1.1.18",{"_index":2472,"title":{},"body":{"dependencies.html":{}}}],["1.17.2",{"_index":2519,"title":{},"body":{"dependencies.html":{}}}],["1.4.1",{"_index":2517,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":2507,"title":{},"body":{"dependencies.html":{}}}],["1.5.0",{"_index":2495,"title":{},"body":{"dependencies.html":{}}}],["1.5.5",{"_index":2511,"title":{},"body":{"dependencies.html":{}}}],["1.6.1",{"_index":2563,"title":{},"body":{"dependencies.html":{}}}],["1.8.0",{"_index":2529,"title":{},"body":{"dependencies.html":{}}}],["1.9.1",{"_index":2475,"title":{},"body":{"dependencies.html":{}}}],["1/2",{"_index":2436,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":2460,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":2426,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":2450,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":347,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{},"controllers/HistoryController.html":{},"injectables/PersonalityService.html":{},"controllers/SourceController.html":{},"license.html":{}}}],["10.2.0",{"_index":2527,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":2193,"title":{},"body":{"injectables/UtilService.html":{},"injectables/WikidataService.html":{}}}],["1000",{"_index":3609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["11",{"_index":2984,"title":{},"body":{"license.html":{}}}],["12.1.0",{"_index":2526,"title":{},"body":{"dependencies.html":{}}}],["13",{"_index":3361,"title":{},"body":{"license.html":{}}}],["13.11.4",{"_index":2503,"title":{},"body":{"dependencies.html":{}}}],["14",{"_index":2449,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["15",{"_index":3187,"title":{},"body":{"license.html":{}}}],["16",{"_index":2425,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["17",{"_index":2444,"title":{},"body":{"coverage.html":{}}}],["17.0.2",{"_index":2534,"title":{},"body":{"dependencies.html":{}}}],["1996",{"_index":2990,"title":{},"body":{"license.html":{}}}],["2",{"_index":2347,"title":{},"body":{"injectables/WikidataService.html":{},"license.html":{}}}],["2.0.0",{"_index":2481,"title":{},"body":{"dependencies.html":{}}}],["2.1.0",{"_index":2541,"title":{},"body":{"dependencies.html":{}}}],["2.1.6",{"_index":2513,"title":{},"body":{"dependencies.html":{}}}],["2.3.0",{"_index":2523,"title":{},"body":{"dependencies.html":{}}}],["2.3.2",{"_index":2538,"title":{},"body":{"dependencies.html":{}}}],["2.4.8",{"_index":2561,"title":{},"body":{"dependencies.html":{}}}],["2.8.4",{"_index":2559,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":2988,"title":{},"body":{"license.html":{}}}],["2007",{"_index":2668,"title":{},"body":{"license.html":{}}}],["21.6.10",{"_index":2522,"title":{},"body":{"dependencies.html":{}}}],["22",{"_index":3474,"title":{},"body":{"overview.html":{}}}],["23",{"_index":2423,"title":{},"body":{"coverage.html":{}}}],["24",{"_index":3475,"title":{},"body":{"overview.html":{}}}],["25",{"_index":2459,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["26",{"_index":2428,"title":{},"body":{"coverage.html":{}}}],["27.4.0",{"_index":2488,"title":{},"body":{"dependencies.html":{}}}],["28",{"_index":3342,"title":{},"body":{"license.html":{}}}],["29",{"_index":2666,"title":{},"body":{"license.html":{}}}],["3",{"_index":2665,"title":{},"body":{"license.html":{}}}],["3.0.0",{"_index":2493,"title":{},"body":{"dependencies.html":{}}}],["3/13",{"_index":2424,"title":{},"body":{"coverage.html":{}}}],["3/17",{"_index":2445,"title":{},"body":{"coverage.html":{}}}],["3/7",{"_index":2438,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":3243,"title":{},"body":{"license.html":{}}}],["3000",{"_index":3603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["320",{"_index":2645,"title":{},"body":{"index.html":{}}}],["4",{"_index":3022,"title":{},"body":{"license.html":{}}}],["4.1.0",{"_index":2468,"title":{},"body":{"dependencies.html":{}}}],["4.17.1",{"_index":2518,"title":{},"body":{"dependencies.html":{}}}],["4.18.5",{"_index":2497,"title":{},"body":{"dependencies.html":{}}}],["4.29.0",{"_index":2491,"title":{},"body":{"dependencies.html":{}}}],["4.32.1",{"_index":2568,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":2549,"title":{},"body":{"dependencies.html":{}}}],["4.6.2",{"_index":2466,"title":{},"body":{"dependencies.html":{}}}],["4.7.7",{"_index":2520,"title":{},"body":{"dependencies.html":{}}}],["4/15",{"_index":2429,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":2371,"title":{},"body":{"injectables/WikidataService.html":{}}}],["404",{"_index":1328,"title":{},"body":{"classes/NotFoundFilter.html":{},"controllers/ViewController.html":{}}}],["42",{"_index":2437,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":2562,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["5.13.5",{"_index":2524,"title":{},"body":{"dependencies.html":{}}}],["5.3.0",{"_index":2566,"title":{},"body":{"dependencies.html":{}}}],["5.4.0",{"_index":2531,"title":{},"body":{"dependencies.html":{}}}],["5.5.1",{"_index":2551,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":2435,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":1267,"title":{},"body":{"controllers/HomeController.html":{},"controllers/PersonalityController.html":{}}}],["6.1.1",{"_index":2557,"title":{},"body":{"dependencies.html":{}}}],["6.4.1",{"_index":2536,"title":{},"body":{"dependencies.html":{}}}],["6.7.0",{"_index":2532,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":3236,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["62585756d665dc7bf4b14aa3",{"_index":3618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6b",{"_index":3080,"title":{},"body":{"license.html":{}}}],["6d",{"_index":3107,"title":{},"body":{"license.html":{}}}],["7",{"_index":3017,"title":{},"body":{"license.html":{}}}],["7.12.1",{"_index":2470,"title":{},"body":{"dependencies.html":{}}}],["7.2.4",{"_index":2547,"title":{},"body":{"dependencies.html":{}}}],["7.3.0",{"_index":2558,"title":{},"body":{"dependencies.html":{}}}],["7.31.2",{"_index":2544,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1095,"title":{},"body":{"injectables/EmailService.html":{}}}],["8.0.0",{"_index":2479,"title":{},"body":{"dependencies.html":{}}}],["8.0.6",{"_index":2477,"title":{},"body":{"dependencies.html":{}}}],["86400",{"_index":2301,"title":{},"body":{"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["9a76c3a1c35c",{"_index":2185,"title":{},"body":{"injectables/UtilService.html":{}}}],["_",{"_index":2382,"title":{},"body":{"injectables/WikidataService.html":{}}}],["_checkcaptcharesponse",{"_index":163,"title":{},"body":{"injectables/CaptchaService.html":{}}}],["_checkcaptcharesponse(secret",{"_index":170,"title":{},"body":{"injectables/CaptchaService.html":{}}}],["_getclaim",{"_index":872,"title":{},"body":{"injectables/ClaimService.html":{}}}],["_getclaim(match",{"_index":879,"title":{},"body":{"injectables/ClaimService.html":{}}}],["_getsentencebyhashandclaimid",{"_index":250,"title":{},"body":{"controllers/ClaimController.html":{}}}],["_getsentencebyhashandclaimid(sentence_hash",{"_index":263,"title":{},"body":{"controllers/ClaimController.html":{}}}],["_id",{"_index":240,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"classes/Personality.html":{},"injectables/PersonalityService.html":{},"classes/Report.html":{},"guards/SessionGuard.html":{},"injectables/SourceService.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["_next\\nsitemap",{"_index":1826,"title":{},"body":{"controllers/RootController.html":{}}}],["_res",{"_index":1056,"title":{},"body":{"injectables/DisableBodyParserMiddleware.html":{}}}],["_verifyinputsquery",{"_index":251,"title":{},"body":{"controllers/ClaimController.html":{}}}],["_verifyinputsquery(query",{"_index":266,"title":{},"body":{"controllers/ClaimController.html":{}}}],["abaixo",{"_index":3578,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ability",{"_index":3157,"title":{},"body":{"license.html":{}}}],["above",{"_index":2661,"title":{},"body":{"index.html":{},"license.html":{}}}],["absence",{"_index":3018,"title":{},"body":{"license.html":{}}}],["absolute",{"_index":3420,"title":{},"body":{"license.html":{}}}],["absolutely",{"_index":3447,"title":{},"body":{"license.html":{}}}],["abuse",{"_index":2769,"title":{},"body":{"license.html":{}}}],["accept",{"_index":2494,"title":{},"body":{"dependencies.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["acceptance",{"_index":3247,"title":{},"body":{"license.html":{}}}],["access",{"_index":2604,"title":{},"body":{"index.html":{},"license.html":{}}}],["access_token",{"_index":1393,"title":{},"body":{"injectables/OryService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["accessible",{"_index":3312,"title":{},"body":{"license.html":{}}}],["accesstoken",{"_index":1394,"title":{},"body":{"injectables/OryService.html":{},"guards/SessionGuard.html":{}}}],["accompanied",{"_index":3061,"title":{},"body":{"license.html":{}}}],["accompanies",{"_index":3424,"title":{},"body":{"license.html":{}}}],["accord",{"_index":3016,"title":{},"body":{"license.html":{}}}],["according",{"_index":3415,"title":{},"body":{"license.html":{}}}],["account",{"_index":2618,"title":{},"body":{"index.html":{}}}],["account_name",{"_index":2642,"title":{},"body":{"index.html":{}}}],["acess",{"_index":2627,"title":{},"body":{"index.html":{}}}],["acessar",{"_index":3573,"title":{},"body":{"miscellaneous/variables.html":{}}}],["achieve",{"_index":3429,"title":{},"body":{"license.html":{}}}],["acknowledges",{"_index":2950,"title":{},"body":{"license.html":{}}}],["acquired",{"_index":3293,"title":{},"body":{"license.html":{}}}],["acronyms",{"_index":1512,"title":{},"body":{"injectables/ParserService.html":{}}}],["action",{"_index":2341,"title":{},"body":{"injectables/WikidataService.html":{}}}],["actions",{"_index":3254,"title":{},"body":{"license.html":{}}}],["activities",{"_index":2846,"title":{},"body":{"license.html":{}}}],["activity",{"_index":3337,"title":{},"body":{"license.html":{}}}],["actual",{"_index":2635,"title":{},"body":{"index.html":{},"license.html":{}}}],["actually",{"_index":3128,"title":{},"body":{"license.html":{}}}],["adapt",{"_index":2821,"title":{},"body":{"license.html":{}}}],["add",{"_index":947,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/SitemapService.html":{},"index.html":{},"license.html":{}}}],["added",{"_index":3015,"title":{},"body":{"license.html":{}}}],["additional",{"_index":3032,"title":{},"body":{"license.html":{}}}],["additionalproperties",{"_index":2646,"title":{},"body":{"index.html":{}}}],["address",{"_index":3368,"title":{},"body":{"license.html":{}}}],["addressed",{"_index":2818,"title":{},"body":{"license.html":{}}}],["adminendpoint",{"_index":1370,"title":{},"body":{"injectables/OryService.html":{}}}],["adopted",{"_index":2987,"title":{},"body":{"license.html":{}}}],["adversely",{"_index":3165,"title":{},"body":{"license.html":{}}}],["advised",{"_index":3410,"title":{},"body":{"license.html":{}}}],["affects",{"_index":3166,"title":{},"body":{"license.html":{}}}],["affero",{"_index":3359,"title":{},"body":{"license.html":{}}}],["affirmed",{"_index":3276,"title":{},"body":{"license.html":{}}}],["affirms",{"_index":2944,"title":{},"body":{"license.html":{}}}],["against",{"_index":3004,"title":{},"body":{"license.html":{}}}],["agent",{"_index":1317,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"controllers/RootController.html":{}}}],["agg",{"_index":2189,"title":{},"body":{"injectables/UtilService.html":{}}}],["aggregate",{"_index":3048,"title":{},"body":{"license.html":{}}}],["agree",{"_index":3354,"title":{},"body":{"license.html":{}}}],["agreed",{"_index":3396,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":3303,"title":{},"body":{"license.html":{}}}],["agreggateclassification",{"_index":567,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["agreggateclassification(match",{"_index":576,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["aim",{"_index":2765,"title":{},"body":{"license.html":{}}}],["aletheia",{"_index":2577,"title":{},"body":{"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["aliases",{"_index":3486,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alleging",{"_index":3283,"title":{},"body":{"license.html":{}}}],["allow",{"_index":1717,"title":{},"body":{"injectables/PersonalityService.html":{},"license.html":{}}}],["allowed",{"_index":1727,"title":{},"body":{"injectables/PersonalityService.html":{},"license.html":{}}}],["allowedheaders",{"_index":3526,"title":{},"body":{"miscellaneous/variables.html":{}}}],["along",{"_index":3020,"title":{},"body":{"license.html":{}}}],["alpha.153",{"_index":2484,"title":{},"body":{"dependencies.html":{}}}],["alphabets",{"_index":1501,"title":{},"body":{"injectables/ParserService.html":{}}}],["already",{"_index":641,"title":{},"body":{"injectables/ClaimReviewService.html":{},"controllers/PersonalityController.html":{},"license.html":{}}}],["alternative",{"_index":3076,"title":{},"body":{"license.html":{}}}],["although",{"_index":2761,"title":{},"body":{"license.html":{}}}],["ancillary",{"_index":3248,"title":{},"body":{"license.html":{}}}],["and/or",{"_index":2746,"title":{},"body":{"license.html":{}}}],["ant",{"_index":2464,"title":{},"body":{"dependencies.html":{}}}],["antd",{"_index":2496,"title":{},"body":{"dependencies.html":{}}}],["anti",{"_index":2974,"title":{},"body":{"license.html":{}}}],["anyone",{"_index":3029,"title":{},"body":{"license.html":{}}}],["anything",{"_index":2832,"title":{},"body":{"license.html":{}}}],["análise",{"_index":2579,"title":{},"body":{"index.html":{}}}],["api",{"_index":3483,"title":{},"body":{"properties.html":{}}}],["api/kratos/admin",{"_index":1385,"title":{},"body":{"injectables/OryService.html":{}}}],["api/stats",{"_index":2047,"title":{},"body":{"controllers/StatsController.html":{}}}],["api\\ndisallow",{"_index":1825,"title":{},"body":{"controllers/RootController.html":{}}}],["app",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["app.close",{"_index":3592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.get(configservice",{"_index":3553,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.get(emailservice",{"_index":3552,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.get(usersservice",{"_index":3555,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.get(utilservice",{"_index":3556,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.listen(options.config.port",{"_index":3541,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.setglobalprefix(\"api",{"_index":3540,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.use(cookieparser",{"_index":3538,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.useglobalpipes",{"_index":3532,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.usestaticassets(join(__dirname",{"_index":3539,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app_filter",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["applicable",{"_index":2837,"title":{},"body":{"license.html":{}}}],["applications",{"_index":3464,"title":{},"body":{"license.html":{}}}],["applied",{"_index":2797,"title":{},"body":{"license.html":{}}}],["applies",{"_index":2700,"title":{},"body":{"license.html":{}}}],["apply",{"_index":2705,"title":{},"body":{"license.html":{}}}],["apply(disablebodyparsermiddleware",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["apply(jsonbodymiddleware",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["appmodule.register(options",{"_index":3530,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appropriate",{"_index":2859,"title":{},"body":{"license.html":{}}}],["appropriately",{"_index":3009,"title":{},"body":{"license.html":{}}}],["approximates",{"_index":3419,"title":{},"body":{"license.html":{}}}],["area",{"_index":2771,"title":{},"body":{"license.html":{}}}],["arguable",{"_index":1772,"title":{},"body":{"classes/Report.html":{},"miscellaneous/enumerations.html":{}}}],["argumentshost",{"_index":1333,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["arise",{"_index":2779,"title":{},"body":{"license.html":{}}}],["arising",{"_index":3400,"title":{},"body":{"license.html":{}}}],["arrange",{"_index":3313,"title":{},"body":{"license.html":{}}}],["arrangement",{"_index":3325,"title":{},"body":{"license.html":{}}}],["array",{"_index":2184,"title":{},"body":{"injectables/UtilService.html":{}}}],["array.foreach((item",{"_index":2198,"title":{},"body":{"injectables/UtilService.html":{}}}],["array.from(newarray.values",{"_index":2205,"title":{},"body":{"injectables/UtilService.html":{}}}],["array.isarray(claim.sources",{"_index":866,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["array.isarray(claims",{"_index":1748,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["array.isarray(report.sources",{"_index":1809,"title":{},"body":{"injectables/ReportService.html":{}}}],["arraynotempty",{"_index":997,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["article",{"_index":2983,"title":{},"body":{"license.html":{}}}],["asc",{"_index":349,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/SourceService.html":{}}}],["asking",{"_index":2722,"title":{},"body":{"license.html":{}}}],["assert",{"_index":2741,"title":{},"body":{"license.html":{}}}],["assets",{"_index":2212,"title":{},"body":{"controllers/ViewController.html":{},"license.html":{}}}],["assets(@req",{"_index":2251,"title":{},"body":{"controllers/ViewController.html":{}}}],["assets(req",{"_index":2218,"title":{},"body":{"controllers/ViewController.html":{}}}],["associated",{"_index":2922,"title":{},"body":{"license.html":{}}}],["assume",{"_index":3390,"title":{},"body":{"license.html":{}}}],["assumption",{"_index":3423,"title":{},"body":{"license.html":{}}}],["assumptions",{"_index":3207,"title":{},"body":{"license.html":{}}}],["assures",{"_index":2800,"title":{},"body":{"license.html":{}}}],["async",{"_index":162,"title":{},"body":{"injectables/CaptchaService.html":{},"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"controllers/OryController.html":{},"injectables/ParagraphService.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"injectables/SentenceService.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["attach",{"_index":3431,"title":{},"body":{"license.html":{}}}],["attempt",{"_index":3222,"title":{},"body":{"license.html":{}}}],["attempting",{"_index":1705,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["attributed",{"_index":2756,"title":{},"body":{"license.html":{}}}],["attributions",{"_index":3190,"title":{},"body":{"license.html":{}}}],["auth",{"_index":1108,"title":{},"body":{"injectables/EmailService.html":{}}}],["auth/session.guard",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["authenticate",{"_index":2086,"title":{},"body":{"classes/User.html":{},"interfaces/UserDocument.html":{}}}],["authentication_type",{"_index":2651,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["author",{"_index":3189,"title":{},"body":{"license.html":{}}}],["authorization",{"_index":1416,"title":{},"body":{"injectables/OryService.html":{},"license.html":{}}}],["authorized",{"_index":3181,"title":{},"body":{"license.html":{}}}],["authorizes",{"_index":3289,"title":{},"body":{"license.html":{}}}],["authorizing",{"_index":3329,"title":{},"body":{"license.html":{}}}],["authors",{"_index":2704,"title":{},"body":{"license.html":{}}}],["authtype",{"_index":2106,"title":{},"body":{"controllers/UsersController.html":{}}}],["auto",{"_index":789,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["automatic",{"_index":3258,"title":{},"body":{"license.html":{}}}],["automatically",{"_index":2935,"title":{},"body":{"license.html":{}}}],["available",{"_index":2844,"title":{},"body":{"license.html":{},"modules.html":{}}}],["avatar",{"_index":1034,"title":{},"body":{"classes/CreatePersonality.html":{},"injectables/WikidataService.html":{}}}],["avoid",{"_index":2795,"title":{},"body":{"license.html":{}}}],["avoiding",{"_index":1329,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["await",{"_index":192,"title":{},"body":{"injectables/CaptchaService.html":{},"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HomeController.html":{},"controllers/OryController.html":{},"injectables/ParagraphService.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"injectables/SentenceService.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"injectables/SourceService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["away",{"_index":2689,"title":{},"body":{"license.html":{}}}],["axios",{"_index":1388,"title":{},"body":{"injectables/OryService.html":{},"injectables/SitemapService.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["axios.get",{"_index":1957,"title":{},"body":{"injectables/SitemapService.html":{},"injectables/WikidataService.html":{}}}],["axios.get(\"https://www.wikidata.org/w/api.php",{"_index":2340,"title":{},"body":{"injectables/WikidataService.html":{}}}],["b",{"_index":2897,"title":{},"body":{"license.html":{}}}],["babel/polyfill",{"_index":2469,"title":{},"body":{"dependencies.html":{}}}],["backwards",{"_index":1259,"title":{},"body":{"controllers/HomeController.html":{}}}],["bail",{"_index":1725,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["based",{"_index":1171,"title":{},"body":{"classes/History.html":{},"license.html":{}}}],["baseoptions",{"_index":1398,"title":{},"body":{"injectables/OryService.html":{}}}],["basepath",{"_index":1397,"title":{},"body":{"injectables/OryService.html":{},"guards/SessionGuard.html":{}}}],["baserequest",{"_index":1253,"title":{},"body":{"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"miscellaneous/typealiases.html":{}}}],["baseurl",{"_index":1098,"title":{},"body":{"injectables/EmailService.html":{}}}],["basic",{"_index":2936,"title":{},"body":{"license.html":{}}}],["batches",{"_index":1720,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["bearer",{"_index":1417,"title":{},"body":{"injectables/OryService.html":{}}}],["before",{"_index":1169,"title":{},"body":{"classes/History.html":{},"injectables/HistoryService.html":{},"miscellaneous/variables.html":{}}}],["behalf",{"_index":2963,"title":{},"body":{"license.html":{}}}],["being",{"_index":3105,"title":{},"body":{"license.html":{}}}],["believe",{"_index":3321,"title":{},"body":{"license.html":{}}}],["below",{"_index":2636,"title":{},"body":{"index.html":{},"license.html":{}}}],["bem",{"_index":3569,"title":{},"body":{"miscellaneous/variables.html":{}}}],["benefit",{"_index":3316,"title":{},"body":{"license.html":{}}}],["best",{"_index":3428,"title":{},"body":{"license.html":{}}}],["between",{"_index":2932,"title":{},"body":{"license.html":{}}}],["beyond",{"_index":3050,"title":{},"body":{"license.html":{}}}],["body",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/JsonBodyMiddleware.html":{},"controllers/PersonalityController.html":{},"coverage.html":{},"license.html":{}}}],["body.middleware",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["body.middleware.ts",{"_index":1275,"title":{},"body":{"injectables/JsonBodyMiddleware.html":{},"coverage.html":{}}}],["body.middleware.ts:7",{"_index":1276,"title":{},"body":{"injectables/JsonBodyMiddleware.html":{}}}],["bodyparser",{"_index":1277,"title":{},"body":{"injectables/JsonBodyMiddleware.html":{},"miscellaneous/variables.html":{}}}],["bodyparser.json()(req",{"_index":1279,"title":{},"body":{"injectables/JsonBodyMiddleware.html":{}}}],["boolean",{"_index":455,"title":{},"body":{"classes/ClaimReview.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreatePersonality.html":{},"classes/GetPersonalities.html":{},"injectables/HistoryService.html":{},"guards/SessionGuard.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{}}}],["both",{"_index":2657,"title":{},"body":{"index.html":{},"license.html":{}}}],["bottom",{"_index":2630,"title":{},"body":{"index.html":{}}}],["box",{"_index":3454,"title":{},"body":{"license.html":{}}}],["br",{"_index":2329,"title":{},"body":{"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["browse",{"_index":3472,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2606,"title":{},"body":{"index.html":{},"modules.html":{}}}],["buf",{"_index":2206,"title":{},"body":{"injectables/UtilService.html":{}}}],["buf.tostring(\"hex",{"_index":2209,"title":{},"body":{"injectables/UtilService.html":{}}}],["build",{"_index":2612,"title":{},"body":{"index.html":{}}}],["buildconfiguring",{"_index":2615,"title":{},"body":{"index.html":{}}}],["business",{"_index":3334,"title":{},"body":{"license.html":{}}}],["c",{"_index":2670,"title":{},"body":{"license.html":{}}}],["calculateoverallstats",{"_index":873,"title":{},"body":{"injectables/ClaimService.html":{}}}],["calculateoverallstats(claim",{"_index":882,"title":{},"body":{"injectables/ClaimService.html":{}}}],["called",{"_index":2827,"title":{},"body":{"license.html":{}}}],["canactivate",{"_index":1860,"title":{},"body":{"guards/SessionGuard.html":{},"miscellaneous/variables.html":{}}}],["canactivate(context",{"_index":1863,"title":{},"body":{"guards/SessionGuard.html":{}}}],["captcha",{"_index":372,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{}}}],["captcha.service",{"_index":153,"title":{},"body":{"modules/CaptchaModule.html":{}}}],["captcha/captcha.module",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewTaskModule.html":{}}}],["captcha/captcha.service",{"_index":330,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{}}}],["captchamodule",{"_index":98,"title":{"modules/CaptchaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CaptchaModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewTaskModule.html":{},"modules.html":{},"overview.html":{}}}],["captchaservice",{"_index":145,"title":{"injectables/CaptchaService.html":{}},"body":{"modules/CaptchaModule.html":{},"injectables/CaptchaService.html":{},"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{},"coverage.html":{},"overview.html":{}}}],["captchaverification",{"_index":197,"title":{},"body":{"injectables/CaptchaService.html":{}}}],["captchaverification.success",{"_index":199,"title":{},"body":{"injectables/CaptchaService.html":{}}}],["carry",{"_index":3024,"title":{},"body":{"license.html":{}}}],["case",{"_index":849,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{},"license.html":{}}}],["cases",{"_index":3123,"title":{},"body":{"license.html":{}}}],["cast",{"_index":646,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["catch",{"_index":200,"title":{},"body":{"injectables/CaptchaService.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimRevisionService.html":{},"controllers/HistoryController.html":{},"classes/NotFoundFilter.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"injectables/UsersService.html":{},"injectables/ViewService.html":{}}}],["catch((e",{"_index":3581,"title":{},"body":{"miscellaneous/variables.html":{}}}],["catch((err",{"_index":1622,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["catch((error",{"_index":362,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/PersonalityService.html":{}}}],["catch(exception",{"_index":1332,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["catch(notfoundexception",{"_index":1336,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["cause",{"_index":672,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"license.html":{}}}],["cd",{"_index":2592,"title":{},"body":{"index.html":{}}}],["cease",{"_index":3225,"title":{},"body":{"license.html":{}}}],["certain",{"_index":2725,"title":{},"body":{"license.html":{}}}],["cessation",{"_index":3238,"title":{},"body":{"license.html":{}}}],["change",{"_index":1227,"title":{},"body":{"injectables/HistoryService.html":{},"injectables/SitemapService.html":{},"index.html":{},"license.html":{}}}],["change(create",{"_index":1228,"title":{},"body":{"injectables/HistoryService.html":{}}}],["changed",{"_index":907,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/UsersService.html":{},"license.html":{}}}],["changes",{"_index":1191,"title":{},"body":{"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"injectables/SitemapService.html":{},"index.html":{}}}],["changing",{"_index":2681,"title":{},"body":{"license.html":{}}}],["characterized",{"_index":3154,"title":{},"body":{"license.html":{}}}],["characters",{"_index":854,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{}}}],["charge",{"_index":2710,"title":{},"body":{"license.html":{}}}],["checking",{"_index":3479,"title":{},"body":{"properties.html":{}}}],["choose",{"_index":3375,"title":{},"body":{"license.html":{}}}],["choosing",{"_index":3379,"title":{},"body":{"license.html":{}}}],["circumstances",{"_index":2968,"title":{},"body":{"license.html":{}}}],["circumvention",{"_index":2975,"title":{},"body":{"license.html":{}}}],["civil",{"_index":3422,"title":{},"body":{"license.html":{}}}],["claim",{"_index":42,"title":{"classes/Claim.html":{}},"body":{"modules/AppModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimReviewTask.html":{},"modules/ClaimReviewTaskModule.html":{},"injectables/ClaimReviewTaskService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreateClaimReviewTaskDTO.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"classes/Personality.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimReviewTaskDTO.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["claim._id",{"_index":411,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{},"injectables/SitemapService.html":{}}}],["claim.claimid",{"_index":844,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["claim.content",{"_index":858,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["claim.content.foreach((p",{"_index":972,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claim.content.text",{"_index":1750,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["claim.content[0].content",{"_index":964,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claim.contentid",{"_index":861,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["claim.controller",{"_index":443,"title":{},"body":{"modules/ClaimModule.html":{}}}],["claim.dto",{"_index":323,"title":{},"body":{"controllers/ClaimController.html":{},"classes/UpdateClaimDTO.html":{}}}],["claim.dto.ts",{"_index":984,"title":{},"body":{"classes/CreateClaimDTO.html":{},"classes/UpdateClaimDTO.html":{},"coverage.html":{}}}],["claim.dto.ts:15",{"_index":996,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["claim.dto.ts:19",{"_index":987,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["claim.dto.ts:24",{"_index":991,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["claim.dto.ts:29",{"_index":989,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["claim.dto.ts:33",{"_index":995,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["claim.dto.ts:37",{"_index":993,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["claim.dto.ts:41",{"_index":992,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["claim.lastestrevision",{"_index":1716,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["claim.latestrevision",{"_index":921,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claim.latestrevision.title",{"_index":741,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["claim.name",{"_index":447,"title":{},"body":{"modules/ClaimModule.html":{},"miscellaneous/variables.html":{}}}],["claim.personality",{"_index":923,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claim.save",{"_index":943,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claim.service",{"_index":314,"title":{},"body":{"controllers/ClaimController.html":{},"modules/ClaimModule.html":{}}}],["claim.slug",{"_index":845,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{}}}],["claim.sources",{"_index":865,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["claim.toobject().latestrevision",{"_index":939,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claim/claim.module",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/SitemapModule.html":{},"modules/StatsModule.html":{}}}],["claim/claim.service",{"_index":1928,"title":{},"body":{"injectables/SitemapService.html":{},"injectables/StatsService.html":{}}}],["claim/schemas/claim.schema",{"_index":462,"title":{},"body":{"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimReview.html":{},"classes/CreateClaimReviewTaskDTO.html":{}}}],["claim?.content",{"_index":965,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claim?.latestrevision",{"_index":961,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claim?.revision",{"_index":962,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claimbody",{"_index":889,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claimcontent",{"_index":900,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claimcontent[paragraphindex].content[sentenceindex].props",{"_index":980,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claimcontroller",{"_index":248,"title":{"controllers/ClaimController.html":{}},"body":{"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"coverage.html":{}}}],["claimcreatepage",{"_index":252,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claimcreatepage(@req",{"_index":419,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claimcreatepage(req",{"_index":269,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claimdocument",{"_index":229,"title":{},"body":{"classes/Claim.html":{},"injectables/ClaimService.html":{},"miscellaneous/typealiases.html":{}}}],["claimid",{"_index":242,"title":{},"body":{"classes/Claim.html":{},"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{}}}],["claimids",{"_index":609,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["claimmatchparameters",{"_index":880,"title":{},"body":{"injectables/ClaimService.html":{},"miscellaneous/typealiases.html":{}}}],["claimmodel",{"_index":445,"title":{},"body":{"modules/ClaimModule.html":{},"injectables/ClaimService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimmodule",{"_index":39,"title":{"modules/ClaimModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/SitemapModule.html":{},"modules/StatsModule.html":{},"modules.html":{},"overview.html":{}}}],["claimobj",{"_index":388,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claimobj.content.foreach((p",{"_index":391,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claimobj.date",{"_index":396,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claimobj.personality",{"_index":397,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claimreview",{"_index":448,"title":{"classes/ClaimReview.html":{}},"body":{"classes/ClaimReview.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimReviewTaskDTO.html":{},"classes/History.html":{},"injectables/PersonalityService.html":{},"classes/Report.html":{},"classes/Source.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["claimreview._id",{"_index":679,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["claimreview._id.classification[0",{"_index":982,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claimreview.claim",{"_index":650,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["claimreview.name",{"_index":565,"title":{},"body":{"modules/ClaimReviewModule.html":{},"miscellaneous/variables.html":{}}}],["claimreview.personality",{"_index":648,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["claimreview.report",{"_index":652,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["claimreview.sentence_hash",{"_index":656,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["claimreview.userid",{"_index":654,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["claimreviewbody",{"_index":589,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["claimreviewcontroller",{"_index":471,"title":{"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{}},"body":{"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimReviewTaskModule.html":{},"coverage.html":{}}}],["claimreviewdata",{"_index":754,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["claimreviewdocument",{"_index":465,"title":{},"body":{"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"miscellaneous/typealiases.html":{}}}],["claimreviewid",{"_index":601,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["claimreviewmodel",{"_index":564,"title":{},"body":{"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimreviewmodule",{"_index":41,"title":{"modules/ClaimReviewModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimReviewTaskModule.html":{},"modules/PersonalityModule.html":{},"modules/SitemapModule.html":{},"modules/StatsModule.html":{},"modules.html":{},"overview.html":{}}}],["claimreviewschema",{"_index":470,"title":{},"body":{"classes/ClaimReview.html":{},"modules/ClaimReviewModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimreviewschemaraw",{"_index":466,"title":{},"body":{"classes/ClaimReview.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimreviewschemaraw.plugin(softdeleteplugin",{"_index":469,"title":{},"body":{"classes/ClaimReview.html":{}}}],["claimreviewschemaraw.virtual('sources",{"_index":468,"title":{},"body":{"classes/ClaimReview.html":{}}}],["claimreviewservice",{"_index":311,"title":{"injectables/ClaimReviewService.html":{}},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/StatsService.html":{},"coverage.html":{},"overview.html":{}}}],["claimreviewtask",{"_index":412,"title":{"classes/ClaimReviewTask.html":{}},"body":{"controllers/ClaimController.html":{},"classes/ClaimReviewTask.html":{},"modules/ClaimReviewTaskModule.html":{},"injectables/ClaimReviewTaskService.html":{},"coverage.html":{}}}],["claimreviewtask.machine",{"_index":751,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["claimreviewtask.name",{"_index":701,"title":{},"body":{"modules/ClaimReviewTaskModule.html":{},"miscellaneous/variables.html":{}}}],["claimreviewtaskbody",{"_index":710,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["claimreviewtaskbody.machine.context.reviewdata.userid",{"_index":743,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["claimreviewtaskdocument",{"_index":689,"title":{},"body":{"classes/ClaimReviewTask.html":{},"injectables/ClaimReviewTaskService.html":{},"miscellaneous/typealiases.html":{}}}],["claimreviewtaskid",{"_index":713,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["claimreviewtaskmodel",{"_index":700,"title":{},"body":{"modules/ClaimReviewTaskModule.html":{},"injectables/ClaimReviewTaskService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimreviewtaskmodule",{"_index":75,"title":{"modules/ClaimReviewTaskModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewTaskModule.html":{},"modules.html":{},"overview.html":{}}}],["claimreviewtaskschema",{"_index":691,"title":{},"body":{"classes/ClaimReviewTask.html":{},"modules/ClaimReviewTaskModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimreviewtaskservice",{"_index":331,"title":{"injectables/ClaimReviewTaskService.html":{}},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{},"modules/ClaimReviewTaskModule.html":{},"injectables/ClaimReviewTaskService.html":{},"coverage.html":{},"overview.html":{}}}],["claimrevision",{"_index":209,"title":{"classes/ClaimRevision.html":{}},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"coverage.html":{}}}],["claimrevision.name",{"_index":810,"title":{},"body":{"modules/ClaimRevisionModule.html":{},"miscellaneous/variables.html":{}}}],["claimrevisiondocument",{"_index":779,"title":{},"body":{"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"miscellaneous/typealiases.html":{}}}],["claimrevisionmodel",{"_index":809,"title":{},"body":{"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimrevisionmodule",{"_index":70,"title":{"modules/ClaimRevisionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/PersonalityModule.html":{},"modules.html":{},"overview.html":{}}}],["claimrevisionschema",{"_index":800,"title":{},"body":{"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimrevisionschemaraw",{"_index":796,"title":{},"body":{"classes/ClaimRevision.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimrevisionschemaraw.virtual('content",{"_index":799,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["claimrevisionschemaraw.virtual('reviews",{"_index":798,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["claimrevisionservice",{"_index":805,"title":{"injectables/ClaimRevisionService.html":{}},"body":{"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"coverage.html":{},"overview.html":{}}}],["claimrevisionupdate",{"_index":901,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claims",{"_index":361,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/StatsService.html":{},"license.html":{}}}],["claims.dto",{"_index":325,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claims.dto.ts",{"_index":1120,"title":{},"body":{"classes/GetClaimsDTO.html":{},"coverage.html":{}}}],["claims.dto.ts:10",{"_index":1128,"title":{},"body":{"classes/GetClaimsDTO.html":{}}}],["claims.dto.ts:13",{"_index":1124,"title":{},"body":{"classes/GetClaimsDTO.html":{}}}],["claims.dto.ts:17",{"_index":1123,"title":{},"body":{"classes/GetClaimsDTO.html":{}}}],["claims.dto.ts:20",{"_index":1129,"title":{},"body":{"classes/GetClaimsDTO.html":{}}}],["claims.dto.ts:6",{"_index":1126,"title":{},"body":{"classes/GetClaimsDTO.html":{}}}],["claims.map((claim",{"_index":1749,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["claims.map(async",{"_index":919,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claimschema",{"_index":246,"title":{},"body":{"classes/Claim.html":{},"modules/ClaimModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimschemaraw",{"_index":236,"title":{},"body":{"classes/Claim.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimschemaraw.plugin(softdeleteplugin",{"_index":245,"title":{},"body":{"classes/Claim.html":{}}}],["claimschemaraw.virtual('revisions",{"_index":238,"title":{},"body":{"classes/Claim.html":{}}}],["claimschemaraw.virtual('sources",{"_index":243,"title":{},"body":{"classes/Claim.html":{}}}],["claimservice",{"_index":313,"title":{"injectables/ClaimService.html":{}},"body":{"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"injectables/ClaimService.html":{},"injectables/SitemapService.html":{},"injectables/StatsService.html":{},"coverage.html":{},"overview.html":{}}}],["claimslug",{"_index":402,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{}}}],["claimtitle",{"_index":740,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["class",{"_index":107,"title":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimReviewTask.html":{},"classes/ClaimRevision.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreateClaimReviewTaskDTO.html":{},"classes/CreatePersonality.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/GetTasksDTO.html":{},"classes/History.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"classes/Paragraph.html":{},"classes/Personality.html":{},"classes/Report.html":{},"classes/Sentence.html":{},"classes/Source.html":{},"classes/Speech.html":{},"classes/UpdateClaimDTO.html":{},"classes/UpdateClaimReviewTaskDTO.html":{},"classes/User.html":{},"classes/WikidataCache.html":{}},"body":{"modules/AppModule.html":{},"modules/CaptchaModule.html":{},"injectables/CaptchaService.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimReviewTask.html":{},"modules/ClaimReviewTaskModule.html":{},"injectables/ClaimReviewTaskService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreateClaimReviewTaskDTO.html":{},"classes/CreatePersonality.html":{},"injectables/DisableBodyParserMiddleware.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/GetClaimsDTO.html":{},"injectables/GetLanguageMiddleware.html":{},"classes/GetPersonalities.html":{},"classes/GetTasksDTO.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/JsonBodyMiddleware.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"modules/OryModule.html":{},"injectables/OryService.html":{},"classes/Paragraph.html":{},"modules/ParagraphModule.html":{},"injectables/ParagraphService.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"classes/Report.html":{},"controllers/ReportController.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"controllers/RootController.html":{},"classes/Sentence.html":{},"modules/SentenceModule.html":{},"injectables/SentenceService.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"classes/Speech.html":{},"modules/SpeechModule.html":{},"injectables/SpeechService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimDTO.html":{},"classes/UpdateClaimReviewTaskDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"dependencies.html":{},"license.html":{}}}],["classes",{"_index":204,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimReviewTask.html":{},"classes/ClaimRevision.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreateClaimReviewTaskDTO.html":{},"classes/CreatePersonality.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/GetTasksDTO.html":{},"classes/History.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"classes/Paragraph.html":{},"classes/Personality.html":{},"classes/Report.html":{},"classes/Sentence.html":{},"classes/Source.html":{},"classes/Speech.html":{},"classes/UpdateClaimDTO.html":{},"classes/UpdateClaimReviewTaskDTO.html":{},"classes/User.html":{},"classes/WikidataCache.html":{},"overview.html":{}}}],["classification",{"_index":633,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimReview.html":{},"classes/CreateClaimReviewTaskDTO.html":{},"classes/Report.html":{},"classes/Source.html":{}}}],["classificationenum",{"_index":1016,"title":{},"body":{"classes/CreateClaimReview.html":{},"classes/CreateClaimReviewTaskDTO.html":{},"classes/Report.html":{},"miscellaneous/enumerations.html":{}}}],["clean",{"_index":811,"title":{},"body":{"modules/ClaimRevisionModule.html":{}}}],["clear",{"_index":3090,"title":{},"body":{"license.html":{}}}],["clearly",{"_index":2748,"title":{},"body":{"license.html":{}}}],["click",{"_index":2633,"title":{},"body":{"index.html":{}}}],["client",{"_index":591,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"miscellaneous/variables.html":{}}}],["client.close",{"_index":3601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client.connect",{"_index":3597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clone",{"_index":2589,"title":{},"body":{"index.html":{}}}],["closely",{"_index":3418,"title":{},"body":{"license.html":{}}}],["cluster_captchamodule",{"_index":142,"title":{},"body":{"modules/CaptchaModule.html":{},"overview.html":{}}}],["cluster_captchamodule_exports",{"_index":143,"title":{},"body":{"modules/CaptchaModule.html":{},"overview.html":{}}}],["cluster_captchamodule_providers",{"_index":144,"title":{},"body":{"modules/CaptchaModule.html":{},"overview.html":{}}}],["cluster_claimmodule",{"_index":436,"title":{},"body":{"modules/ClaimModule.html":{},"overview.html":{}}}],["cluster_claimmodule_exports",{"_index":437,"title":{},"body":{"modules/ClaimModule.html":{},"overview.html":{}}}],["cluster_claimmodule_imports",{"_index":439,"title":{},"body":{"modules/ClaimModule.html":{},"overview.html":{}}}],["cluster_claimmodule_providers",{"_index":438,"title":{},"body":{"modules/ClaimModule.html":{},"overview.html":{}}}],["cluster_claimreviewmodule",{"_index":554,"title":{},"body":{"modules/ClaimReviewModule.html":{},"overview.html":{}}}],["cluster_claimreviewmodule_exports",{"_index":555,"title":{},"body":{"modules/ClaimReviewModule.html":{},"overview.html":{}}}],["cluster_claimreviewmodule_imports",{"_index":557,"title":{},"body":{"modules/ClaimReviewModule.html":{}}}],["cluster_claimreviewmodule_providers",{"_index":556,"title":{},"body":{"modules/ClaimReviewModule.html":{},"overview.html":{}}}],["cluster_claimreviewtaskmodule",{"_index":693,"title":{},"body":{"modules/ClaimReviewTaskModule.html":{},"overview.html":{}}}],["cluster_claimreviewtaskmodule_exports",{"_index":695,"title":{},"body":{"modules/ClaimReviewTaskModule.html":{},"overview.html":{}}}],["cluster_claimreviewtaskmodule_imports",{"_index":694,"title":{},"body":{"modules/ClaimReviewTaskModule.html":{},"overview.html":{}}}],["cluster_claimreviewtaskmodule_providers",{"_index":696,"title":{},"body":{"modules/ClaimReviewTaskModule.html":{},"overview.html":{}}}],["cluster_claimrevisionmodule",{"_index":801,"title":{},"body":{"modules/ClaimRevisionModule.html":{},"overview.html":{}}}],["cluster_claimrevisionmodule_exports",{"_index":802,"title":{},"body":{"modules/ClaimRevisionModule.html":{},"overview.html":{}}}],["cluster_claimrevisionmodule_imports",{"_index":803,"title":{},"body":{"modules/ClaimRevisionModule.html":{},"overview.html":{}}}],["cluster_claimrevisionmodule_providers",{"_index":804,"title":{},"body":{"modules/ClaimRevisionModule.html":{},"overview.html":{}}}],["cluster_emailmodule",{"_index":1061,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_exports",{"_index":1063,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_providers",{"_index":1062,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_historymodule",{"_index":1192,"title":{},"body":{"modules/HistoryModule.html":{},"overview.html":{}}}],["cluster_historymodule_exports",{"_index":1194,"title":{},"body":{"modules/HistoryModule.html":{},"overview.html":{}}}],["cluster_historymodule_providers",{"_index":1193,"title":{},"body":{"modules/HistoryModule.html":{},"overview.html":{}}}],["cluster_homemodule",{"_index":1270,"title":{},"body":{"modules/HomeModule.html":{},"overview.html":{}}}],["cluster_homemodule_imports",{"_index":1271,"title":{},"body":{"modules/HomeModule.html":{},"overview.html":{}}}],["cluster_orymodule",{"_index":1363,"title":{},"body":{"modules/OryModule.html":{},"overview.html":{}}}],["cluster_orymodule_exports",{"_index":1364,"title":{},"body":{"modules/OryModule.html":{},"overview.html":{}}}],["cluster_orymodule_imports",{"_index":1365,"title":{},"body":{"modules/OryModule.html":{}}}],["cluster_orymodule_providers",{"_index":1366,"title":{},"body":{"modules/OryModule.html":{},"overview.html":{}}}],["cluster_paragraphmodule",{"_index":1433,"title":{},"body":{"modules/ParagraphModule.html":{},"overview.html":{}}}],["cluster_paragraphmodule_exports",{"_index":1435,"title":{},"body":{"modules/ParagraphModule.html":{},"overview.html":{}}}],["cluster_paragraphmodule_providers",{"_index":1434,"title":{},"body":{"modules/ParagraphModule.html":{},"overview.html":{}}}],["cluster_parsermodule",{"_index":1454,"title":{},"body":{"modules/ParserModule.html":{},"overview.html":{}}}],["cluster_parsermodule_exports",{"_index":1457,"title":{},"body":{"modules/ParserModule.html":{},"overview.html":{}}}],["cluster_parsermodule_imports",{"_index":1456,"title":{},"body":{"modules/ParserModule.html":{},"overview.html":{}}}],["cluster_parsermodule_providers",{"_index":1455,"title":{},"body":{"modules/ParserModule.html":{},"overview.html":{}}}],["cluster_personalitymodule",{"_index":1642,"title":{},"body":{"modules/PersonalityModule.html":{},"overview.html":{}}}],["cluster_personalitymodule_exports",{"_index":1644,"title":{},"body":{"modules/PersonalityModule.html":{},"overview.html":{}}}],["cluster_personalitymodule_imports",{"_index":1645,"title":{},"body":{"modules/PersonalityModule.html":{},"overview.html":{}}}],["cluster_personalitymodule_providers",{"_index":1643,"title":{},"body":{"modules/PersonalityModule.html":{},"overview.html":{}}}],["cluster_reportmodule",{"_index":1789,"title":{},"body":{"modules/ReportModule.html":{},"overview.html":{}}}],["cluster_reportmodule_exports",{"_index":1791,"title":{},"body":{"modules/ReportModule.html":{},"overview.html":{}}}],["cluster_reportmodule_imports",{"_index":1790,"title":{},"body":{"modules/ReportModule.html":{}}}],["cluster_reportmodule_providers",{"_index":1792,"title":{},"body":{"modules/ReportModule.html":{},"overview.html":{}}}],["cluster_sentencemodule",{"_index":1839,"title":{},"body":{"modules/SentenceModule.html":{},"overview.html":{}}}],["cluster_sentencemodule_exports",{"_index":1840,"title":{},"body":{"modules/SentenceModule.html":{},"overview.html":{}}}],["cluster_sentencemodule_providers",{"_index":1841,"title":{},"body":{"modules/SentenceModule.html":{},"overview.html":{}}}],["cluster_sitemapmodule",{"_index":1910,"title":{},"body":{"modules/SitemapModule.html":{},"overview.html":{}}}],["cluster_sitemapmodule_exports",{"_index":1911,"title":{},"body":{"modules/SitemapModule.html":{},"overview.html":{}}}],["cluster_sitemapmodule_imports",{"_index":1913,"title":{},"body":{"modules/SitemapModule.html":{}}}],["cluster_sitemapmodule_providers",{"_index":1912,"title":{},"body":{"modules/SitemapModule.html":{},"overview.html":{}}}],["cluster_sourcemodule",{"_index":1998,"title":{},"body":{"modules/SourceModule.html":{},"overview.html":{}}}],["cluster_sourcemodule_exports",{"_index":1999,"title":{},"body":{"modules/SourceModule.html":{},"overview.html":{}}}],["cluster_sourcemodule_providers",{"_index":2000,"title":{},"body":{"modules/SourceModule.html":{},"overview.html":{}}}],["cluster_speechmodule",{"_index":2029,"title":{},"body":{"modules/SpeechModule.html":{},"overview.html":{}}}],["cluster_speechmodule_exports",{"_index":2030,"title":{},"body":{"modules/SpeechModule.html":{},"overview.html":{}}}],["cluster_speechmodule_providers",{"_index":2031,"title":{},"body":{"modules/SpeechModule.html":{},"overview.html":{}}}],["cluster_statsmodule",{"_index":2054,"title":{},"body":{"modules/StatsModule.html":{},"overview.html":{}}}],["cluster_statsmodule_exports",{"_index":2055,"title":{},"body":{"modules/StatsModule.html":{},"overview.html":{}}}],["cluster_statsmodule_imports",{"_index":2056,"title":{},"body":{"modules/StatsModule.html":{}}}],["cluster_statsmodule_providers",{"_index":2057,"title":{},"body":{"modules/StatsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":2114,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":2115,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":2116,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":2117,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_viewmodule",{"_index":2254,"title":{},"body":{"modules/ViewModule.html":{},"overview.html":{}}}],["cluster_viewmodule_exports",{"_index":2255,"title":{},"body":{"modules/ViewModule.html":{},"overview.html":{}}}],["cluster_viewmodule_providers",{"_index":2256,"title":{},"body":{"modules/ViewModule.html":{},"overview.html":{}}}],["cluster_wikidatamodule",{"_index":2289,"title":{},"body":{"modules/WikidataModule.html":{},"overview.html":{}}}],["cluster_wikidatamodule_exports",{"_index":2290,"title":{},"body":{"modules/WikidataModule.html":{},"overview.html":{}}}],["cluster_wikidatamodule_providers",{"_index":2291,"title":{},"body":{"modules/WikidataModule.html":{},"overview.html":{}}}],["code",{"_index":1933,"title":{},"body":{"injectables/SitemapService.html":{},"controllers/ViewController.html":{},"index.html":{},"license.html":{}}}],["codeofconductpage",{"_index":2213,"title":{},"body":{"controllers/ViewController.html":{}}}],["codeofconductpage(@req",{"_index":2249,"title":{},"body":{"controllers/ViewController.html":{}}}],["codeofconductpage(req",{"_index":2221,"title":{},"body":{"controllers/ViewController.html":{}}}],["collect",{"_index":3356,"title":{},"body":{"license.html":{}}}],["collection(\"users",{"_index":3599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["combate",{"_index":2583,"title":{},"body":{"index.html":{}}}],["combination",{"_index":1214,"title":{},"body":{"injectables/HistoryService.html":{},"license.html":{}}}],["combine",{"_index":3360,"title":{},"body":{"license.html":{}}}],["combined",{"_index":3044,"title":{},"body":{"license.html":{}}}],["combinedlistall",{"_index":1651,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["combinedlistall(query",{"_index":1658,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["comes",{"_index":3030,"title":{},"body":{"license.html":{}}}],["commands",{"_index":2871,"title":{},"body":{"license.html":{}}}],["commercial",{"_index":3133,"title":{},"body":{"license.html":{}}}],["commitment",{"_index":3304,"title":{},"body":{"license.html":{}}}],["common",{"_index":3127,"title":{},"body":{"license.html":{}}}],["communication",{"_index":2930,"title":{},"body":{"license.html":{}}}],["compatibility",{"_index":1260,"title":{},"body":{"controllers/HomeController.html":{}}}],["compilation",{"_index":3039,"title":{},"body":{"license.html":{}}}],["compilation's",{"_index":3049,"title":{},"body":{"license.html":{}}}],["compilations",{"_index":3339,"title":{},"body":{"license.html":{}}}],["compiler",{"_index":2908,"title":{},"body":{"license.html":{}}}],["compliance",{"_index":3263,"title":{},"body":{"license.html":{}}}],["comply",{"_index":2960,"title":{},"body":{"license.html":{}}}],["compodoc/compodoc",{"_index":2471,"title":{},"body":{"dependencies.html":{}}}],["component",{"_index":2896,"title":{},"body":{"license.html":{}}}],["components",{"_index":2565,"title":{},"body":{"dependencies.html":{}}}],["compose",{"_index":2598,"title":{},"body":{"index.html":{}}}],["compromise",{"_index":2502,"title":{},"body":{"dependencies.html":{}}}],["computer",{"_index":2840,"title":{},"body":{"license.html":{}}}],["computers",{"_index":2794,"title":{},"body":{"license.html":{}}}],["com|net|org|io|gov)/g",{"_index":1517,"title":{},"body":{"injectables/ParserService.html":{}}}],["concerning",{"_index":3362,"title":{},"body":{"license.html":{}}}],["concerns",{"_index":3369,"title":{},"body":{"license.html":{}}}],["conditioned",{"_index":3333,"title":{},"body":{"license.html":{}}}],["conditions",{"_index":2803,"title":{},"body":{"license.html":{}}}],["conduct",{"_index":1934,"title":{},"body":{"injectables/SitemapService.html":{},"controllers/ViewController.html":{}}}],["config",{"_index":1414,"title":{},"body":{"injectables/OryService.html":{},"miscellaneous/variables.html":{}}}],["config.seed.yaml",{"_index":2653,"title":{},"body":{"index.html":{}}}],["config.yaml",{"_index":2652,"title":{},"body":{"index.html":{}}}],["configmodule",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/CaptchaModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/ReportModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{}}}],["configmodule.forroot",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":168,"title":{},"body":{"injectables/CaptchaService.html":{},"controllers/ClaimController.html":{},"injectables/EmailService.html":{},"controllers/OryController.html":{},"modules/OryModule.html":{},"injectables/OryService.html":{},"guards/SessionGuard.html":{},"controllers/UsersController.html":{},"injectables/ViewService.html":{},"miscellaneous/variables.html":{}}}],["configservice.get(\"disable_smtp",{"_index":3559,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get(\"users",{"_index":3557,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configuration",{"_index":1389,"title":{},"body":{"injectables/OryService.html":{},"guards/SessionGuard.html":{},"index.html":{}}}],["configure",{"_index":9,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":10,"title":{},"body":{"modules/AppModule.html":{}}}],["conflicts",{"_index":2232,"title":{},"body":{"controllers/ViewController.html":{}}}],["congig.seed.yaml",{"_index":2660,"title":{},"body":{"index.html":{}}}],["connection",{"_index":3323,"title":{},"body":{"license.html":{}}}],["connection_uri",{"_index":3613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consent",{"_index":2535,"title":{},"body":{"dependencies.html":{}}}],["consequence",{"_index":3250,"title":{},"body":{"license.html":{}}}],["consequential",{"_index":3399,"title":{},"body":{"license.html":{}}}],["consider",{"_index":3462,"title":{},"body":{"license.html":{}}}],["considered",{"_index":3209,"title":{},"body":{"license.html":{}}}],["consistent",{"_index":3297,"title":{},"body":{"license.html":{}}}],["conspicuously",{"_index":3008,"title":{},"body":{"license.html":{}}}],["const",{"_index":185,"title":{},"body":{"injectables/CaptchaService.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController-1.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimReviewTask.html":{},"modules/ClaimReviewTaskModule.html":{},"injectables/ClaimReviewTaskService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"injectables/OryService.html":{},"classes/Paragraph.html":{},"modules/ParagraphModule.html":{},"injectables/ParagraphService.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"classes/Report.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"controllers/RootController.html":{},"classes/Sentence.html":{},"modules/SentenceModule.html":{},"injectables/SentenceService.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"classes/Speech.html":{},"modules/SpeechModule.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["constantly",{"_index":2789,"title":{},"body":{"license.html":{}}}],["constitutes",{"_index":2949,"title":{},"body":{"license.html":{}}}],["constructor",{"_index":165,"title":{},"body":{"injectables/CaptchaService.html":{},"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"classes/Logger.html":{},"controllers/OryController.html":{},"injectables/OryService.html":{},"injectables/ParagraphService.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"injectables/SentenceService.html":{},"guards/SessionGuard.html":{},"injectables/SitemapService.html":{},"injectables/SourceService.html":{},"injectables/SpeechService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{}}}],["constructor(claimreviewmodel",{"_index":573,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["constructor(claimreviewservice",{"_index":2061,"title":{},"body":{"injectables/StatsService.html":{}}}],["constructor(claimreviewtaskmodel",{"_index":704,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["constructor(claimrevisionmodel",{"_index":819,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["constructor(configservice",{"_index":1071,"title":{},"body":{"injectables/EmailService.html":{},"injectables/OryService.html":{},"guards/SessionGuard.html":{},"injectables/ViewService.html":{}}}],["constructor(historymodel",{"_index":1205,"title":{},"body":{"injectables/HistoryService.html":{}}}],["constructor(httpservice",{"_index":166,"title":{},"body":{"injectables/CaptchaService.html":{}}}],["constructor(logger",{"_index":1287,"title":{},"body":{"classes/Logger.html":{}}}],["constructor(paragraphmodel",{"_index":1443,"title":{},"body":{"injectables/ParagraphService.html":{}}}],["constructor(personalityservice",{"_index":1917,"title":{},"body":{"injectables/SitemapService.html":{}}}],["constructor(private",{"_index":1392,"title":{},"body":{"injectables/OryService.html":{},"controllers/SitemapController.html":{},"controllers/SourceController.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{}}}],["constructor(reportmodel",{"_index":1800,"title":{},"body":{"injectables/ReportService.html":{}}}],["constructor(req",{"_index":877,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["constructor(sentencemodel",{"_index":1848,"title":{},"body":{"injectables/SentenceService.html":{}}}],["constructor(sourcemodel",{"_index":2008,"title":{},"body":{"injectables/SourceService.html":{}}}],["constructor(speechmodel",{"_index":2038,"title":{},"body":{"injectables/SpeechService.html":{}}}],["constructor(speechservice",{"_index":1468,"title":{},"body":{"injectables/ParserService.html":{}}}],["constructor(usermodel",{"_index":2126,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(wikidatacache",{"_index":2310,"title":{},"body":{"injectables/WikidataService.html":{}}}],["construed",{"_index":3344,"title":{},"body":{"license.html":{}}}],["consumer",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"license.html":{}}}],["contact",{"_index":3441,"title":{},"body":{"license.html":{}}}],["contain",{"_index":3340,"title":{},"body":{"license.html":{}}}],["containing",{"_index":3192,"title":{},"body":{"license.html":{}}}],["contains",{"_index":3213,"title":{},"body":{"license.html":{}}}],["content",{"_index":825,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/Paragraph.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"classes/Sentence.html":{},"classes/Speech.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["contentid",{"_index":766,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["contentlength",{"_index":1320,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["contentmodel",{"_index":767,"title":{},"body":{"classes/ClaimRevision.html":{},"classes/CreateClaimDTO.html":{}}}],["contentmodelenum",{"_index":771,"title":{},"body":{"classes/ClaimRevision.html":{},"classes/CreateClaimDTO.html":{},"miscellaneous/enumerations.html":{}}}],["contentmodelenum.speech",{"_index":784,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["contentmodelenum.twitter",{"_index":785,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["contents",{"_index":3301,"title":{},"body":{"license.html":{}}}],["context",{"_index":1030,"title":{},"body":{"classes/CreateClaimReviewTaskDTO.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"guards/SessionGuard.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["context.gethandler",{"_index":1869,"title":{},"body":{"guards/SessionGuard.html":{}}}],["context.getresponse",{"_index":1338,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["context.switchtohttp",{"_index":1871,"title":{},"body":{"guards/SessionGuard.html":{},"miscellaneous/variables.html":{}}}],["continue",{"_index":3160,"title":{},"body":{"license.html":{}}}],["continued",{"_index":3145,"title":{},"body":{"license.html":{}}}],["continuing",{"_index":3585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contractual",{"_index":3206,"title":{},"body":{"license.html":{}}}],["contradict",{"_index":3350,"title":{},"body":{"license.html":{}}}],["contrast",{"_index":2691,"title":{},"body":{"license.html":{}}}],["contributor",{"_index":3288,"title":{},"body":{"license.html":{}}}],["contributor's",{"_index":3290,"title":{},"body":{"license.html":{}}}],["control",{"_index":2915,"title":{},"body":{"license.html":{}}}],["controlled",{"_index":3292,"title":{},"body":{"license.html":{}}}],["controller",{"_index":247,"title":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"controllers/HistoryController.html":{},"controllers/HomeController.html":{},"controllers/OryController.html":{},"controllers/PersonalityController.html":{},"controllers/ReportController.html":{},"controllers/RootController.html":{},"controllers/SitemapController.html":{},"controllers/SourceController.html":{},"controllers/StatsController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"controllers/HistoryController.html":{},"controllers/HomeController.html":{},"controllers/OryController.html":{},"controllers/PersonalityController.html":{},"controllers/ReportController.html":{},"controllers/RootController.html":{},"controllers/SitemapController.html":{},"controllers/SourceController.html":{},"controllers/StatsController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"coverage.html":{}}}],["controller(\"api/stats",{"_index":2052,"title":{},"body":{"controllers/StatsController.html":{}}}],["controllers",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimReviewTaskModule.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"controllers/OryController.html":{},"modules/OryModule.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"controllers/ReportController.html":{},"modules/ReportModule.html":{},"controllers/RootController.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"overview.html":{}}}],["controllers:[historycontroller",{"_index":1200,"title":{},"body":{"modules/HistoryModule.html":{}}}],["convenient",{"_index":2862,"title":{},"body":{"license.html":{}}}],["convert",{"_index":848,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{}}}],["convey",{"_index":2848,"title":{},"body":{"license.html":{}}}],["conveyance",{"_index":3327,"title":{},"body":{"license.html":{}}}],["conveyed",{"_index":3155,"title":{},"body":{"license.html":{}}}],["conveying",{"_index":2856,"title":{},"body":{"license.html":{}}}],["conveys",{"_index":3205,"title":{},"body":{"license.html":{}}}],["cookie",{"_index":2506,"title":{},"body":{"dependencies.html":{}}}],["cookieparser",{"_index":2440,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["cookies",{"_index":1400,"title":{},"body":{"injectables/OryService.html":{}}}],["copies",{"_index":2680,"title":{},"body":{"license.html":{}}}],["copy",{"_index":2620,"title":{},"body":{"index.html":{},"license.html":{}}}],["copying",{"_index":2804,"title":{},"body":{"license.html":{}}}],["copyleft",{"_index":2683,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":2669,"title":{},"body":{"license.html":{}}}],["copyrightable",{"_index":2813,"title":{},"body":{"license.html":{}}}],["copyrighted",{"_index":2965,"title":{},"body":{"license.html":{}}}],["correction",{"_index":3393,"title":{},"body":{"license.html":{}}}],["corresponding",{"_index":2911,"title":{},"body":{"license.html":{}}}],["cors",{"_index":1402,"title":{},"body":{"injectables/OryService.html":{},"miscellaneous/variables.html":{}}}],["corsoptions",{"_index":3523,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cost",{"_index":3074,"title":{},"body":{"license.html":{}}}],["count",{"_index":529,"title":{},"body":{"controllers/ClaimReviewController-1.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/UtilService.html":{}}}],["count(query",{"_index":579,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["countdown",{"_index":2537,"title":{},"body":{"dependencies.html":{}}}],["counterclaim",{"_index":3281,"title":{},"body":{"license.html":{}}}],["countries",{"_index":2845,"title":{},"body":{"license.html":{}}}],["country",{"_index":2508,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["course",{"_index":3452,"title":{},"body":{"license.html":{}}}],["court",{"_index":3349,"title":{},"body":{"license.html":{}}}],["courts",{"_index":3417,"title":{},"body":{"license.html":{}}}],["covenant",{"_index":3307,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":2411,"title":{"coverage.html":{}},"body":{"coverage.html":{},"license.html":{}}}],["covered",{"_index":2829,"title":{},"body":{"license.html":{}}}],["create",{"_index":253,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"injectables/ParagraphService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"injectables/ReportService.html":{},"injectables/SentenceService.html":{},"injectables/SourceService.html":{},"injectables/SpeechService.html":{},"classes/UpdateClaimDTO.html":{},"classes/UpdateClaimReviewTaskDTO.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["create(@body",{"_index":365,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{},"controllers/PersonalityController.html":{}}}],["create(claim",{"_index":886,"title":{},"body":{"injectables/ClaimService.html":{}}}],["create(claimid",{"_index":823,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["create(claimreview",{"_index":581,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["create(claimreviewtaskbody",{"_index":708,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["create(createclaimdto",{"_index":275,"title":{},"body":{"controllers/ClaimController.html":{}}}],["create(createclaimreview",{"_index":473,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["create(createclaimreviewtask",{"_index":500,"title":{},"body":{"controllers/ClaimReviewController-1.html":{}}}],["create(createpersonality",{"_index":1574,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["create(data",{"_index":2010,"title":{},"body":{"injectables/SourceService.html":{}}}],["create(paragraphbody",{"_index":1445,"title":{},"body":{"injectables/ParagraphService.html":{}}}],["create(personality",{"_index":1661,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["create(report",{"_index":1802,"title":{},"body":{"injectables/ReportService.html":{}}}],["create(sentencebody",{"_index":1850,"title":{},"body":{"injectables/SentenceService.html":{}}}],["create(speechbody",{"_index":2040,"title":{},"body":{"injectables/SpeechService.html":{}}}],["createclaimdto",{"_index":276,"title":{"classes/CreateClaimDTO.html":{}},"body":{"controllers/ClaimController.html":{},"classes/CreateClaimDTO.html":{},"classes/UpdateClaimDTO.html":{},"coverage.html":{}}}],["createclaimdto.recaptcha",{"_index":368,"title":{},"body":{"controllers/ClaimController.html":{}}}],["createclaimreview",{"_index":474,"title":{"classes/CreateClaimReview.html":{}},"body":{"controllers/ClaimReviewController.html":{},"classes/CreateClaimReview.html":{},"coverage.html":{}}}],["createclaimreviewtask",{"_index":504,"title":{},"body":{"controllers/ClaimReviewController-1.html":{}}}],["createclaimreviewtask.recaptcha",{"_index":544,"title":{},"body":{"controllers/ClaimReviewController-1.html":{}}}],["createclaimreviewtaskdto",{"_index":501,"title":{"classes/CreateClaimReviewTaskDTO.html":{}},"body":{"controllers/ClaimReviewController-1.html":{},"injectables/ClaimReviewTaskService.html":{},"classes/CreateClaimReviewTaskDTO.html":{},"classes/UpdateClaimReviewTaskDTO.html":{},"coverage.html":{}}}],["createdat",{"_index":2280,"title":{},"body":{"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["createhistory",{"_index":1202,"title":{},"body":{"injectables/HistoryService.html":{}}}],["createhistory(data",{"_index":1207,"title":{},"body":{"injectables/HistoryService.html":{}}}],["createidentity",{"_index":1372,"title":{},"body":{"injectables/OryService.html":{}}}],["createidentity(user",{"_index":1376,"title":{},"body":{"injectables/OryService.html":{}}}],["createparagraphid",{"_index":1464,"title":{},"body":{"injectables/ParserService.html":{}}}],["createpersonality",{"_index":1031,"title":{"classes/CreatePersonality.html":{}},"body":{"classes/CreatePersonality.html":{},"controllers/PersonalityController.html":{},"coverage.html":{}}}],["creates",{"_index":584,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["createsentenceid",{"_index":1465,"title":{},"body":{"injectables/ParserService.html":{}}}],["createserver",{"_index":2268,"title":{},"body":{"injectables/ViewService.html":{}}}],["createtransport",{"_index":1068,"title":{},"body":{"injectables/EmailService.html":{}}}],["creating",{"_index":2147,"title":{},"body":{"injectables/UsersService.html":{}}}],["creation",{"_index":586,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["credenciais",{"_index":3577,"title":{},"body":{"miscellaneous/variables.html":{}}}],["credentials",{"_index":1413,"title":{},"body":{"injectables/OryService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["criterion",{"_index":2875,"title":{},"body":{"license.html":{}}}],["cross",{"_index":3280,"title":{},"body":{"license.html":{}}}],["crowd",{"_index":3477,"title":{},"body":{"properties.html":{}}}],["crypto",{"_index":2187,"title":{},"body":{"injectables/UtilService.html":{}}}],["cure",{"_index":3242,"title":{},"body":{"license.html":{}}}],["custom",{"_index":1327,"title":{},"body":{"classes/NotFoundFilter.html":{},"controllers/ViewController.html":{}}}],["customarily",{"_index":3064,"title":{},"body":{"license.html":{}}}],["customer",{"_index":3070,"title":{},"body":{"license.html":{}}}],["customize",{"_index":2634,"title":{},"body":{"index.html":{}}}],["d",{"_index":2599,"title":{},"body":{"index.html":{},"license.html":{}}}],["damages",{"_index":3397,"title":{},"body":{"license.html":{}}}],["danger",{"_index":2796,"title":{},"body":{"license.html":{}}}],["data",{"_index":191,"title":{},"body":{"injectables/CaptchaService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/OryService.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"injectables/SourceService.html":{},"injectables/UsersService.html":{},"injectables/WikidataService.html":{},"license.html":{}}}],["data.entities",{"_index":2349,"title":{},"body":{"injectables/WikidataService.html":{}}}],["data.query",{"_index":2409,"title":{},"body":{"injectables/WikidataService.html":{}}}],["data.targetid",{"_index":2014,"title":{},"body":{"injectables/SourceService.html":{}}}],["data.user",{"_index":2016,"title":{},"body":{"injectables/SourceService.html":{}}}],["data_hash",{"_index":1422,"title":{},"body":{"classes/Paragraph.html":{},"injectables/ParserService.html":{},"classes/Sentence.html":{}}}],["database",{"_index":598,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{}}}],["dataid",{"_index":1224,"title":{},"body":{"injectables/HistoryService.html":{}}}],["date",{"_index":395,"title":{},"body":{"controllers/ClaimController.html":{},"classes/ClaimRevision.html":{},"classes/CreateClaimDTO.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"classes/WikidataCache.html":{},"license.html":{}}}],["date.now",{"_index":2286,"title":{},"body":{"classes/WikidataCache.html":{}}}],["days",{"_index":3237,"title":{},"body":{"license.html":{}}}],["db",{"_index":2595,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["db(\"aletheia",{"_index":3598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["de",{"_index":1231,"title":{},"body":{"injectables/HistoryService.html":{},"index.html":{}}}],["debug",{"_index":1282,"title":{},"body":{"classes/Logger.html":{},"miscellaneous/variables.html":{}}}],["debug(message",{"_index":1289,"title":{},"body":{"classes/Logger.html":{}}}],["december",{"_index":2989,"title":{},"body":{"license.html":{}}}],["decide",{"_index":3377,"title":{},"body":{"license.html":{}}}],["declining",{"_index":3197,"title":{},"body":{"license.html":{}}}],["decorators",{"_index":210,"title":{},"body":{"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"classes/ClaimReviewTask.html":{},"classes/ClaimRevision.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreateClaimReviewTaskDTO.html":{},"classes/CreatePersonality.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/GetTasksDTO.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"controllers/HomeController.html":{},"controllers/OryController.html":{},"classes/Paragraph.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"classes/Report.html":{},"controllers/ReportController.html":{},"controllers/RootController.html":{},"classes/Sentence.html":{},"controllers/SitemapController.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"classes/Speech.html":{},"controllers/StatsController.html":{},"classes/UpdateClaimReviewTaskDTO.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"classes/WikidataCache.html":{}}}],["decorators/is",{"_index":328,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"controllers/HomeController.html":{},"controllers/OryController.html":{},"controllers/PersonalityController.html":{},"controllers/RootController.html":{},"controllers/SitemapController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["deemed",{"_index":2977,"title":{},"body":{"license.html":{}}}],["default",{"_index":179,"title":{},"body":{"injectables/CaptchaService.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"injectables/HistoryService.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"modules/OryModule.html":{},"injectables/OryService.html":{},"classes/Paragraph.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"classes/Sentence.html":{},"injectables/SitemapService.html":{},"injectables/SourceService.html":{},"classes/Speech.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":850,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{}}}],["defective",{"_index":3389,"title":{},"body":{"license.html":{}}}],["defenses",{"_index":3347,"title":{},"body":{"license.html":{}}}],["defined",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"injectables/CaptchaService.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimReviewTask.html":{},"injectables/ClaimReviewTaskService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreateClaimReviewTaskDTO.html":{},"classes/CreatePersonality.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/EmailService.html":{},"classes/GetClaimsDTO.html":{},"injectables/GetLanguageMiddleware.html":{},"classes/GetPersonalities.html":{},"classes/GetTasksDTO.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"injectables/JsonBodyMiddleware.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"injectables/OryService.html":{},"classes/Paragraph.html":{},"injectables/ParagraphService.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"classes/Report.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"controllers/RootController.html":{},"classes/Sentence.html":{},"injectables/SentenceService.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"classes/Speech.html":{},"injectables/SpeechService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimReviewTaskDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{},"license.html":{}}}],["definition",{"_index":2920,"title":{},"body":{"license.html":{}}}],["definitions",{"_index":2807,"title":{},"body":{"license.html":{}}}],["delete",{"_index":254,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"injectables/OryService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"miscellaneous/enumerations.html":{}}}],["delete(\"api/claim/:id",{"_index":380,"title":{},"body":{"controllers/ClaimController.html":{}}}],["delete(\"api/personality/:id",{"_index":1626,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["delete(\"api/review/:id",{"_index":492,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["delete('api/claim/:id",{"_index":280,"title":{},"body":{"controllers/ClaimController.html":{}}}],["delete('api/personality/:id",{"_index":1578,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["delete('api/review/:id",{"_index":478,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["delete(@param",{"_index":493,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["delete(@param(\"id",{"_index":381,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{}}}],["delete(claimid",{"_index":279,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{}}}],["delete(claimreviewid",{"_index":593,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["delete(params",{"_index":477,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["delete(personalityid",{"_index":1577,"title":{},"body":{"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["deleted",{"_index":1629,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["deleteidentity",{"_index":1373,"title":{},"body":{"injectables/OryService.html":{}}}],["deleteidentity(identityid",{"_index":1380,"title":{},"body":{"injectables/OryService.html":{}}}],["deletion",{"_index":596,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["denied",{"_index":3162,"title":{},"body":{"license.html":{}}}],["denominated",{"_index":3305,"title":{},"body":{"license.html":{}}}],["deny",{"_index":2759,"title":{},"body":{"license.html":{}}}],["denying",{"_index":2721,"title":{},"body":{"license.html":{}}}],["dependencies",{"_index":141,"title":{"dependencies.html":{}},"body":{"modules/CaptchaModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimReviewTaskModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/HomeModule.html":{},"modules/OryModule.html":{},"modules/ParagraphModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"modules/ReportModule.html":{},"modules/SentenceModule.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/SpeechModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deprive",{"_index":3314,"title":{},"body":{"license.html":{}}}],["desc",{"_index":1218,"title":{},"body":{"injectables/HistoryService.html":{}}}],["description",{"_index":588,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreatePersonality.html":{},"injectables/HistoryService.html":{},"classes/NotFoundFilter.html":{},"classes/Personality.html":{},"injectables/PersonalityService.html":{},"classes/Source.html":{},"injectables/WikidataService.html":{},"properties.html":{}}}],["descriptions",{"_index":2359,"title":{},"body":{"injectables/WikidataService.html":{}}}],["design/icons",{"_index":2465,"title":{},"body":{"dependencies.html":{}}}],["designated",{"_index":3082,"title":{},"body":{"license.html":{}}}],["designed",{"_index":2688,"title":{},"body":{"license.html":{}}}],["detail",{"_index":3367,"title":{},"body":{"license.html":{}}}],["details",{"_index":1157,"title":{},"body":{"classes/History.html":{},"injectables/HistoryService.html":{},"license.html":{}}}],["details.the",{"_index":3450,"title":{},"body":{"license.html":{}}}],["determining",{"_index":3121,"title":{},"body":{"license.html":{}}}],["dev",{"_index":2271,"title":{},"body":{"injectables/ViewService.html":{},"index.html":{}}}],["develop",{"_index":3425,"title":{},"body":{"license.html":{}}}],["developers",{"_index":2737,"title":{},"body":{"license.html":{}}}],["development",{"_index":2607,"title":{},"body":{"index.html":{},"license.html":{}}}],["devices",{"_index":2758,"title":{},"body":{"license.html":{}}}],["dhaiwat10/react",{"_index":2473,"title":{},"body":{"dependencies.html":{}}}],["differ",{"_index":3366,"title":{},"body":{"license.html":{}}}],["different",{"_index":3085,"title":{},"body":{"license.html":{}}}],["differently",{"_index":3186,"title":{},"body":{"license.html":{}}}],["dir",{"_index":2274,"title":{},"body":{"injectables/ViewService.html":{},"miscellaneous/variables.html":{}}}],["direction",{"_index":2964,"title":{},"body":{"license.html":{}}}],["directions",{"_index":3091,"title":{},"body":{"license.html":{}}}],["directly",{"_index":2833,"title":{},"body":{"license.html":{}}}],["disable",{"_index":1735,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["disablebodyparsermiddleware",{"_index":89,"title":{"injectables/DisableBodyParserMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/DisableBodyParserMiddleware.html":{},"coverage.html":{}}}],["disablesmtp",{"_index":3558,"title":{},"body":{"miscellaneous/variables.html":{}}}],["disclaim",{"_index":3000,"title":{},"body":{"license.html":{}}}],["disclaimer",{"_index":3380,"title":{},"body":{"license.html":{}}}],["disclaiming",{"_index":3183,"title":{},"body":{"license.html":{}}}],["discriminatory",{"_index":3331,"title":{},"body":{"license.html":{}}}],["discursos",{"_index":2580,"title":{},"body":{"index.html":{}}}],["display",{"_index":3038,"title":{},"body":{"license.html":{}}}],["displayed",{"_index":3191,"title":{},"body":{"license.html":{}}}],["displays",{"_index":2858,"title":{},"body":{"license.html":{}}}],["distinguishing",{"_index":3370,"title":{},"body":{"license.html":{}}}],["distribute",{"_index":2678,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":3437,"title":{},"body":{"license.html":{}}}],["distributing",{"_index":3335,"title":{},"body":{"license.html":{}}}],["distribution",{"_index":2805,"title":{},"body":{"license.html":{}}}],["docker:docker",{"_index":2597,"title":{},"body":{"index.html":{}}}],["document",{"_index":1209,"title":{},"body":{"injectables/HistoryService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"classes/WikidataCache.html":{},"license.html":{}}}],["documentation",{"_index":2412,"title":{},"body":{"coverage.html":{}}}],["documented",{"_index":3170,"title":{},"body":{"license.html":{}}}],["documents",{"_index":531,"title":{},"body":{"controllers/ClaimReviewController-1.html":{}}}],["doesn't",{"_index":597,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["dom",{"_index":2539,"title":{},"body":{"dependencies.html":{}}}],["domains",{"_index":2781,"title":{},"body":{"license.html":{}}}],["domino",{"_index":2512,"title":{},"body":{"dependencies.html":{}}}],["doubtful",{"_index":3122,"title":{},"body":{"license.html":{}}}],["down",{"_index":2623,"title":{},"body":{"index.html":{}}}],["downstream",{"_index":3260,"title":{},"body":{"license.html":{}}}],["draft",{"_index":2514,"title":{},"body":{"dependencies.html":{}}}],["dto/create",{"_index":322,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"classes/ClaimReviewTask.html":{},"injectables/ClaimReviewTaskService.html":{},"controllers/PersonalityController.html":{}}}],["dto/get",{"_index":324,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{},"controllers/PersonalityController.html":{}}}],["dto/update",{"_index":326,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{},"injectables/ClaimReviewTaskService.html":{}}}],["duplicate",{"_index":2182,"title":{},"body":{"injectables/UtilService.html":{}}}],["durable",{"_index":3063,"title":{},"body":{"license.html":{}}}],["dwelling",{"_index":3120,"title":{},"body":{"license.html":{}}}],["dynamic",{"_index":1970,"title":{},"body":{"classes/Source.html":{}}}],["dynamically",{"_index":2924,"title":{},"body":{"license.html":{}}}],["dynamicmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{}}}],["e",{"_index":761,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/EmailService.html":{},"guards/SessionGuard.html":{},"injectables/SitemapService.html":{},"injectables/UsersService.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["e.message",{"_index":1962,"title":{},"body":{"injectables/SitemapService.html":{}}}],["e2e@aletheiafact.org",{"_index":3620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["each",{"_index":2816,"title":{},"body":{"license.html":{}}}],["earlier",{"_index":2828,"title":{},"body":{"license.html":{}}}],["effect",{"_index":3414,"title":{},"body":{"license.html":{}}}],["effected",{"_index":2998,"title":{},"body":{"license.html":{}}}],["effective",{"_index":2978,"title":{},"body":{"license.html":{}}}],["effectively",{"_index":2798,"title":{},"body":{"license.html":{}}}],["efforts",{"_index":3274,"title":{},"body":{"license.html":{}}}],["electronic",{"_index":3442,"title":{},"body":{"license.html":{}}}],["email",{"_index":1409,"title":{},"body":{"injectables/OryService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["email.service",{"_index":1066,"title":{},"body":{"modules/EmailModule.html":{}}}],["email/email.module",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["emailmodule",{"_index":57,"title":{"modules/EmailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EmailModule.html":{},"modules.html":{},"overview.html":{}}}],["emailresponse",{"_index":3567,"title":{},"body":{"miscellaneous/variables.html":{}}}],["emailresult",{"_index":1116,"title":{},"body":{"injectables/EmailService.html":{}}}],["emailservice",{"_index":1064,"title":{"injectables/EmailService.html":{}},"body":{"modules/EmailModule.html":{},"injectables/EmailService.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["emailservice.sendemail",{"_index":3568,"title":{},"body":{"miscellaneous/variables.html":{}}}],["embodied",{"_index":3058,"title":{},"body":{"license.html":{}}}],["employer",{"_index":3455,"title":{},"body":{"license.html":{}}}],["en",{"_index":1139,"title":{},"body":{"injectables/GetLanguageMiddleware.html":{},"injectables/PersonalityService.html":{},"injectables/WikidataService.html":{}}}],["enable",{"_index":2899,"title":{},"body":{"license.html":{}}}],["enableimplicitconversion",{"_index":3535,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enables",{"_index":2850,"title":{},"body":{"license.html":{}}}],["encodeuricomponent(params.wikidataid",{"_index":2344,"title":{},"body":{"injectables/WikidataService.html":{}}}],["encoding",{"_index":1093,"title":{},"body":{"injectables/EmailService.html":{}}}],["end",{"_index":2649,"title":{},"body":{"index.html":{},"license.html":{}}}],["enforce",{"_index":3306,"title":{},"body":{"license.html":{}}}],["enforcing",{"_index":3003,"title":{},"body":{"license.html":{}}}],["engine",{"_index":1961,"title":{},"body":{"injectables/SitemapService.html":{}}}],["english/javascript",{"_index":2180,"title":{},"body":{"injectables/UtilService.html":{}}}],["ensure",{"_index":3097,"title":{},"body":{"license.html":{}}}],["ensures",{"_index":1399,"title":{},"body":{"injectables/OryService.html":{}}}],["entered",{"_index":3341,"title":{},"body":{"license.html":{}}}],["entire",{"_index":3028,"title":{},"body":{"license.html":{}}}],["entirely",{"_index":3358,"title":{},"body":{"license.html":{}}}],["entities",{"_index":2348,"title":{},"body":{"injectables/WikidataService.html":{}}}],["entities[params.wikidataid",{"_index":2351,"title":{},"body":{"injectables/WikidataService.html":{}}}],["entity",{"_index":3264,"title":{},"body":{"license.html":{}}}],["enum",{"_index":780,"title":{},"body":{"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Report.html":{},"classes/Source.html":{}}}],["enumerations",{"_index":2570,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":2659,"title":{},"body":{"index.html":{}}}],["equal",{"_index":602,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["equivalent",{"_index":2952,"title":{},"body":{"license.html":{}}}],["err",{"_index":201,"title":{},"body":{"injectables/CaptchaService.html":{},"injectables/PersonalityService.html":{}}}],["erroneously",{"_index":2757,"title":{},"body":{"license.html":{}}}],["error",{"_index":1283,"title":{},"body":{"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"controllers/PersonalityController.html":{},"injectables/SitemapService.html":{},"injectables/ViewService.html":{},"miscellaneous/variables.html":{}}}],["error(\"error",{"_index":370,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{}}}],["error(\"this",{"_index":640,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["error(e",{"_index":762,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["error(message",{"_index":1292,"title":{},"body":{"classes/Logger.html":{}}}],["error.keypattern",{"_index":1612,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["error.keypattern.wikidata",{"_index":1613,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["error.keyvalue.wikidata",{"_index":1615,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["error.message",{"_index":1614,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["error.name",{"_index":1610,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["errorformat",{"_index":2392,"title":{},"body":{"injectables/WikidataService.html":{}}}],["eslint",{"_index":1734,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["eslint/eslint",{"_index":2489,"title":{},"body":{"dependencies.html":{}}}],["essential",{"_index":2902,"title":{},"body":{"license.html":{}}}],["even",{"_index":3409,"title":{},"body":{"license.html":{}}}],["event",{"_index":3395,"title":{},"body":{"license.html":{}}}],["everyone",{"_index":2676,"title":{},"body":{"license.html":{}}}],["exact",{"_index":2825,"title":{},"body":{"license.html":{}}}],["exaggerated",{"_index":1775,"title":{},"body":{"classes/Report.html":{},"miscellaneous/enumerations.html":{}}}],["example",{"_index":2729,"title":{},"body":{"license.html":{}}}],["except",{"_index":855,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{},"license.html":{}}}],["exception",{"_index":1335,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["exceptionfilter",{"_index":1331,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["exceptions",{"_index":1326,"title":{},"body":{"classes/NotFoundFilter.html":{},"license.html":{}}}],["excluded",{"_index":3111,"title":{},"body":{"license.html":{}}}],["excluding",{"_index":3345,"title":{},"body":{"license.html":{}}}],["exclusion",{"_index":3434,"title":{},"body":{"license.html":{}}}],["exclusive",{"_index":3298,"title":{},"body":{"license.html":{}}}],["exclusively",{"_index":2958,"title":{},"body":{"license.html":{}}}],["excuse",{"_index":3351,"title":{},"body":{"license.html":{}}}],["exec",{"_index":2334,"title":{},"body":{"injectables/WikidataService.html":{}}}],["executable",{"_index":2890,"title":{},"body":{"license.html":{}}}],["execute",{"_index":3143,"title":{},"body":{"license.html":{}}}],["executing",{"_index":2839,"title":{},"body":{"license.html":{}}}],["executioncontext",{"_index":1864,"title":{},"body":{"guards/SessionGuard.html":{},"miscellaneous/variables.html":{}}}],["exercise",{"_index":3275,"title":{},"body":{"license.html":{}}}],["exercising",{"_index":2999,"title":{},"body":{"license.html":{}}}],["exists",{"_index":1616,"title":{},"body":{"controllers/PersonalityController.html":{},"injectables/WikidataService.html":{}}}],["expected",{"_index":3131,"title":{},"body":{"license.html":{}}}],["expects",{"_index":3130,"title":{},"body":{"license.html":{}}}],["expireafterseconds",{"_index":2300,"title":{},"body":{"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["explains",{"_index":2749,"title":{},"body":{"license.html":{}}}],["explicitly",{"_index":2943,"title":{},"body":{"license.html":{}}}],["export",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"modules/CaptchaModule.html":{},"injectables/CaptchaService.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimReviewTask.html":{},"modules/ClaimReviewTaskModule.html":{},"injectables/ClaimReviewTaskService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreateClaimReviewTaskDTO.html":{},"classes/CreatePersonality.html":{},"injectables/DisableBodyParserMiddleware.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/GetClaimsDTO.html":{},"injectables/GetLanguageMiddleware.html":{},"classes/GetPersonalities.html":{},"classes/GetTasksDTO.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/JsonBodyMiddleware.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"modules/OryModule.html":{},"injectables/OryService.html":{},"classes/Paragraph.html":{},"modules/ParagraphModule.html":{},"injectables/ParagraphService.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"classes/Report.html":{},"controllers/ReportController.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"controllers/RootController.html":{},"classes/Sentence.html":{},"modules/SentenceModule.html":{},"injectables/SentenceService.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"classes/Speech.html":{},"modules/SpeechModule.html":{},"injectables/SpeechService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimDTO.html":{},"classes/UpdateClaimReviewTaskDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"dependencies.html":{}}}],["exports",{"_index":150,"title":{},"body":{"modules/CaptchaModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimReviewTaskModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/OryModule.html":{},"modules/ParagraphModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"modules/ReportModule.html":{},"modules/SentenceModule.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/SpeechModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{}}}],["express",{"_index":315,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{},"injectables/ClaimService.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/GetLanguageMiddleware.html":{},"controllers/HomeController.html":{},"injectables/JsonBodyMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"dependencies.html":{},"license.html":{}}}],["expressed",{"_index":3382,"title":{},"body":{"license.html":{}}}],["expressly",{"_index":3221,"title":{},"body":{"license.html":{}}}],["extend",{"_index":2784,"title":{},"body":{"license.html":{}}}],["extended",{"_index":3330,"title":{},"body":{"license.html":{}}}],["extends",{"_index":2074,"title":{},"body":{"classes/UpdateClaimDTO.html":{},"classes/UpdateClaimReviewTaskDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{}}}],["extensions",{"_index":3043,"title":{},"body":{"license.html":{}}}],["extent",{"_index":2861,"title":{},"body":{"license.html":{}}}],["extract",{"_index":1541,"title":{},"body":{"injectables/ParserService.html":{},"injectables/WikidataService.html":{}}}],["extractclaimwithtextsummary",{"_index":1652,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["extractclaimwithtextsummary(claims",{"_index":1665,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["extractproperties",{"_index":2303,"title":{},"body":{"injectables/WikidataService.html":{}}}],["extractproperties(wikidata",{"_index":2312,"title":{},"body":{"injectables/WikidataService.html":{}}}],["extractvalue",{"_index":2304,"title":{},"body":{"injectables/WikidataService.html":{}}}],["extractvalue(wikidata",{"_index":2314,"title":{},"body":{"injectables/WikidataService.html":{}}}],["f",{"_index":3203,"title":{},"body":{"license.html":{}}}],["facilities",{"_index":2959,"title":{},"body":{"license.html":{}}}],["fact",{"_index":1771,"title":{},"body":{"classes/Report.html":{},"miscellaneous/enumerations.html":{},"properties.html":{}}}],["fails",{"_index":3233,"title":{},"body":{"license.html":{}}}],["failure",{"_index":3407,"title":{},"body":{"license.html":{}}}],["fair",{"_index":2951,"title":{},"body":{"license.html":{}}}],["fake",{"_index":2584,"title":{},"body":{"index.html":{}}}],["fake\"].indexof",{"_index":1978,"title":{},"body":{"classes/Source.html":{}}}],["false",{"_index":203,"title":{},"body":{"injectables/CaptchaService.html":{},"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"classes/Report.html":{},"guards/SessionGuard.html":{},"injectables/SitemapService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/WikidataService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["family",{"_index":3115,"title":{},"body":{"license.html":{}}}],["fashion",{"_index":2823,"title":{},"body":{"license.html":{}}}],["favor",{"_index":3125,"title":{},"body":{"license.html":{}}}],["feature",{"_index":2865,"title":{},"body":{"license.html":{}}}],["fee",{"_index":2733,"title":{},"body":{"license.html":{}}}],["fetch",{"_index":948,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["fetchonly",{"_index":1268,"title":{},"body":{"controllers/HomeController.html":{},"controllers/PersonalityController.html":{}}}],["fetchproperties",{"_index":2305,"title":{},"body":{"injectables/WikidataService.html":{}}}],["fetchproperties(params",{"_index":2316,"title":{},"body":{"injectables/WikidataService.html":{}}}],["field",{"_index":792,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["field(after",{"_index":1168,"title":{},"body":{"classes/History.html":{}}}],["file",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/CaptchaModule.html":{},"injectables/CaptchaService.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimReviewTask.html":{},"modules/ClaimReviewTaskModule.html":{},"injectables/ClaimReviewTaskService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreateClaimReviewTaskDTO.html":{},"classes/CreatePersonality.html":{},"injectables/DisableBodyParserMiddleware.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/GetClaimsDTO.html":{},"injectables/GetLanguageMiddleware.html":{},"classes/GetPersonalities.html":{},"classes/GetTasksDTO.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/JsonBodyMiddleware.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"modules/OryModule.html":{},"injectables/OryService.html":{},"classes/Paragraph.html":{},"modules/ParagraphModule.html":{},"injectables/ParagraphService.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"classes/Report.html":{},"controllers/ReportController.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"controllers/RootController.html":{},"classes/Sentence.html":{},"modules/SentenceModule.html":{},"injectables/SentenceService.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"classes/Speech.html":{},"modules/SpeechModule.html":{},"injectables/SpeechService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimDTO.html":{},"classes/UpdateClaimReviewTaskDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"license.html":{}}}],["file:${imagetitle",{"_index":2404,"title":{},"body":{"injectables/WikidataService.html":{}}}],["filename",{"_index":2367,"title":{},"body":{"injectables/WikidataService.html":{}}}],["files",{"_index":2921,"title":{},"body":{"license.html":{}}}],["filterquery",{"_index":913,"title":{},"body":{"injectables/ClaimService.html":{}}}],["filters",{"_index":1325,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["filters/not",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["finally",{"_index":2787,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["find",{"_index":3093,"title":{},"body":{"license.html":{}}}],["findall",{"_index":2124,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(getusers",{"_index":2128,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbysentencehash",{"_index":1799,"title":{},"body":{"injectables/ReportService.html":{}}}],["findbysentencehash(sentence_hash",{"_index":1804,"title":{},"body":{"injectables/ReportService.html":{}}}],["finish",{"_index":3584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["finished",{"_index":3591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["first",{"_index":793,"title":{},"body":{"classes/ClaimRevision.html":{},"injectables/UsersService.html":{},"index.html":{},"license.html":{}}}],["firstpasswordchanged",{"_index":2079,"title":{},"body":{"classes/User.html":{},"interfaces/UserDocument.html":{},"miscellaneous/variables.html":{}}}],["firstvaluefrom",{"_index":183,"title":{},"body":{"injectables/CaptchaService.html":{}}}],["fitness",{"_index":3385,"title":{},"body":{"license.html":{}}}],["fixed",{"_index":3062,"title":{},"body":{"license.html":{}}}],["flag",{"_index":2509,"title":{},"body":{"dependencies.html":{}}}],["flow",{"_index":2931,"title":{},"body":{"license.html":{}}}],["follow",{"_index":2614,"title":{},"body":{"index.html":{},"license.html":{}}}],["following",{"_index":3302,"title":{},"body":{"license.html":{}}}],["forbid",{"_index":2997,"title":{},"body":{"license.html":{}}}],["forbidnonwhitelisted",{"_index":3537,"title":{},"body":{"miscellaneous/variables.html":{}}}],["force",{"_index":2955,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["forcepassword",{"_index":2172,"title":{},"body":{"injectables/UtilService.html":{}}}],["foreignfield",{"_index":241,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"classes/Personality.html":{},"classes/Report.html":{}}}],["fork",{"_index":2587,"title":{},"body":{"index.html":{}}}],["form",{"_index":2543,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["format",{"_index":2345,"title":{},"body":{"injectables/WikidataService.html":{},"index.html":{},"license.html":{}}}],["formatstats",{"_index":2165,"title":{},"body":{"injectables/UtilService.html":{}}}],["formatstats(reviews",{"_index":2168,"title":{},"body":{"injectables/UtilService.html":{}}}],["formatversion",{"_index":2346,"title":{},"body":{"injectables/WikidataService.html":{}}}],["forms",{"_index":3054,"title":{},"body":{"license.html":{}}}],["forroutes",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["forroutes(orycontroller",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":360,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HistoryController.html":{},"classes/NotFoundFilter.html":{},"injectables/PersonalityService.html":{},"controllers/SourceController.html":{},"license.html":{}}}],["found.filter",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["found.filter.ts",{"_index":1324,"title":{},"body":{"classes/NotFoundFilter.html":{},"coverage.html":{}}}],["found.filter.ts:9",{"_index":1334,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["foundation",{"_index":2673,"title":{},"body":{"license.html":{}}}],["free",{"_index":2671,"title":{},"body":{"license.html":{}}}],["freedom",{"_index":2690,"title":{},"body":{"license.html":{}}}],["freedoms",{"_index":2735,"title":{},"body":{"license.html":{}}}],["front",{"_index":600,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["fs",{"_index":1088,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["fs.readfilesync(path.resolve(__dirname",{"_index":1092,"title":{},"body":{"injectables/EmailService.html":{}}}],["fulfilling",{"_index":2981,"title":{},"body":{"license.html":{}}}],["full",{"_index":3436,"title":{},"body":{"license.html":{}}}],["fully",{"_index":814,"title":{},"body":{"modules/ClaimRevisionModule.html":{}}}],["function",{"_index":583,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/HistoryService.html":{},"injectables/JsonBodyMiddleware.html":{},"injectables/PersonalityService.html":{}}}],["functioning",{"_index":3146,"title":{},"body":{"license.html":{}}}],["fundamentally",{"_index":2763,"title":{},"body":{"license.html":{}}}],["further",{"_index":3084,"title":{},"body":{"license.html":{}}}],["future",{"_index":1499,"title":{},"body":{"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"license.html":{}}}],["general",{"_index":2664,"title":{},"body":{"license.html":{}}}],["generally",{"_index":2918,"title":{},"body":{"license.html":{}}}],["generate",{"_index":2912,"title":{},"body":{"license.html":{}}}],["generatepassword",{"_index":2166,"title":{},"body":{"injectables/UtilService.html":{}}}],["generatepassword(istestuser",{"_index":2171,"title":{},"body":{"injectables/UtilService.html":{}}}],["get(\"404",{"_index":2252,"title":{},"body":{"controllers/ViewController.html":{}}}],["get(\"_next",{"_index":2250,"title":{},"body":{"controllers/ViewController.html":{}}}],["get(\"about",{"_index":2244,"title":{},"body":{"controllers/ViewController.html":{}}}],["get(\"api/.ory",{"_index":1356,"title":{},"body":{"controllers/OryController.html":{}}}],["get(\"api/claim",{"_index":342,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get(\"api/claim/:id",{"_index":374,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get(\"api/claimreviewtask",{"_index":526,"title":{},"body":{"controllers/ClaimReviewController-1.html":{}}}],["get(\"api/claimreviewtask/:id",{"_index":541,"title":{},"body":{"controllers/ClaimReviewController-1.html":{}}}],["get(\"api/claimreviewtask/sentence/:sentence_hash",{"_index":549,"title":{},"body":{"controllers/ClaimReviewController-1.html":{}}}],["get(\"api/health",{"_index":1828,"title":{},"body":{"controllers/RootController.html":{}}}],["get(\"api/history/:targetmodel/:targetid",{"_index":1182,"title":{},"body":{"controllers/HistoryController.html":{}}}],["get(\"api/personality",{"_index":1606,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get(\"api/personality/:id",{"_index":1617,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get(\"api/personality/:id/reviews",{"_index":1630,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get(\"api/report/:sentence_hash",{"_index":1787,"title":{},"body":{"controllers/ReportController.html":{}}}],["get(\"api/review/:id",{"_index":489,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["get(\"api/source/:targetid",{"_index":1990,"title":{},"body":{"controllers/SourceController.html":{}}}],["get(\"api/user",{"_index":2111,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(\"code",{"_index":2248,"title":{},"body":{"controllers/ViewController.html":{}}}],["get(\"home",{"_index":2053,"title":{},"body":{"controllers/StatsController.html":{}}}],["get(\"kanban",{"_index":551,"title":{},"body":{"controllers/ClaimReviewController-1.html":{}}}],["get(\"login",{"_index":2105,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(\"personality",{"_index":1637,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get(\"personality/:personalityslug/claim/:claimslug",{"_index":421,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get(\"personality/:personalityslug/claim/:claimslug/history",{"_index":433,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get(\"personality/:personalityslug/claim/:claimslug/revision/:revisionid",{"_index":427,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get(\"personality/:personalityslug/claim/:claimslug/sources",{"_index":430,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get(\"personality/:slug",{"_index":1635,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get(\"personality/:slug/claim/create",{"_index":418,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get(\"personality/:slug/history",{"_index":1639,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get(\"personality/search",{"_index":1632,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get(\"privacy",{"_index":2246,"title":{},"body":{"controllers/ViewController.html":{}}}],["get(\"profile",{"_index":2108,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(\"robots.txt",{"_index":1819,"title":{},"body":{"controllers/RootController.html":{}}}],["get(\"sitemap.xml",{"_index":1901,"title":{},"body":{"controllers/SitemapController.html":{}}}],["get(\"submit",{"_index":1907,"title":{},"body":{"controllers/SitemapController.html":{}}}],["get('/home",{"_index":1250,"title":{},"body":{"controllers/HomeController.html":{}}}],["get('api/claimreviewtask/:id",{"_index":506,"title":{},"body":{"controllers/ClaimReviewController-1.html":{}}}],["get('api/claimreviewtask/sentence/:sentence_hash",{"_index":514,"title":{},"body":{"controllers/ClaimReviewController-1.html":{}}}],["get('api/history/:targetmodel/:targetid",{"_index":1178,"title":{},"body":{"controllers/HistoryController.html":{}}}],["get('api/report/:sentence_hash",{"_index":1784,"title":{},"body":{"controllers/ReportController.html":{}}}],["get('api/source/:targetid",{"_index":1986,"title":{},"body":{"controllers/SourceController.html":{}}}],["get('home",{"_index":2049,"title":{},"body":{"controllers/StatsController.html":{}}}],["get('kanban",{"_index":517,"title":{},"body":{"controllers/ClaimReviewController-1.html":{}}}],["get('personality/:personalityslug/claim/:claimslug/history",{"_index":299,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get('personality/:personalityslug/claim/:claimslug/revision/:revisionid",{"_index":296,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get('personality/:slug/claim/create",{"_index":272,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get('personality/:slug/history",{"_index":1592,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get('personality/search",{"_index":1590,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get('profile",{"_index":2101,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('submit",{"_index":1895,"title":{},"body":{"controllers/SitemapController.html":{}}}],["get(@param",{"_index":490,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["get(@param(\"id",{"_index":1618,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get(`https://www.wikidata.org/w/api.php",{"_index":2395,"title":{},"body":{"injectables/WikidataService.html":{}}}],["get(params",{"_index":481,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["get(personalityid",{"_index":1580,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get,head,put,patch,post,delete",{"_index":3525,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getall",{"_index":2093,"title":{},"body":{"controllers/UsersController.html":{}}}],["getall(@query",{"_index":2112,"title":{},"body":{"controllers/UsersController.html":{}}}],["getall(getusers",{"_index":2094,"title":{},"body":{"controllers/UsersController.html":{}}}],["getbyid",{"_index":255,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/UsersService.html":{}}}],["getbyid(@param(\"id",{"_index":375,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{}}}],["getbyid(claimid",{"_index":282,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{}}}],["getbyid(claimreviewid",{"_index":603,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getbyid(claimreviewtaskid",{"_index":711,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["getbyid(id",{"_index":505,"title":{},"body":{"controllers/ClaimReviewController-1.html":{}}}],["getbyid(personalityid",{"_index":1620,"title":{},"body":{"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["getbyid(userid",{"_index":2130,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbymachinevalue",{"_index":497,"title":{},"body":{"controllers/ClaimReviewController-1.html":{}}}],["getbymachinevalue(@query",{"_index":527,"title":{},"body":{"controllers/ClaimReviewController-1.html":{}}}],["getbymachinevalue(gettasksdto",{"_index":509,"title":{},"body":{"controllers/ClaimReviewController-1.html":{}}}],["getbypersonalityidandclaimslug",{"_index":874,"title":{},"body":{"injectables/ClaimService.html":{}}}],["getbypersonalityidandclaimslug(personalityid",{"_index":892,"title":{},"body":{"injectables/ClaimService.html":{}}}],["getbysentencehash",{"_index":498,"title":{},"body":{"controllers/ClaimReviewController-1.html":{},"controllers/ReportController.html":{}}}],["getbysentencehash(@param(\"sentence_hash",{"_index":550,"title":{},"body":{"controllers/ClaimReviewController-1.html":{},"controllers/ReportController.html":{}}}],["getbysentencehash(sentence_hash",{"_index":513,"title":{},"body":{"controllers/ClaimReviewController-1.html":{},"controllers/ReportController.html":{}}}],["getbyslug",{"_index":1653,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["getbyslug(personalityslug",{"_index":1668,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["getbytargetid",{"_index":2007,"title":{},"body":{"injectables/SourceService.html":{}}}],["getbytargetid(targetid",{"_index":1994,"title":{},"body":{"controllers/SourceController.html":{},"injectables/SourceService.html":{}}}],["getbytargetidandmodel",{"_index":1203,"title":{},"body":{"injectables/HistoryService.html":{}}}],["getbytargetidandmodel(targetid",{"_index":1186,"title":{},"body":{"controllers/HistoryController.html":{},"injectables/HistoryService.html":{}}}],["getclaimreviewpage",{"_index":256,"title":{},"body":{"controllers/ClaimController.html":{}}}],["getclaimreviewpage(@req",{"_index":400,"title":{},"body":{"controllers/ClaimController.html":{}}}],["getclaimreviewpage(req",{"_index":285,"title":{},"body":{"controllers/ClaimController.html":{}}}],["getclaimreviewtaskbysentencehash",{"_index":703,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["getclaimreviewtaskbysentencehash(sentence_hash",{"_index":714,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["getclaimsdto",{"_index":289,"title":{"classes/GetClaimsDTO.html":{}},"body":{"controllers/ClaimController.html":{},"classes/GetClaimsDTO.html":{},"coverage.html":{}}}],["getcommonsthumburl",{"_index":2306,"title":{},"body":{"injectables/WikidataService.html":{}}}],["getcommonsthumburl(imagetitle",{"_index":2318,"title":{},"body":{"injectables/WikidataService.html":{}}}],["getdeletedpersonalitybywikidata",{"_index":1654,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["getdeletedpersonalitybywikidata(wikidata",{"_index":1670,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["getemailbody",{"_index":1069,"title":{},"body":{"injectables/EmailService.html":{}}}],["getemailbody(options",{"_index":1074,"title":{},"body":{"injectables/EmailService.html":{}}}],["gethistory",{"_index":1176,"title":{},"body":{"controllers/HistoryController.html":{}}}],["gethistory(@param",{"_index":1183,"title":{},"body":{"controllers/HistoryController.html":{}}}],["gethistory(param",{"_index":1177,"title":{},"body":{"controllers/HistoryController.html":{}}}],["gethistoryparams",{"_index":1204,"title":{},"body":{"injectables/HistoryService.html":{}}}],["gethistoryparams(dataid",{"_index":1220,"title":{},"body":{"injectables/HistoryService.html":{}}}],["gethomestats",{"_index":2048,"title":{},"body":{"controllers/StatsController.html":{},"injectables/StatsService.html":{}}}],["getlanguagemiddleware",{"_index":87,"title":{"injectables/GetLanguageMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/GetLanguageMiddleware.html":{},"coverage.html":{}}}],["getnextserver",{"_index":425,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{},"controllers/HomeController.html":{},"controllers/OryController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{}}}],["getorypaths",{"_index":1341,"title":{},"body":{"controllers/OryController.html":{}}}],["getorypaths(@req",{"_index":1357,"title":{},"body":{"controllers/OryController.html":{}}}],["getorypaths(req",{"_index":1344,"title":{},"body":{"controllers/OryController.html":{}}}],["getpersonalities",{"_index":1140,"title":{"classes/GetPersonalities.html":{}},"body":{"classes/GetPersonalities.html":{},"controllers/PersonalityController.html":{},"coverage.html":{}}}],["getrequesthandler",{"_index":1362,"title":{},"body":{"controllers/OryController.html":{}}}],["getreviewbysentencehash",{"_index":568,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getreviewbysentencehash(sentence_hash",{"_index":605,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getreviewsbyclaimid",{"_index":569,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getreviewsbyclaimid(claimid",{"_index":607,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getreviewstats",{"_index":1571,"title":{},"body":{"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["getreviewstats(@param(\"id",{"_index":1631,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["getreviewstats(id",{"_index":1672,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["getreviewstats(personalityid",{"_index":1583,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["getreviewstatsbyclaimid",{"_index":570,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getreviewstatsbyclaimid(claimid",{"_index":610,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getreviewstatsbysentencehash",{"_index":571,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getreviewstatsbysentencehash(match",{"_index":612,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getrevision",{"_index":818,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["getrevision(match",{"_index":827,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["getsitelinkname",{"_index":2307,"title":{},"body":{"injectables/WikidataService.html":{}}}],["getsitelinkname(language",{"_index":2322,"title":{},"body":{"injectables/WikidataService.html":{}}}],["getsitemap",{"_index":1888,"title":{},"body":{"controllers/SitemapController.html":{},"injectables/SitemapService.html":{}}}],["getsitemap(@res",{"_index":1903,"title":{},"body":{"controllers/SitemapController.html":{}}}],["getsitemap(hostname",{"_index":1919,"title":{},"body":{"injectables/SitemapService.html":{}}}],["getsitemap(res",{"_index":1890,"title":{},"body":{"controllers/SitemapController.html":{}}}],["getsources",{"_index":1985,"title":{},"body":{"controllers/SourceController.html":{}}}],["getsourcesclaim",{"_index":1983,"title":{},"body":{"controllers/SourceController.html":{}}}],["getsourcesclaim(@param",{"_index":1991,"title":{},"body":{"controllers/SourceController.html":{}}}],["getsourcesclaim(params",{"_index":1984,"title":{},"body":{"controllers/SourceController.html":{}}}],["gettasksdto",{"_index":510,"title":{"classes/GetTasksDTO.html":{}},"body":{"controllers/ClaimReviewController-1.html":{},"classes/GetTasksDTO.html":{},"coverage.html":{}}}],["getting",{"_index":2575,"title":{"index.html":{},"license.html":{}},"body":{}}],["getuserreviewbysentencehash",{"_index":572,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getuserreviewbysentencehash(sentence_hash",{"_index":614,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getusers",{"_index":2097,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["give",{"_index":3019,"title":{},"body":{"license.html":{}}}],["given",{"_index":2948,"title":{},"body":{"license.html":{}}}],["gives",{"_index":3035,"title":{},"body":{"license.html":{}}}],["giving",{"_index":2743,"title":{},"body":{"license.html":{}}}],["global",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["gnu",{"_index":2663,"title":{},"body":{"license.html":{}}}],["go",{"_index":2632,"title":{},"body":{"index.html":{}}}],["gonna",{"_index":2628,"title":{},"body":{"index.html":{}}}],["google",{"_index":2540,"title":{},"body":{"dependencies.html":{}}}],["governed",{"_index":3177,"title":{},"body":{"license.html":{}}}],["gpl",{"_index":2738,"title":{},"body":{"license.html":{}}}],["grant",{"_index":3198,"title":{},"body":{"license.html":{}}}],["granted",{"_index":2938,"title":{},"body":{"license.html":{}}}],["grants",{"_index":3253,"title":{},"body":{"license.html":{}}}],["graph",{"_index":3471,"title":{},"body":{"modules.html":{}}}],["gratis",{"_index":2732,"title":{},"body":{"license.html":{}}}],["greatest",{"_index":3426,"title":{},"body":{"license.html":{}}}],["group",{"_index":627,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["guarantee",{"_index":2693,"title":{},"body":{"license.html":{}}}],["guard",{"_index":1857,"title":{"guards/SessionGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":1858,"title":{},"body":{"guards/SessionGuard.html":{}}}],["gui",{"_index":3453,"title":{},"body":{"license.html":{}}}],["handlebars",{"_index":1086,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["handlebars.compile(html",{"_index":1097,"title":{},"body":{"injectables/EmailService.html":{}}}],["handler",{"_index":2214,"title":{},"body":{"controllers/ViewController.html":{}}}],["handler(req",{"_index":2224,"title":{},"body":{"controllers/ViewController.html":{}}}],["hash",{"_index":3621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hasn't",{"_index":906,"title":{},"body":{"injectables/ClaimService.html":{}}}],["having",{"_index":2957,"title":{},"body":{"license.html":{}}}],["header",{"_index":1898,"title":{},"body":{"controllers/SitemapController.html":{}}}],["header(\"content",{"_index":1902,"title":{},"body":{"controllers/SitemapController.html":{}}}],["headers",{"_index":1415,"title":{},"body":{"injectables/OryService.html":{}}}],["health",{"_index":1811,"title":{},"body":{"controllers/RootController.html":{}}}],["here",{"_index":2231,"title":{},"body":{"controllers/ViewController.html":{}}}],["hereafter",{"_index":3294,"title":{},"body":{"license.html":{}}}],["history",{"_index":434,"title":{"classes/History.html":{}},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"coverage.html":{}}}],["history.controller",{"_index":1197,"title":{},"body":{"modules/HistoryModule.html":{}}}],["history.length",{"_index":1189,"title":{},"body":{"controllers/HistoryController.html":{}}}],["history.service",{"_index":1180,"title":{},"body":{"controllers/HistoryController.html":{},"modules/HistoryModule.html":{}}}],["history/history.module",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/PersonalityModule.html":{}}}],["history/history.service",{"_index":620,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["history/schema/history.schema",{"_index":334,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["history_model",{"_index":1199,"title":{},"body":{"modules/HistoryModule.html":{},"miscellaneous/variables.html":{}}}],["historycontroller",{"_index":1174,"title":{"controllers/HistoryController.html":{}},"body":{"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"coverage.html":{}}}],["historydocument",{"_index":1167,"title":{},"body":{"classes/History.html":{},"injectables/HistoryService.html":{},"miscellaneous/typealiases.html":{}}}],["historymodel",{"_index":1198,"title":{},"body":{"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["historymodule",{"_index":73,"title":{"modules/HistoryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/HistoryModule.html":{},"modules/PersonalityModule.html":{},"modules.html":{},"overview.html":{}}}],["historyschema",{"_index":1172,"title":{},"body":{"classes/History.html":{},"modules/HistoryModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["historyservice",{"_index":574,"title":{"injectables/HistoryService.html":{}},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{},"coverage.html":{},"overview.html":{}}}],["historytype",{"_index":621,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"injectables/PersonalityService.html":{},"miscellaneous/enumerations.html":{}}}],["historytype.create",{"_index":663,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["historytype.delete",{"_index":680,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["historytype.update",{"_index":942,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["holder",{"_index":3227,"title":{},"body":{"license.html":{}}}],["holders",{"_index":3182,"title":{},"body":{"license.html":{}}}],["home",{"_index":1258,"title":{},"body":{"controllers/HomeController.html":{}}}],["home.controller",{"_index":1273,"title":{},"body":{"modules/HomeModule.html":{}}}],["home/home.module",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["homecontroller",{"_index":1244,"title":{"controllers/HomeController.html":{}},"body":{"controllers/HomeController.html":{},"modules/HomeModule.html":{},"coverage.html":{}}}],["homemodule",{"_index":55,"title":{"modules/HomeModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HomeModule.html":{},"modules.html":{},"overview.html":{}}}],["hook",{"_index":2542,"title":{},"body":{"dependencies.html":{}}}],["hope",{"_index":3438,"title":{},"body":{"license.html":{}}}],["host",{"_index":1102,"title":{},"body":{"injectables/EmailService.html":{},"classes/NotFoundFilter.html":{},"controllers/RootController.html":{}}}],["host.switchtohttp",{"_index":1337,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["hostname",{"_index":1921,"title":{},"body":{"injectables/SitemapService.html":{}}}],["hosts",{"_index":3094,"title":{},"body":{"license.html":{}}}],["host}/sitemap.xml",{"_index":1827,"title":{},"body":{"controllers/RootController.html":{}}}],["household",{"_index":3116,"title":{},"body":{"license.html":{}}}],["html",{"_index":1091,"title":{},"body":{"injectables/EmailService.html":{},"dependencies.html":{}}}],["http://localhost:3000",{"_index":2605,"title":{},"body":{"index.html":{}}}],["httpcontext",{"_index":1870,"title":{},"body":{"guards/SessionGuard.html":{},"miscellaneous/variables.html":{}}}],["httpcontext.getrequest",{"_index":1872,"title":{},"body":{"guards/SessionGuard.html":{},"miscellaneous/variables.html":{}}}],["httpcontext.getresponse",{"_index":1873,"title":{},"body":{"guards/SessionGuard.html":{}}}],["httpmodule",{"_index":151,"title":{},"body":{"modules/CaptchaModule.html":{},"modules/ClaimRevisionModule.html":{}}}],["https://${wikilang.replace",{"_index":2381,"title":{},"body":{"injectables/WikidataService.html":{}}}],["https://commons.wikimedia.org/w/api.php",{"_index":2402,"title":{},"body":{"injectables/WikidataService.html":{}}}],["https://console.ory.sh/login",{"_index":2619,"title":{},"body":{"index.html":{}}}],["https://fsf.org",{"_index":2675,"title":{},"body":{"license.html":{}}}],["https://github.com//aletheia",{"_index":2591,"title":{},"body":{"index.html":{}}}],["https://google.com/ping?sitemap=${hostname}/sitemap.xml",{"_index":1958,"title":{},"body":{"injectables/SitemapService.html":{}}}],["https://medium.com/javascript",{"_index":2178,"title":{},"body":{"injectables/UtilService.html":{}}}],["https://mongoosejs.com/docs/populate.html#dynamic",{"_index":1971,"title":{},"body":{"classes/Source.html":{}}}],["https://schemas.ory.sh/presets/kratos/identity.email.schema.json",{"_index":2637,"title":{},"body":{"index.html":{}}}],["https://www.gnu.org/licenses",{"_index":3459,"title":{},"body":{"license.html":{}}}],["https://www.gnu.org/licenses/why",{"_index":3469,"title":{},"body":{"license.html":{}}}],["https://www.google.com/recaptcha/api",{"_index":187,"title":{},"body":{"injectables/CaptchaService.html":{}}}],["httpservice",{"_index":167,"title":{},"body":{"injectables/CaptchaService.html":{}}}],["hypothetical",{"_index":3451,"title":{},"body":{"license.html":{}}}],["i18n",{"_index":2233,"title":{},"body":{"controllers/ViewController.html":{}}}],["i18next",{"_index":2521,"title":{},"body":{"dependencies.html":{}}}],["icons",{"_index":2510,"title":{},"body":{"dependencies.html":{}}}],["id",{"_index":508,"title":{},"body":{"controllers/ClaimReviewController-1.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["identifiable",{"_index":3319,"title":{},"body":{"license.html":{}}}],["identifier",{"_index":2413,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["identity",{"_index":2148,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["identityid",{"_index":1382,"title":{},"body":{"injectables/OryService.html":{}}}],["ids",{"_index":2343,"title":{},"body":{"injectables/WikidataService.html":{}}}],["if(newpersonalitybody.name",{"_index":1737,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["if(personalityexists",{"_index":1699,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["if(revisionid",{"_index":953,"title":{},"body":{"injectables/ClaimService.html":{}}}],["ignore",{"_index":339,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"injectables/UsersService.html":{}}}],["iiprop",{"_index":2406,"title":{},"body":{"injectables/WikidataService.html":{}}}],["iiurlwidth",{"_index":2407,"title":{},"body":{"injectables/WikidataService.html":{}}}],["image",{"_index":1035,"title":{},"body":{"classes/CreatePersonality.html":{},"injectables/WikidataService.html":{}}}],["imageinfo",{"_index":2405,"title":{},"body":{"injectables/WikidataService.html":{}}}],["imagesize",{"_index":2319,"title":{},"body":{"injectables/WikidataService.html":{}}}],["imagetitle",{"_index":2321,"title":{},"body":{"injectables/WikidataService.html":{}}}],["implement",{"_index":2900,"title":{},"body":{"license.html":{}}}],["implementation",{"_index":2901,"title":{},"body":{"license.html":{}}}],["implements",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/GetLanguageMiddleware.html":{},"injectables/JsonBodyMiddleware.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"guards/SessionGuard.html":{},"injectables/ViewService.html":{}}}],["implied",{"_index":3346,"title":{},"body":{"license.html":{}}}],["import",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"modules/CaptchaModule.html":{},"injectables/CaptchaService.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimReviewTask.html":{},"modules/ClaimReviewTaskModule.html":{},"injectables/ClaimReviewTaskService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreateClaimReviewTaskDTO.html":{},"classes/CreatePersonality.html":{},"injectables/DisableBodyParserMiddleware.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/GetClaimsDTO.html":{},"injectables/GetLanguageMiddleware.html":{},"classes/GetPersonalities.html":{},"classes/GetTasksDTO.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/JsonBodyMiddleware.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"modules/OryModule.html":{},"injectables/OryService.html":{},"classes/Paragraph.html":{},"modules/ParagraphModule.html":{},"injectables/ParagraphService.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"classes/Report.html":{},"controllers/ReportController.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"controllers/RootController.html":{},"classes/Sentence.html":{},"modules/SentenceModule.html":{},"injectables/SentenceService.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"classes/Speech.html":{},"modules/SpeechModule.html":{},"injectables/SpeechService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimDTO.html":{},"classes/UpdateClaimReviewTaskDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"dependencies.html":{},"license.html":{}}}],["importing",{"_index":3287,"title":{},"body":{"license.html":{}}}],["imports",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"modules/CaptchaModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimReviewTaskModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/HomeModule.html":{},"modules/OryModule.html":{},"modules/ParagraphModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"modules/ReportModule.html":{},"modules/SentenceModule.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/SpeechModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{}}}],["impose",{"_index":3208,"title":{},"body":{"license.html":{}}}],["imposed",{"_index":3348,"title":{},"body":{"license.html":{}}}],["improve",{"_index":1940,"title":{},"body":{"injectables/SitemapService.html":{}}}],["inability",{"_index":3401,"title":{},"body":{"license.html":{}}}],["inaccurate",{"_index":3404,"title":{},"body":{"license.html":{}}}],["inc",{"_index":2674,"title":{},"body":{"license.html":{}}}],["incidental",{"_index":3398,"title":{},"body":{"license.html":{}}}],["include",{"_index":2891,"title":{},"body":{"license.html":{}}}],["included",{"_index":1401,"title":{},"body":{"injectables/OryService.html":{},"license.html":{}}}],["includes",{"_index":2843,"title":{},"body":{"license.html":{}}}],["including",{"_index":2913,"title":{},"body":{"license.html":{}}}],["inclusion",{"_index":3053,"title":{},"body":{"license.html":{}}}],["incompatible",{"_index":2764,"title":{},"body":{"license.html":{}}}],["incorporating",{"_index":3460,"title":{},"body":{"license.html":{}}}],["incorporation",{"_index":3119,"title":{},"body":{"license.html":{}}}],["increment",{"_index":790,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["inc|ltd|jr|sr|co",{"_index":1509,"title":{},"body":{"injectables/ParserService.html":{}}}],["indemnification",{"_index":3204,"title":{},"body":{"license.html":{}}}],["independent",{"_index":3041,"title":{},"body":{"license.html":{}}}],["index",{"_index":157,"title":{"index.html":{}},"body":{"injectables/CaptchaService.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimReviewTask.html":{},"injectables/ClaimReviewTaskService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreateClaimReviewTaskDTO.html":{},"classes/CreatePersonality.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/EmailService.html":{},"classes/GetClaimsDTO.html":{},"injectables/GetLanguageMiddleware.html":{},"classes/GetPersonalities.html":{},"classes/GetTasksDTO.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"injectables/JsonBodyMiddleware.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"injectables/OryService.html":{},"classes/Paragraph.html":{},"injectables/ParagraphService.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"classes/Report.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"controllers/RootController.html":{},"classes/Sentence.html":{},"injectables/SentenceService.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"classes/Speech.html":{},"injectables/SpeechService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimReviewTaskDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexof(v",{"_index":1777,"title":{},"body":{"classes/Report.html":{}}}],["indicate",{"_index":3257,"title":{},"body":{"license.html":{}}}],["indicating",{"_index":3219,"title":{},"body":{"license.html":{}}}],["individual",{"_index":3051,"title":{},"body":{"license.html":{}}}],["individuals",{"_index":2773,"title":{},"body":{"license.html":{}}}],["industrial",{"_index":3134,"title":{},"body":{"license.html":{}}}],["info",{"_index":3,"title":{},"body":{"modules/AppModule.html":{},"modules/CaptchaModule.html":{},"injectables/CaptchaService.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimReviewTask.html":{},"modules/ClaimReviewTaskModule.html":{},"injectables/ClaimReviewTaskService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreateClaimReviewTaskDTO.html":{},"classes/CreatePersonality.html":{},"injectables/DisableBodyParserMiddleware.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/GetClaimsDTO.html":{},"injectables/GetLanguageMiddleware.html":{},"classes/GetPersonalities.html":{},"classes/GetTasksDTO.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/JsonBodyMiddleware.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"modules/OryModule.html":{},"injectables/OryService.html":{},"classes/Paragraph.html":{},"modules/ParagraphModule.html":{},"injectables/ParagraphService.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"classes/Report.html":{},"controllers/ReportController.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"controllers/RootController.html":{},"classes/Sentence.html":{},"modules/SentenceModule.html":{},"injectables/SentenceService.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"classes/Speech.html":{},"modules/SpeechModule.html":{},"injectables/SpeechService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimDTO.html":{},"classes/UpdateClaimReviewTaskDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["inform",{"_index":3103,"title":{},"body":{"license.html":{}}}],["information",{"_index":3140,"title":{},"body":{"license.html":{}}}],["infringe",{"_index":3255,"title":{},"body":{"license.html":{}}}],["infringed",{"_index":3284,"title":{},"body":{"license.html":{}}}],["infringement",{"_index":2836,"title":{},"body":{"license.html":{}}}],["initapp",{"_index":2441,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["initiate",{"_index":3278,"title":{},"body":{"license.html":{}}}],["inject",{"_index":911,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["inject(request",{"_index":915,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["injectable",{"_index":154,"title":{"injectables/CaptchaService.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/EmailService.html":{},"injectables/GetLanguageMiddleware.html":{},"injectables/HistoryService.html":{},"injectables/JsonBodyMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"injectables/OryService.html":{},"injectables/ParagraphService.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"injectables/ReportService.html":{},"injectables/SentenceService.html":{},"injectables/SitemapService.html":{},"injectables/SourceService.html":{},"injectables/SpeechService.html":{},"injectables/StatsService.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{}},"body":{"injectables/CaptchaService.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/EmailService.html":{},"injectables/GetLanguageMiddleware.html":{},"injectables/HistoryService.html":{},"injectables/JsonBodyMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"injectables/OryService.html":{},"injectables/ParagraphService.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"injectables/ReportService.html":{},"injectables/SentenceService.html":{},"guards/SessionGuard.html":{},"injectables/SitemapService.html":{},"injectables/SourceService.html":{},"injectables/SpeechService.html":{},"injectables/StatsService.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{},"coverage.html":{}}}],["injectables",{"_index":155,"title":{},"body":{"injectables/CaptchaService.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/EmailService.html":{},"injectables/GetLanguageMiddleware.html":{},"injectables/HistoryService.html":{},"injectables/JsonBodyMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"injectables/OryService.html":{},"injectables/ParagraphService.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"injectables/ReportService.html":{},"injectables/SentenceService.html":{},"injectables/SitemapService.html":{},"injectables/SourceService.html":{},"injectables/SpeechService.html":{},"injectables/StatsService.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{},"overview.html":{}}}],["injectmodel",{"_index":619,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/ParagraphService.html":{},"injectables/PersonalityService.html":{},"injectables/ReportService.html":{},"injectables/SentenceService.html":{},"injectables/SourceService.html":{},"injectables/SpeechService.html":{},"injectables/UsersService.html":{},"injectables/WikidataService.html":{}}}],["injectmodel('history_model",{"_index":1235,"title":{},"body":{"injectables/HistoryService.html":{}}}],["injectmodel(claim.name",{"_index":916,"title":{},"body":{"injectables/ClaimService.html":{}}}],["injectmodel(claimreview.name",{"_index":623,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["injectmodel(claimreviewtask.name",{"_index":721,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["injectmodel(claimrevision.name",{"_index":839,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["injectmodel(paragraph.name",{"_index":1448,"title":{},"body":{"injectables/ParagraphService.html":{}}}],["injectmodel(personality.name",{"_index":1686,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["injectmodel(report.name",{"_index":1806,"title":{},"body":{"injectables/ReportService.html":{}}}],["injectmodel(sentence.name",{"_index":1853,"title":{},"body":{"injectables/SentenceService.html":{}}}],["injectmodel(source.name",{"_index":2013,"title":{},"body":{"injectables/SourceService.html":{}}}],["injectmodel(speech.name",{"_index":2043,"title":{},"body":{"injectables/SpeechService.html":{}}}],["injectmodel(user.name",{"_index":2138,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectmodel(wikidatacache.name",{"_index":2330,"title":{},"body":{"injectables/WikidataService.html":{}}}],["inputs",{"_index":336,"title":{},"body":{"controllers/ClaimController.html":{}}}],["inputs.personality",{"_index":340,"title":{},"body":{"controllers/ClaimController.html":{}}}],["insertone(usermock",{"_index":3600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inside",{"_index":2760,"title":{},"body":{"license.html":{}}}],["instalação",{"_index":2586,"title":{},"body":{"index.html":{}}}],["install",{"_index":2600,"title":{},"body":{"index.html":{},"license.html":{}}}],["installation",{"_index":3139,"title":{},"body":{"license.html":{}}}],["installed",{"_index":3158,"title":{},"body":{"license.html":{}}}],["instead",{"_index":3466,"title":{},"body":{"license.html":{}}}],["intact",{"_index":3012,"title":{},"body":{"license.html":{}}}],["intended",{"_index":2692,"title":{},"body":{"license.html":{}}}],["intention",{"_index":3001,"title":{},"body":{"license.html":{}}}],["interaction",{"_index":2853,"title":{},"body":{"license.html":{}}}],["interactive",{"_index":2857,"title":{},"body":{"license.html":{}}}],["interchange",{"_index":3065,"title":{},"body":{"license.html":{}}}],["interest",{"_index":3272,"title":{},"body":{"license.html":{}}}],["interface",{"_index":114,"title":{"interfaces/UserDocument.html":{}},"body":{"modules/AppModule.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"coverage.html":{},"license.html":{},"overview.html":{}}}],["interfaces",{"_index":2089,"title":{},"body":{"interfaces/UserDocument.html":{},"license.html":{}}}],["interfered",{"_index":3148,"title":{},"body":{"license.html":{}}}],["interpretation",{"_index":3412,"title":{},"body":{"license.html":{}}}],["interpreter",{"_index":2910,"title":{},"body":{"license.html":{}}}],["intimate",{"_index":2929,"title":{},"body":{"license.html":{}}}],["invalidate",{"_index":3036,"title":{},"body":{"license.html":{}}}],["ip",{"_index":1312,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["irrevocable",{"_index":2940,"title":{},"body":{"license.html":{}}}],["isallowedprop",{"_index":1036,"title":{},"body":{"classes/CreatePersonality.html":{},"injectables/WikidataService.html":{}}}],["isalpha",{"_index":1130,"title":{},"body":{"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{}}}],["isalphanumeric",{"_index":1010,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["isarray",{"_index":999,"title":{},"body":{"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{}}}],["isarray()@arraynotempty",{"_index":994,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["isboolean",{"_index":1049,"title":{},"body":{"classes/CreatePersonality.html":{},"classes/GetPersonalities.html":{}}}],["isboolean()@isoptional",{"_index":1043,"title":{},"body":{"classes/CreatePersonality.html":{},"classes/GetPersonalities.html":{}}}],["isdatestring",{"_index":1000,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["isdeleted",{"_index":384,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["isenum",{"_index":998,"title":{},"body":{"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{}}}],["isenum(classificationenum",{"_index":1017,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["isenum(contentmodelenum",{"_index":1003,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["isint",{"_index":1131,"title":{},"body":{"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/GetTasksDTO.html":{}}}],["isn't",{"_index":644,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["isnotempty",{"_index":1001,"title":{},"body":{"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreateClaimReviewTaskDTO.html":{},"classes/CreatePersonality.html":{},"classes/UpdateClaimReviewTaskDTO.html":{}}}],["isnotempty()@isarray",{"_index":1014,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["isnotempty()@isobject",{"_index":1020,"title":{},"body":{"classes/CreateClaimReviewTaskDTO.html":{}}}],["isnotempty()@isstring",{"_index":986,"title":{},"body":{"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreateClaimReviewTaskDTO.html":{},"classes/UpdateClaimReviewTaskDTO.html":{}}}],["isnotempty()@isstring()@isdatestring",{"_index":990,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["isnotempty()@isstring()@isenum(classificationenum",{"_index":1008,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["isnotempty()@isstring()@isenum(contentmodelenum",{"_index":988,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["isnotempty()@isstring()@minlength(3",{"_index":1045,"title":{},"body":{"classes/CreatePersonality.html":{}}}],["isnumber",{"_index":1132,"title":{},"body":{"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/GetTasksDTO.html":{}}}],["isnumber()@isint()@min(0",{"_index":1125,"title":{},"body":{"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/GetTasksDTO.html":{}}}],["isnumber()@min(0",{"_index":1127,"title":{},"body":{"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/GetTasksDTO.html":{}}}],["isobject",{"_index":1024,"title":{},"body":{"classes/CreateClaimReviewTaskDTO.html":{}}}],["isoftdeletedmodel",{"_index":622,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["isoptional",{"_index":1050,"title":{},"body":{"classes/CreatePersonality.html":{},"classes/GetPersonalities.html":{}}}],["ispublic",{"_index":327,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"controllers/HomeController.html":{},"controllers/OryController.html":{},"controllers/PersonalityController.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ispublic()@get",{"_index":1254,"title":{},"body":{"controllers/HomeController.html":{}}}],["ispublic()@get('404",{"_index":2227,"title":{},"body":{"controllers/ViewController.html":{}}}],["ispublic()@get('_next",{"_index":2219,"title":{},"body":{"controllers/ViewController.html":{}}}],["ispublic()@get('about",{"_index":2235,"title":{},"body":{"controllers/ViewController.html":{}}}],["ispublic()@get('api/.ory",{"_index":1347,"title":{},"body":{"controllers/OryController.html":{}}}],["ispublic()@get('api/claim",{"_index":290,"title":{},"body":{"controllers/ClaimController.html":{}}}],["ispublic()@get('api/claim/:id",{"_index":283,"title":{},"body":{"controllers/ClaimController.html":{}}}],["ispublic()@get('api/claimreviewtask",{"_index":511,"title":{},"body":{"controllers/ClaimReviewController-1.html":{}}}],["ispublic()@get('api/health",{"_index":1813,"title":{},"body":{"controllers/RootController.html":{}}}],["ispublic()@get('api/personality",{"_index":1587,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["ispublic()@get('api/personality/:id",{"_index":1581,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["ispublic()@get('api/personality/:id/reviews",{"_index":1584,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["ispublic()@get('api/review/:id",{"_index":482,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["ispublic()@get('api/user",{"_index":2095,"title":{},"body":{"controllers/UsersController.html":{}}}],["ispublic()@get('code",{"_index":2222,"title":{},"body":{"controllers/ViewController.html":{}}}],["ispublic()@get('login",{"_index":2098,"title":{},"body":{"controllers/UsersController.html":{}}}],["ispublic()@get('personality",{"_index":1594,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["ispublic()@get('personality/:personalityslug/claim/:claimslug",{"_index":293,"title":{},"body":{"controllers/ClaimController.html":{}}}],["ispublic()@get('personality/:personalityslug/claim/:claimslug/sentence/:sentence_hash",{"_index":286,"title":{},"body":{"controllers/ClaimController.html":{}}}],["ispublic()@get('personality/:personalityslug/claim/:claimslug/sources",{"_index":302,"title":{},"body":{"controllers/ClaimController.html":{}}}],["ispublic()@get('personality/:slug",{"_index":1597,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["ispublic()@get('privacy",{"_index":2238,"title":{},"body":{"controllers/ViewController.html":{}}}],["ispublic()@get('robots.txt",{"_index":1817,"title":{},"body":{"controllers/RootController.html":{}}}],["ispublic()@get('sitemap.xml')@header('content",{"_index":1891,"title":{},"body":{"controllers/SitemapController.html":{}}}],["ispublic()@post('api/.ory",{"_index":1352,"title":{},"body":{"controllers/OryController.html":{}}}],["ispublished",{"_index":385,"title":{},"body":{"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"injectables/PersonalityService.html":{}}}],["isstring",{"_index":1002,"title":{},"body":{"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreateClaimReviewTaskDTO.html":{},"classes/CreatePersonality.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/GetTasksDTO.html":{},"classes/UpdateClaimReviewTaskDTO.html":{}}}],["isstring()@isalpha",{"_index":1122,"title":{},"body":{"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{}}}],["isstring()@isalphanumeric",{"_index":1006,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["isstring()@isoptional",{"_index":1039,"title":{},"body":{"classes/CreatePersonality.html":{},"classes/GetPersonalities.html":{}}}],["istestuser",{"_index":2174,"title":{},"body":{"injectables/UtilService.html":{}}}],["it's",{"_index":1170,"title":{},"body":{"classes/History.html":{}}}],["item",{"_index":2203,"title":{},"body":{"injectables/UtilService.html":{},"injectables/WikidataService.html":{},"license.html":{}}}],["item[property",{"_index":2200,"title":{},"body":{"injectables/UtilService.html":{}}}],["iterate",{"_index":676,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{}}}],["itself",{"_index":3163,"title":{},"body":{"license.html":{}}}],["js",{"_index":2515,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":1330,"title":{},"body":{"classes/NotFoundFilter.html":{},"injectables/WikidataService.html":{}}}],["jsonbodymiddleware",{"_index":95,"title":{"injectables/JsonBodyMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/JsonBodyMiddleware.html":{},"coverage.html":{}}}],["june",{"_index":2667,"title":{},"body":{"license.html":{}}}],["kanban",{"_index":553,"title":{},"body":{"controllers/ClaimReviewController-1.html":{}}}],["keep",{"_index":3011,"title":{},"body":{"license.html":{}}}],["keeping",{"_index":905,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["kernel",{"_index":2903,"title":{},"body":{"license.html":{}}}],["key",{"_index":3171,"title":{},"body":{"license.html":{}}}],["keys",{"_index":3142,"title":{},"body":{"license.html":{}}}],["keywords",{"_index":3481,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":2849,"title":{},"body":{"license.html":{}}}],["kinds",{"_index":2684,"title":{},"body":{"license.html":{}}}],["know",{"_index":2715,"title":{},"body":{"license.html":{}}}],["knowingly",{"_index":3309,"title":{},"body":{"license.html":{}}}],["knowledge",{"_index":3317,"title":{},"body":{"license.html":{}}}],["label",{"_index":2353,"title":{},"body":{"injectables/WikidataService.html":{}}}],["labels",{"_index":2356,"title":{},"body":{"injectables/WikidataService.html":{}}}],["language",{"_index":1121,"title":{},"body":{"classes/GetClaimsDTO.html":{},"injectables/GetLanguageMiddleware.html":{},"classes/GetPersonalities.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"dependencies.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["languagefallback",{"_index":2387,"title":{},"body":{"injectables/WikidataService.html":{}}}],["languagevariantmap",{"_index":2328,"title":{},"body":{"injectables/WikidataService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["languagevariantmap[language",{"_index":2384,"title":{},"body":{"injectables/WikidataService.html":{}}}],["language}wiki",{"_index":2385,"title":{},"body":{"injectables/WikidataService.html":{}}}],["larger",{"_index":3045,"title":{},"body":{"license.html":{}}}],["later",{"_index":3373,"title":{},"body":{"license.html":{}}}],["latest",{"_index":1229,"title":{},"body":{"injectables/HistoryService.html":{}}}],["latestchange",{"_index":1221,"title":{},"body":{"injectables/HistoryService.html":{}}}],["latestrevision",{"_index":206,"title":{},"body":{"classes/Claim.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["law",{"_index":2838,"title":{},"body":{"license.html":{}}}],["laws",{"_index":2810,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":3282,"title":{},"body":{"license.html":{}}}],["lean",{"_index":843,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["legal",{"_index":2744,"title":{},"body":{"license.html":{}}}],["length",{"_index":1322,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["less",{"_index":2528,"title":{},"body":{"dependencies.html":{}}}],["lesser",{"_index":3465,"title":{},"body":{"license.html":{}}}],["let's",{"_index":787,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["lgpl.html",{"_index":3470,"title":{},"body":{"license.html":{}}}],["liability",{"_index":3185,"title":{},"body":{"license.html":{}}}],["liable",{"_index":2835,"title":{},"body":{"license.html":{}}}],["libraries",{"_index":2889,"title":{},"body":{"license.html":{}}}],["library",{"_index":3112,"title":{},"body":{"license.html":{}}}],["license",{"_index":2662,"title":{"license.html":{}},"body":{"license.html":{},"properties.html":{}}}],["licensed",{"_index":2814,"title":{},"body":{"license.html":{}}}],["licensee",{"_index":2817,"title":{},"body":{"license.html":{}}}],["licensees",{"_index":2819,"title":{},"body":{"license.html":{}}}],["licenses",{"_index":2686,"title":{},"body":{"license.html":{}}}],["licensing",{"_index":3259,"title":{},"body":{"license.html":{}}}],["licensors",{"_index":3196,"title":{},"body":{"license.html":{}}}],["likewise",{"_index":3251,"title":{},"body":{"license.html":{}}}],["limit",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["limit(pagesize",{"_index":725,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{},"injectables/SourceService.html":{}}}],["limitation",{"_index":3394,"title":{},"body":{"license.html":{}}}],["limited",{"_index":3383,"title":{},"body":{"license.html":{}}}],["limiting",{"_index":3184,"title":{},"body":{"license.html":{}}}],["line",{"_index":671,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"license.html":{}}}],["link",{"_index":670,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/Source.html":{},"dependencies.html":{},"license.html":{}}}],["linked",{"_index":2925,"title":{},"body":{"license.html":{}}}],["linking",{"_index":3463,"title":{},"body":{"license.html":{}}}],["list",{"_index":1638,"title":{},"body":{"controllers/PersonalityController.html":{},"license.html":{}}}],["listall",{"_index":257,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["listall(@query",{"_index":343,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{}}}],["listall(getclaimsdto",{"_index":288,"title":{},"body":{"controllers/ClaimController.html":{}}}],["listall(getpersonalities",{"_index":1586,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["listall(page",{"_index":716,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["listening",{"_index":3546,"title":{},"body":{"miscellaneous/variables.html":{}}}],["literal",{"_index":830,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"miscellaneous/typealiases.html":{}}}],["litigation",{"_index":3279,"title":{},"body":{"license.html":{}}}],["load",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"injectables/ViewService.html":{}}}],["loaded",{"_index":3551,"title":{},"body":{"miscellaneous/variables.html":{}}}],["loading",{"_index":3550,"title":{},"body":{"miscellaneous/variables.html":{}}}],["local",{"_index":3413,"title":{},"body":{"license.html":{}}}],["localfield",{"_index":239,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"classes/Personality.html":{},"classes/Report.html":{}}}],["locally:git",{"_index":2590,"title":{},"body":{"index.html":{}}}],["log",{"_index":1284,"title":{},"body":{"classes/Logger.html":{}}}],["log(message",{"_index":1295,"title":{},"body":{"classes/Logger.html":{}}}],["logger",{"_index":161,"title":{"classes/Logger.html":{}},"body":{"injectables/CaptchaService.html":{},"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ViewService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger(\"captchaservice",{"_index":182,"title":{},"body":{"injectables/CaptchaService.html":{}}}],["logger(\"claimcontroller",{"_index":335,"title":{},"body":{"controllers/ClaimController.html":{}}}],["logger(\"claimreviewservice",{"_index":616,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["logger(\"claimservice",{"_index":829,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{}}}],["logger(\"emailservice",{"_index":1083,"title":{},"body":{"injectables/EmailService.html":{}}}],["logger(\"historycontroller",{"_index":1181,"title":{},"body":{"controllers/HistoryController.html":{}}}],["logger(\"historyservice",{"_index":1233,"title":{},"body":{"injectables/HistoryService.html":{}}}],["logger(\"personalitycontroller",{"_index":1605,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["logger(\"personalityservice",{"_index":1682,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["logger(\"sitemapservice",{"_index":1924,"title":{},"body":{"injectables/SitemapService.html":{}}}],["logger(\"sourcecontroller",{"_index":1989,"title":{},"body":{"controllers/SourceController.html":{}}}],["logger(\"userservice",{"_index":2136,"title":{},"body":{"injectables/UsersService.html":{}}}],["logger(\"viewservice",{"_index":2266,"title":{},"body":{"injectables/ViewService.html":{}}}],["logger('http",{"_index":1310,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["logger(options.logger",{"_index":3531,"title":{},"body":{"miscellaneous/variables.html":{}}}],["loggermiddleware",{"_index":79,"title":{"injectables/LoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["loggerservice",{"_index":1281,"title":{},"body":{"classes/Logger.html":{}}}],["logging",{"_index":1883,"title":{},"body":{"guards/SessionGuard.html":{}}}],["logic",{"_index":813,"title":{},"body":{"modules/ClaimRevisionModule.html":{}}}],["login",{"_index":1935,"title":{},"body":{"injectables/SitemapService.html":{},"controllers/UsersController.html":{}}}],["long",{"_index":2953,"title":{},"body":{"license.html":{}}}],["lookup",{"_index":625,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["loop",{"_index":1937,"title":{},"body":{"injectables/SitemapService.html":{},"miscellaneous/variables.html":{}}}],["loss",{"_index":3402,"title":{},"body":{"license.html":{}}}],["losses",{"_index":3405,"title":{},"body":{"license.html":{}}}],["lower",{"_index":847,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{}}}],["machine",{"_index":685,"title":{},"body":{"classes/ClaimReviewTask.html":{},"injectables/ClaimReviewTaskService.html":{},"classes/CreateClaimReviewTaskDTO.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["machine.context.claimreview",{"_index":733,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["machine.context.claimreview.claim",{"_index":731,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["machine.context.claimreview.personality",{"_index":730,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["machine.context.reviewdata.userid",{"_index":728,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["machine.context.reviewdata.userid.name",{"_index":737,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["machine.value",{"_index":536,"title":{},"body":{"controllers/ClaimReviewController-1.html":{},"injectables/ClaimReviewTaskService.html":{}}}],["made",{"_index":1226,"title":{},"body":{"injectables/HistoryService.html":{},"license.html":{}}}],["mail",{"_index":1115,"title":{},"body":{"injectables/EmailService.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["maintain",{"_index":3089,"title":{},"body":{"license.html":{}}}],["major",{"_index":2895,"title":{},"body":{"license.html":{}}}],["make",{"_index":2696,"title":{},"body":{"license.html":{}}}],["makes",{"_index":2972,"title":{},"body":{"license.html":{}}}],["making",{"_index":2650,"title":{},"body":{"index.html":{},"license.html":{}}}],["manner",{"_index":3295,"title":{},"body":{"license.html":{}}}],["manufacturer",{"_index":2762,"title":{},"body":{"license.html":{}}}],["many",{"_index":1216,"title":{},"body":{"injectables/HistoryService.html":{}}}],["map",{"_index":2197,"title":{},"body":{"injectables/UtilService.html":{}}}],["march",{"_index":3343,"title":{},"body":{"license.html":{}}}],["markdown",{"_index":2545,"title":{},"body":{"dependencies.html":{}}}],["marked",{"_index":2754,"title":{},"body":{"license.html":{}}}],["marks",{"_index":3202,"title":{},"body":{"license.html":{}}}],["masks",{"_index":2812,"title":{},"body":{"license.html":{}}}],["match",{"_index":578,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/UsersService.html":{}}}],["matches",{"_index":950,"title":{},"body":{"injectables/ClaimService.html":{}}}],["matching",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"modules/CaptchaModule.html":{},"injectables/CaptchaService.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimReviewTask.html":{},"modules/ClaimReviewTaskModule.html":{},"injectables/ClaimReviewTaskService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreateClaimReviewTaskDTO.html":{},"classes/CreatePersonality.html":{},"injectables/DisableBodyParserMiddleware.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/GetClaimsDTO.html":{},"injectables/GetLanguageMiddleware.html":{},"classes/GetPersonalities.html":{},"classes/GetTasksDTO.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/JsonBodyMiddleware.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"modules/OryModule.html":{},"injectables/OryService.html":{},"classes/Paragraph.html":{},"modules/ParagraphModule.html":{},"injectables/ParagraphService.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"classes/Report.html":{},"controllers/ReportController.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"controllers/RootController.html":{},"classes/Sentence.html":{},"modules/SentenceModule.html":{},"injectables/SentenceService.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"classes/Speech.html":{},"modules/SpeechModule.html":{},"injectables/SpeechService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimDTO.html":{},"classes/UpdateClaimReviewTaskDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":2961,"title":{},"body":{"license.html":{}}}],["materially",{"_index":3164,"title":{},"body":{"license.html":{}}}],["math.ceil",{"_index":1760,"title":{},"body":{"injectables/PersonalityService.html":{},"controllers/SourceController.html":{}}}],["math.ceil(totalchanges",{"_index":1190,"title":{},"body":{"controllers/HistoryController.html":{}}}],["math.ceil(totalclaims",{"_index":358,"title":{},"body":{"controllers/ClaimController.html":{}}}],["math.ceil(totaltasks",{"_index":539,"title":{},"body":{"controllers/ClaimReviewController-1.html":{}}}],["maxlength",{"_index":2644,"title":{},"body":{"index.html":{}}}],["maybe",{"_index":1948,"title":{},"body":{"injectables/SitemapService.html":{}}}],["md5",{"_index":1492,"title":{},"body":{"injectables/ParserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["meaning",{"_index":3212,"title":{},"body":{"license.html":{}}}],["means",{"_index":2809,"title":{},"body":{"license.html":{}}}],["measure",{"_index":2980,"title":{},"body":{"license.html":{}}}],["measures",{"_index":2994,"title":{},"body":{"license.html":{}}}],["medium",{"_index":3007,"title":{},"body":{"license.html":{}}}],["meet",{"_index":3023,"title":{},"body":{"license.html":{}}}],["meets",{"_index":2874,"title":{},"body":{"license.html":{}}}],["menu",{"_index":2872,"title":{},"body":{"license.html":{}}}],["merchantability",{"_index":3384,"title":{},"body":{"license.html":{}}}],["mere",{"_index":2852,"title":{},"body":{"license.html":{}}}],["merge",{"_index":2181,"title":{},"body":{"injectables/UtilService.html":{}}}],["mergeobjectsinunique",{"_index":2167,"title":{},"body":{"injectables/UtilService.html":{}}}],["mergeobjectsinunique(array",{"_index":2175,"title":{},"body":{"injectables/UtilService.html":{}}}],["merging",{"_index":3268,"title":{},"body":{"license.html":{}}}],["message",{"_index":772,"title":{},"body":{"classes/ClaimRevision.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"controllers/PersonalityController.html":{},"classes/Report.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{}}}],["met",{"_index":2942,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":2553,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":1313,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/OryService.html":{},"controllers/ViewController.html":{}}}],["methods",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"injectables/CaptchaService.html":{},"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/EmailService.html":{},"injectables/GetLanguageMiddleware.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"injectables/JsonBodyMiddleware.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"injectables/OryService.html":{},"injectables/ParagraphService.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"controllers/RootController.html":{},"injectables/SentenceService.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"injectables/SpeechService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["metrics",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["middleware/disable",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["middleware/json",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["middleware/language.middleware",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["middleware/logger.middleware",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["middlewareconsumer",{"_index":11,"title":{},"body":{"modules/AppModule.html":{}}}],["migrated",{"_index":815,"title":{},"body":{"modules/ClaimRevisionModule.html":{}}}],["min",{"_index":1133,"title":{},"body":{"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/GetTasksDTO.html":{}}}],["min(0",{"_index":1134,"title":{},"body":{"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/GetTasksDTO.html":{}}}],["minlength",{"_index":1051,"title":{},"body":{"classes/CreatePersonality.html":{}}}],["minlength(3",{"_index":1052,"title":{},"body":{"classes/CreatePersonality.html":{}}}],["miscellaneous",{"_index":2569,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["misleading",{"_index":1773,"title":{},"body":{"classes/Report.html":{},"miscellaneous/enumerations.html":{}}}],["misrepresentation",{"_index":3193,"title":{},"body":{"license.html":{}}}],["mit",{"_index":3484,"title":{},"body":{"properties.html":{}}}],["mode",{"_index":3138,"title":{},"body":{"license.html":{}}}],["model",{"_index":617,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/ParagraphService.html":{},"injectables/PersonalityService.html":{},"injectables/ReportService.html":{},"injectables/SentenceService.html":{},"injectables/SourceService.html":{},"injectables/SpeechService.html":{},"injectables/UsersService.html":{},"injectables/WikidataService.html":{},"license.html":{}}}],["modeyarn",{"_index":2603,"title":{},"body":{"index.html":{}}}],["modification",{"_index":2806,"title":{},"body":{"license.html":{}}}],["modifications",{"_index":2877,"title":{},"body":{"license.html":{}}}],["modified",{"_index":2753,"title":{},"body":{"license.html":{}}}],["modifies",{"_index":3027,"title":{},"body":{"license.html":{}}}],["modify",{"_index":2727,"title":{},"body":{"license.html":{}}}],["modifying",{"_index":2841,"title":{},"body":{"license.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/CaptchaModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimReviewTaskModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/HomeModule.html":{},"modules/OryModule.html":{},"modules/ParagraphModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"modules/ReportModule.html":{},"modules/SentenceModule.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/SpeechModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CaptchaModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"modules/ClaimReviewTaskModule.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimService.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/HomeModule.html":{},"modules/OryModule.html":{},"modules/ParagraphModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"modules/ReportModule.html":{},"modules/SentenceModule.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/SpeechModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/CaptchaModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimReviewTaskModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/HomeModule.html":{},"modules/OryModule.html":{},"modules/ParagraphModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"modules/ReportModule.html":{},"modules/SentenceModule.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/SpeechModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{},"modules.html":{},"overview.html":{}}}],["mongo",{"_index":2594,"title":{},"body":{"index.html":{}}}],["mongoclient(uri",{"_index":3596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongodb",{"_index":791,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["mongoerror",{"_index":1611,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["mongoose",{"_index":222,"title":{},"body":{"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimReviewTask.html":{},"injectables/ClaimReviewTaskService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"classes/Paragraph.html":{},"injectables/ParagraphService.html":{},"classes/Personality.html":{},"injectables/PersonalityService.html":{},"classes/Report.html":{},"injectables/ReportService.html":{},"classes/Sentence.html":{},"injectables/SentenceService.html":{},"classes/Source.html":{},"injectables/SourceService.html":{},"classes/Speech.html":{},"injectables/SpeechService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"injectables/UsersService.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{},"dependencies.html":{}}}],["mongoose.date",{"_index":1158,"title":{},"body":{"classes/History.html":{}}}],["mongoose.document",{"_index":230,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimReviewTask.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Paragraph.html":{},"classes/Personality.html":{},"classes/Report.html":{},"classes/Sentence.html":{},"classes/Source.html":{},"classes/Speech.html":{}}}],["mongoose.types.objectid",{"_index":235,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Paragraph.html":{},"classes/Report.html":{},"classes/Source.html":{},"classes/Speech.html":{}}}],["mongoose.types.objectid(query.personality",{"_index":341,"title":{},"body":{"controllers/ClaimController.html":{}}}],["mongoosemodule",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimReviewTaskModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/HistoryModule.html":{},"modules/ParagraphModule.html":{},"modules/PersonalityModule.html":{},"modules/ReportModule.html":{},"modules/SentenceModule.html":{},"modules/SourceModule.html":{},"modules/SpeechModule.html":{},"modules/UsersModule.html":{},"modules/WikidataModule.html":{}}}],["mongoosemodule.forfeature",{"_index":446,"title":{},"body":{"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimReviewTaskModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/HistoryModule.html":{},"modules/ParagraphModule.html":{},"modules/PersonalityModule.html":{},"modules/ReportModule.html":{},"modules/SentenceModule.html":{},"modules/SourceModule.html":{},"modules/SpeechModule.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["mongoosemodule.forfeatureasync",{"_index":2296,"title":{},"body":{"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["mongoosemodule.forroot",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":3072,"title":{},"body":{"license.html":{}}}],["moreover",{"_index":3239,"title":{},"body":{"license.html":{}}}],["mr|mrs|ms|dr|he\\s|she\\s|it\\s|they\\s|their\\s|our\\s|we\\s|but\\s|however\\s|that\\s|this\\s|wherever)/g",{"_index":1511,"title":{},"body":{"injectables/ParserService.html":{}}}],["mr|st|mrs|ms|dr)[.]/g",{"_index":1505,"title":{},"body":{"injectables/ParserService.html":{},"miscellaneous/variables.html":{}}}],["name",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"injectables/CaptchaService.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"modules/ClaimReviewTaskModule.html":{},"injectables/ClaimReviewTaskService.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreatePersonality.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/EmailService.html":{},"injectables/GetLanguageMiddleware.html":{},"classes/GetPersonalities.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"injectables/JsonBodyMiddleware.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"injectables/OryService.html":{},"modules/ParagraphModule.html":{},"injectables/ParagraphService.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/ReportController.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"controllers/RootController.html":{},"modules/SentenceModule.html":{},"injectables/SentenceService.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"modules/SpeechModule.html":{},"injectables/SpeechService.html":{},"injectables/StatsService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["names",{"_index":3195,"title":{},"body":{"license.html":{}}}],["nature",{"_index":3042,"title":{},"body":{"license.html":{}}}],["ndisallow",{"_index":1824,"title":{},"body":{"controllers/RootController.html":{}}}],["necessary",{"_index":1232,"title":{},"body":{"injectables/HistoryService.html":{},"license.html":{}}}],["need",{"_index":2617,"title":{},"body":{"index.html":{},"license.html":{}}}],["needed",{"_index":2786,"title":{},"body":{"license.html":{}}}],["nestfactory.create",{"_index":3529,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nestjs/axios",{"_index":152,"title":{},"body":{"modules/CaptchaModule.html":{},"injectables/CaptchaService.html":{},"modules/ClaimRevisionModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"modules/CaptchaModule.html":{},"injectables/CaptchaService.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"modules/ClaimReviewTaskModule.html":{},"injectables/ClaimReviewTaskService.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/DisableBodyParserMiddleware.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GetLanguageMiddleware.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/JsonBodyMiddleware.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"modules/OryModule.html":{},"injectables/OryService.html":{},"modules/ParagraphModule.html":{},"injectables/ParagraphService.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/ReportController.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"controllers/RootController.html":{},"modules/SentenceModule.html":{},"injectables/SentenceService.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"modules/SpeechModule.html":{},"injectables/SpeechService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/CaptchaModule.html":{},"injectables/CaptchaService.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"modules/HistoryModule.html":{},"controllers/OryController.html":{},"modules/OryModule.html":{},"injectables/OryService.html":{},"modules/ReportModule.html":{},"guards/SessionGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":2073,"title":{},"body":{"classes/UpdateClaimDTO.html":{},"classes/UpdateClaimReviewTaskDTO.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"classes/Claim.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimReviewTask.html":{},"modules/ClaimReviewTaskModule.html":{},"injectables/ClaimReviewTaskService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"classes/Paragraph.html":{},"modules/ParagraphModule.html":{},"injectables/ParagraphService.html":{},"classes/Personality.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"classes/Report.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"classes/Sentence.html":{},"modules/SentenceModule.html":{},"injectables/SentenceService.html":{},"classes/Source.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"classes/Speech.html":{},"modules/SpeechModule.html":{},"injectables/SpeechService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":2480,"title":{},"body":{"dependencies.html":{}}}],["nestjs/throttler",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":1059,"title":{},"body":{"injectables/DisableBodyParserMiddleware.html":{},"injectables/GetLanguageMiddleware.html":{},"injectables/JsonBodyMiddleware.html":{},"injectables/LoggerMiddleware.html":{}}}],["nestmodule",{"_index":29,"title":{},"body":{"modules/AppModule.html":{}}}],["network",{"_index":2854,"title":{},"body":{"license.html":{}}}],["new",{"_index":181,"title":{},"body":{"injectables/CaptchaService.html":{},"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/OryService.html":{},"injectables/ParagraphService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"injectables/ReportService.html":{},"injectables/SentenceService.html":{},"guards/SessionGuard.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"injectables/SpeechService.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["newarray",{"_index":2196,"title":{},"body":{"injectables/UtilService.html":{}}}],["newarray.get(propertyvalue",{"_index":2204,"title":{},"body":{"injectables/UtilService.html":{}}}],["newarray.has(propertyvalue",{"_index":2201,"title":{},"body":{"injectables/UtilService.html":{}}}],["newarray.set(propertyvalue",{"_index":2202,"title":{},"body":{"injectables/UtilService.html":{}}}],["newclaim",{"_index":925,"title":{},"body":{"injectables/ClaimService.html":{}}}],["newclaim._id",{"_index":933,"title":{},"body":{"injectables/ClaimService.html":{}}}],["newclaim.latestrevision",{"_index":928,"title":{},"body":{"injectables/ClaimService.html":{}}}],["newclaim.save",{"_index":934,"title":{},"body":{"injectables/ClaimService.html":{}}}],["newclaim.slug",{"_index":930,"title":{},"body":{"injectables/ClaimService.html":{}}}],["newclaim.toobject",{"_index":935,"title":{},"body":{"injectables/ClaimService.html":{}}}],["newclaimreview",{"_index":657,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["newclaimreview._id",{"_index":661,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["newclaimreview.ispublished",{"_index":659,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["newclaimreview.save",{"_index":665,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["newclaimreviewtask",{"_index":520,"title":{},"body":{"controllers/ClaimReviewController-1.html":{},"injectables/ClaimReviewTaskService.html":{}}}],["newclaimreviewtask._id",{"_index":760,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["newclaimreviewtask.recaptcha",{"_index":547,"title":{},"body":{"controllers/ClaimReviewController-1.html":{}}}],["newclaimreviewtask.save",{"_index":746,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["newclaimreviewtaskbody",{"_index":718,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["newclaimreviewtaskbody.machine",{"_index":752,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["newclaimreviewtaskbody.machine.context.reviewdata.userid",{"_index":747,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["newclaimreviewtaskmachine",{"_index":749,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["newclaimreviewtaskmachine.context.claimreview",{"_index":755,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["newclaimreviewtaskmachine.context.reviewdata",{"_index":757,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["newclaimreviewtaskmachine.value",{"_index":753,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["newclaimrevision",{"_index":863,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{}}}],["newclaimrevision._id",{"_index":929,"title":{},"body":{"injectables/ClaimService.html":{}}}],["newclaimrevision.save",{"_index":870,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["newclaimrevision.slug",{"_index":931,"title":{},"body":{"injectables/ClaimService.html":{}}}],["newclaimrevision.toobject",{"_index":936,"title":{},"body":{"injectables/ClaimService.html":{}}}],["newhistory",{"_index":1238,"title":{},"body":{"injectables/HistoryService.html":{}}}],["newhistory.save",{"_index":1240,"title":{},"body":{"injectables/HistoryService.html":{}}}],["newparagraph",{"_index":1451,"title":{},"body":{"injectables/ParagraphService.html":{}}}],["newparagraph._id",{"_index":1453,"title":{},"body":{"injectables/ParagraphService.html":{}}}],["newpersonality",{"_index":1703,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["newpersonality._id",{"_index":1707,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["newpersonality.save",{"_index":1709,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["newpersonalitybody",{"_index":1677,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["newpersonalitybody.slug",{"_index":1738,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["newreport",{"_index":756,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{},"injectables/ReportService.html":{}}}],["news",{"_index":2585,"title":{},"body":{"index.html":{}}}],["newsentence",{"_index":1854,"title":{},"body":{"injectables/SentenceService.html":{}}}],["newsentence._id",{"_index":1856,"title":{},"body":{"injectables/SentenceService.html":{}}}],["newsentences",{"_index":1537,"title":{},"body":{"injectables/ParserService.html":{}}}],["newsentences.concat(semicolonsentences",{"_index":1551,"title":{},"body":{"injectables/ParserService.html":{}}}],["newspeech",{"_index":859,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["newspeech._id",{"_index":862,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["newuser",{"_index":2142,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuser.oryid",{"_index":2144,"title":{},"body":{"injectables/UsersService.html":{}}}],["newwikidatacache",{"_index":2336,"title":{},"body":{"injectables/WikidataService.html":{}}}],["newwikidatacache.save",{"_index":2338,"title":{},"body":{"injectables/WikidataService.html":{}}}],["next",{"_index":1057,"title":{},"body":{"injectables/DisableBodyParserMiddleware.html":{},"injectables/GetLanguageMiddleware.html":{},"injectables/JsonBodyMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"controllers/OryController.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"injectables/ViewService.html":{},"dependencies.html":{},"license.html":{}}}],["next(request",{"_index":1866,"title":{},"body":{"guards/SessionGuard.html":{}}}],["next/dist/server/next",{"_index":2269,"title":{},"body":{"injectables/ViewService.html":{}}}],["nextapirequest",{"_index":1345,"title":{},"body":{"controllers/OryController.html":{}}}],["nextapiresponse",{"_index":1346,"title":{},"body":{"controllers/OryController.html":{}}}],["nextfunction",{"_index":1136,"title":{},"body":{"injectables/GetLanguageMiddleware.html":{},"injectables/LoggerMiddleware.html":{}}}],["nextjs",{"_index":3617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nextserver",{"_index":2264,"title":{},"body":{"injectables/ViewService.html":{}}}],["nlp",{"_index":1494,"title":{},"body":{"injectables/ParserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["nlp(content",{"_index":1522,"title":{},"body":{"injectables/ParserService.html":{}}}],["nlp.extend(require('compromise",{"_index":1496,"title":{},"body":{"injectables/ParserService.html":{}}}],["nlpcontent",{"_index":1521,"title":{},"body":{"injectables/ParserService.html":{}}}],["nlpcontent.paragraphs",{"_index":1523,"title":{},"body":{"injectables/ParserService.html":{}}}],["nlpcontent.text(this.nlpoptions",{"_index":1524,"title":{},"body":{"injectables/ParserService.html":{}}}],["nlpoptions",{"_index":1461,"title":{},"body":{"injectables/ParserService.html":{}}}],["nodemailer",{"_index":1084,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["nodemailer.createtransport",{"_index":1101,"title":{},"body":{"injectables/EmailService.html":{}}}],["non",{"_index":2801,"title":{},"body":{"license.html":{}}}],["noncommercially",{"_index":3078,"title":{},"body":{"license.html":{}}}],["normal",{"_index":2893,"title":{},"body":{"license.html":{}}}],["normally",{"_index":3114,"title":{},"body":{"license.html":{}}}],["notfoundexception",{"_index":832,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/NotFoundFilter.html":{},"injectables/PersonalityService.html":{}}}],["notfoundfilter",{"_index":62,"title":{"classes/NotFoundFilter.html":{}},"body":{"modules/AppModule.html":{},"classes/NotFoundFilter.html":{},"coverage.html":{}}}],["nothing",{"_index":3252,"title":{},"body":{"license.html":{}}}],["notice",{"_index":2866,"title":{},"body":{"license.html":{}}}],["notices",{"_index":2860,"title":{},"body":{"license.html":{}}}],["notifies",{"_index":3240,"title":{},"body":{"license.html":{}}}],["notify",{"_index":3234,"title":{},"body":{"license.html":{}}}],["notwithstanding",{"_index":3180,"title":{},"body":{"license.html":{}}}],["now",{"_index":2654,"title":{},"body":{"index.html":{}}}],["null",{"_index":681,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":530,"title":{},"body":{"controllers/ClaimReviewController-1.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimService.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/GetTasksDTO.html":{},"injectables/ParserService.html":{},"license.html":{}}}],["numbered",{"_index":3372,"title":{},"body":{"license.html":{}}}],["o",{"_index":3574,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object",{"_index":592,"title":{},"body":{"injectables/ClaimReviewService.html":{},"classes/ClaimReviewTask.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"classes/Paragraph.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"classes/Sentence.html":{},"classes/WikidataCache.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["object.assign",{"_index":750,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{},"injectables/PersonalityService.html":{}}}],["object.assign(claim",{"_index":971,"title":{},"body":{"injectables/ClaimService.html":{}}}],["object.assign(parsedurl.query",{"_index":415,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["object.assign(personality",{"_index":1742,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["object.assign(sentence.props",{"_index":981,"title":{},"body":{"injectables/ClaimService.html":{}}}],["objectid",{"_index":647,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["objects",{"_index":2183,"title":{},"body":{"injectables/UtilService.html":{}}}],["obligate",{"_index":3355,"title":{},"body":{"license.html":{}}}],["obligated",{"_index":3096,"title":{},"body":{"license.html":{}}}],["obligations",{"_index":2982,"title":{},"body":{"license.html":{}}}],["occasionally",{"_index":3077,"title":{},"body":{"license.html":{}}}],["occurring",{"_index":3249,"title":{},"body":{"license.html":{}}}],["occurs",{"_index":2770,"title":{},"body":{"license.html":{}}}],["offer",{"_index":2742,"title":{},"body":{"license.html":{}}}],["offered",{"_index":3106,"title":{},"body":{"license.html":{}}}],["offering",{"_index":3081,"title":{},"body":{"license.html":{}}}],["official",{"_index":2879,"title":{},"body":{"license.html":{}}}],["ok",{"_index":1829,"title":{},"body":{"controllers/RootController.html":{}}}],["old",{"_index":903,"title":{},"body":{"injectables/ClaimService.html":{}}}],["omit",{"_index":599,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["one",{"_index":2885,"title":{},"body":{"license.html":{}}}],["onmodel",{"_index":1162,"title":{},"body":{"classes/History.html":{},"classes/Source.html":{}}}],["onmoduleinit",{"_index":2261,"title":{},"body":{"injectables/ViewService.html":{}}}],["operate",{"_index":3408,"title":{},"body":{"license.html":{}}}],["operated",{"_index":3086,"title":{},"body":{"license.html":{}}}],["operating",{"_index":2906,"title":{},"body":{"license.html":{}}}],["operation",{"_index":3002,"title":{},"body":{"license.html":{}}}],["option",{"_index":634,"title":{},"body":{"injectables/ClaimReviewService.html":{},"license.html":{}}}],["optional",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"injectables/CaptchaService.html":{},"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreatePersonality.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/EmailService.html":{},"injectables/GetLanguageMiddleware.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"injectables/JsonBodyMiddleware.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"injectables/OryService.html":{},"injectables/ParagraphService.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"controllers/RootController.html":{},"injectables/SentenceService.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"injectables/SpeechService.html":{},"injectables/StatsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{}}}],["options",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailService.html":{},"injectables/PersonalityService.html":{},"injectables/UsersService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["options.config",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["options.config.db.connection_uri",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["options.config.db.options",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["options.config.interface",{"_index":3547,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.config.port",{"_index":3548,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.config.throttle.limit",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["options.config.throttle.ttl",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["options.logger.log",{"_index":3542,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.logger.log(\"error",{"_index":3582,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.logger.log(\"info",{"_index":3549,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.name",{"_index":3543,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options?.config?.cors",{"_index":3524,"title":{},"body":{"miscellaneous/variables.html":{}}}],["optionstoupdate",{"_index":817,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{}}}],["order",{"_index":348,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimService.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/GetTasksDTO.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"license.html":{}}}],["organization",{"_index":3266,"title":{},"body":{"license.html":{}}}],["organizations",{"_index":2820,"title":{},"body":{"license.html":{}}}],["origin",{"_index":2394,"title":{},"body":{"injectables/WikidataService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["original",{"_index":532,"title":{},"body":{"controllers/ClaimReviewController-1.html":{},"license.html":{}}}],["originalurl",{"_index":1314,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["ory",{"_index":1371,"title":{},"body":{"injectables/OryService.html":{},"guards/SessionGuard.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["ory.controller",{"_index":1368,"title":{},"body":{"modules/OryModule.html":{}}}],["ory.service",{"_index":1355,"title":{},"body":{"controllers/OryController.html":{},"modules/OryModule.html":{}}}],["ory.sh/kratos",{"_index":2639,"title":{},"body":{"index.html":{}}}],["ory.tosession(undefined",{"_index":1878,"title":{},"body":{"guards/SessionGuard.html":{}}}],["ory/cli",{"_index":2482,"title":{},"body":{"dependencies.html":{}}}],["ory/client",{"_index":1391,"title":{},"body":{"injectables/OryService.html":{},"guards/SessionGuard.html":{},"dependencies.html":{}}}],["ory/integrations",{"_index":2485,"title":{},"body":{"dependencies.html":{}}}],["ory/ory.controller",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["ory/ory.module",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["ory/ory.service",{"_index":2137,"title":{},"body":{"injectables/UsersService.html":{}}}],["ory_sdk_url",{"_index":2658,"title":{},"body":{"index.html":{}}}],["orycontroller",{"_index":93,"title":{"controllers/OryController.html":{}},"body":{"modules/AppModule.html":{},"controllers/OryController.html":{},"modules/OryModule.html":{},"coverage.html":{}}}],["oryid",{"_index":2080,"title":{},"body":{"classes/User.html":{},"interfaces/UserDocument.html":{},"miscellaneous/variables.html":{}}}],["orymodule",{"_index":83,"title":{"modules/OryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OryModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["orypaths",{"_index":1342,"title":{},"body":{"controllers/OryController.html":{}}}],["orypaths(@req",{"_index":1361,"title":{},"body":{"controllers/OryController.html":{}}}],["orypaths(req",{"_index":1349,"title":{},"body":{"controllers/OryController.html":{}}}],["oryservice",{"_index":1354,"title":{"injectables/OryService.html":{}},"body":{"controllers/OryController.html":{},"modules/OryModule.html":{},"injectables/OryService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["oryuser",{"_index":2149,"title":{},"body":{"injectables/UsersService.html":{}}}],["oryuser.id",{"_index":2152,"title":{},"body":{"injectables/UsersService.html":{}}}],["others",{"_index":2720,"title":{},"body":{"license.html":{}}}],["otherwise",{"_index":2954,"title":{},"body":{"license.html":{}}}],["out",{"_index":148,"title":{},"body":{"modules/CaptchaModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimReviewTaskModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/HomeModule.html":{},"classes/NotFoundFilter.html":{},"modules/OryModule.html":{},"modules/ParagraphModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"modules/ReportModule.html":{},"modules/SentenceModule.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/SpeechModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{},"license.html":{},"overview.html":{}}}],["output",{"_index":2946,"title":{},"body":{"license.html":{}}}],["outside",{"_index":2966,"title":{},"body":{"license.html":{}}}],["overallstats",{"_index":969,"title":{},"body":{"injectables/ClaimService.html":{}}}],["overview",{"_index":3473,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":904,"title":{},"body":{"injectables/ClaimService.html":{}}}],["overwrites",{"_index":1679,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["owned",{"_index":3291,"title":{},"body":{"license.html":{}}}],["p.content.foreach((sentence",{"_index":392,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{}}}],["p.content.length",{"_index":973,"title":{},"body":{"injectables/ClaimService.html":{}}}],["package",{"_index":2463,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["packaged",{"_index":3034,"title":{},"body":{"license.html":{}}}],["packages:yarn",{"_index":2601,"title":{},"body":{"index.html":{}}}],["packaging",{"_index":2894,"title":{},"body":{"license.html":{}}}],["page",{"_index":344,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimService.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/GetTasksDTO.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"classes/NotFoundFilter.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"index.html":{}}}],["pages",{"_index":2408,"title":{},"body":{"injectables/WikidataService.html":{},"index.html":{}}}],["pages.length",{"_index":2410,"title":{},"body":{"injectables/WikidataService.html":{}}}],["pagesize",{"_index":346,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimService.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/GetTasksDTO.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{}}}],["paginate",{"_index":1215,"title":{},"body":{"injectables/HistoryService.html":{}}}],["paginated",{"_index":1219,"title":{},"body":{"injectables/HistoryService.html":{}}}],["paginates",{"_index":1939,"title":{},"body":{"injectables/SitemapService.html":{}}}],["pagination",{"_index":534,"title":{},"body":{"controllers/ClaimReviewController-1.html":{}}}],["paper",{"_index":3443,"title":{},"body":{"license.html":{}}}],["paragraph",{"_index":1420,"title":{"classes/Paragraph.html":{}},"body":{"classes/Paragraph.html":{},"modules/ParagraphModule.html":{},"injectables/ParagraphService.html":{},"classes/Speech.html":{},"coverage.html":{},"license.html":{}}}],["paragraph.content.foreach((sentence",{"_index":976,"title":{},"body":{"injectables/ClaimService.html":{}}}],["paragraph.name",{"_index":1441,"title":{},"body":{"modules/ParagraphModule.html":{},"miscellaneous/variables.html":{}}}],["paragraph.service",{"_index":1439,"title":{},"body":{"modules/ParagraphModule.html":{}}}],["paragraph/paragraph.module",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/ParserModule.html":{}}}],["paragraph/paragraph.service",{"_index":1488,"title":{},"body":{"injectables/ParserService.html":{}}}],["paragraph/schemas/paragraph.schema",{"_index":2025,"title":{},"body":{"classes/Speech.html":{}}}],["paragraphbody",{"_index":1447,"title":{},"body":{"injectables/ParagraphService.html":{}}}],["paragraphbody.content",{"_index":1450,"title":{},"body":{"injectables/ParagraphService.html":{}}}],["paragraphdatahash",{"_index":1477,"title":{},"body":{"injectables/ParserService.html":{}}}],["paragraphdatahash}${this.sentencesequence}${sentencecontent",{"_index":1555,"title":{},"body":{"injectables/ParserService.html":{}}}],["paragraphdocument",{"_index":1429,"title":{},"body":{"classes/Paragraph.html":{},"injectables/ParagraphService.html":{},"miscellaneous/typealiases.html":{}}}],["paragraphid",{"_index":1526,"title":{},"body":{"injectables/ParserService.html":{}}}],["paragraphmodel",{"_index":1440,"title":{},"body":{"modules/ParagraphModule.html":{},"injectables/ParagraphService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["paragraphmodule",{"_index":102,"title":{"modules/ParagraphModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/ParagraphModule.html":{},"modules/ParserModule.html":{},"modules.html":{},"overview.html":{}}}],["paragraphs",{"_index":1497,"title":{},"body":{"injectables/ParserService.html":{},"dependencies.html":{},"license.html":{}}}],["paragraphs.foreach((paragraph",{"_index":1525,"title":{},"body":{"injectables/ParserService.html":{}}}],["paragraphschema",{"_index":1432,"title":{},"body":{"classes/Paragraph.html":{},"modules/ParagraphModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["paragraphschemaraw",{"_index":1430,"title":{},"body":{"classes/Paragraph.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["paragraphsequence",{"_index":1462,"title":{},"body":{"injectables/ParserService.html":{}}}],["paragraphservice",{"_index":1436,"title":{"injectables/ParagraphService.html":{}},"body":{"modules/ParagraphModule.html":{},"injectables/ParagraphService.html":{},"injectables/ParserService.html":{},"coverage.html":{},"overview.html":{}}}],["param",{"_index":308,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/ReportController.html":{},"controllers/SourceController.html":{},"injectables/UtilService.html":{}}}],["param(\"sentence_hash",{"_index":486,"title":{},"body":{"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{}}}],["parameters",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"injectables/CaptchaService.html":{},"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/EmailService.html":{},"injectables/GetLanguageMiddleware.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"injectables/JsonBodyMiddleware.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"injectables/OryService.html":{},"injectables/ParagraphService.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"controllers/RootController.html":{},"injectables/SentenceService.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"injectables/SpeechService.html":{},"injectables/StatsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{}}}],["params",{"_index":480,"title":{},"body":{"controllers/ClaimReviewController.html":{},"injectables/HistoryService.html":{},"controllers/SourceController.html":{},"injectables/WikidataService.html":{}}}],["params.language",{"_index":2333,"title":{},"body":{"injectables/WikidataService.html":{}}}],["params.wikidataid",{"_index":2332,"title":{},"body":{"injectables/WikidataService.html":{}}}],["parse",{"_index":316,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{},"controllers/HomeController.html":{},"controllers/OryController.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["parse(content",{"_index":1474,"title":{},"body":{"injectables/ParserService.html":{}}}],["parse(req.url",{"_index":405,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{},"controllers/HomeController.html":{},"controllers/OryController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["parsedurl",{"_index":404,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{},"controllers/HomeController.html":{},"controllers/OryController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["parsedurl.pathname",{"_index":2242,"title":{},"body":{"controllers/ViewController.html":{}}}],["parsedurl.query",{"_index":2243,"title":{},"body":{"controllers/ViewController.html":{}}}],["parseint(gethistory.pagesize",{"_index":1184,"title":{},"body":{"controllers/HistoryController.html":{}}}],["parseint(getsources.pagesize",{"_index":1992,"title":{},"body":{"controllers/SourceController.html":{}}}],["parseint(pagesize",{"_index":1755,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["parser",{"_index":1278,"title":{},"body":{"injectables/JsonBodyMiddleware.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["parser.middleware",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["parser.middleware.ts",{"_index":1054,"title":{},"body":{"injectables/DisableBodyParserMiddleware.html":{},"coverage.html":{}}}],["parser.middleware.ts:6",{"_index":1058,"title":{},"body":{"injectables/DisableBodyParserMiddleware.html":{}}}],["parser.service",{"_index":1459,"title":{},"body":{"modules/ParserModule.html":{}}}],["parser/parser.module",{"_index":444,"title":{},"body":{"modules/ClaimModule.html":{},"modules/ClaimRevisionModule.html":{}}}],["parser/parser.service",{"_index":834,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["parsermodule",{"_index":440,"title":{"modules/ParserModule.html":{}},"body":{"modules/ClaimModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/ParserModule.html":{},"modules.html":{},"overview.html":{}}}],["parserservice",{"_index":821,"title":{"injectables/ParserService.html":{}},"body":{"injectables/ClaimRevisionService.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"coverage.html":{},"overview.html":{}}}],["parsesentence",{"_index":1466,"title":{},"body":{"injectables/ParserService.html":{}}}],["parsesentence(sentencecontent",{"_index":1476,"title":{},"body":{"injectables/ParserService.html":{}}}],["part",{"_index":2822,"title":{},"body":{"license.html":{}}}],["partialtype",{"_index":2072,"title":{},"body":{"classes/UpdateClaimDTO.html":{},"classes/UpdateClaimReviewTaskDTO.html":{}}}],["partialtype(createclaimdto",{"_index":2075,"title":{},"body":{"classes/UpdateClaimDTO.html":{}}}],["particular",{"_index":2883,"title":{},"body":{"license.html":{}}}],["parties",{"_index":2851,"title":{},"body":{"license.html":{}}}],["parts",{"_index":2933,"title":{},"body":{"license.html":{}}}],["party",{"_index":3087,"title":{},"body":{"license.html":{}}}],["party's",{"_index":3270,"title":{},"body":{"license.html":{}}}],["pass",{"_index":1110,"title":{},"body":{"injectables/EmailService.html":{},"license.html":{}}}],["password",{"_index":1377,"title":{},"body":{"injectables/OryService.html":{},"injectables/UsersService.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["paste",{"_index":2656,"title":{},"body":{"index.html":{}}}],["patent",{"_index":3224,"title":{},"body":{"license.html":{}}}],["patents",{"_index":2790,"title":{},"body":{"license.html":{}}}],["path",{"_index":727,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"injectables/PersonalityService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["pattern",{"_index":2768,"title":{},"body":{"license.html":{}}}],["payment",{"_index":3336,"title":{},"body":{"license.html":{}}}],["peer",{"_index":3101,"title":{},"body":{"license.html":{}}}],["peers",{"_index":3104,"title":{},"body":{"license.html":{}}}],["per",{"_index":1217,"title":{},"body":{"injectables/HistoryService.html":{}}}],["percentage",{"_index":2192,"title":{},"body":{"injectables/UtilService.html":{}}}],["percentage.tofixed(0",{"_index":2195,"title":{},"body":{"injectables/UtilService.html":{}}}],["performance",{"_index":1941,"title":{},"body":{"injectables/SitemapService.html":{},"license.html":{}}}],["performing",{"_index":2919,"title":{},"body":{"license.html":{}}}],["permanently",{"_index":3232,"title":{},"body":{"license.html":{}}}],["permission",{"_index":2745,"title":{},"body":{"license.html":{}}}],["permissions",{"_index":2937,"title":{},"body":{"license.html":{}}}],["permissive",{"_index":3014,"title":{},"body":{"license.html":{}}}],["permit",{"_index":3052,"title":{},"body":{"license.html":{}}}],["permits",{"_index":3215,"title":{},"body":{"license.html":{}}}],["permitted",{"_index":2677,"title":{},"body":{"license.html":{}}}],["perpetuity",{"_index":3153,"title":{},"body":{"license.html":{}}}],["person",{"_index":2638,"title":{},"body":{"index.html":{}}}],["personal",{"_index":2625,"title":{},"body":{"index.html":{},"license.html":{}}}],["personalidades",{"_index":2581,"title":{},"body":{"index.html":{}}}],["personalities",{"_index":1264,"title":{},"body":{"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/StatsService.html":{}}}],["personalities.dto",{"_index":1603,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["personalities.dto.ts",{"_index":1142,"title":{},"body":{"classes/GetPersonalities.html":{},"coverage.html":{}}}],["personalities.dto.ts:10",{"_index":1148,"title":{},"body":{"classes/GetPersonalities.html":{}}}],["personalities.dto.ts:13",{"_index":1146,"title":{},"body":{"classes/GetPersonalities.html":{}}}],["personalities.dto.ts:17",{"_index":1144,"title":{},"body":{"classes/GetPersonalities.html":{}}}],["personalities.dto.ts:21",{"_index":1149,"title":{},"body":{"classes/GetPersonalities.html":{}}}],["personalities.dto.ts:25",{"_index":1145,"title":{},"body":{"classes/GetPersonalities.html":{}}}],["personalities.dto.ts:6",{"_index":1147,"title":{},"body":{"classes/GetPersonalities.html":{}}}],["personalities.map(async",{"_index":1695,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["personality",{"_index":207,"title":{"classes/Personality.html":{}},"body":{"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreateClaimReviewTaskDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["personality._id",{"_index":409,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{}}}],["personality.claims",{"_index":1714,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["personality.controller",{"_index":1648,"title":{},"body":{"modules/PersonalityModule.html":{}}}],["personality.dto",{"_index":1604,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["personality.dto.ts",{"_index":1033,"title":{},"body":{"classes/CreatePersonality.html":{},"coverage.html":{}}}],["personality.dto.ts:12",{"_index":1047,"title":{},"body":{"classes/CreatePersonality.html":{}}}],["personality.dto.ts:16",{"_index":1044,"title":{},"body":{"classes/CreatePersonality.html":{}}}],["personality.dto.ts:20",{"_index":1042,"title":{},"body":{"classes/CreatePersonality.html":{}}}],["personality.dto.ts:24",{"_index":1040,"title":{},"body":{"classes/CreatePersonality.html":{}}}],["personality.dto.ts:28",{"_index":1048,"title":{},"body":{"classes/CreatePersonality.html":{}}}],["personality.dto.ts:6",{"_index":1046,"title":{},"body":{"classes/CreatePersonality.html":{}}}],["personality.dto.ts:9",{"_index":1041,"title":{},"body":{"classes/CreatePersonality.html":{}}}],["personality.name",{"_index":739,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{},"modules/PersonalityModule.html":{},"miscellaneous/variables.html":{}}}],["personality.service",{"_index":1602,"title":{},"body":{"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{}}}],["personality.slug",{"_index":1701,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["personality.wikidata",{"_index":1724,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["personality/${personality.slug",{"_index":1945,"title":{},"body":{"injectables/SitemapService.html":{}}}],["personality/${personality.slug}/claim/${claim.slug",{"_index":1947,"title":{},"body":{"injectables/SitemapService.html":{}}}],["personality/${personality.slug}/claim/${claim.slug}/sentence/${review._id",{"_index":1950,"title":{},"body":{"injectables/SitemapService.html":{}}}],["personality/${personality.slug}/claim/${claim.slug}/sentence/${sentence_hash",{"_index":735,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["personality/:personalityslug/claim/:claimslug/sentence/:sentence_hash",{"_index":399,"title":{},"body":{"controllers/ClaimController.html":{}}}],["personality/personality.module",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/HomeModule.html":{},"modules/SitemapModule.html":{},"modules/StatsModule.html":{}}}],["personality/personality.service",{"_index":319,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"injectables/SitemapService.html":{},"injectables/StatsService.html":{}}}],["personality/schemas/personality.schema",{"_index":223,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreateClaimReviewTaskDTO.html":{}}}],["personalitybody",{"_index":1663,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["personalityclaimpage",{"_index":258,"title":{},"body":{"controllers/ClaimController.html":{}}}],["personalityclaimpage(req",{"_index":292,"title":{},"body":{"controllers/ClaimController.html":{}}}],["personalityclaimpagewithrevision",{"_index":259,"title":{},"body":{"controllers/ClaimController.html":{}}}],["personalityclaimpagewithrevision(@req",{"_index":428,"title":{},"body":{"controllers/ClaimController.html":{}}}],["personalityclaimpagewithrevision(req",{"_index":295,"title":{},"body":{"controllers/ClaimController.html":{}}}],["personalitycontroller",{"_index":1569,"title":{"controllers/PersonalityController.html":{}},"body":{"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"coverage.html":{}}}],["personalitycreatesearch",{"_index":1572,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["personalitycreatesearch(@req",{"_index":1633,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["personalitycreatesearch(req",{"_index":1589,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["personalitydocument",{"_index":1563,"title":{},"body":{"classes/Personality.html":{},"injectables/PersonalityService.html":{},"miscellaneous/typealiases.html":{}}}],["personalityexists",{"_index":1697,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["personalityexists.restore",{"_index":1700,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["personalityhistorypage",{"_index":260,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{}}}],["personalityhistorypage(@req",{"_index":1640,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["personalityhistorypage(req",{"_index":298,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{}}}],["personalityid",{"_index":894,"title":{},"body":{"injectables/ClaimService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["personalitylist",{"_index":499,"title":{},"body":{"controllers/ClaimReviewController-1.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{}}}],["personalitylist(@req",{"_index":552,"title":{},"body":{"controllers/ClaimReviewController-1.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{}}}],["personalitylist(req",{"_index":516,"title":{},"body":{"controllers/ClaimReviewController-1.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{}}}],["personalitymodel",{"_index":1649,"title":{},"body":{"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["personalitymodule",{"_index":37,"title":{"modules/PersonalityModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/HomeModule.html":{},"modules/PersonalityModule.html":{},"modules/SitemapModule.html":{},"modules/StatsModule.html":{},"modules.html":{},"overview.html":{}}}],["personalityname",{"_index":738,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["personalitypage",{"_index":1573,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["personalitypage(@req",{"_index":1636,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["personalitypage(req",{"_index":1596,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["personalityschema",{"_index":1568,"title":{},"body":{"classes/Personality.html":{},"modules/PersonalityModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["personalityschemaraw",{"_index":1564,"title":{},"body":{"classes/Personality.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["personalityschemaraw.plugin(softdeleteplugin",{"_index":1567,"title":{},"body":{"classes/Personality.html":{}}}],["personalityschemaraw.virtual('claims",{"_index":1566,"title":{},"body":{"classes/Personality.html":{}}}],["personalityservice",{"_index":318,"title":{"injectables/PersonalityService.html":{}},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/StatsService.html":{},"coverage.html":{},"overview.html":{}}}],["personalityslug",{"_index":401,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/PersonalityService.html":{}}}],["personalityupdate",{"_index":1743,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["pertinent",{"_index":3353,"title":{},"body":{"license.html":{}}}],["ph\\.d\\./g",{"_index":1507,"title":{},"body":{"injectables/ParserService.html":{},"miscellaneous/variables.html":{}}}],["phdregex",{"_index":1506,"title":{},"body":{"injectables/ParserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["physical",{"_index":3059,"title":{},"body":{"license.html":{}}}],["physically",{"_index":3075,"title":{},"body":{"license.html":{}}}],["pid",{"_index":3544,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pieces",{"_index":2714,"title":{},"body":{"license.html":{}}}],["place",{"_index":3083,"title":{},"body":{"license.html":{}}}],["plain",{"_index":2179,"title":{},"body":{"injectables/UtilService.html":{}}}],["plaintext",{"_index":2393,"title":{},"body":{"injectables/WikidataService.html":{}}}],["plataforma",{"_index":2578,"title":{},"body":{"index.html":{}}}],["platform",{"_index":3480,"title":{},"body":{"properties.html":{}}}],["please",{"_index":3467,"title":{},"body":{"license.html":{}}}],["plugin",{"_index":2490,"title":{},"body":{"dependencies.html":{}}}],["plus",{"_index":3273,"title":{},"body":{"license.html":{}}}],["poder",{"_index":3572,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pointer",{"_index":3435,"title":{},"body":{"license.html":{}}}],["policy",{"_index":1932,"title":{},"body":{"injectables/SitemapService.html":{},"controllers/ViewController.html":{}}}],["populate",{"_index":726,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["populate(\"claims",{"_index":667,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["populate(\"personality",{"_index":842,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{}}}],["populate(\"sources",{"_index":669,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{}}}],["populate(\"user",{"_index":1243,"title":{},"body":{"injectables/HistoryService.html":{}}}],["port",{"_index":1104,"title":{},"body":{"injectables/EmailService.html":{},"miscellaneous/variables.html":{}}}],["portion",{"_index":3109,"title":{},"body":{"license.html":{}}}],["positive",{"_index":673,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{}}}],["possesses",{"_index":3071,"title":{},"body":{"license.html":{}}}],["possession",{"_index":3031,"title":{},"body":{"license.html":{}}}],["possibility",{"_index":3411,"title":{},"body":{"license.html":{}}}],["possible",{"_index":3427,"title":{},"body":{"license.html":{}}}],["post",{"_index":309,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"controllers/OryController.html":{},"injectables/OryService.html":{},"controllers/PersonalityController.html":{}}}],["post(\"api/.ory",{"_index":1359,"title":{},"body":{"controllers/OryController.html":{}}}],["post(\"api/claim",{"_index":364,"title":{},"body":{"controllers/ClaimController.html":{}}}],["post(\"api/claimreviewtask",{"_index":543,"title":{},"body":{"controllers/ClaimReviewController-1.html":{}}}],["post(\"api/personality",{"_index":1608,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["post(\"api/review/:sentence_hash",{"_index":485,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["post('api/claim",{"_index":277,"title":{},"body":{"controllers/ClaimController.html":{}}}],["post('api/claimreviewtask",{"_index":502,"title":{},"body":{"controllers/ClaimReviewController-1.html":{}}}],["post('api/personality",{"_index":1575,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["post('api/review/:sentence_hash",{"_index":475,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["postorypaths",{"_index":1343,"title":{},"body":{"controllers/OryController.html":{}}}],["postorypaths(@req",{"_index":1360,"title":{},"body":{"controllers/OryController.html":{}}}],["postorypaths(req",{"_index":1351,"title":{},"body":{"controllers/OryController.html":{}}}],["postprocess",{"_index":875,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["postprocess(claim",{"_index":896,"title":{},"body":{"injectables/ClaimService.html":{}}}],["postprocess(personality",{"_index":1675,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["postprocesssentences",{"_index":1467,"title":{},"body":{"injectables/ParserService.html":{}}}],["postprocesssentences(sentences",{"_index":1480,"title":{},"body":{"injectables/ParserService.html":{}}}],["power",{"_index":2996,"title":{},"body":{"license.html":{}}}],["practical",{"_index":2687,"title":{},"body":{"license.html":{}}}],["practice",{"_index":2777,"title":{},"body":{"license.html":{}}}],["preamble",{"_index":2682,"title":{},"body":{"license.html":{}}}],["precise",{"_index":2802,"title":{},"body":{"license.html":{}}}],["precisely",{"_index":2774,"title":{},"body":{"license.html":{}}}],["predecessor",{"_index":3271,"title":{},"body":{"license.html":{}}}],["preferred",{"_index":2876,"title":{},"body":{"license.html":{}}}],["prefix",{"_index":1246,"title":{},"body":{"controllers/HomeController.html":{},"controllers/SitemapController.html":{},"controllers/StatsController.html":{},"controllers/ViewController.html":{}}}],["prefixes",{"_index":1504,"title":{},"body":{"injectables/ParserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["present",{"_index":3365,"title":{},"body":{"license.html":{}}}],["presents",{"_index":2870,"title":{},"body":{"license.html":{}}}],["preservation",{"_index":3188,"title":{},"body":{"license.html":{}}}],["prevent",{"_index":2719,"title":{},"body":{"license.html":{}}}],["prevented",{"_index":3147,"title":{},"body":{"license.html":{}}}],["preview",{"_index":2474,"title":{},"body":{"dependencies.html":{}}}],["previous",{"_index":1230,"title":{},"body":{"injectables/HistoryService.html":{},"license.html":{}}}],["previouschange",{"_index":1222,"title":{},"body":{"injectables/HistoryService.html":{}}}],["previousclaim",{"_index":944,"title":{},"body":{"injectables/ClaimService.html":{}}}],["previouspersonality",{"_index":1741,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["previousrevision",{"_index":938,"title":{},"body":{"injectables/ClaimService.html":{}}}],["previousrevision._id",{"_index":940,"title":{},"body":{"injectables/ClaimService.html":{}}}],["price",{"_index":2709,"title":{},"body":{"license.html":{}}}],["primarily",{"_index":3338,"title":{},"body":{"license.html":{}}}],["prior",{"_index":3235,"title":{},"body":{"license.html":{}}}],["priority",{"_index":1951,"title":{},"body":{"injectables/SitemapService.html":{}}}],["privacy",{"_index":1931,"title":{},"body":{"injectables/SitemapService.html":{},"controllers/ViewController.html":{}}}],["private",{"_index":159,"title":{},"body":{"injectables/CaptchaService.html":{},"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"controllers/OryController.html":{},"injectables/OryService.html":{},"injectables/ParagraphService.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"injectables/SentenceService.html":{},"guards/SessionGuard.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"injectables/SpeechService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{},"license.html":{}}}],["problems",{"_index":2755,"title":{},"body":{"license.html":{}}}],["procedures",{"_index":3141,"title":{},"body":{"license.html":{}}}],["process.env.aletheia_schema_id",{"_index":3612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.ci_mongodb_uri",{"_index":3614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.development_password",{"_index":2208,"title":{},"body":{"injectables/UtilService.html":{}}}],["process.env.environment",{"_index":2272,"title":{},"body":{"injectables/ViewService.html":{}}}],["process.env.ory_access_token",{"_index":3611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.ory_sdk_url",{"_index":3610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.test_recaptcha_secret",{"_index":3605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.test_recaptcha_sitekey",{"_index":3607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.pid",{"_index":3545,"title":{},"body":{"miscellaneous/variables.html":{}}}],["procuring",{"_index":3326,"title":{},"body":{"license.html":{}}}],["produce",{"_index":2909,"title":{},"body":{"license.html":{}}}],["product",{"_index":3060,"title":{},"body":{"license.html":{}}}],["production",{"_index":2611,"title":{},"body":{"index.html":{}}}],["products",{"_index":2772,"title":{},"body":{"license.html":{}}}],["profile",{"_index":1936,"title":{},"body":{"injectables/SitemapService.html":{},"controllers/UsersController.html":{}}}],["profile(@req",{"_index":2109,"title":{},"body":{"controllers/UsersController.html":{}}}],["profile(req",{"_index":2100,"title":{},"body":{"controllers/UsersController.html":{}}}],["program",{"_index":2695,"title":{},"body":{"license.html":{}}}],["program's",{"_index":3006,"title":{},"body":{"license.html":{}}}],["programmer",{"_index":3456,"title":{},"body":{"license.html":{}}}],["programming",{"_index":2884,"title":{},"body":{"license.html":{}}}],["programs",{"_index":2706,"title":{},"body":{"license.html":{}}}],["prohibit",{"_index":2776,"title":{},"body":{"license.html":{}}}],["prohibiting",{"_index":2992,"title":{},"body":{"license.html":{}}}],["prohibits",{"_index":3332,"title":{},"body":{"license.html":{}}}],["project",{"_index":2141,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["prominent",{"_index":2873,"title":{},"body":{"license.html":{}}}],["prominently",{"_index":2863,"title":{},"body":{"license.html":{}}}],["promise",{"_index":1379,"title":{},"body":{"injectables/OryService.html":{},"injectables/ParserService.html":{},"guards/SessionGuard.html":{},"injectables/UsersService.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{}}}],["promise.all",{"_index":352,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/StatsService.html":{},"miscellaneous/variables.html":{}}}],["promise.all(paragraphbody.content).then(async(paragraph",{"_index":1449,"title":{},"body":{"injectables/ParagraphService.html":{}}}],["promise.all(personality.claims.map((claim",{"_index":1715,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["promise.all(result).then((object",{"_index":1535,"title":{},"body":{"injectables/ParserService.html":{}}}],["prop",{"_index":219,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimReviewTask.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Paragraph.html":{},"classes/Personality.html":{},"classes/Report.html":{},"classes/Sentence.html":{},"classes/Source.html":{},"classes/Speech.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{}}}],["prop({default",{"_index":2023,"title":{},"body":{"classes/Speech.html":{},"classes/WikidataCache.html":{}}}],["prop({required",{"_index":217,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Paragraph.html":{},"classes/Personality.html":{},"classes/Report.html":{},"classes/Sentence.html":{},"classes/Source.html":{},"classes/User.html":{},"classes/WikidataCache.html":{}}}],["prop({type",{"_index":211,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimReviewTask.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Paragraph.html":{},"classes/Report.html":{},"classes/Sentence.html":{},"classes/Source.html":{},"classes/Speech.html":{},"classes/WikidataCache.html":{}}}],["prop({unique",{"_index":687,"title":{},"body":{"classes/ClaimReviewTask.html":{},"classes/Personality.html":{}}}],["prop({validate",{"_index":1965,"title":{},"body":{"classes/Source.html":{}}}],["propagate",{"_index":2831,"title":{},"body":{"license.html":{}}}],["propagating",{"_index":3256,"title":{},"body":{"license.html":{}}}],["propagation",{"_index":2842,"title":{},"body":{"license.html":{}}}],["properties",{"_index":158,"title":{"properties.html":{}},"body":{"injectables/CaptchaService.html":{},"classes/Claim.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimReviewTask.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreateClaimReviewTaskDTO.html":{},"classes/CreatePersonality.html":{},"injectables/EmailService.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/GetTasksDTO.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"injectables/OryService.html":{},"classes/Paragraph.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"injectables/PersonalityService.html":{},"classes/Report.html":{},"classes/Sentence.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"classes/Speech.html":{},"classes/UpdateClaimReviewTaskDTO.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"index.html":{},"properties.html":{}}}],["property",{"_index":1726,"title":{},"body":{"injectables/PersonalityService.html":{},"injectables/UtilService.html":{},"injectables/WikidataService.html":{},"license.html":{}}}],["propertyvalue",{"_index":2199,"title":{},"body":{"injectables/UtilService.html":{}}}],["proprietary",{"_index":2799,"title":{},"body":{"license.html":{}}}],["props",{"_index":1423,"title":{},"body":{"classes/Paragraph.html":{},"injectables/ParserService.html":{},"classes/Sentence.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{}}}],["protect",{"_index":2717,"title":{},"body":{"license.html":{}}}],["protecting",{"_index":2766,"title":{},"body":{"license.html":{}}}],["protection",{"_index":2747,"title":{},"body":{"license.html":{}}}],["protocols",{"_index":3168,"title":{},"body":{"license.html":{}}}],["prove",{"_index":3388,"title":{},"body":{"license.html":{}}}],["provide",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"license.html":{}}}],["provided",{"_index":2146,"title":{},"body":{"injectables/UsersService.html":{},"license.html":{}}}],["providers",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"modules/CaptchaModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimReviewTaskModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/HomeModule.html":{},"modules/OryModule.html":{},"modules/ParagraphModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"modules/ReportModule.html":{},"modules/SentenceModule.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/SpeechModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{}}}],["provision",{"_index":2785,"title":{},"body":{"license.html":{}}}],["provisionally",{"_index":3229,"title":{},"body":{"license.html":{}}}],["proxy",{"_index":3376,"title":{},"body":{"license.html":{}}}],["proxy's",{"_index":3378,"title":{},"body":{"license.html":{}}}],["pt",{"_index":1943,"title":{},"body":{"injectables/SitemapService.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["public",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{},"controllers/HistoryController.html":{},"controllers/HomeController.html":{},"controllers/OryController.html":{},"controllers/PersonalityController.html":{},"controllers/SourceController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["public.decorator",{"_index":329,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"controllers/HomeController.html":{},"controllers/OryController.html":{},"controllers/PersonalityController.html":{},"controllers/RootController.html":{},"controllers/SitemapController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["public.decorator.ts",{"_index":2434,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["publicity",{"_index":3194,"title":{},"body":{"license.html":{}}}],["publicly",{"_index":3169,"title":{},"body":{"license.html":{}}}],["publish",{"_index":3010,"title":{},"body":{"license.html":{}}}],["published",{"_index":645,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"license.html":{}}}],["purpose",{"_index":2793,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":3117,"title":{},"body":{"license.html":{}}}],["pursuant",{"_index":3322,"title":{},"body":{"license.html":{}}}],["put",{"_index":310,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{},"injectables/OryService.html":{},"controllers/PersonalityController.html":{}}}],["put(\"api/claim/:id",{"_index":377,"title":{},"body":{"controllers/ClaimController.html":{}}}],["put(\"api/claimreviewtask/:sentence_hash",{"_index":546,"title":{},"body":{"controllers/ClaimReviewController-1.html":{}}}],["put(\"api/personality/:id",{"_index":1624,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["put('api/claim/:id",{"_index":306,"title":{},"body":{"controllers/ClaimController.html":{}}}],["put('api/claimreviewtask/:sentence_hash",{"_index":522,"title":{},"body":{"controllers/ClaimReviewController-1.html":{}}}],["put('api/personality/:id",{"_index":1600,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["públicas",{"_index":2582,"title":{},"body":{"index.html":{}}}],["q5",{"_index":2365,"title":{},"body":{"injectables/WikidataService.html":{}}}],["qualify",{"_index":3246,"title":{},"body":{"license.html":{}}}],["quality",{"_index":3387,"title":{},"body":{"license.html":{}}}],["queries",{"_index":1211,"title":{},"body":{"injectables/HistoryService.html":{}}}],["query",{"_index":268,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimService.html":{},"controllers/HistoryController.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/SourceController.html":{},"controllers/UsersController.html":{},"injectables/WikidataService.html":{}}}],["query.language",{"_index":1621,"title":{},"body":{"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["query.name",{"_index":1751,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["query.name.$regex",{"_index":1693,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["query.personality",{"_index":337,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{}}}],["query.withsuggestions",{"_index":1756,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["queryinputs",{"_index":350,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/PersonalityService.html":{}}}],["queryinputs.name",{"_index":1752,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["querystring",{"_index":188,"title":{},"body":{"injectables/CaptchaService.html":{}}}],["querywikibaseentities",{"_index":2308,"title":{},"body":{"injectables/WikidataService.html":{}}}],["querywikibaseentities(query",{"_index":2324,"title":{},"body":{"injectables/WikidataService.html":{}}}],["questions",{"_index":1028,"title":{},"body":{"classes/CreateClaimReviewTaskDTO.html":{},"classes/Report.html":{}}}],["random",{"_index":1266,"title":{},"body":{"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["randombytes",{"_index":2186,"title":{},"body":{"injectables/UtilService.html":{}}}],["randombytes(8",{"_index":2207,"title":{},"body":{"injectables/UtilService.html":{}}}],["raw",{"_index":2556,"title":{},"body":{"dependencies.html":{}}}],["rawclaim",{"_index":954,"title":{},"body":{"injectables/ClaimService.html":{}}}],["rawclaim._id",{"_index":958,"title":{},"body":{"injectables/ClaimService.html":{}}}],["react",{"_index":2533,"title":{},"body":{"dependencies.html":{},"properties.html":{}}}],["read",{"_index":3468,"title":{},"body":{"license.html":{}}}],["readable",{"_index":3056,"title":{},"body":{"license.html":{}}}],["readily",{"_index":3311,"title":{},"body":{"license.html":{}}}],["reading",{"_index":3173,"title":{},"body":{"license.html":{}}}],["readonly",{"_index":160,"title":{},"body":{"injectables/CaptchaService.html":{},"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"injectables/OryService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ViewService.html":{}}}],["ready",{"_index":2783,"title":{},"body":{"license.html":{}}}],["reason",{"_index":3320,"title":{},"body":{"license.html":{}}}],["reasonable",{"_index":3073,"title":{},"body":{"license.html":{}}}],["recaptcha",{"_index":985,"title":{},"body":{"classes/CreateClaimDTO.html":{},"classes/CreateClaimReviewTaskDTO.html":{},"classes/UpdateClaimReviewTaskDTO.html":{},"dependencies.html":{}}}],["recaptcha_api_url",{"_index":186,"title":{},"body":{"injectables/CaptchaService.html":{}}}],["recaptcha_api_url}/siteverify",{"_index":194,"title":{},"body":{"injectables/CaptchaService.html":{}}}],["recaptcha_secret",{"_index":3604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["recaptcha_sitekey",{"_index":3606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["recaptchastring",{"_index":178,"title":{},"body":{"injectables/CaptchaService.html":{}}}],["receipt",{"_index":3244,"title":{},"body":{"license.html":{}}}],["receive",{"_index":2712,"title":{},"body":{"license.html":{}}}],["received",{"_index":590,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"license.html":{}}}],["receives",{"_index":3261,"title":{},"body":{"license.html":{}}}],["receiving",{"_index":3328,"title":{},"body":{"license.html":{}}}],["recipient",{"_index":3152,"title":{},"body":{"license.html":{}}}],["recipient's",{"_index":3318,"title":{},"body":{"license.html":{}}}],["recipients",{"_index":2734,"title":{},"body":{"license.html":{}}}],["recognized",{"_index":2880,"title":{},"body":{"license.html":{}}}],["recovery",{"_index":2643,"title":{},"body":{"index.html":{}}}],["redirect",{"_index":1247,"title":{},"body":{"controllers/HomeController.html":{},"classes/NotFoundFilter.html":{}}}],["redirect(@res",{"_index":1261,"title":{},"body":{"controllers/HomeController.html":{}}}],["redirect(res",{"_index":1249,"title":{},"body":{"controllers/HomeController.html":{}}}],["redirects",{"_index":2229,"title":{},"body":{"controllers/ViewController.html":{}}}],["redistribute",{"_index":3430,"title":{},"body":{"license.html":{}}}],["redux",{"_index":2546,"title":{},"body":{"dependencies.html":{}}}],["ref",{"_index":214,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Paragraph.html":{},"classes/Personality.html":{},"classes/Report.html":{},"classes/Source.html":{},"classes/Speech.html":{}}}],["referring",{"_index":2708,"title":{},"body":{"license.html":{}}}],["refers",{"_index":2808,"title":{},"body":{"license.html":{}}}],["reflect",{"_index":2552,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":1861,"title":{},"body":{"guards/SessionGuard.html":{}}}],["refpath",{"_index":1161,"title":{},"body":{"classes/History.html":{},"classes/Source.html":{}}}],["refrain",{"_index":3357,"title":{},"body":{"license.html":{}}}],["regard",{"_index":3178,"title":{},"body":{"license.html":{}}}],["regardless",{"_index":3033,"title":{},"body":{"license.html":{}}}],["regenerate",{"_index":2934,"title":{},"body":{"license.html":{}}}],["regex",{"_index":1498,"title":{},"body":{"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"injectables/UsersService.html":{}}}],["register",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"injectables/UsersService.html":{}}}],["register(options",{"_index":24,"title":{},"body":{"modules/AppModule.html":{}}}],["register(user",{"_index":2132,"title":{},"body":{"injectables/UsersService.html":{}}}],["registering",{"_index":2158,"title":{},"body":{"injectables/UsersService.html":{}}}],["registerpasswordchange",{"_index":2125,"title":{},"body":{"injectables/UsersService.html":{}}}],["registerpasswordchange(userid",{"_index":2134,"title":{},"body":{"injectables/UsersService.html":{}}}],["rehype",{"_index":2555,"title":{},"body":{"dependencies.html":{}}}],["reinstated",{"_index":3228,"title":{},"body":{"license.html":{}}}],["relationship",{"_index":2967,"title":{},"body":{"license.html":{}}}],["released",{"_index":2702,"title":{},"body":{"license.html":{}}}],["relevant",{"_index":3025,"title":{},"body":{"license.html":{}}}],["reliable",{"_index":1976,"title":{},"body":{"classes/Source.html":{}}}],["relicensing",{"_index":3216,"title":{},"body":{"license.html":{}}}],["relying",{"_index":3310,"title":{},"body":{"license.html":{}}}],["remain",{"_index":3095,"title":{},"body":{"license.html":{}}}],["remains",{"_index":2698,"title":{},"body":{"license.html":{}}}],["removal",{"_index":3179,"title":{},"body":{"license.html":{}}}],["remove",{"_index":675,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"license.html":{}}}],["render",{"_index":426,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"license.html":{}}}],["render(req",{"_index":2241,"title":{},"body":{"controllers/ViewController.html":{}}}],["render404",{"_index":2230,"title":{},"body":{"controllers/ViewController.html":{}}}],["rendered",{"_index":3403,"title":{},"body":{"license.html":{}}}],["repair",{"_index":3392,"title":{},"body":{"license.html":{}}}],["replacement",{"_index":856,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{}}}],["repo",{"_index":2588,"title":{},"body":{"index.html":{}}}],["report",{"_index":452,"title":{"classes/Report.html":{}},"body":{"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"classes/CreateClaimReview.html":{},"classes/CreateClaimReviewTaskDTO.html":{},"classes/Report.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"coverage.html":{}}}],["report.classification",{"_index":628,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["report.controller",{"_index":1795,"title":{},"body":{"modules/ReportModule.html":{}}}],["report.name",{"_index":1797,"title":{},"body":{"modules/ReportModule.html":{},"miscellaneous/variables.html":{}}}],["report.service",{"_index":1786,"title":{},"body":{"controllers/ReportController.html":{},"modules/ReportModule.html":{}}}],["report.sources",{"_index":1808,"title":{},"body":{"injectables/ReportService.html":{}}}],["report/report.module",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimReviewTaskModule.html":{}}}],["report/report.service",{"_index":720,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["report/schemas/report.schema",{"_index":463,"title":{},"body":{"classes/ClaimReview.html":{},"classes/CreateClaimReview.html":{},"classes/CreateClaimReviewTaskDTO.html":{}}}],["reportcontroller",{"_index":1782,"title":{"controllers/ReportController.html":{}},"body":{"controllers/ReportController.html":{},"modules/ReportModule.html":{},"coverage.html":{}}}],["reportdocument",{"_index":1770,"title":{},"body":{"classes/Report.html":{},"injectables/ReportService.html":{},"miscellaneous/typealiases.html":{}}}],["reportmodel",{"_index":1796,"title":{},"body":{"modules/ReportModule.html":{},"injectables/ReportService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["reportmodule",{"_index":81,"title":{"modules/ReportModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimReviewTaskModule.html":{},"modules/ReportModule.html":{},"modules.html":{},"overview.html":{}}}],["reports",{"_index":626,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["reportschema",{"_index":1781,"title":{},"body":{"classes/Report.html":{},"modules/ReportModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["reportschemaraw",{"_index":1778,"title":{},"body":{"classes/Report.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["reportschemaraw.virtual('reviews",{"_index":1780,"title":{},"body":{"classes/Report.html":{}}}],["reportservice",{"_index":705,"title":{"injectables/ReportService.html":{}},"body":{"injectables/ClaimReviewTaskService.html":{},"controllers/ReportController.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"coverage.html":{},"overview.html":{}}}],["represent",{"_index":3136,"title":{},"body":{"license.html":{}}}],["req",{"_index":274,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"injectables/ClaimService.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/GetLanguageMiddleware.html":{},"controllers/HomeController.html":{},"injectables/JsonBodyMiddleware.html":{},"controllers/OryController.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"controllers/SitemapController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["req.get(\"host",{"_index":1822,"title":{},"body":{"controllers/RootController.html":{},"controllers/SitemapController.html":{}}}],["req.headers[\"accept",{"_index":1138,"title":{},"body":{"injectables/GetLanguageMiddleware.html":{}}}],["req.language",{"_index":407,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/GetLanguageMiddleware.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{}}}],["req.params",{"_index":403,"title":{},"body":{"controllers/ClaimController.html":{}}}],["req.params.claimslug",{"_index":423,"title":{},"body":{"controllers/ClaimController.html":{}}}],["req.params.personalityslug",{"_index":422,"title":{},"body":{"controllers/ClaimController.html":{}}}],["req.params.slug",{"_index":420,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{}}}],["req.protocol",{"_index":1821,"title":{},"body":{"controllers/RootController.html":{},"controllers/SitemapController.html":{}}}],["req?.params?.revisionid",{"_index":429,"title":{},"body":{"controllers/ClaimController.html":{}}}],["req?.user?._id",{"_index":488,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["req['disablebodyparser",{"_index":1060,"title":{},"body":{"injectables/DisableBodyParserMiddleware.html":{},"injectables/JsonBodyMiddleware.html":{}}}],["request",{"_index":270,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{},"injectables/ClaimService.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/GetLanguageMiddleware.html":{},"injectables/JsonBodyMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"miscellaneous/variables.html":{}}}],["request.get('user",{"_index":1316,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["request.header('cookie",{"_index":1879,"title":{},"body":{"guards/SessionGuard.html":{}}}],["request.url.startswith(\"/api",{"_index":1884,"title":{},"body":{"guards/SessionGuard.html":{}}}],["request.user",{"_index":1880,"title":{},"body":{"guards/SessionGuard.html":{},"miscellaneous/variables.html":{}}}],["requested",{"_index":3528,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestproperties",{"_index":2309,"title":{},"body":{"injectables/WikidataService.html":{}}}],["requestproperties(params",{"_index":2326,"title":{},"body":{"injectables/WikidataService.html":{}}}],["requests",{"_index":1403,"title":{},"body":{"injectables/OryService.html":{}}}],["require",{"_index":2928,"title":{},"body":{"license.html":{}}}],["require(\"axios",{"_index":1929,"title":{},"body":{"injectables/SitemapService.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["require(\"cookie",{"_index":3522,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require(\"fs",{"_index":1089,"title":{},"body":{"injectables/EmailService.html":{},"miscellaneous/variables.html":{}}}],["require(\"handlebars",{"_index":1087,"title":{},"body":{"injectables/EmailService.html":{},"miscellaneous/variables.html":{}}}],["require(\"md5",{"_index":1493,"title":{},"body":{"injectables/ParserService.html":{},"miscellaneous/variables.html":{}}}],["require(\"nodemailer",{"_index":1085,"title":{},"body":{"injectables/EmailService.html":{},"miscellaneous/variables.html":{}}}],["require(\"path",{"_index":1090,"title":{},"body":{"injectables/EmailService.html":{},"miscellaneous/variables.html":{}}}],["require(\"service",{"_index":3594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('compromise",{"_index":1495,"title":{},"body":{"injectables/ParserService.html":{},"miscellaneous/variables.html":{}}}],["required",{"_index":213,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimReviewTask.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Paragraph.html":{},"classes/Personality.html":{},"classes/Report.html":{},"classes/Sentence.html":{},"classes/Source.html":{},"classes/Speech.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"classes/WikidataCache.html":{},"index.html":{},"license.html":{}}}],["requirement",{"_index":3026,"title":{},"body":{"license.html":{}}}],["requirements",{"_index":3099,"title":{},"body":{"license.html":{}}}],["requires",{"_index":2752,"title":{},"body":{"license.html":{}}}],["requiring",{"_index":2824,"title":{},"body":{"license.html":{}}}],["res",{"_index":271,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{},"injectables/GetLanguageMiddleware.html":{},"controllers/HomeController.html":{},"injectables/JsonBodyMiddleware.html":{},"controllers/OryController.html":{},"controllers/PersonalityController.html":{},"controllers/RootController.html":{},"controllers/SitemapController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["res.redirect",{"_index":1262,"title":{},"body":{"controllers/HomeController.html":{}}}],["res.send(sitemapxml",{"_index":1906,"title":{},"body":{"controllers/SitemapController.html":{}}}],["res.type(\"text/plain\").end",{"_index":1823,"title":{},"body":{"controllers/RootController.html":{}}}],["reset",{"_index":147,"title":{},"body":{"modules/CaptchaModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimReviewTaskModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/HomeModule.html":{},"modules/OryModule.html":{},"modules/ParagraphModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"modules/ReportModule.html":{},"modules/SentenceModule.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/SpeechModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{},"overview.html":{}}}],["resolved",{"_index":3124,"title":{},"body":{"license.html":{}}}],["resolver",{"_index":1719,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["respect",{"_index":2728,"title":{},"body":{"license.html":{}}}],["response",{"_index":171,"title":{},"body":{"injectables/CaptchaService.html":{},"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/GetLanguageMiddleware.html":{},"controllers/HomeController.html":{},"injectables/JsonBodyMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/PersonalityController.html":{},"guards/SessionGuard.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"injectables/WikidataService.html":{}}}],["response.data",{"_index":2397,"title":{},"body":{"injectables/WikidataService.html":{}}}],["response.get('content",{"_index":1321,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["response.on('finish",{"_index":1318,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["response.redirect(\"/login",{"_index":1885,"title":{},"body":{"guards/SessionGuard.html":{}}}],["response.redirect('/404",{"_index":1339,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["responsibilities",{"_index":2726,"title":{},"body":{"license.html":{}}}],["responsible",{"_index":3262,"title":{},"body":{"license.html":{}}}],["rest",{"_index":3482,"title":{},"body":{"properties.html":{}}}],["restrict",{"_index":2792,"title":{},"body":{"license.html":{}}}],["restricting",{"_index":2993,"title":{},"body":{"license.html":{}}}],["restriction",{"_index":3214,"title":{},"body":{"license.html":{}}}],["restrictions",{"_index":3210,"title":{},"body":{"license.html":{}}}],["result",{"_index":1520,"title":{},"body":{"injectables/ParserService.html":{},"injectables/UtilService.html":{},"license.html":{}}}],["result.push",{"_index":1531,"title":{},"body":{"injectables/ParserService.html":{}}}],["resulting",{"_index":2826,"title":{},"body":{"license.html":{}}}],["results",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"modules/CaptchaModule.html":{},"injectables/CaptchaService.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimReviewTask.html":{},"modules/ClaimReviewTaskModule.html":{},"injectables/ClaimReviewTaskService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreateClaimReviewTaskDTO.html":{},"classes/CreatePersonality.html":{},"injectables/DisableBodyParserMiddleware.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/GetClaimsDTO.html":{},"injectables/GetLanguageMiddleware.html":{},"classes/GetPersonalities.html":{},"classes/GetTasksDTO.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/JsonBodyMiddleware.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"modules/OryModule.html":{},"injectables/OryService.html":{},"classes/Paragraph.html":{},"modules/ParagraphModule.html":{},"injectables/ParagraphService.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"classes/Report.html":{},"controllers/ReportController.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"controllers/RootController.html":{},"classes/Sentence.html":{},"modules/SentenceModule.html":{},"injectables/SentenceService.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"classes/Speech.html":{},"modules/SpeechModule.html":{},"injectables/SpeechService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimDTO.html":{},"classes/UpdateClaimReviewTaskDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retains",{"_index":3156,"title":{},"body":{"license.html":{}}}],["return",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"injectables/CaptchaService.html":{},"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"injectables/OryService.html":{},"injectables/ParagraphService.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"classes/Report.html":{},"controllers/ReportController.html":{},"controllers/RootController.html":{},"injectables/SentenceService.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"injectables/SpeechService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/ViewService.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"injectables/CaptchaService.html":{},"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/EmailService.html":{},"injectables/GetLanguageMiddleware.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"injectables/JsonBodyMiddleware.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"injectables/OryService.html":{},"injectables/ParagraphService.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"controllers/RootController.html":{},"injectables/SentenceService.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"injectables/SpeechService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{}}}],["review",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"controllers/ClaimReviewController-1.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimReviewTask.html":{},"modules/ClaimReviewTaskModule.html":{},"injectables/ClaimReviewTaskService.html":{},"classes/CreateClaimReviewTaskDTO.html":{},"classes/GetTasksDTO.html":{},"injectables/SitemapService.html":{},"classes/UpdateClaimReviewTaskDTO.html":{},"injectables/UtilService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["review._id.sentence_hash",{"_index":979,"title":{},"body":{"injectables/ClaimService.html":{}}}],["review._id[0",{"_index":2194,"title":{},"body":{"injectables/UtilService.html":{}}}],["review.controller",{"_index":562,"title":{},"body":{"modules/ClaimReviewModule.html":{}}}],["review.controller.ts",{"_index":472,"title":{},"body":{"controllers/ClaimReviewController.html":{},"coverage.html":{}}}],["review.controller.ts:21",{"_index":476,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["review.controller.ts:37",{"_index":483,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["review.controller.ts:42",{"_index":479,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["review.count",{"_index":2190,"title":{},"body":{"injectables/UtilService.html":{}}}],["review.dto",{"_index":484,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["review.dto.ts",{"_index":1005,"title":{},"body":{"classes/CreateClaimReview.html":{},"coverage.html":{}}}],["review.dto.ts:16",{"_index":1009,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["review.dto.ts:20",{"_index":1007,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["review.dto.ts:23",{"_index":1011,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["review.dto.ts:27",{"_index":1013,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["review.dto.ts:31",{"_index":1012,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["review.dto.ts:35",{"_index":1015,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["review.length",{"_index":639,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.module",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewTaskModule.html":{},"modules/PersonalityModule.html":{},"modules/SitemapModule.html":{},"modules/StatsModule.html":{}}}],["review.module.ts",{"_index":559,"title":{},"body":{"modules/ClaimReviewModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["review.schema",{"_index":561,"title":{},"body":{"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{}}}],["review.schema.ts",{"_index":451,"title":{},"body":{"classes/ClaimReview.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["review.schema.ts:18",{"_index":454,"title":{},"body":{"classes/ClaimReview.html":{}}}],["review.schema.ts:25",{"_index":457,"title":{},"body":{"classes/ClaimReview.html":{}}}],["review.schema.ts:32",{"_index":461,"title":{},"body":{"classes/ClaimReview.html":{}}}],["review.schema.ts:35",{"_index":459,"title":{},"body":{"classes/ClaimReview.html":{}}}],["review.schema.ts:42",{"_index":458,"title":{},"body":{"classes/ClaimReview.html":{}}}],["review.schema.ts:45",{"_index":456,"title":{},"body":{"classes/ClaimReview.html":{}}}],["review.service",{"_index":312,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/StatsService.html":{}}}],["review.service.ts",{"_index":566,"title":{},"body":{"injectables/ClaimReviewService.html":{},"coverage.html":{}}}],["review.service.ts:118",{"_index":582,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:12",{"_index":575,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:150",{"_index":604,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:156",{"_index":606,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:169",{"_index":594,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:20",{"_index":577,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:36",{"_index":580,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:40",{"_index":613,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:57",{"_index":611,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:79",{"_index":608,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:99",{"_index":615,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review/claim",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"modules/ClaimReviewTaskModule.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimService.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["review/dto/create",{"_index":1004,"title":{},"body":{"classes/CreateClaimReview.html":{},"coverage.html":{}}}],["review/schemas/claim",{"_index":450,"title":{},"body":{"classes/ClaimReview.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["reviewdata",{"_index":1026,"title":{},"body":{"classes/CreateClaimReviewTaskDTO.html":{}}}],["reviewhref",{"_index":734,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["reviewing",{"_index":3416,"title":{},"body":{"license.html":{}}}],["reviews",{"_index":587,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/StatsService.html":{},"injectables/UtilService.html":{}}}],["reviews.find((review",{"_index":978,"title":{},"body":{"injectables/ClaimService.html":{}}}],["reviews.length",{"_index":975,"title":{},"body":{"injectables/ClaimService.html":{}}}],["reviews.map((review",{"_index":2191,"title":{},"body":{"injectables/UtilService.html":{}}}],["reviews.reduce((agg",{"_index":2188,"title":{},"body":{"injectables/UtilService.html":{}}}],["reviewstats",{"_index":967,"title":{},"body":{"injectables/ClaimService.html":{}}}],["reviewtaskmachinecontext",{"_index":1025,"title":{},"body":{"classes/CreateClaimReviewTaskDTO.html":{},"miscellaneous/typealiases.html":{}}}],["reviewtasks",{"_index":722,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["reviewtasks.map",{"_index":732,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["revised",{"_index":3363,"title":{},"body":{"license.html":{}}}],["revision",{"_index":888,"title":{},"body":{"injectables/ClaimService.html":{}}}],["revision.module",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/PersonalityModule.html":{}}}],["revision.module.ts",{"_index":806,"title":{},"body":{"modules/ClaimRevisionModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["revision.schema",{"_index":225,"title":{},"body":{"classes/Claim.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"classes/CreateClaimDTO.html":{}}}],["revision.schema.ts",{"_index":765,"title":{},"body":{"classes/ClaimRevision.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["revision.schema.ts:16",{"_index":778,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["revision.schema.ts:19",{"_index":777,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["revision.schema.ts:26",{"_index":770,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["revision.schema.ts:37",{"_index":774,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["revision.schema.ts:40",{"_index":775,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["revision.schema.ts:47",{"_index":768,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["revision.schema.ts:54",{"_index":776,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["revision.service",{"_index":808,"title":{},"body":{"modules/ClaimRevisionModule.html":{},"injectables/ClaimService.html":{}}}],["revision.service.ts",{"_index":816,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"coverage.html":{}}}],["revision.service.ts:12",{"_index":831,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["revision.service.ts:13",{"_index":822,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["revision.service.ts:28",{"_index":828,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["revision.service.ts:43",{"_index":824,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["revision/claim",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"modules/PersonalityModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["revision/schema/claim",{"_index":224,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimRevision.html":{},"classes/CreateClaimDTO.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["revisionid",{"_index":795,"title":{},"body":{"classes/ClaimRevision.html":{},"injectables/ClaimService.html":{}}}],["revisions",{"_index":231,"title":{},"body":{"classes/Claim.html":{}}}],["right",{"_index":3150,"title":{},"body":{"license.html":{}}}],["rights",{"_index":2718,"title":{},"body":{"license.html":{}}}],["risk",{"_index":3386,"title":{},"body":{"license.html":{}}}],["robots",{"_index":1812,"title":{},"body":{"controllers/RootController.html":{}}}],["robots(@res",{"_index":1820,"title":{},"body":{"controllers/RootController.html":{}}}],["robots(res",{"_index":1816,"title":{},"body":{"controllers/RootController.html":{}}}],["rom",{"_index":3159,"title":{},"body":{"license.html":{}}}],["root/root.controller",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["rootcontroller",{"_index":49,"title":{"controllers/RootController.html":{}},"body":{"modules/AppModule.html":{},"controllers/RootController.html":{},"coverage.html":{}}}],["royalty",{"_index":3277,"title":{},"body":{"license.html":{}}}],["rules",{"_index":1500,"title":{},"body":{"injectables/ParserService.html":{},"license.html":{}}}],["run",{"_index":2602,"title":{},"body":{"index.html":{},"license.html":{}}}],["runner",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["running",{"_index":2947,"title":{},"body":{"license.html":{}}}],["runs",{"_index":2907,"title":{},"body":{"license.html":{}}}],["rxjs",{"_index":184,"title":{},"body":{"injectables/CaptchaService.html":{},"dependencies.html":{}}}],["safest",{"_index":3432,"title":{},"body":{"license.html":{}}}],["sake",{"_index":2751,"title":{},"body":{"license.html":{}}}],["sale",{"_index":3286,"title":{},"body":{"license.html":{}}}],["salt",{"_index":3622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["same",{"_index":2624,"title":{},"body":{"index.html":{},"license.html":{}}}],["sample",{"_index":1688,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["satisfy",{"_index":3098,"title":{},"body":{"license.html":{}}}],["save",{"_index":826,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"index.html":{}}}],["saved",{"_index":2647,"title":{},"body":{"index.html":{}}}],["saying",{"_index":3092,"title":{},"body":{"license.html":{}}}],["schema",{"_index":220,"title":{},"body":{"classes/Claim.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"modules/ClaimReviewModule.html":{},"classes/ClaimReviewTask.html":{},"modules/ClaimReviewTaskModule.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"classes/History.html":{},"modules/HistoryModule.html":{},"classes/Paragraph.html":{},"modules/ParagraphModule.html":{},"classes/Personality.html":{},"modules/PersonalityModule.html":{},"classes/Report.html":{},"modules/ReportModule.html":{},"classes/Sentence.html":{},"modules/SentenceModule.html":{},"classes/Source.html":{},"modules/SourceModule.html":{},"classes/Speech.html":{},"modules/SpeechModule.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"modules/UsersModule.html":{},"classes/WikidataCache.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["schema/claim",{"_index":807,"title":{},"body":{"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{}}}],["schema/history.schema",{"_index":1196,"title":{},"body":{"modules/HistoryModule.html":{},"injectables/HistoryService.html":{}}}],["schema_id",{"_index":1406,"title":{},"body":{"injectables/OryService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["schemafactory",{"_index":221,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimReviewTask.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Paragraph.html":{},"classes/Personality.html":{},"classes/Report.html":{},"classes/Sentence.html":{},"classes/Source.html":{},"classes/Speech.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"classes/WikidataCache.html":{}}}],["schemafactory.createforclass(claim",{"_index":237,"title":{},"body":{"classes/Claim.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(claimreview",{"_index":467,"title":{},"body":{"classes/ClaimReview.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(claimreviewtask",{"_index":692,"title":{},"body":{"classes/ClaimReviewTask.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(claimrevision",{"_index":797,"title":{},"body":{"classes/ClaimRevision.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(history",{"_index":1173,"title":{},"body":{"classes/History.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(paragraph",{"_index":1431,"title":{},"body":{"classes/Paragraph.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(personality",{"_index":1565,"title":{},"body":{"classes/Personality.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(report",{"_index":1779,"title":{},"body":{"classes/Report.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(sentence",{"_index":1837,"title":{},"body":{"classes/Sentence.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(source",{"_index":1980,"title":{},"body":{"classes/Source.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(speech",{"_index":2027,"title":{},"body":{"classes/Speech.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":2088,"title":{},"body":{"classes/User.html":{},"interfaces/UserDocument.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(wikidatacache",{"_index":2288,"title":{},"body":{"classes/WikidataCache.html":{},"miscellaneous/variables.html":{}}}],["schemas",{"_index":2648,"title":{},"body":{"index.html":{}}}],["schemas/claim",{"_index":560,"title":{},"body":{"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"modules/ClaimReviewTaskModule.html":{},"injectables/ClaimReviewTaskService.html":{}}}],["schemas/claim.schema",{"_index":442,"title":{},"body":{"modules/ClaimModule.html":{}}}],["schemas/paragraph.schema",{"_index":1438,"title":{},"body":{"modules/ParagraphModule.html":{},"injectables/ParagraphService.html":{}}}],["schemas/personality.schema",{"_index":1647,"title":{},"body":{"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{}}}],["schemas/report.schema",{"_index":1794,"title":{},"body":{"modules/ReportModule.html":{},"injectables/ReportService.html":{}}}],["schemas/sentence.schema",{"_index":1843,"title":{},"body":{"modules/SentenceModule.html":{},"injectables/SentenceService.html":{}}}],["schemas/source.schema",{"_index":2002,"title":{},"body":{"modules/SourceModule.html":{},"injectables/SourceService.html":{}}}],["schemas/speech.schema",{"_index":2033,"title":{},"body":{"modules/SpeechModule.html":{},"injectables/SpeechService.html":{}}}],["schemas/user.schema",{"_index":2119,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["schemas/wikidata.schema",{"_index":2294,"title":{},"body":{"modules/WikidataModule.html":{},"injectables/WikidataService.html":{}}}],["school",{"_index":3457,"title":{},"body":{"license.html":{}}}],["scope",{"_index":912,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"license.html":{}}}],["scope.request",{"_index":914,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["screen",{"_index":2631,"title":{},"body":{"index.html":{}}}],["scripts",{"_index":2914,"title":{},"body":{"license.html":{}}}],["scroll",{"_index":2622,"title":{},"body":{"index.html":{}}}],["sdk",{"_index":2621,"title":{},"body":{"index.html":{}}}],["search",{"_index":1634,"title":{},"body":{"controllers/PersonalityController.html":{},"injectables/SitemapService.html":{},"injectables/WikidataService.html":{}}}],["search.map((wbentity",{"_index":2398,"title":{},"body":{"injectables/WikidataService.html":{}}}],["searchname",{"_index":2139,"title":{},"body":{"injectables/UsersService.html":{}}}],["secondarily",{"_index":2834,"title":{},"body":{"license.html":{}}}],["secret",{"_index":173,"title":{},"body":{"injectables/CaptchaService.html":{}}}],["section",{"_index":2971,"title":{},"body":{"license.html":{}}}],["sections",{"_index":3055,"title":{},"body":{"license.html":{}}}],["secure",{"_index":1106,"title":{},"body":{"injectables/EmailService.html":{}}}],["see",{"_index":3440,"title":{},"body":{"license.html":{}}}],["seed",{"_index":3590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seedbuild",{"_index":2610,"title":{},"body":{"index.html":{}}}],["seeded",{"_index":3565,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seeder",{"_index":2608,"title":{},"body":{"index.html":{}}}],["seeding",{"_index":3583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seedsingleuser",{"_index":3560,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seedsingleuser(userdata",{"_index":3589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seedtestuser",{"_index":2454,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["select",{"_index":729,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{},"injectables/PersonalityService.html":{}}}],["select({\"latestrevision",{"_index":956,"title":{},"body":{"injectables/ClaimService.html":{}}}],["sell",{"_index":3300,"title":{},"body":{"license.html":{}}}],["selling",{"_index":3285,"title":{},"body":{"license.html":{}}}],["semicolon",{"_index":1542,"title":{},"body":{"injectables/ParserService.html":{}}}],["semicolonsentence",{"_index":1547,"title":{},"body":{"injectables/ParserService.html":{}}}],["semicolonsentence.trim",{"_index":1550,"title":{},"body":{"injectables/ParserService.html":{}}}],["semicolonsentences",{"_index":1543,"title":{},"body":{"injectables/ParserService.html":{}}}],["semicolonsentences.length",{"_index":1548,"title":{},"body":{"injectables/ParserService.html":{}}}],["semicolonsentences.map",{"_index":1546,"title":{},"body":{"injectables/ParserService.html":{}}}],["semicolonsentence};`.trim",{"_index":1549,"title":{},"body":{"injectables/ParserService.html":{}}}],["semiconductor",{"_index":2811,"title":{},"body":{"license.html":{}}}],["sendemail",{"_index":1070,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendemail(to",{"_index":1078,"title":{},"body":{"injectables/EmailService.html":{}}}],["sent",{"_index":3580,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sentence",{"_index":394,"title":{"classes/Sentence.html":{}},"body":{"controllers/ClaimController.html":{},"classes/Paragraph.html":{},"classes/Sentence.html":{},"modules/SentenceModule.html":{},"injectables/SentenceService.html":{},"coverage.html":{}}}],["sentence.data_hash",{"_index":393,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{}}}],["sentence.name",{"_index":1846,"title":{},"body":{"modules/SentenceModule.html":{},"miscellaneous/variables.html":{}}}],["sentence.props.classification",{"_index":974,"title":{},"body":{"injectables/ClaimService.html":{}}}],["sentence.service",{"_index":1844,"title":{},"body":{"modules/SentenceModule.html":{}}}],["sentence.text(this.nlpoptions",{"_index":1540,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentence/schemas/sentence.schema",{"_index":1428,"title":{},"body":{"classes/Paragraph.html":{}}}],["sentence/sentence.module",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"modules/ParserModule.html":{}}}],["sentence/sentence.service",{"_index":1487,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentence_hash",{"_index":265,"title":{},"body":{"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimReviewTask.html":{},"injectables/ClaimReviewTaskService.html":{},"classes/CreateClaimReview.html":{},"classes/CreateClaimReviewTaskDTO.html":{},"classes/Report.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["sentencebody",{"_index":1852,"title":{},"body":{"injectables/SentenceService.html":{}}}],["sentencecontent",{"_index":1479,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentencedatahash",{"_index":1554,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentencedocument",{"_index":1835,"title":{},"body":{"classes/Sentence.html":{},"injectables/SentenceService.html":{},"miscellaneous/typealiases.html":{}}}],["sentenceid",{"_index":1552,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentenceindex",{"_index":977,"title":{},"body":{"injectables/ClaimService.html":{}}}],["sentencemodel",{"_index":1845,"title":{},"body":{"modules/SentenceModule.html":{},"injectables/SentenceService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sentencemodule",{"_index":104,"title":{"modules/SentenceModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ParserModule.html":{},"modules/SentenceModule.html":{},"modules.html":{},"overview.html":{}}}],["sentenceobj",{"_index":390,"title":{},"body":{"controllers/ClaimController.html":{}}}],["sentences",{"_index":1482,"title":{},"body":{"injectables/ParserService.html":{},"dependencies.html":{}}}],["sentences.foreach(sentence",{"_index":1538,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentences.length",{"_index":1530,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentences.map((sentence",{"_index":1533,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentenceschema",{"_index":1838,"title":{},"body":{"classes/Sentence.html":{},"modules/SentenceModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sentenceschemaraw",{"_index":1836,"title":{},"body":{"classes/Sentence.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sentencesequence",{"_index":1463,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentenceservice",{"_index":1470,"title":{"injectables/SentenceService.html":{}},"body":{"injectables/ParserService.html":{},"modules/SentenceModule.html":{},"injectables/SentenceService.html":{},"coverage.html":{},"overview.html":{}}}],["sentencetext",{"_index":1539,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentencetext.includes",{"_index":1545,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentencetext.split",{"_index":1544,"title":{},"body":{"injectables/ParserService.html":{}}}],["seo",{"_index":2530,"title":{},"body":{"dependencies.html":{}}}],["separable",{"_index":3108,"title":{},"body":{"license.html":{}}}],["separate",{"_index":3040,"title":{},"body":{"license.html":{}}}],["separately",{"_index":3037,"title":{},"body":{"license.html":{}}}],["serializefunctions",{"_index":635,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["server",{"_index":2260,"title":{},"body":{"injectables/ViewService.html":{},"license.html":{}}}],["server/.../baserequest.ts",{"_index":3487,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["server/.../claim",{"_index":2572,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/.../claim.module.ts",{"_index":3500,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../claim.schema.ts",{"_index":3488,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/.../claim.service.ts",{"_index":3489,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["server/.../command.ts",{"_index":3510,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../create",{"_index":3490,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["server/.../email.service.ts",{"_index":3502,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../history.module.ts",{"_index":3503,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../history.schema.ts",{"_index":2573,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/.../is",{"_index":3505,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../main.ts",{"_index":3501,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../paragraph.module.ts",{"_index":3507,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../paragraph.schema.ts",{"_index":3491,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/.../parser.service.ts",{"_index":3506,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../personality.module.ts",{"_index":3508,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../personality.schema.ts",{"_index":3492,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/.../report.module.ts",{"_index":3509,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../report.schema.ts",{"_index":2571,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/.../seed.ts",{"_index":3504,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../seedtestuser.ts",{"_index":3511,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../sentence.module.ts",{"_index":3512,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../sentence.schema.ts",{"_index":3493,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/.../server.ts",{"_index":3513,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../sessionguardmock.ts",{"_index":3514,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../sitemap.service.ts",{"_index":3498,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../source.module.ts",{"_index":3515,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../source.schema.ts",{"_index":2574,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/.../speech.module.ts",{"_index":3516,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../speech.schema.ts",{"_index":3494,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/.../testconfigoptions.ts",{"_index":3517,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../user.schema.ts",{"_index":3520,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../usermock.ts",{"_index":3518,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../users.module.ts",{"_index":3519,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../wikidata.module.ts",{"_index":3521,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../wikidata.schema.ts",{"_index":3495,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/.../wikidata.service.ts",{"_index":3499,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/app.module.ts",{"_index":6,"title":{},"body":{"modules/AppModule.html":{}}}],["server/app.module.ts:42",{"_index":13,"title":{},"body":{"modules/AppModule.html":{}}}],["server/app.module.ts:50",{"_index":25,"title":{},"body":{"modules/AppModule.html":{}}}],["server/auth/session.guard.ts",{"_index":1859,"title":{},"body":{"guards/SessionGuard.html":{},"coverage.html":{}}}],["server/auth/session.guard.ts:10",{"_index":1862,"title":{},"body":{"guards/SessionGuard.html":{}}}],["server/auth/session.guard.ts:17",{"_index":1865,"title":{},"body":{"guards/SessionGuard.html":{}}}],["server/auth/session.guard.ts:45",{"_index":1867,"title":{},"body":{"guards/SessionGuard.html":{}}}],["server/captcha/captcha.module.ts",{"_index":149,"title":{},"body":{"modules/CaptchaModule.html":{}}}],["server/captcha/captcha.service.ts",{"_index":156,"title":{},"body":{"injectables/CaptchaService.html":{},"coverage.html":{}}}],["server/captcha/captcha.service.ts:14",{"_index":172,"title":{},"body":{"injectables/CaptchaService.html":{}}}],["server/captcha/captcha.service.ts:30",{"_index":177,"title":{},"body":{"injectables/CaptchaService.html":{}}}],["server/captcha/captcha.service.ts:8",{"_index":169,"title":{},"body":{"injectables/CaptchaService.html":{}}}],["server/claim",{"_index":449,"title":{},"body":{"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimReviewTask.html":{},"modules/ClaimReviewTaskModule.html":{},"injectables/ClaimReviewTaskService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"classes/CreateClaimReview.html":{},"classes/CreateClaimReviewTaskDTO.html":{},"classes/GetTasksDTO.html":{},"classes/UpdateClaimReviewTaskDTO.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/claim/claim.controller.ts",{"_index":249,"title":{},"body":{"controllers/ClaimController.html":{},"coverage.html":{}}}],["server/claim/claim.controller.ts:103",{"_index":281,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:107",{"_index":264,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:140",{"_index":287,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:176",{"_index":273,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:198",{"_index":294,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:226",{"_index":297,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:253",{"_index":303,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:276",{"_index":300,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:43",{"_index":267,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:55",{"_index":291,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:81",{"_index":278,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:93",{"_index":284,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:98",{"_index":307,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.module.ts",{"_index":441,"title":{},"body":{"modules/ClaimModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/claim/claim.service.ts",{"_index":871,"title":{},"body":{"injectables/ClaimService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["server/claim/claim.service.ts:112",{"_index":902,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:148",{"_index":890,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:164",{"_index":891,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:168",{"_index":893,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:17",{"_index":910,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:172",{"_index":881,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:18",{"_index":878,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:222",{"_index":897,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:253",{"_index":883,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:272",{"_index":899,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:34",{"_index":895,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:67",{"_index":885,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:77",{"_index":887,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/dto/create",{"_index":983,"title":{},"body":{"classes/CreateClaimDTO.html":{},"coverage.html":{}}}],["server/claim/dto/get",{"_index":1119,"title":{},"body":{"classes/GetClaimsDTO.html":{},"coverage.html":{}}}],["server/claim/dto/update",{"_index":2071,"title":{},"body":{"classes/UpdateClaimDTO.html":{},"coverage.html":{}}}],["server/claim/schemas/claim.schema.ts",{"_index":205,"title":{},"body":{"classes/Claim.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/claim/schemas/claim.schema.ts:16",{"_index":216,"title":{},"body":{"classes/Claim.html":{}}}],["server/claim/schemas/claim.schema.ts:19",{"_index":218,"title":{},"body":{"classes/Claim.html":{}}}],["server/claim/schemas/claim.schema.ts:26",{"_index":215,"title":{},"body":{"classes/Claim.html":{}}}],["server/command.ts",{"_index":2431,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/decorators/is",{"_index":2433,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/email/email.module.ts",{"_index":1065,"title":{},"body":{"modules/EmailModule.html":{}}}],["server/email/email.service.ts",{"_index":1067,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/email/email.service.ts:10",{"_index":1072,"title":{},"body":{"injectables/EmailService.html":{}}}],["server/email/email.service.ts:16",{"_index":1076,"title":{},"body":{"injectables/EmailService.html":{}}}],["server/email/email.service.ts:27",{"_index":1073,"title":{},"body":{"injectables/EmailService.html":{}}}],["server/email/email.service.ts:40",{"_index":1082,"title":{},"body":{"injectables/EmailService.html":{}}}],["server/filters/not",{"_index":1323,"title":{},"body":{"classes/NotFoundFilter.html":{},"coverage.html":{}}}],["server/history/history.controller.ts",{"_index":1175,"title":{},"body":{"controllers/HistoryController.html":{},"coverage.html":{}}}],["server/history/history.controller.ts:18",{"_index":1179,"title":{},"body":{"controllers/HistoryController.html":{}}}],["server/history/history.module.ts",{"_index":1195,"title":{},"body":{"modules/HistoryModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/history/history.service.ts",{"_index":1201,"title":{},"body":{"injectables/HistoryService.html":{},"coverage.html":{}}}],["server/history/history.service.ts:31",{"_index":1223,"title":{},"body":{"injectables/HistoryService.html":{}}}],["server/history/history.service.ts:58",{"_index":1208,"title":{},"body":{"injectables/HistoryService.html":{}}}],["server/history/history.service.ts:73",{"_index":1210,"title":{},"body":{"injectables/HistoryService.html":{}}}],["server/history/history.service.ts:8",{"_index":1234,"title":{},"body":{"injectables/HistoryService.html":{}}}],["server/history/history.service.ts:9",{"_index":1206,"title":{},"body":{"injectables/HistoryService.html":{}}}],["server/history/schema/history.schema.ts",{"_index":1156,"title":{},"body":{"classes/History.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/history/schema/history.schema.ts:25",{"_index":1163,"title":{},"body":{"classes/History.html":{}}}],["server/history/schema/history.schema.ts:30",{"_index":1164,"title":{},"body":{"classes/History.html":{}}}],["server/history/schema/history.schema.ts:37",{"_index":1166,"title":{},"body":{"classes/History.html":{}}}],["server/history/schema/history.schema.ts:42",{"_index":1165,"title":{},"body":{"classes/History.html":{}}}],["server/history/schema/history.schema.ts:48",{"_index":1160,"title":{},"body":{"classes/History.html":{}}}],["server/history/schema/history.schema.ts:54",{"_index":1159,"title":{},"body":{"classes/History.html":{}}}],["server/home/home.controller.ts",{"_index":1245,"title":{},"body":{"controllers/HomeController.html":{},"coverage.html":{}}}],["server/home/home.controller.ts:23",{"_index":1251,"title":{},"body":{"controllers/HomeController.html":{}}}],["server/home/home.controller.ts:29",{"_index":1255,"title":{},"body":{"controllers/HomeController.html":{}}}],["server/home/home.module.ts",{"_index":1272,"title":{},"body":{"modules/HomeModule.html":{}}}],["server/logger.ts",{"_index":1280,"title":{},"body":{"classes/Logger.html":{},"coverage.html":{}}}],["server/logger.ts:13",{"_index":1290,"title":{},"body":{"classes/Logger.html":{}}}],["server/logger.ts:17",{"_index":1294,"title":{},"body":{"classes/Logger.html":{}}}],["server/logger.ts:21",{"_index":1298,"title":{},"body":{"classes/Logger.html":{}}}],["server/logger.ts:25",{"_index":1300,"title":{},"body":{"classes/Logger.html":{}}}],["server/logger.ts:4",{"_index":1288,"title":{},"body":{"classes/Logger.html":{}}}],["server/logger.ts:9",{"_index":1296,"title":{},"body":{"classes/Logger.html":{}}}],["server/main.ts",{"_index":2439,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/middleware/disable",{"_index":1053,"title":{},"body":{"injectables/DisableBodyParserMiddleware.html":{},"coverage.html":{}}}],["server/middleware/json",{"_index":1274,"title":{},"body":{"injectables/JsonBodyMiddleware.html":{},"coverage.html":{}}}],["server/middleware/language.middleware.ts",{"_index":1135,"title":{},"body":{"injectables/GetLanguageMiddleware.html":{},"coverage.html":{}}}],["server/middleware/language.middleware.ts:5",{"_index":1137,"title":{},"body":{"injectables/GetLanguageMiddleware.html":{}}}],["server/middleware/logger.middleware.ts",{"_index":1307,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["server/middleware/logger.middleware.ts:6",{"_index":1311,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["server/middleware/logger.middleware.ts:8",{"_index":1309,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["server/ory/ory.controller.ts",{"_index":1340,"title":{},"body":{"controllers/OryController.html":{},"coverage.html":{}}}],["server/ory/ory.controller.ts:24",{"_index":1348,"title":{},"body":{"controllers/OryController.html":{}}}],["server/ory/ory.controller.ts:30",{"_index":1353,"title":{},"body":{"controllers/OryController.html":{}}}],["server/ory/ory.controller.ts:34",{"_index":1350,"title":{},"body":{"controllers/OryController.html":{}}}],["server/ory/ory.module.ts",{"_index":1367,"title":{},"body":{"modules/OryModule.html":{}}}],["server/ory/ory.service.ts",{"_index":1369,"title":{},"body":{"injectables/OryService.html":{},"coverage.html":{}}}],["server/ory/ory.service.ts:26",{"_index":1384,"title":{},"body":{"injectables/OryService.html":{}}}],["server/ory/ory.service.ts:44",{"_index":1378,"title":{},"body":{"injectables/OryService.html":{}}}],["server/ory/ory.service.ts:62",{"_index":1381,"title":{},"body":{"injectables/OryService.html":{}}}],["server/ory/ory.service.ts:8",{"_index":1386,"title":{},"body":{"injectables/OryService.html":{}}}],["server/ory/ory.service.ts:9",{"_index":1375,"title":{},"body":{"injectables/OryService.html":{}}}],["server/paragraph/paragraph.module.ts",{"_index":1437,"title":{},"body":{"modules/ParagraphModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/paragraph/paragraph.service.ts",{"_index":1442,"title":{},"body":{"injectables/ParagraphService.html":{},"coverage.html":{}}}],["server/paragraph/paragraph.service.ts:13",{"_index":1446,"title":{},"body":{"injectables/ParagraphService.html":{}}}],["server/paragraph/paragraph.service.ts:7",{"_index":1444,"title":{},"body":{"injectables/ParagraphService.html":{}}}],["server/paragraph/schemas/paragraph.schema.ts",{"_index":1421,"title":{},"body":{"classes/Paragraph.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/paragraph/schemas/paragraph.schema.ts:14",{"_index":1427,"title":{},"body":{"classes/Paragraph.html":{}}}],["server/paragraph/schemas/paragraph.schema.ts:17",{"_index":1425,"title":{},"body":{"classes/Paragraph.html":{}}}],["server/paragraph/schemas/paragraph.schema.ts:20",{"_index":1426,"title":{},"body":{"classes/Paragraph.html":{}}}],["server/paragraph/schemas/paragraph.schema.ts:29",{"_index":1424,"title":{},"body":{"classes/Paragraph.html":{}}}],["server/parser/parser.module.ts",{"_index":1458,"title":{},"body":{"modules/ParserModule.html":{}}}],["server/parser/parser.service.ts",{"_index":1460,"title":{},"body":{"injectables/ParserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/parser/parser.service.ts:100",{"_index":1472,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/parser/parser.service.ts:105",{"_index":1473,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/parser/parser.service.ts:21",{"_index":1471,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/parser/parser.service.ts:27",{"_index":1485,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/parser/parser.service.ts:28",{"_index":1486,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/parser/parser.service.ts:29",{"_index":1484,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/parser/parser.service.ts:31",{"_index":1475,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/parser/parser.service.ts:65",{"_index":1481,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/parser/parser.service.ts:85",{"_index":1478,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/personality/dto/create",{"_index":1032,"title":{},"body":{"classes/CreatePersonality.html":{},"coverage.html":{}}}],["server/personality/dto/get",{"_index":1141,"title":{},"body":{"classes/GetPersonalities.html":{},"coverage.html":{}}}],["server/personality/personality.controller.ts",{"_index":1570,"title":{},"body":{"controllers/PersonalityController.html":{},"coverage.html":{}}}],["server/personality/personality.controller.ts:106",{"_index":1598,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:133",{"_index":1595,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:147",{"_index":1593,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:34",{"_index":1588,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:39",{"_index":1576,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:56",{"_index":1582,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:65",{"_index":1601,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:70",{"_index":1579,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:81",{"_index":1585,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:90",{"_index":1591,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.module.ts",{"_index":1646,"title":{},"body":{"modules/PersonalityModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/personality/personality.service.ts",{"_index":1650,"title":{},"body":{"injectables/PersonalityService.html":{},"coverage.html":{}}}],["server/personality/personality.service.ts:116",{"_index":1671,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:123",{"_index":1667,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:134",{"_index":1669,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:160",{"_index":1676,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:17",{"_index":1683,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:18",{"_index":1684,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:186",{"_index":1673,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:205",{"_index":1678,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:21",{"_index":1657,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:247",{"_index":1664,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:262",{"_index":1660,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:266",{"_index":1666,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:276",{"_index":1681,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:285",{"_index":1659,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:32",{"_index":1674,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:82",{"_index":1662,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/schemas/personality.schema.ts",{"_index":1557,"title":{},"body":{"classes/Personality.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/personality/schemas/personality.schema.ts:10",{"_index":1559,"title":{},"body":{"classes/Personality.html":{}}}],["server/personality/schemas/personality.schema.ts:13",{"_index":1560,"title":{},"body":{"classes/Personality.html":{}}}],["server/personality/schemas/personality.schema.ts:16",{"_index":1558,"title":{},"body":{"classes/Personality.html":{}}}],["server/personality/schemas/personality.schema.ts:19",{"_index":1562,"title":{},"body":{"classes/Personality.html":{}}}],["server/report/report.controller.ts",{"_index":1783,"title":{},"body":{"controllers/ReportController.html":{},"coverage.html":{}}}],["server/report/report.controller.ts:10",{"_index":1785,"title":{},"body":{"controllers/ReportController.html":{}}}],["server/report/report.module.ts",{"_index":1793,"title":{},"body":{"modules/ReportModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/report/report.service.ts",{"_index":1798,"title":{},"body":{"injectables/ReportService.html":{},"coverage.html":{}}}],["server/report/report.service.ts:16",{"_index":1803,"title":{},"body":{"injectables/ReportService.html":{}}}],["server/report/report.service.ts:35",{"_index":1805,"title":{},"body":{"injectables/ReportService.html":{}}}],["server/report/report.service.ts:9",{"_index":1801,"title":{},"body":{"injectables/ReportService.html":{}}}],["server/report/schemas/report.schema.ts",{"_index":1761,"title":{},"body":{"classes/Report.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/report/schemas/report.schema.ts:22",{"_index":1765,"title":{},"body":{"classes/Report.html":{}}}],["server/report/schemas/report.schema.ts:29",{"_index":1768,"title":{},"body":{"classes/Report.html":{}}}],["server/report/schemas/report.schema.ts:32",{"_index":1767,"title":{},"body":{"classes/Report.html":{}}}],["server/report/schemas/report.schema.ts:35",{"_index":1763,"title":{},"body":{"classes/Report.html":{}}}],["server/report/schemas/report.schema.ts:38",{"_index":1764,"title":{},"body":{"classes/Report.html":{}}}],["server/report/schemas/report.schema.ts:41",{"_index":1769,"title":{},"body":{"classes/Report.html":{}}}],["server/report/schemas/report.schema.ts:44",{"_index":1766,"title":{},"body":{"classes/Report.html":{}}}],["server/report/schemas/report.schema.ts:67",{"_index":1762,"title":{},"body":{"classes/Report.html":{}}}],["server/root/root.controller.ts",{"_index":1810,"title":{},"body":{"controllers/RootController.html":{},"coverage.html":{}}}],["server/root/root.controller.ts:17",{"_index":1814,"title":{},"body":{"controllers/RootController.html":{}}}],["server/root/root.controller.ts:8",{"_index":1818,"title":{},"body":{"controllers/RootController.html":{}}}],["server/seed.ts",{"_index":2447,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/sentence/schemas/sentence.schema.ts",{"_index":1830,"title":{},"body":{"classes/Sentence.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/sentence/schemas/sentence.schema.ts:13",{"_index":1834,"title":{},"body":{"classes/Sentence.html":{}}}],["server/sentence/schemas/sentence.schema.ts:16",{"_index":1832,"title":{},"body":{"classes/Sentence.html":{}}}],["server/sentence/schemas/sentence.schema.ts:19",{"_index":1833,"title":{},"body":{"classes/Sentence.html":{}}}],["server/sentence/schemas/sentence.schema.ts:22",{"_index":1831,"title":{},"body":{"classes/Sentence.html":{}}}],["server/sentence/sentence.module.ts",{"_index":1842,"title":{},"body":{"modules/SentenceModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/sentence/sentence.service.ts",{"_index":1847,"title":{},"body":{"injectables/SentenceService.html":{},"coverage.html":{}}}],["server/sentence/sentence.service.ts:13",{"_index":1851,"title":{},"body":{"injectables/SentenceService.html":{}}}],["server/sentence/sentence.service.ts:7",{"_index":1849,"title":{},"body":{"injectables/SentenceService.html":{}}}],["server/server.ts",{"_index":2448,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/sitemap/sitemap.controller.ts",{"_index":1887,"title":{},"body":{"controllers/SitemapController.html":{},"coverage.html":{}}}],["server/sitemap/sitemap.controller.ts:18",{"_index":1893,"title":{},"body":{"controllers/SitemapController.html":{}}}],["server/sitemap/sitemap.controller.ts:26",{"_index":1897,"title":{},"body":{"controllers/SitemapController.html":{}}}],["server/sitemap/sitemap.module.ts",{"_index":1914,"title":{},"body":{"modules/SitemapModule.html":{}}}],["server/sitemap/sitemap.service.ts",{"_index":1916,"title":{},"body":{"injectables/SitemapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/sitemap/sitemap.service.ts:15",{"_index":1925,"title":{},"body":{"injectables/SitemapService.html":{}}}],["server/sitemap/sitemap.service.ts:17",{"_index":1920,"title":{},"body":{"injectables/SitemapService.html":{}}}],["server/sitemap/sitemap.service.ts:73",{"_index":1923,"title":{},"body":{"injectables/SitemapService.html":{}}}],["server/sitemap/sitemap.service.ts:9",{"_index":1918,"title":{},"body":{"injectables/SitemapService.html":{}}}],["server/source/schemas/source.schema.ts",{"_index":1964,"title":{},"body":{"classes/Source.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/source/schemas/source.schema.ts:14",{"_index":1968,"title":{},"body":{"classes/Source.html":{}}}],["server/source/schemas/source.schema.ts:28",{"_index":1966,"title":{},"body":{"classes/Source.html":{}}}],["server/source/schemas/source.schema.ts:31",{"_index":1967,"title":{},"body":{"classes/Source.html":{}}}],["server/source/schemas/source.schema.ts:41",{"_index":1969,"title":{},"body":{"classes/Source.html":{}}}],["server/source/schemas/source.schema.ts:46",{"_index":1972,"title":{},"body":{"classes/Source.html":{}}}],["server/source/schemas/source.schema.ts:53",{"_index":1973,"title":{},"body":{"classes/Source.html":{}}}],["server/source/source.controller.ts",{"_index":1982,"title":{},"body":{"controllers/SourceController.html":{},"coverage.html":{}}}],["server/source/source.controller.ts:10",{"_index":1987,"title":{},"body":{"controllers/SourceController.html":{}}}],["server/source/source.module.ts",{"_index":2001,"title":{},"body":{"modules/SourceModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/source/source.service.ts",{"_index":2006,"title":{},"body":{"injectables/SourceService.html":{},"coverage.html":{}}}],["server/source/source.service.ts:12",{"_index":2011,"title":{},"body":{"injectables/SourceService.html":{}}}],["server/source/source.service.ts:20",{"_index":2012,"title":{},"body":{"injectables/SourceService.html":{}}}],["server/source/source.service.ts:7",{"_index":2009,"title":{},"body":{"injectables/SourceService.html":{}}}],["server/speech/schemas/speech.schema.ts",{"_index":2021,"title":{},"body":{"classes/Speech.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/speech/schemas/speech.schema.ts:13",{"_index":2024,"title":{},"body":{"classes/Speech.html":{}}}],["server/speech/schemas/speech.schema.ts:22",{"_index":2022,"title":{},"body":{"classes/Speech.html":{}}}],["server/speech/speech.module.ts",{"_index":2032,"title":{},"body":{"modules/SpeechModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/speech/speech.service.ts",{"_index":2037,"title":{},"body":{"injectables/SpeechService.html":{},"coverage.html":{}}}],["server/speech/speech.service.ts:13",{"_index":2041,"title":{},"body":{"injectables/SpeechService.html":{}}}],["server/speech/speech.service.ts:7",{"_index":2039,"title":{},"body":{"injectables/SpeechService.html":{}}}],["server/stats/stats.controller.ts",{"_index":2046,"title":{},"body":{"controllers/StatsController.html":{},"coverage.html":{}}}],["server/stats/stats.controller.ts:10",{"_index":2050,"title":{},"body":{"controllers/StatsController.html":{}}}],["server/stats/stats.module.ts",{"_index":2058,"title":{},"body":{"modules/StatsModule.html":{}}}],["server/stats/stats.service.ts",{"_index":2060,"title":{},"body":{"injectables/StatsService.html":{},"coverage.html":{}}}],["server/stats/stats.service.ts:14",{"_index":2063,"title":{},"body":{"injectables/StatsService.html":{}}}],["server/stats/stats.service.ts:7",{"_index":2062,"title":{},"body":{"injectables/StatsService.html":{}}}],["server/tests/mocks/sessionguardmock.ts",{"_index":2451,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/tests/utils/seedtestuser.ts",{"_index":2453,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/tests/utils/testconfigoptions.ts",{"_index":2455,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/tests/utils/usermock.ts",{"_index":2457,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/types/baserequest.ts",{"_index":3496,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["server/users/schemas/user.schema.ts",{"_index":2078,"title":{},"body":{"classes/User.html":{},"interfaces/UserDocument.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/users/schemas/user.schema.ts:11",{"_index":2083,"title":{},"body":{"classes/User.html":{}}}],["server/users/schemas/user.schema.ts:14",{"_index":2081,"title":{},"body":{"classes/User.html":{}}}],["server/users/schemas/user.schema.ts:17",{"_index":2084,"title":{},"body":{"classes/User.html":{}}}],["server/users/schemas/user.schema.ts:20",{"_index":2082,"title":{},"body":{"classes/User.html":{}}}],["server/users/schemas/user.schema.ts:5",{"_index":2090,"title":{},"body":{"interfaces/UserDocument.html":{}}}],["server/users/users.controller.ts",{"_index":2092,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["server/users/users.controller.ts:26",{"_index":2099,"title":{},"body":{"controllers/UsersController.html":{}}}],["server/users/users.controller.ts:40",{"_index":2102,"title":{},"body":{"controllers/UsersController.html":{}}}],["server/users/users.controller.ts:56",{"_index":2096,"title":{},"body":{"controllers/UsersController.html":{}}}],["server/users/users.module.ts",{"_index":2118,"title":{},"body":{"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/users/users.service.ts",{"_index":2123,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["server/users/users.service.ts:10",{"_index":2127,"title":{},"body":{"injectables/UsersService.html":{}}}],["server/users/users.service.ts:16",{"_index":2129,"title":{},"body":{"injectables/UsersService.html":{}}}],["server/users/users.service.ts:24",{"_index":2133,"title":{},"body":{"injectables/UsersService.html":{}}}],["server/users/users.service.ts:49",{"_index":2131,"title":{},"body":{"injectables/UsersService.html":{}}}],["server/users/users.service.ts:55",{"_index":2135,"title":{},"body":{"injectables/UsersService.html":{}}}],["server/util.ts",{"_index":2164,"title":{},"body":{"injectables/UtilService.html":{},"coverage.html":{}}}],["server/util.ts:27",{"_index":2177,"title":{},"body":{"injectables/UtilService.html":{}}}],["server/util.ts:43",{"_index":2173,"title":{},"body":{"injectables/UtilService.html":{}}}],["server/util.ts:6",{"_index":2169,"title":{},"body":{"injectables/UtilService.html":{}}}],["server/view/view.controller.ts",{"_index":2211,"title":{},"body":{"controllers/ViewController.html":{},"coverage.html":{}}}],["server/view/view.controller.ts:11",{"_index":2225,"title":{},"body":{"controllers/ViewController.html":{}}}],["server/view/view.controller.ts:21",{"_index":2236,"title":{},"body":{"controllers/ViewController.html":{}}}],["server/view/view.controller.ts:31",{"_index":2239,"title":{},"body":{"controllers/ViewController.html":{}}}],["server/view/view.controller.ts:41",{"_index":2223,"title":{},"body":{"controllers/ViewController.html":{}}}],["server/view/view.controller.ts:51",{"_index":2220,"title":{},"body":{"controllers/ViewController.html":{}}}],["server/view/view.controller.ts:65",{"_index":2228,"title":{},"body":{"controllers/ViewController.html":{}}}],["server/view/view.module.ts",{"_index":2257,"title":{},"body":{"modules/ViewModule.html":{}}}],["server/view/view.service.ts",{"_index":2259,"title":{},"body":{"injectables/ViewService.html":{},"coverage.html":{}}}],["server/view/view.service.ts:13",{"_index":2265,"title":{},"body":{"injectables/ViewService.html":{}}}],["server/view/view.service.ts:25",{"_index":2263,"title":{},"body":{"injectables/ViewService.html":{}}}],["server/view/view.service.ts:8",{"_index":2267,"title":{},"body":{"injectables/ViewService.html":{}}}],["server/view/view.service.ts:9",{"_index":2262,"title":{},"body":{"injectables/ViewService.html":{}}}],["server/wikidata/schemas/wikidata.schema.ts",{"_index":2279,"title":{},"body":{"classes/WikidataCache.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/wikidata/schemas/wikidata.schema.ts:12",{"_index":2282,"title":{},"body":{"classes/WikidataCache.html":{}}}],["server/wikidata/schemas/wikidata.schema.ts:15",{"_index":2283,"title":{},"body":{"classes/WikidataCache.html":{}}}],["server/wikidata/schemas/wikidata.schema.ts:18",{"_index":2281,"title":{},"body":{"classes/WikidataCache.html":{}}}],["server/wikidata/schemas/wikidata.schema.ts:9",{"_index":2284,"title":{},"body":{"classes/WikidataCache.html":{}}}],["server/wikidata/wikidata.module.ts",{"_index":2292,"title":{},"body":{"modules/WikidataModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/wikidata/wikidata.service.ts",{"_index":2302,"title":{},"body":{"injectables/WikidataService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/wikidata/wikidata.service.ts:106",{"_index":2323,"title":{},"body":{"injectables/WikidataService.html":{}}}],["server/wikidata/wikidata.service.ts:113",{"_index":2315,"title":{},"body":{"injectables/WikidataService.html":{}}}],["server/wikidata/wikidata.service.ts:127",{"_index":2325,"title":{},"body":{"injectables/WikidataService.html":{}}}],["server/wikidata/wikidata.service.ts:155",{"_index":2320,"title":{},"body":{"injectables/WikidataService.html":{}}}],["server/wikidata/wikidata.service.ts:16",{"_index":2311,"title":{},"body":{"injectables/WikidataService.html":{}}}],["server/wikidata/wikidata.service.ts:22",{"_index":2317,"title":{},"body":{"injectables/WikidataService.html":{}}}],["server/wikidata/wikidata.service.ts:39",{"_index":2327,"title":{},"body":{"injectables/WikidataService.html":{}}}],["server/wikidata/wikidata.service.ts:55",{"_index":2313,"title":{},"body":{"injectables/WikidataService.html":{}}}],["serves",{"_index":2898,"title":{},"body":{"license.html":{}}}],["service",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"license.html":{}}}],["servicerunner",{"_index":2432,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["servicing",{"_index":3391,"title":{},"body":{"license.html":{}}}],["session",{"_index":1877,"title":{},"body":{"guards/SessionGuard.html":{},"dependencies.html":{}}}],["session?.identity?.traits?.user_id",{"_index":1881,"title":{},"body":{"guards/SessionGuard.html":{}}}],["sessionguard",{"_index":85,"title":{"guards/SessionGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/SessionGuard.html":{},"coverage.html":{}}}],["sessionguardmock",{"_index":2452,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["set",{"_index":2560,"title":{},"body":{"dependencies.html":{}}}],["setmetadata('public",{"_index":3593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shall",{"_index":2976,"title":{},"body":{"license.html":{}}}],["share",{"_index":2548,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["shared",{"_index":2923,"title":{},"body":{"license.html":{}}}],["short",{"_index":3445,"title":{},"body":{"license.html":{}}}],["show",{"_index":2629,"title":{},"body":{"index.html":{},"license.html":{}}}],["show404",{"_index":2215,"title":{},"body":{"controllers/ViewController.html":{}}}],["show404(@req",{"_index":2253,"title":{},"body":{"controllers/ViewController.html":{}}}],["show404(req",{"_index":2226,"title":{},"body":{"controllers/ViewController.html":{}}}],["showaboutpage",{"_index":2216,"title":{},"body":{"controllers/ViewController.html":{}}}],["showaboutpage(@req",{"_index":2245,"title":{},"body":{"controllers/ViewController.html":{}}}],["showaboutpage(req",{"_index":2234,"title":{},"body":{"controllers/ViewController.html":{}}}],["showhome",{"_index":1248,"title":{},"body":{"controllers/HomeController.html":{}}}],["showhome(@req",{"_index":1263,"title":{},"body":{"controllers/HomeController.html":{}}}],["showhome(req",{"_index":1252,"title":{},"body":{"controllers/HomeController.html":{}}}],["showprivacypolicypage",{"_index":2217,"title":{},"body":{"controllers/ViewController.html":{}}}],["showprivacypolicypage(@req",{"_index":2247,"title":{},"body":{"controllers/ViewController.html":{}}}],["showprivacypolicypage(req",{"_index":2237,"title":{},"body":{"controllers/ViewController.html":{}}}],["sign",{"_index":3458,"title":{},"body":{"license.html":{}}}],["significant",{"_index":3137,"title":{},"body":{"license.html":{}}}],["similar",{"_index":2991,"title":{},"body":{"license.html":{}}}],["simultaneously",{"_index":3352,"title":{},"body":{"license.html":{}}}],["single",{"_index":3324,"title":{},"body":{"license.html":{}}}],["sistema",{"_index":3575,"title":{},"body":{"miscellaneous/variables.html":{}}}],["site",{"_index":1953,"title":{},"body":{"injectables/SitemapService.html":{}}}],["sitekey",{"_index":416,"title":{},"body":{"controllers/ClaimController.html":{}}}],["sitelinkname",{"_index":2373,"title":{},"body":{"injectables/WikidataService.html":{}}}],["sitelinkname.match(/^(.*)wiki$/)[1",{"_index":2377,"title":{},"body":{"injectables/WikidataService.html":{}}}],["sitemap",{"_index":1896,"title":{},"body":{"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"dependencies.html":{}}}],["sitemap.controller",{"_index":1915,"title":{},"body":{"modules/SitemapModule.html":{}}}],["sitemap.service",{"_index":1900,"title":{},"body":{"controllers/SitemapController.html":{},"modules/SitemapModule.html":{}}}],["sitemap/sitemap.module",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["sitemapcontroller",{"_index":1886,"title":{"controllers/SitemapController.html":{}},"body":{"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"coverage.html":{}}}],["sitemapmodule",{"_index":68,"title":{"modules/SitemapModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SitemapModule.html":{},"modules.html":{},"overview.html":{}}}],["sitemapservice",{"_index":1899,"title":{"injectables/SitemapService.html":{}},"body":{"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"coverage.html":{},"overview.html":{}}}],["sitemapstream",{"_index":1926,"title":{},"body":{"injectables/SitemapService.html":{}}}],["sitemapstream.end",{"_index":1955,"title":{},"body":{"injectables/SitemapService.html":{}}}],["sitemapstream.write(site",{"_index":1954,"title":{},"body":{"injectables/SitemapService.html":{}}}],["sitemapxml",{"_index":1904,"title":{},"body":{"controllers/SitemapController.html":{}}}],["sites",{"_index":1930,"title":{},"body":{"injectables/SitemapService.html":{}}}],["sites.push",{"_index":1944,"title":{},"body":{"injectables/SitemapService.html":{}}}],["size",{"_index":1689,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["skip(page",{"_index":724,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{},"injectables/SourceService.html":{}}}],["slug",{"_index":208,"title":{},"body":{"classes/Claim.html":{},"injectables/ClaimReviewTaskService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimService.html":{},"classes/Personality.html":{},"injectables/PersonalityService.html":{}}}],["slugify",{"_index":833,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{},"dependencies.html":{}}}],["slugify(claim.title",{"_index":846,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["slugify(newpersonalitybody.name",{"_index":1739,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["slugify(personality.name",{"_index":1702,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["social",{"_index":2550,"title":{},"body":{"dependencies.html":{}}}],["soft",{"_index":595,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["softdelete",{"_index":227,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"classes/Personality.html":{},"injectables/PersonalityService.html":{},"dependencies.html":{}}}],["softdeleteplugin",{"_index":226,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/Personality.html":{}}}],["software",{"_index":2672,"title":{},"body":{"license.html":{}}}],["sold",{"_index":3118,"title":{},"body":{"license.html":{}}}],["sole",{"_index":2956,"title":{},"body":{"license.html":{}}}],["solely",{"_index":2969,"title":{},"body":{"license.html":{}}}],["something",{"_index":1949,"title":{},"body":{"injectables/SitemapService.html":{}}}],["sonarcloud",{"_index":674,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{}}}],["sort",{"_index":630,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{},"injectables/SourceService.html":{}}}],["source",{"_index":4,"title":{"classes/Source.html":{}},"body":{"modules/AppModule.html":{},"modules/CaptchaModule.html":{},"injectables/CaptchaService.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimReviewTask.html":{},"modules/ClaimReviewTaskModule.html":{},"injectables/ClaimReviewTaskService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreateClaimReviewTaskDTO.html":{},"classes/CreatePersonality.html":{},"injectables/DisableBodyParserMiddleware.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/GetClaimsDTO.html":{},"injectables/GetLanguageMiddleware.html":{},"classes/GetPersonalities.html":{},"classes/GetTasksDTO.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/JsonBodyMiddleware.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"modules/OryModule.html":{},"injectables/OryService.html":{},"classes/Paragraph.html":{},"modules/ParagraphModule.html":{},"injectables/ParagraphService.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"classes/Report.html":{},"controllers/ReportController.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"controllers/RootController.html":{},"classes/Sentence.html":{},"modules/SentenceModule.html":{},"injectables/SentenceService.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"classes/Speech.html":{},"modules/SpeechModule.html":{},"injectables/SpeechService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimDTO.html":{},"classes/UpdateClaimReviewTaskDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"license.html":{}}}],["source.controller",{"_index":2003,"title":{},"body":{"modules/SourceModule.html":{}}}],["source.name",{"_index":2005,"title":{},"body":{"modules/SourceModule.html":{},"miscellaneous/variables.html":{}}}],["source.save",{"_index":2019,"title":{},"body":{"injectables/SourceService.html":{}}}],["source.service",{"_index":1988,"title":{},"body":{"controllers/SourceController.html":{},"modules/SourceModule.html":{}}}],["source/schemas/source.schema",{"_index":837,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ReportService.html":{}}}],["source/source.module",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/ReportModule.html":{}}}],["source/source.service",{"_index":835,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ReportService.html":{}}}],["sourcecontroller",{"_index":1981,"title":{"controllers/SourceController.html":{}},"body":{"controllers/SourceController.html":{},"modules/SourceModule.html":{},"coverage.html":{}}}],["sourced",{"_index":3478,"title":{},"body":{"properties.html":{}}}],["sourcedocument",{"_index":1974,"title":{},"body":{"classes/Source.html":{},"injectables/SourceService.html":{},"miscellaneous/typealiases.html":{}}}],["sourcemodel",{"_index":2004,"title":{},"body":{"modules/SourceModule.html":{},"injectables/SourceService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sourcemodule",{"_index":45,"title":{"modules/SourceModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/ReportModule.html":{},"modules/SourceModule.html":{},"modules.html":{},"overview.html":{}}}],["sources",{"_index":432,"title":{},"body":{"controllers/ClaimController.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreateClaimReviewTaskDTO.html":{},"classes/Report.html":{},"controllers/SourceController.html":{}}}],["sources.length",{"_index":1997,"title":{},"body":{"controllers/SourceController.html":{}}}],["sourceschema",{"_index":1979,"title":{},"body":{"classes/Source.html":{},"modules/SourceModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sourcesclaimpage",{"_index":261,"title":{},"body":{"controllers/ClaimController.html":{}}}],["sourcesclaimpage(@req",{"_index":431,"title":{},"body":{"controllers/ClaimController.html":{}}}],["sourcesclaimpage(req",{"_index":301,"title":{},"body":{"controllers/ClaimController.html":{}}}],["sourceservice",{"_index":820,"title":{"injectables/SourceService.html":{}},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ReportService.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"coverage.html":{},"overview.html":{}}}],["sourcetargetmodel",{"_index":836,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ReportService.html":{},"classes/Source.html":{},"miscellaneous/enumerations.html":{}}}],["sourcetargetmodel.claim",{"_index":868,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["spare",{"_index":3069,"title":{},"body":{"license.html":{}}}],["sparse",{"_index":1561,"title":{},"body":{"classes/Personality.html":{}}}],["speak",{"_index":2707,"title":{},"body":{"license.html":{}}}],["special",{"_index":853,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{},"license.html":{}}}],["specifc",{"_index":949,"title":{},"body":{"injectables/ClaimService.html":{}}}],["specific",{"_index":2905,"title":{},"body":{"license.html":{}}}],["specifically",{"_index":2927,"title":{},"body":{"license.html":{}}}],["specified",{"_index":2882,"title":{},"body":{"license.html":{}}}],["specifies",{"_index":3371,"title":{},"body":{"license.html":{}}}],["specify",{"_index":3374,"title":{},"body":{"license.html":{}}}],["speech",{"_index":769,"title":{"classes/Speech.html":{}},"body":{"classes/ClaimRevision.html":{},"classes/Speech.html":{},"modules/SpeechModule.html":{},"injectables/SpeechService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["speech.name",{"_index":2036,"title":{},"body":{"modules/SpeechModule.html":{},"miscellaneous/variables.html":{}}}],["speech.service",{"_index":2034,"title":{},"body":{"modules/SpeechModule.html":{}}}],["speech/schemas/speech.schema",{"_index":1491,"title":{},"body":{"injectables/ParserService.html":{}}}],["speech/speech.module",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/ParserModule.html":{}}}],["speech/speech.service",{"_index":1489,"title":{},"body":{"injectables/ParserService.html":{}}}],["speechbody",{"_index":2042,"title":{},"body":{"injectables/SpeechService.html":{}}}],["speechdocument",{"_index":1490,"title":{},"body":{"injectables/ParserService.html":{},"classes/Speech.html":{},"injectables/SpeechService.html":{},"miscellaneous/typealiases.html":{}}}],["speechmodel",{"_index":2035,"title":{},"body":{"modules/SpeechModule.html":{},"injectables/SpeechService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["speechmodule",{"_index":100,"title":{"modules/SpeechModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/ParserModule.html":{},"modules/SpeechModule.html":{},"modules.html":{},"overview.html":{}}}],["speechschema",{"_index":2028,"title":{},"body":{"classes/Speech.html":{},"modules/SpeechModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["speechschemaraw",{"_index":2026,"title":{},"body":{"classes/Speech.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["speechservice",{"_index":1469,"title":{"injectables/SpeechService.html":{}},"body":{"injectables/ParserService.html":{},"modules/SpeechModule.html":{},"injectables/SpeechService.html":{},"coverage.html":{},"overview.html":{}}}],["spirit",{"_index":3364,"title":{},"body":{"license.html":{}}}],["stand",{"_index":2782,"title":{},"body":{"license.html":{}}}],["standard",{"_index":2878,"title":{},"body":{"license.html":{}}}],["standards",{"_index":2881,"title":{},"body":{"license.html":{}}}],["start",{"_index":643,"title":{},"body":{"injectables/ClaimReviewService.html":{},"license.html":{}}}],["started",{"_index":2576,"title":{"index.html":{},"license.html":{}},"body":{}}],["starters",{"_index":1510,"title":{},"body":{"injectables/ParserService.html":{}}}],["starts",{"_index":3446,"title":{},"body":{"license.html":{}}}],["startup",{"_index":2593,"title":{},"body":{"index.html":{}}}],["state",{"_index":3433,"title":{},"body":{"license.html":{}}}],["stated",{"_index":2941,"title":{},"body":{"license.html":{}}}],["statement",{"_index":3218,"title":{},"body":{"license.html":{}}}],["statements",{"_index":2414,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":2791,"title":{},"body":{"license.html":{}}}],["static",{"_index":22,"title":{},"body":{"modules/AppModule.html":{}}}],["stating",{"_index":3013,"title":{},"body":{"license.html":{}}}],["stats",{"_index":398,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{},"controllers/HomeController.html":{},"injectables/PersonalityService.html":{}}}],["stats.controller",{"_index":2059,"title":{},"body":{"modules/StatsModule.html":{}}}],["stats.service",{"_index":2051,"title":{},"body":{"controllers/StatsController.html":{},"modules/StatsModule.html":{}}}],["stats/stats.module",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/HomeModule.html":{}}}],["stats/stats.service",{"_index":1257,"title":{},"body":{"controllers/HomeController.html":{}}}],["statscontroller",{"_index":2045,"title":{"controllers/StatsController.html":{}},"body":{"controllers/StatsController.html":{},"modules/StatsModule.html":{},"coverage.html":{}}}],["statsmodule",{"_index":47,"title":{"modules/StatsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HomeModule.html":{},"modules/StatsModule.html":{},"modules.html":{},"overview.html":{}}}],["statsservice",{"_index":1256,"title":{"injectables/StatsService.html":{}},"body":{"controllers/HomeController.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"coverage.html":{},"overview.html":{}}}],["status",{"_index":1815,"title":{},"body":{"controllers/RootController.html":{},"license.html":{}}}],["statuscode",{"_index":1319,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["step",{"_index":2613,"title":{},"body":{"index.html":{}}}],["steps",{"_index":2740,"title":{},"body":{"license.html":{}}}],["storage",{"_index":3047,"title":{},"body":{"license.html":{}}}],["strategy",{"_index":1938,"title":{},"body":{"injectables/SitemapService.html":{},"controllers/ViewController.html":{}}}],["streamtopromise",{"_index":1927,"title":{},"body":{"injectables/SitemapService.html":{}}}],["streamtopromise(sitemapstream",{"_index":1956,"title":{},"body":{"injectables/SitemapService.html":{}}}],["strict",{"_index":851,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{}}}],["string",{"_index":176,"title":{},"body":{"injectables/CaptchaService.html":{},"classes/Claim.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController-1.html":{},"classes/ClaimReviewTask.html":{},"injectables/ClaimReviewTaskService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreateClaimReviewTaskDTO.html":{},"classes/CreatePersonality.html":{},"injectables/EmailService.html":{},"classes/GetClaimsDTO.html":{},"injectables/GetLanguageMiddleware.html":{},"classes/GetPersonalities.html":{},"classes/GetTasksDTO.html":{},"injectables/HistoryService.html":{},"classes/Logger.html":{},"injectables/OryService.html":{},"classes/Paragraph.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"injectables/PersonalityService.html":{},"classes/Report.html":{},"controllers/ReportController.html":{},"controllers/RootController.html":{},"classes/Sentence.html":{},"classes/Source.html":{},"injectables/SourceService.html":{},"classes/Speech.html":{},"classes/UpdateClaimReviewTaskDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{},"index.html":{}}}],["strip",{"_index":852,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{}}}],["styled",{"_index":2564,"title":{},"body":{"dependencies.html":{}}}],["subdividing",{"_index":3267,"title":{},"body":{"license.html":{}}}],["subject",{"_index":1079,"title":{},"body":{"injectables/EmailService.html":{},"license.html":{}}}],["sublicenses",{"_index":3296,"title":{},"body":{"license.html":{}}}],["sublicensing",{"_index":2970,"title":{},"body":{"license.html":{}}}],["submitsitemap",{"_index":1889,"title":{},"body":{"controllers/SitemapController.html":{},"injectables/SitemapService.html":{}}}],["submitsitemap(@request",{"_index":1908,"title":{},"body":{"controllers/SitemapController.html":{}}}],["submitsitemap(hostname",{"_index":1922,"title":{},"body":{"injectables/SitemapService.html":{}}}],["submitsitemap(req",{"_index":1894,"title":{},"body":{"controllers/SitemapController.html":{}}}],["submitted",{"_index":1959,"title":{},"body":{"injectables/SitemapService.html":{}}}],["submitting",{"_index":1960,"title":{},"body":{"injectables/SitemapService.html":{}}}],["subprograms",{"_index":2926,"title":{},"body":{"license.html":{}}}],["subroutine",{"_index":3461,"title":{},"body":{"license.html":{}}}],["subsection",{"_index":3079,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":3132,"title":{},"body":{"license.html":{}}}],["substantially",{"_index":2780,"title":{},"body":{"license.html":{}}}],["successfully",{"_index":1628,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["such",{"_index":2730,"title":{},"body":{"license.html":{}}}],["sue",{"_index":3308,"title":{},"body":{"license.html":{}}}],["suffice",{"_index":3144,"title":{},"body":{"license.html":{}}}],["suffixes",{"_index":1508,"title":{},"body":{"injectables/ParserService.html":{}}}],["sum",{"_index":629,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["summary",{"_index":1027,"title":{},"body":{"classes/CreateClaimReviewTaskDTO.html":{},"classes/Report.html":{}}}],["supplement",{"_index":3174,"title":{},"body":{"license.html":{}}}],["support",{"_index":3021,"title":{},"body":{"license.html":{},"modules.html":{}}}],["supports",{"_index":3088,"title":{},"body":{"license.html":{}}}],["sure",{"_index":2697,"title":{},"body":{"license.html":{}}}],["surrender",{"_index":2723,"title":{},"body":{"license.html":{}}}],["survive",{"_index":3217,"title":{},"body":{"license.html":{}}}],["sustained",{"_index":3406,"title":{},"body":{"license.html":{}}}],["svg",{"_index":2467,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["system",{"_index":2888,"title":{},"body":{"license.html":{}}}],["systematic",{"_index":2767,"title":{},"body":{"license.html":{}}}],["t",{"_index":2176,"title":{},"body":{"injectables/UtilService.html":{}}}],["table",{"_index":2462,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2461,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":773,"title":{},"body":{"classes/ClaimRevision.html":{},"classes/Report.html":{},"classes/Source.html":{}}}],["take",{"_index":2655,"title":{},"body":{"index.html":{},"license.html":{}}}],["taking",{"_index":2616,"title":{},"body":{"index.html":{}}}],["tangible",{"_index":3113,"title":{},"body":{"license.html":{}}}],["target",{"_index":1212,"title":{},"body":{"injectables/HistoryService.html":{}}}],["target(claim",{"_index":1225,"title":{},"body":{"injectables/HistoryService.html":{}}}],["targetid",{"_index":244,"title":{},"body":{"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"injectables/ClaimRevisionService.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/PersonalityController.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{}}}],["targetmodel",{"_index":333,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"classes/Source.html":{},"miscellaneous/enumerations.html":{}}}],["targetmodel.claim",{"_index":435,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{}}}],["targetmodel.claimreview",{"_index":662,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["targetmodel.personality",{"_index":1641,"title":{},"body":{"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["task.controller",{"_index":699,"title":{},"body":{"modules/ClaimReviewTaskModule.html":{}}}],["task.controller.ts",{"_index":496,"title":{},"body":{"controllers/ClaimReviewController-1.html":{},"coverage.html":{}}}],["task.controller.ts:32",{"_index":512,"title":{},"body":{"controllers/ClaimReviewController-1.html":{}}}],["task.controller.ts:52",{"_index":507,"title":{},"body":{"controllers/ClaimReviewController-1.html":{}}}],["task.controller.ts:57",{"_index":503,"title":{},"body":{"controllers/ClaimReviewController-1.html":{}}}],["task.controller.ts:68",{"_index":523,"title":{},"body":{"controllers/ClaimReviewController-1.html":{}}}],["task.controller.ts:85",{"_index":515,"title":{},"body":{"controllers/ClaimReviewController-1.html":{}}}],["task.controller.ts:92",{"_index":518,"title":{},"body":{"controllers/ClaimReviewController-1.html":{}}}],["task.dto",{"_index":524,"title":{},"body":{"controllers/ClaimReviewController-1.html":{},"classes/ClaimReviewTask.html":{},"injectables/ClaimReviewTaskService.html":{},"classes/UpdateClaimReviewTaskDTO.html":{}}}],["task.dto.ts",{"_index":1019,"title":{},"body":{"classes/CreateClaimReviewTaskDTO.html":{},"classes/UpdateClaimReviewTaskDTO.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["task.dto.ts:10",{"_index":2077,"title":{},"body":{"classes/UpdateClaimReviewTaskDTO.html":{}}}],["task.dto.ts:34",{"_index":1021,"title":{},"body":{"classes/CreateClaimReviewTaskDTO.html":{}}}],["task.dto.ts:38",{"_index":1023,"title":{},"body":{"classes/CreateClaimReviewTaskDTO.html":{}}}],["task.dto.ts:42",{"_index":1022,"title":{},"body":{"classes/CreateClaimReviewTaskDTO.html":{}}}],["task.module",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{}}}],["task.module.ts",{"_index":697,"title":{},"body":{"modules/ClaimReviewTaskModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["task.schema",{"_index":698,"title":{},"body":{"modules/ClaimReviewTaskModule.html":{},"injectables/ClaimReviewTaskService.html":{}}}],["task.schema.ts",{"_index":684,"title":{},"body":{"classes/ClaimReviewTask.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["task.schema.ts:10",{"_index":686,"title":{},"body":{"classes/ClaimReviewTask.html":{}}}],["task.schema.ts:13",{"_index":688,"title":{},"body":{"classes/ClaimReviewTask.html":{}}}],["task.service",{"_index":332,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{},"modules/ClaimReviewTaskModule.html":{}}}],["task.service.ts",{"_index":702,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{},"coverage.html":{}}}],["task.service.ts:131",{"_index":715,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["task.service.ts:135",{"_index":707,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["task.service.ts:14",{"_index":706,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["task.service.ts:22",{"_index":717,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["task.service.ts:65",{"_index":712,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["task.service.ts:69",{"_index":709,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["task.service.ts:80",{"_index":719,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["task/claim",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"controllers/ClaimReviewController-1.html":{},"modules/ClaimReviewTaskModule.html":{},"injectables/ClaimReviewTaskService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["task/dto/create",{"_index":1018,"title":{},"body":{"classes/CreateClaimReviewTaskDTO.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["task/dto/get",{"_index":1150,"title":{},"body":{"classes/GetTasksDTO.html":{},"coverage.html":{}}}],["task/dto/update",{"_index":2076,"title":{},"body":{"classes/UpdateClaimReviewTaskDTO.html":{},"coverage.html":{}}}],["task/schemas/claim",{"_index":683,"title":{},"body":{"classes/ClaimReviewTask.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["tasks",{"_index":540,"title":{},"body":{"controllers/ClaimReviewController-1.html":{}}}],["tasks.dto",{"_index":525,"title":{},"body":{"controllers/ClaimReviewController-1.html":{}}}],["tasks.dto.ts",{"_index":1151,"title":{},"body":{"classes/GetTasksDTO.html":{},"coverage.html":{}}}],["tasks.dto.ts:11",{"_index":1154,"title":{},"body":{"classes/GetTasksDTO.html":{}}}],["tasks.dto.ts:14",{"_index":1152,"title":{},"body":{"classes/GetTasksDTO.html":{}}}],["tasks.dto.ts:17",{"_index":1155,"title":{},"body":{"classes/GetTasksDTO.html":{}}}],["tasks.dto.ts:7",{"_index":1153,"title":{},"body":{"classes/GetTasksDTO.html":{}}}],["technological",{"_index":2979,"title":{},"body":{"license.html":{}}}],["tells",{"_index":2867,"title":{},"body":{"license.html":{}}}],["template",{"_index":1096,"title":{},"body":{"injectables/EmailService.html":{}}}],["template/email.html",{"_index":1077,"title":{},"body":{"injectables/EmailService.html":{}}}],["templateoptions",{"_index":1081,"title":{},"body":{"injectables/EmailService.html":{}}}],["templatepath",{"_index":1075,"title":{},"body":{"injectables/EmailService.html":{}}}],["templates/userseed.html",{"_index":3579,"title":{},"body":{"miscellaneous/variables.html":{}}}],["term",{"_index":2939,"title":{},"body":{"license.html":{}}}],["terminal",{"_index":3444,"title":{},"body":{"license.html":{}}}],["terminate",{"_index":3223,"title":{},"body":{"license.html":{}}}],["terminated",{"_index":3245,"title":{},"body":{"license.html":{}}}],["terminates",{"_index":3231,"title":{},"body":{"license.html":{}}}],["termination",{"_index":3220,"title":{},"body":{"license.html":{}}}],["terms",{"_index":2736,"title":{},"body":{"license.html":{}}}],["test",{"_index":3619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["testconfigoptions",{"_index":2456,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["text",{"_index":1080,"title":{},"body":{"injectables/EmailService.html":{},"injectables/ParserService.html":{}}}],["text/xml",{"_index":1892,"title":{},"body":{"controllers/SitemapController.html":{}}}],["then(([claims",{"_index":355,"title":{},"body":{"controllers/ClaimController.html":{}}}],["then(([personalities",{"_index":1758,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["then(([stats",{"_index":387,"title":{},"body":{"controllers/ClaimController.html":{}}}],["then(([tasks",{"_index":537,"title":{},"body":{"controllers/ClaimReviewController-1.html":{}}}],["then((history",{"_index":1187,"title":{},"body":{"controllers/HistoryController.html":{}}}],["then((response",{"_index":2396,"title":{},"body":{"injectables/WikidataService.html":{}}}],["then((sources",{"_index":1995,"title":{},"body":{"controllers/SourceController.html":{}}}],["then((values",{"_index":2067,"title":{},"body":{"injectables/StatsService.html":{}}}],["then(async",{"_index":3563,"title":{},"body":{"miscellaneous/variables.html":{}}}],["therefore",{"_index":2724,"title":{},"body":{"license.html":{}}}],["things",{"_index":2716,"title":{},"body":{"license.html":{}}}],["third",{"_index":3005,"title":{},"body":{"license.html":{}}}],["this._checkcaptcharesponse",{"_index":198,"title":{},"body":{"injectables/CaptchaService.html":{}}}],["this._getclaim",{"_index":937,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this._getclaim({_id",{"_index":951,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this._getclaim({personality",{"_index":952,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this._getsentencebyhashandclaimid(sentence_hash",{"_index":410,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this._verifyinputsquery(getclaimsdto",{"_index":351,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.calculateoverallstats(claim",{"_index":970,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.captchaservice.validate",{"_index":367,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{}}}],["this.claimmodel(claim",{"_index":926,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimmodel.countdocuments().where(query",{"_index":922,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimmodel.find(query",{"_index":918,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimmodel.findone(match",{"_index":955,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimmodel.softdelete",{"_index":946,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimreview.agreggateclassification",{"_index":1732,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.claimreviewmodel(claimreview",{"_index":658,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["this.claimreviewmodel.aggregate",{"_index":624,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["this.claimreviewmodel.countdocuments().where(query",{"_index":631,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["this.claimreviewmodel.findbyid(claimreviewid",{"_index":666,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["this.claimreviewmodel.findone",{"_index":636,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["this.claimreviewmodel.softdelete",{"_index":682,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["this.claimreviewservice.count",{"_index":2066,"title":{},"body":{"injectables/StatsService.html":{}}}],["this.claimreviewservice.create",{"_index":487,"title":{},"body":{"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewTaskService.html":{}}}],["this.claimreviewservice.delete(params.id",{"_index":494,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["this.claimreviewservice.getbyid(params.id",{"_index":491,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["this.claimreviewservice.getreviewsbyclaimid",{"_index":963,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/SitemapService.html":{}}}],["this.claimreviewservice.getreviewstatsbyclaimid",{"_index":968,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimreviewservice.getreviewstatsbysentencehash",{"_index":383,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimreviewservice.getuserreviewbysentencehash(sentence_hash",{"_index":386,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimreviewtaskmodel",{"_index":745,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["this.claimreviewtaskmodel.countdocuments().where(query",{"_index":764,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["this.claimreviewtaskmodel.find",{"_index":723,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["this.claimreviewtaskmodel.findbyid(claimreviewtaskid",{"_index":742,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["this.claimreviewtaskmodel.findone",{"_index":763,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["this.claimreviewtaskmodel.updateone",{"_index":759,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["this.claimreviewtaskservice.count",{"_index":535,"title":{},"body":{"controllers/ClaimReviewController-1.html":{}}}],["this.claimreviewtaskservice.create(createclaimreviewtask",{"_index":545,"title":{},"body":{"controllers/ClaimReviewController-1.html":{}}}],["this.claimreviewtaskservice.getbyid(id",{"_index":542,"title":{},"body":{"controllers/ClaimReviewController-1.html":{}}}],["this.claimreviewtaskservice.getclaimreviewtaskbysentencehash",{"_index":413,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{}}}],["this.claimreviewtaskservice.listall(page",{"_index":528,"title":{},"body":{"controllers/ClaimReviewController-1.html":{}}}],["this.claimreviewtaskservice.update",{"_index":548,"title":{},"body":{"controllers/ClaimReviewController-1.html":{}}}],["this.claimrevisionmodel(claim",{"_index":864,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["this.claimrevisionmodel.findone(match",{"_index":841,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["this.claimrevisionservice.create(claim._id",{"_index":941,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimrevisionservice.create(newclaim._id",{"_index":927,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimrevisionservice.getrevision",{"_index":957,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimservice.count",{"_index":2064,"title":{},"body":{"injectables/StatsService.html":{}}}],["this.claimservice.count(queryinputs",{"_index":354,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimservice.create(createclaimdto",{"_index":373,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimservice.delete(claimid",{"_index":382,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimservice.getbyid(claimid",{"_index":376,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimservice.getbypersonalityidandclaimslug",{"_index":408,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimservice.listall(0",{"_index":1946,"title":{},"body":{"injectables/SitemapService.html":{}}}],["this.claimservice.listall(page",{"_index":353,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimservice.update(claimid",{"_index":379,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.configservice.get(\"authentication_type",{"_index":2107,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.configservice.get(\"nextjs.dir",{"_index":2275,"title":{},"body":{"injectables/ViewService.html":{}}}],["this.configservice.get(\"ory",{"_index":1395,"title":{},"body":{"injectables/OryService.html":{}}}],["this.configservice.get(\"recaptcha_secret",{"_index":196,"title":{},"body":{"injectables/CaptchaService.html":{}}}],["this.configservice.get(\"recaptcha_sitekey",{"_index":417,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.configservice.get(\"smtp_email_pass",{"_index":1111,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get(\"smtp_email_user",{"_index":1109,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get(\"smtp_host",{"_index":1103,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get(\"smtp_port",{"_index":1105,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get(\"smtp_secure",{"_index":1107,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get(\"web_url",{"_index":1099,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get('access_token",{"_index":1876,"title":{},"body":{"guards/SessionGuard.html":{}}}],["this.configservice.get('authentication_type",{"_index":1874,"title":{},"body":{"guards/SessionGuard.html":{}}}],["this.configservice.get('ory.url",{"_index":1875,"title":{},"body":{"guards/SessionGuard.html":{}}}],["this.count(queryinputs",{"_index":1757,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.createparagraphid",{"_index":1527,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.createsentenceid",{"_index":1553,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.createtransport",{"_index":1112,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.extractclaimwithtextsummary(personality.claims",{"_index":1730,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.extractproperties",{"_index":2350,"title":{},"body":{"injectables/WikidataService.html":{}}}],["this.extractvalue",{"_index":2358,"title":{},"body":{"injectables/WikidataService.html":{}}}],["this.extractvalue(wikidata",{"_index":2355,"title":{},"body":{"injectables/WikidataService.html":{}}}],["this.getbyid(claimid",{"_index":945,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.getbyid(claimreviewid",{"_index":678,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["this.getbyid(personalityid",{"_index":1740,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.getbyid(userid",{"_index":2160,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getclaimreviewtaskbysentencehash",{"_index":748,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["this.getcommonsthumburl(filename",{"_index":2370,"title":{},"body":{"injectables/WikidataService.html":{}}}],["this.getdeletedpersonalitybywikidata(personality.wikidata",{"_index":1698,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.getemailbody(templateoptions",{"_index":1113,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.getreviewbysentencehash(claimreview.sentence_hash",{"_index":638,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["this.getreviewstats(personality._id",{"_index":1729,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.getsitelinkname(language",{"_index":2374,"title":{},"body":{"injectables/WikidataService.html":{}}}],["this.history.createhistory(history",{"_index":1708,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.history.gethistoryparams",{"_index":1706,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.historymodel(data",{"_index":1239,"title":{},"body":{"injectables/HistoryService.html":{}}}],["this.historymodel.find",{"_index":1241,"title":{},"body":{"injectables/HistoryService.html":{}}}],["this.historyservice",{"_index":1185,"title":{},"body":{"controllers/HistoryController.html":{}}}],["this.historyservice.createhistory(history",{"_index":664,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{}}}],["this.historyservice.gethistoryparams",{"_index":660,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{}}}],["this.httpservice.post",{"_index":193,"title":{},"body":{"injectables/CaptchaService.html":{}}}],["this.listall",{"_index":1754,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.logger",{"_index":1301,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.error(\"failed",{"_index":2277,"title":{},"body":{"injectables/ViewService.html":{}}}],["this.logger.error(`error",{"_index":2157,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.logger.error(`error/recaptcha",{"_index":202,"title":{},"body":{"injectables/CaptchaService.html":{}}}],["this.logger.error(e",{"_index":869,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["this.logger.error(err",{"_index":1623,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["this.logger.error(error",{"_index":363,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["this.logger.error(message",{"_index":1963,"title":{},"body":{"injectables/SitemapService.html":{}}}],["this.logger.log",{"_index":359,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HistoryController.html":{},"injectables/LoggerMiddleware.html":{},"injectables/PersonalityService.html":{},"controllers/SourceController.html":{}}}],["this.logger.log(\"debug",{"_index":1303,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.log(\"error",{"_index":1304,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.log(\"info",{"_index":1302,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.log(\"no",{"_index":2145,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.logger.log(\"user",{"_index":2153,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.logger.log(\"verbose",{"_index":1305,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.log(\"warn",{"_index":1306,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.log(`found",{"_index":1712,"title":{},"body":{"injectables/PersonalityService.html":{},"injectables/UsersService.html":{}}}],["this.logger.log(`got",{"_index":1733,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.logger.log(`sending",{"_index":1114,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.logger.log(`updated",{"_index":1745,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.logger.log(`user",{"_index":2162,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.next(request",{"_index":1882,"title":{},"body":{"guards/SessionGuard.html":{}}}],["this.optionstoupdate",{"_index":840,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{}}}],["this.ory",{"_index":1396,"title":{},"body":{"injectables/OryService.html":{}}}],["this.orypaths(req",{"_index":1358,"title":{},"body":{"controllers/OryController.html":{}}}],["this.oryservice.createidentity",{"_index":2150,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.oryservice.updateidentity",{"_index":2155,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.paragraphmodel(paragraphbody).save",{"_index":1452,"title":{},"body":{"injectables/ParagraphService.html":{}}}],["this.paragraphsequence",{"_index":1518,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.paragraphsequence}${text}${paragraph",{"_index":1529,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.paragraphservice.create",{"_index":1532,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.parserservice.parse(claim.content",{"_index":860,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["this.parsesentence(sentence",{"_index":1534,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.personalitymodel(personality",{"_index":1704,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.aggregate",{"_index":1687,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.countdocuments().where(query",{"_index":1747,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.find(query",{"_index":1690,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.findbyid",{"_index":1711,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.findbyid(id",{"_index":1731,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.findbyidandupdate",{"_index":1744,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.findone",{"_index":1710,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.softdelete",{"_index":1746,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalityservice",{"_index":1619,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["this.personalityservice.combinedlistall",{"_index":1265,"title":{},"body":{"controllers/HomeController.html":{},"controllers/PersonalityController.html":{}}}],["this.personalityservice.combinedlistall(getpersonalities",{"_index":1607,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["this.personalityservice.count",{"_index":2065,"title":{},"body":{"injectables/StatsService.html":{}}}],["this.personalityservice.create(createpersonality",{"_index":1609,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["this.personalityservice.delete(personalityid",{"_index":1627,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["this.personalityservice.getbyslug",{"_index":406,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{}}}],["this.personalityservice.listall",{"_index":1942,"title":{},"body":{"injectables/SitemapService.html":{}}}],["this.personalityservice.update(personalityid",{"_index":1625,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["this.postprocess",{"_index":920,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.postprocess(claim",{"_index":959,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.postprocess(personality",{"_index":1696,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.postprocess(personality.toobject",{"_index":1713,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.postprocesssentences(paragraph.sentences",{"_index":1528,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.reflector.get('public",{"_index":1868,"title":{},"body":{"guards/SessionGuard.html":{}}}],["this.reportmodel(report",{"_index":1807,"title":{},"body":{"injectables/ReportService.html":{}}}],["this.reportservice.create(newreport",{"_index":758,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["this.reportservice.findbysentencehash(sentence_hash",{"_index":1788,"title":{},"body":{"controllers/ReportController.html":{}}}],["this.req.user",{"_index":932,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["this.requestproperties(params",{"_index":2335,"title":{},"body":{"injectables/WikidataService.html":{}}}],["this.sentencemodel(sentencebody).save",{"_index":1855,"title":{},"body":{"injectables/SentenceService.html":{}}}],["this.sentencesequence",{"_index":1519,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.sentenceservice.create",{"_index":1556,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.server",{"_index":2270,"title":{},"body":{"injectables/ViewService.html":{}}}],["this.server.prepare",{"_index":2276,"title":{},"body":{"injectables/ViewService.html":{}}}],["this.sitemapservice.getsitemap",{"_index":1905,"title":{},"body":{"controllers/SitemapController.html":{}}}],["this.sitemapservice.submitsitemap",{"_index":1909,"title":{},"body":{"controllers/SitemapController.html":{}}}],["this.sourcemodel(data",{"_index":2018,"title":{},"body":{"injectables/SourceService.html":{}}}],["this.sourcemodel.find",{"_index":2020,"title":{},"body":{"injectables/SourceService.html":{}}}],["this.sourceservice",{"_index":1993,"title":{},"body":{"controllers/SourceController.html":{}}}],["this.sourceservice.create",{"_index":867,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["this.speechmodel(speechbody).save",{"_index":2044,"title":{},"body":{"injectables/SpeechService.html":{}}}],["this.speechservice.create",{"_index":1536,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.statsservice.gethomestats",{"_index":1269,"title":{},"body":{"controllers/HomeController.html":{},"controllers/StatsController.html":{}}}],["this.transformcontentobject",{"_index":966,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.usermodel(user",{"_index":2143,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.aggregate",{"_index":2140,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyid(userid",{"_index":2159,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.register(newuser",{"_index":2156,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.findall(getusers",{"_index":2113,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getbyid(req.user._id",{"_index":2110,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.util.formatstats(reviews",{"_index":632,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/PersonalityService.html":{}}}],["this.util.mergeobjectsinunique",{"_index":1694,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.verifyinputsquery(query",{"_index":1753,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.viewservice",{"_index":424,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{},"controllers/HomeController.html":{},"controllers/OryController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["this.viewservice.getnextserver().render",{"_index":414,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.wikidata.fetchproperties",{"_index":1722,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.wikidata.querywikibaseentities",{"_index":1692,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.wikidatacache",{"_index":2337,"title":{},"body":{"injectables/WikidataService.html":{}}}],["this.wikidatacache.findone",{"_index":2331,"title":{},"body":{"injectables/WikidataService.html":{}}}],["those",{"_index":2778,"title":{},"body":{"license.html":{}}}],["though",{"_index":3176,"title":{},"body":{"license.html":{}}}],["threatened",{"_index":2788,"title":{},"body":{"license.html":{}}}],["three",{"_index":3067,"title":{},"body":{"license.html":{}}}],["throttle",{"_index":3608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["throttlerguard",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule.forroot",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["through",{"_index":677,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"license.html":{}}}],["throw",{"_index":369,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["thus",{"_index":2962,"title":{},"body":{"license.html":{}}}],["time",{"_index":3241,"title":{},"body":{"license.html":{}}}],["title",{"_index":668,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"classes/ClaimRevision.html":{},"classes/CreateClaimDTO.html":{},"injectables/PersonalityService.html":{},"index.html":{}}}],["titles",{"_index":2403,"title":{},"body":{"injectables/WikidataService.html":{}}}],["todo",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"injectables/SitemapService.html":{}}}],["tojson",{"_index":234,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimReviewTask.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Personality.html":{},"classes/Report.html":{},"classes/Speech.html":{}}}],["token",{"_index":1405,"title":{},"body":{"injectables/OryService.html":{},"index.html":{}}}],["tokens",{"_index":2626,"title":{},"body":{"index.html":{}}}],["toobject",{"_index":232,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimReviewTask.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Personality.html":{},"classes/Report.html":{},"classes/Speech.html":{}}}],["tools",{"_index":2917,"title":{},"body":{"license.html":{}}}],["tostring",{"_index":190,"title":{},"body":{"injectables/CaptchaService.html":{}}}],["total",{"_index":2170,"title":{},"body":{"injectables/UtilService.html":{}}}],["totalchanges",{"_index":1188,"title":{},"body":{"controllers/HistoryController.html":{}}}],["totalclaims",{"_index":356,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{}}}],["totalclaimsreviewed",{"_index":884,"title":{},"body":{"injectables/ClaimService.html":{}}}],["totalpages",{"_index":357,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{},"controllers/HistoryController.html":{},"injectables/PersonalityService.html":{},"controllers/SourceController.html":{}}}],["totalpersonalities",{"_index":1759,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["totalsources",{"_index":1996,"title":{},"body":{"controllers/SourceController.html":{}}}],["totaltasks",{"_index":538,"title":{},"body":{"controllers/ClaimReviewController-1.html":{}}}],["totp",{"_index":2641,"title":{},"body":{"index.html":{}}}],["trace",{"_index":1293,"title":{},"body":{"classes/Logger.html":{}}}],["tracks",{"_index":585,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["trade",{"_index":3200,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":3199,"title":{},"body":{"license.html":{}}}],["trademarks",{"_index":3201,"title":{},"body":{"license.html":{}}}],["traits",{"_index":1408,"title":{},"body":{"injectables/OryService.html":{},"index.html":{}}}],["transaction",{"_index":3149,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":2855,"title":{},"body":{"license.html":{}}}],["transferred",{"_index":3151,"title":{},"body":{"license.html":{}}}],["transferring",{"_index":3265,"title":{},"body":{"license.html":{}}}],["transform",{"_index":960,"title":{},"body":{"injectables/ClaimService.html":{},"miscellaneous/variables.html":{}}}],["transformcontentobject",{"_index":876,"title":{},"body":{"injectables/ClaimService.html":{}}}],["transformcontentobject(claimcontent",{"_index":898,"title":{},"body":{"injectables/ClaimService.html":{}}}],["transformer",{"_index":2499,"title":{},"body":{"dependencies.html":{}}}],["transformoptions",{"_index":3534,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transmission",{"_index":3102,"title":{},"body":{"license.html":{}}}],["transporter",{"_index":1100,"title":{},"body":{"injectables/EmailService.html":{}}}],["transporter.close",{"_index":1118,"title":{},"body":{"injectables/EmailService.html":{}}}],["transporter.sendmail",{"_index":1117,"title":{},"body":{"injectables/EmailService.html":{}}}],["treated",{"_index":3175,"title":{},"body":{"license.html":{}}}],["treaty",{"_index":2986,"title":{},"body":{"license.html":{}}}],["trim:true",{"_index":1483,"title":{},"body":{"injectables/ParserService.html":{}}}],["true",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController-1.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimReviewTask.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/DisableBodyParserMiddleware.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"controllers/OryController.html":{},"injectables/OryService.html":{},"classes/Paragraph.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"classes/Report.html":{},"classes/Sentence.html":{},"guards/SessionGuard.html":{},"classes/Source.html":{},"classes/Speech.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/ViewController.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":195,"title":{},"body":{"injectables/CaptchaService.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimRevisionService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"injectables/ReportService.html":{},"guards/SessionGuard.html":{},"injectables/SitemapService.html":{},"injectables/UsersService.html":{},"injectables/ViewService.html":{},"miscellaneous/variables.html":{}}}],["ts",{"_index":338,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"injectables/UsersService.html":{}}}],["ttl",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["twitter",{"_index":781,"title":{},"body":{"classes/ClaimRevision.html":{},"miscellaneous/enumerations.html":{}}}],["two",{"_index":2739,"title":{},"body":{"license.html":{}}}],["type",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"injectables/CaptchaService.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimReviewTask.html":{},"injectables/ClaimReviewTaskService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreateClaimReviewTaskDTO.html":{},"classes/CreatePersonality.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/EmailService.html":{},"classes/GetClaimsDTO.html":{},"injectables/GetLanguageMiddleware.html":{},"classes/GetPersonalities.html":{},"classes/GetTasksDTO.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"injectables/JsonBodyMiddleware.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/OryController.html":{},"injectables/OryService.html":{},"classes/Paragraph.html":{},"injectables/ParagraphService.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"classes/Report.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"classes/Sentence.html":{},"injectables/SentenceService.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"classes/Speech.html":{},"injectables/SpeechService.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimReviewTaskDTO.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":3485,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":857,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["types",{"_index":618,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"injectables/SourceService.html":{},"classes/UpdateClaimDTO.html":{},"classes/UpdateClaimReviewTaskDTO.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["types.objectid",{"_index":744,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["types.objectid(claim.personality",{"_index":924,"title":{},"body":{"injectables/ClaimService.html":{}}}],["types.objectid(claimreview.claim",{"_index":651,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["types.objectid(claimreview.personality",{"_index":649,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["types.objectid(claimreview.report._id",{"_index":653,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["types.objectid(claimreview.userid",{"_index":655,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["types.objectid(data.targetid",{"_index":2015,"title":{},"body":{"injectables/SourceService.html":{}}}],["types.objectid(data.user",{"_index":2017,"title":{},"body":{"injectables/SourceService.html":{}}}],["types.objectid(dataid",{"_index":1236,"title":{},"body":{"injectables/HistoryService.html":{}}}],["types.objectid(query.personality",{"_index":917,"title":{},"body":{"injectables/ClaimService.html":{}}}],["types.objectid(targetid",{"_index":1242,"title":{},"body":{"injectables/HistoryService.html":{},"injectables/SourceService.html":{}}}],["types/jest",{"_index":2487,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":228,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"classes/Personality.html":{},"injectables/PersonalityService.html":{},"dependencies.html":{}}}],["typical",{"_index":3126,"title":{},"body":{"license.html":{}}}],["unacceptable",{"_index":2775,"title":{},"body":{"license.html":{}}}],["unclassified",{"_index":1975,"title":{},"body":{"classes/Source.html":{}}}],["undefined",{"_index":212,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"classes/Paragraph.html":{},"classes/Report.html":{},"classes/Source.html":{},"classes/Speech.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["under",{"_index":2815,"title":{},"body":{"license.html":{}}}],["unique",{"_index":690,"title":{},"body":{"classes/ClaimReviewTask.html":{},"injectables/ClaimRevisionService.html":{},"classes/Personality.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["unknown",{"_index":174,"title":{},"body":{"injectables/CaptchaService.html":{},"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/ClaimReviewController-1.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"injectables/ParagraphService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"injectables/SentenceService.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WikidataService.html":{}}}],["unless",{"_index":3135,"title":{},"body":{"license.html":{}}}],["unlimited",{"_index":2945,"title":{},"body":{"license.html":{}}}],["unmodified",{"_index":2830,"title":{},"body":{"license.html":{}}}],["unnecessary",{"_index":2973,"title":{},"body":{"license.html":{}}}],["unpacking",{"_index":3172,"title":{},"body":{"license.html":{}}}],["unreliable",{"_index":1977,"title":{},"body":{"classes/Source.html":{}}}],["unsustainable",{"_index":1774,"title":{},"body":{"classes/Report.html":{},"miscellaneous/enumerations.html":{}}}],["until",{"_index":3230,"title":{},"body":{"license.html":{}}}],["unverifiable",{"_index":1776,"title":{},"body":{"classes/Report.html":{},"miscellaneous/enumerations.html":{}}}],["up",{"_index":812,"title":{},"body":{"modules/ClaimRevisionModule.html":{},"index.html":{}}}],["update",{"_index":262,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["update(@param(\"id",{"_index":378,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{}}}],["update(claimid",{"_index":304,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{}}}],["update(personalityid",{"_index":1599,"title":{},"body":{"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["update(sentence_hash",{"_index":519,"title":{},"body":{"controllers/ClaimReviewController-1.html":{},"injectables/ClaimReviewTaskService.html":{}}}],["updateclaimdto",{"_index":305,"title":{"classes/UpdateClaimDTO.html":{}},"body":{"controllers/ClaimController.html":{},"classes/UpdateClaimDTO.html":{},"coverage.html":{}}}],["updateclaimreviewtaskdto",{"_index":521,"title":{"classes/UpdateClaimReviewTaskDTO.html":{}},"body":{"controllers/ClaimReviewController-1.html":{},"injectables/ClaimReviewTaskService.html":{},"classes/UpdateClaimReviewTaskDTO.html":{},"coverage.html":{}}}],["updated",{"_index":909,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["updateidentity",{"_index":1374,"title":{},"body":{"injectables/OryService.html":{}}}],["updateidentity(user",{"_index":1383,"title":{},"body":{"injectables/OryService.html":{}}}],["updates",{"_index":3161,"title":{},"body":{"license.html":{}}}],["updating",{"_index":2154,"title":{},"body":{"injectables/UsersService.html":{}}}],["updation",{"_index":908,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["upsert",{"_index":838,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{}}}],["uri",{"_index":3595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["url",{"_index":317,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{},"controllers/HomeController.html":{},"controllers/OryController.html":{},"injectables/OryService.html":{},"controllers/PersonalityController.html":{},"injectables/SitemapService.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"injectables/WikidataService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["urlsearchparams",{"_index":189,"title":{},"body":{"injectables/CaptchaService.html":{}}}],["url}/${this.adminendpoint}/identities",{"_index":1418,"title":{},"body":{"injectables/OryService.html":{}}}],["url}/${this.adminendpoint}/identities/${identityid",{"_index":1419,"title":{},"body":{"injectables/OryService.html":{}}}],["url}/${this.adminendpoint}/identities/${user.oryid",{"_index":1407,"title":{},"body":{"injectables/OryService.html":{}}}],["usando",{"_index":3576,"title":{},"body":{"miscellaneous/variables.html":{}}}],["use",{"_index":788,"title":{},"body":{"classes/ClaimRevision.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/GetLanguageMiddleware.html":{},"injectables/JsonBodyMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/Source.html":{},"license.html":{}}}],["use(req",{"_index":1055,"title":{},"body":{"injectables/DisableBodyParserMiddleware.html":{},"injectables/GetLanguageMiddleware.html":{},"injectables/JsonBodyMiddleware.html":{}}}],["use(request",{"_index":1308,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["useclass",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["used",{"_index":1213,"title":{},"body":{"injectables/HistoryService.html":{},"controllers/ViewController.html":{},"license.html":{}}}],["useexisting",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":2298,"title":{},"body":{"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["useful",{"_index":3439,"title":{},"body":{"license.html":{}}}],["useless",{"_index":1736,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["usenewurlparser",{"_index":3616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user",{"_index":460,"title":{"classes/User.html":{}},"body":{"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimReviewTaskDTO.html":{},"injectables/EmailService.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"injectables/OryService.html":{},"injectables/PersonalityService.html":{},"classes/Report.html":{},"controllers/RootController.html":{},"classes/Source.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["user._id",{"_index":1412,"title":{},"body":{"injectables/OryService.html":{},"injectables/UsersService.html":{}}}],["user.email",{"_index":1410,"title":{},"body":{"injectables/OryService.html":{},"injectables/UsersService.html":{}}}],["user.firstpasswordchanged",{"_index":2161,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.name",{"_index":2122,"title":{},"body":{"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["user.password",{"_index":2151,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.save",{"_index":2163,"title":{},"body":{"injectables/UsersService.html":{}}}],["user?._id",{"_index":1237,"title":{},"body":{"injectables/HistoryService.html":{}}}],["user?.userid",{"_index":637,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["user_id",{"_index":1411,"title":{},"body":{"injectables/OryService.html":{},"index.html":{}}}],["useragent",{"_index":1315,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["userdata",{"_index":3561,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdata.email",{"_index":3564,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdata.password",{"_index":3588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdata.sendauthdetails",{"_index":3566,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdocument",{"_index":2085,"title":{"interfaces/UserDocument.html":{}},"body":{"classes/User.html":{},"interfaces/UserDocument.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userid",{"_index":453,"title":{},"body":{"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"classes/CreateClaimReviewTaskDTO.html":{},"classes/Report.html":{},"injectables/UsersService.html":{}}}],["usermock",{"_index":2458,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["usermock._id",{"_index":3602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usermodel",{"_index":2121,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["username",{"_index":736,"title":{},"body":{"injectables/ClaimReviewTaskService.html":{}}}],["userreview",{"_index":389,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{}}}],["users",{"_index":2699,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["users.controller",{"_index":2120,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.map(async",{"_index":3586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["users.service",{"_index":2104,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/schemas/user.schema",{"_index":464,"title":{},"body":{"classes/ClaimReview.html":{},"classes/CreateClaimReviewTaskDTO.html":{},"classes/History.html":{},"classes/Report.html":{},"classes/Source.html":{}}}],["users/users.module",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["userschema",{"_index":2087,"title":{},"body":{"classes/User.html":{},"interfaces/UserDocument.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":2091,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":3554,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userservice.register",{"_index":3562,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usersmodule",{"_index":33,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":2103,"title":{"injectables/UsersService.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":3129,"title":{},"body":{"license.html":{}}}],["useunifiedtopology",{"_index":3615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["using",{"_index":3100,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["utf",{"_index":1094,"title":{},"body":{"injectables/EmailService.html":{}}}],["util",{"_index":563,"title":{},"body":{"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{}}}],["utilservice",{"_index":558,"title":{"injectables/UtilService.html":{}},"body":{"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"injectables/UtilService.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["utilservice.generatepassword(userdata.istestuser",{"_index":3587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["v",{"_index":783,"title":{},"body":{"classes/ClaimRevision.html":{},"classes/Report.html":{},"classes/Source.html":{}}}],["v0alpha2api",{"_index":1390,"title":{},"body":{"injectables/OryService.html":{},"guards/SessionGuard.html":{}}}],["v0alpha2apiinterface",{"_index":1387,"title":{},"body":{"injectables/OryService.html":{}}}],["valid",{"_index":786,"title":{},"body":{"classes/ClaimRevision.html":{},"classes/Report.html":{},"classes/Source.html":{},"license.html":{}}}],["validate",{"_index":164,"title":{},"body":{"injectables/CaptchaService.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Report.html":{},"classes/Source.html":{}}}],["validate(recaptchastring",{"_index":175,"title":{},"body":{"injectables/CaptchaService.html":{}}}],["validatecaptcha",{"_index":366,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{}}}],["validating",{"_index":371,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{}}}],["validationpipe",{"_index":3533,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validator",{"_index":782,"title":{},"body":{"classes/ClaimRevision.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreateClaimReviewTaskDTO.html":{},"classes/CreatePersonality.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/GetTasksDTO.html":{},"classes/Report.html":{},"classes/Source.html":{},"classes/UpdateClaimReviewTaskDTO.html":{},"dependencies.html":{}}}],["value",{"_index":180,"title":{},"body":{"injectables/CaptchaService.html":{},"controllers/ClaimReviewController-1.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimReviewTaskService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimReviewTaskDTO.html":{},"injectables/EmailService.html":{},"classes/GetTasksDTO.html":{},"injectables/HistoryService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/OryService.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/SourceService.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values[0",{"_index":2068,"title":{},"body":{"injectables/StatsService.html":{}}}],["values[1",{"_index":2069,"title":{},"body":{"injectables/StatsService.html":{}}}],["values[2",{"_index":2070,"title":{},"body":{"injectables/StatsService.html":{}}}],["variable",{"_index":2418,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":3497,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verbatim",{"_index":2679,"title":{},"body":{"license.html":{}}}],["verbose",{"_index":1285,"title":{},"body":{"classes/Logger.html":{}}}],["verbose(message",{"_index":1297,"title":{},"body":{"classes/Logger.html":{}}}],["verification",{"_index":1029,"title":{},"body":{"classes/CreateClaimReviewTaskDTO.html":{},"classes/Report.html":{},"index.html":{}}}],["verify",{"_index":642,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["verifyinputsquery",{"_index":1655,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["verifyinputsquery(query",{"_index":1680,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["version",{"_index":794,"title":{},"body":{"classes/ClaimRevision.html":{},"license.html":{},"properties.html":{}}}],["versions",{"_index":2694,"title":{},"body":{"license.html":{}}}],["via",{"_index":2596,"title":{},"body":{"index.html":{}}}],["view",{"_index":2869,"title":{},"body":{"license.html":{}}}],["view.controller",{"_index":2258,"title":{},"body":{"modules/ViewModule.html":{}}}],["view.service",{"_index":2240,"title":{},"body":{"controllers/ViewController.html":{},"modules/ViewModule.html":{}}}],["view/view.module",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewTaskModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/HomeModule.html":{},"modules/OryModule.html":{},"modules/PersonalityModule.html":{},"modules/UsersModule.html":{}}}],["view/view.service",{"_index":321,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{},"controllers/HomeController.html":{},"controllers/OryController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{}}}],["viewcontroller",{"_index":2210,"title":{"controllers/ViewController.html":{}},"body":{"controllers/ViewController.html":{},"modules/ViewModule.html":{},"coverage.html":{}}}],["viewmodule",{"_index":53,"title":{"modules/ViewModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewTaskModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/HomeModule.html":{},"modules/OryModule.html":{},"modules/PersonalityModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules.html":{},"overview.html":{}}}],["viewservice",{"_index":320,"title":{"injectables/ViewService.html":{}},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController-1.html":{},"controllers/HomeController.html":{},"controllers/OryController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"coverage.html":{},"overview.html":{}}}],["vinda(o",{"_index":3570,"title":{},"body":{"miscellaneous/variables.html":{}}}],["violates",{"_index":3167,"title":{},"body":{"license.html":{}}}],["violation",{"_index":3226,"title":{},"body":{"license.html":{}}}],["virtuals",{"_index":233,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimReviewTask.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Personality.html":{},"classes/Report.html":{},"classes/Speech.html":{}}}],["visible",{"_index":2864,"title":{},"body":{"license.html":{}}}],["voc",{"_index":3571,"title":{},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"injectables/DisableBodyParserMiddleware.html":{},"injectables/GetLanguageMiddleware.html":{},"injectables/JsonBodyMiddleware.html":{},"classes/Logger.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFoundFilter.html":{},"controllers/RootController.html":{},"license.html":{}}}],["volume",{"_index":3046,"title":{},"body":{"license.html":{}}}],["w",{"_index":3448,"title":{},"body":{"license.html":{}}}],["waive",{"_index":2995,"title":{},"body":{"license.html":{}}}],["waiver",{"_index":3421,"title":{},"body":{"license.html":{}}}],["want",{"_index":2713,"title":{},"body":{"license.html":{}}}],["warn",{"_index":1286,"title":{},"body":{"classes/Logger.html":{}}}],["warn(message",{"_index":1299,"title":{},"body":{"classes/Logger.html":{}}}],["warranties",{"_index":2868,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":2750,"title":{},"body":{"license.html":{}}}],["watch",{"_index":2273,"title":{},"body":{"injectables/ViewService.html":{}}}],["way",{"_index":2703,"title":{},"body":{"license.html":{}}}],["ways",{"_index":3057,"title":{},"body":{"license.html":{}}}],["wbentities",{"_index":1691,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["wbentity.description",{"_index":2400,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wbentity.id",{"_index":2401,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wbentity.label",{"_index":2399,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wbgetentities",{"_index":2342,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wbsearchentities",{"_index":2391,"title":{},"body":{"injectables/WikidataService.html":{}}}],["webauthn",{"_index":2640,"title":{},"body":{"index.html":{}}}],["websites",{"_index":1516,"title":{},"body":{"injectables/ParserService.html":{}}}],["welcome",{"_index":3449,"title":{},"body":{"license.html":{}}}],["well",{"_index":2847,"title":{},"body":{"license.html":{}}}],["whatever",{"_index":3269,"title":{},"body":{"license.html":{}}}],["whether",{"_index":2731,"title":{},"body":{"license.html":{}}}],["whitelist",{"_index":3536,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whole",{"_index":2892,"title":{},"body":{"license.html":{}}}],["whose",{"_index":3110,"title":{},"body":{"license.html":{}}}],["widely",{"_index":2886,"title":{},"body":{"license.html":{}}}],["wikdiata",{"_index":1718,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["wikidata",{"_index":1037,"title":{},"body":{"classes/CreatePersonality.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"injectables/WikidataService.html":{}}}],["wikidata.claims.p18",{"_index":2366,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata.claims.p18[0].mainsnak.datavalue.value",{"_index":2368,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata.claims.p31",{"_index":2360,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata.claims.p31[0].mainsnak.datavalue.value",{"_index":2362,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata.service",{"_index":2293,"title":{},"body":{"modules/WikidataModule.html":{}}}],["wikidata.sitelinks[sitelinkname",{"_index":2375,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata.sitelinks[sitelinkname].title",{"_index":2379,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata/wikidata.module",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/PersonalityModule.html":{}}}],["wikidata/wikidata.service",{"_index":1685,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["wikidata[property",{"_index":2386,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata[property][language",{"_index":2388,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata[property][languagefallback",{"_index":2389,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata[property][languagefallback].value",{"_index":2390,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidatacache",{"_index":2278,"title":{"classes/WikidataCache.html":{}},"body":{"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{}}}],["wikidatacache.name",{"_index":2297,"title":{},"body":{"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["wikidatacache.props",{"_index":2339,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidatacachedocument",{"_index":2285,"title":{},"body":{"classes/WikidataCache.html":{},"injectables/WikidataService.html":{},"miscellaneous/typealiases.html":{}}}],["wikidatacachemodel",{"_index":2295,"title":{},"body":{"modules/WikidataModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["wikidatacacheschema",{"_index":2287,"title":{},"body":{"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["wikidatacacheschema.index",{"_index":2299,"title":{},"body":{"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["wikidataextract",{"_index":1721,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["wikidataextract.isallowedprop",{"_index":1728,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["wikidataid",{"_index":1723,"title":{},"body":{"injectables/PersonalityService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["wikidatainstanceof",{"_index":2361,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidatainstanceof.id",{"_index":2364,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidatamodule",{"_index":35,"title":{"modules/WikidataModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PersonalityModule.html":{},"modules/WikidataModule.html":{},"modules.html":{},"overview.html":{}}}],["wikidataprops",{"_index":2352,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidataprops.avatar",{"_index":2372,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidataprops.description",{"_index":2357,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidataprops.image",{"_index":2369,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidataprops.isallowedprop",{"_index":2363,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidataprops.name",{"_index":2354,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidataprops.wikipedia",{"_index":2380,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidataservice",{"_index":1656,"title":{"injectables/WikidataService.html":{}},"body":{"injectables/PersonalityService.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"overview.html":{}}}],["wikilang",{"_index":2376,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikipedia",{"_index":1038,"title":{},"body":{"classes/CreatePersonality.html":{},"injectables/WikidataService.html":{}}}],["wikipedia.org/wiki/${encodeuri(wikititle",{"_index":2383,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikititle",{"_index":2378,"title":{},"body":{"injectables/WikidataService.html":{}}}],["window",{"_index":2904,"title":{},"body":{"license.html":{}}}],["wipo",{"_index":2985,"title":{},"body":{"license.html":{}}}],["wish",{"_index":2711,"title":{},"body":{"license.html":{}}}],["withcredentials",{"_index":1404,"title":{},"body":{"injectables/OryService.html":{}}}],["within",{"_index":3211,"title":{},"body":{"license.html":{}}}],["without",{"_index":533,"title":{},"body":{"controllers/ClaimReviewController-1.html":{},"license.html":{}}}],["withsuggestions",{"_index":1143,"title":{},"body":{"classes/GetPersonalities.html":{},"injectables/PersonalityService.html":{}}}],["work",{"_index":2701,"title":{},"body":{"license.html":{}}}],["work's",{"_index":2916,"title":{},"body":{"license.html":{}}}],["working",{"_index":2887,"title":{},"body":{"license.html":{}}}],["works",{"_index":2685,"title":{},"body":{"license.html":{}}}],["worldwide",{"_index":3299,"title":{},"body":{"license.html":{}}}],["writing",{"_index":3381,"title":{},"body":{"license.html":{}}}],["written",{"_index":3066,"title":{},"body":{"license.html":{}}}],["x",{"_index":3527,"title":{},"body":{"miscellaneous/variables.html":{}}}],["xstate",{"_index":2567,"title":{},"body":{"dependencies.html":{}}}],["xstate/react",{"_index":2492,"title":{},"body":{"dependencies.html":{}}}],["yarn",{"_index":2609,"title":{},"body":{"index.html":{}}}],["years",{"_index":3068,"title":{},"body":{"license.html":{}}}],["yes",{"_index":1291,"title":{},"body":{"classes/Logger.html":{}}}],["yourself",{"_index":3315,"title":{},"body":{"license.html":{}}}],["z])/g",{"_index":1503,"title":{},"body":{"injectables/ParserService.html":{}}}],["z][.](?:[a",{"_index":1514,"title":{},"body":{"injectables/ParserService.html":{}}}],["z][.])?)/g",{"_index":1515,"title":{},"body":{"injectables/ParserService.html":{}}}],["z][.][a",{"_index":1513,"title":{},"body":{"injectables/ParserService.html":{}}}],["za",{"_index":1502,"title":{},"body":{"injectables/ParserService.html":{}}}],["zoom",{"_index":146,"title":{},"body":{"modules/CaptchaModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimReviewTaskModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/HomeModule.html":{},"modules/OryModule.html":{},"modules/ParagraphModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"modules/ReportModule.html":{},"modules/SentenceModule.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/SpeechModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/app.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        configure\n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in server/app.module.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(options)\n                \n            \n\n\n            \n                \n                    Defined in server/app.module.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n    DynamicModule,\n    MiddlewareConsumer,\n    Module,\n    NestModule,\n} from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { UsersModule } from \"./users/users.module\";\nimport { WikidataModule } from \"./wikidata/wikidata.module\";\nimport { PersonalityModule } from \"./personality/personality.module\";\nimport { ClaimModule } from \"./claim/claim.module\";\nimport { ClaimReviewModule } from \"./claim-review/claim-review.module\";\nimport { SourceModule } from \"./source/source.module\";\nimport { StatsModule } from \"./stats/stats.module\";\nimport { RootController } from \"./root/root.controller\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { ViewModule } from \"./view/view.module\";\nimport { HomeModule } from \"./home/home.module\";\nimport { EmailModule } from \"./email/email.module\";\nimport { APP_FILTER, APP_GUARD } from \"@nestjs/core\";\nimport { NotFoundFilter } from \"./filters/not-found.filter\";\nimport { ThrottlerModule, ThrottlerGuard } from \"@nestjs/throttler\";\nimport { SitemapModule } from \"./sitemap/sitemap.module\";\nimport { ClaimRevisionModule } from \"./claim-revision/claim-revision.module\";\nimport { HistoryModule } from \"./history/history.module\";\nimport { ClaimReviewTaskModule } from \"./claim-review-task/claim-review-task.module\";\nimport { LoggerMiddleware } from \"./middleware/logger.middleware\";\nimport { ReportModule } from \"./report/report.module\";\nimport OryModule from \"./ory/ory.module\";\nimport { SessionGuard } from \"./auth/session.guard\";\nimport { GetLanguageMiddleware } from \"./middleware/language.middleware\";\nimport { DisableBodyParserMiddleware } from \"./middleware/disable-body-parser.middleware\";\nimport OryController from \"./ory/ory.controller\";\nimport { JsonBodyMiddleware } from \"./middleware/json-body.middleware\";\nimport { CaptchaModule } from \"./captcha/captcha.module\";\nimport { SpeechModule } from \"./speech/speech.module\";\nimport { ParagraphModule } from \"./paragraph/paragraph.module\";\nimport { SentenceModule } from \"./sentence/sentence.module\";\n\n@Module({})\nexport class AppModule implements NestModule {\n    public configure(consumer: MiddlewareConsumer): void {\n        consumer\n            .apply(DisableBodyParserMiddleware)\n            .forRoutes(OryController)\n            .apply(JsonBodyMiddleware, LoggerMiddleware, GetLanguageMiddleware)\n            .forRoutes(\"*\");\n    }\n\n    static register(options): DynamicModule {\n        // TODO: interface app with service-runner metrics interface\n        return {\n            module: AppModule,\n            global: true,\n            imports: [\n                MongooseModule.forRoot(\n                    options.config.db.connection_uri,\n                    options.config.db.options\n                ),\n                ConfigModule.forRoot({\n                    load: [() => options.config || {}],\n                }),\n                ThrottlerModule.forRoot({\n                    ttl: options.config.throttle.ttl,\n                    limit: options.config.throttle.limit,\n                }),\n                UsersModule,\n                WikidataModule,\n                PersonalityModule,\n                ClaimModule,\n                ClaimReviewModule,\n                ClaimReviewTaskModule,\n                ClaimRevisionModule,\n                HistoryModule,\n                SourceModule,\n                SpeechModule,\n                ParagraphModule,\n                SentenceModule,\n                StatsModule,\n                ViewModule,\n                HomeModule,\n                EmailModule,\n                SitemapModule,\n                OryModule,\n                ReportModule,\n                CaptchaModule,\n            ],\n            controllers: [RootController],\n            providers: [\n                {\n                    provide: APP_FILTER,\n                    useClass: NotFoundFilter,\n                },\n                {\n                    provide: APP_GUARD,\n                    useClass: ThrottlerGuard,\n                },\n                {\n                    provide: APP_GUARD,\n                    useExisting: SessionGuard,\n                },\n                SessionGuard\n            ],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CaptchaModule.html":{"url":"modules/CaptchaModule.html","title":"module - CaptchaModule","body":"\n                   \n\n\n\n\n    Modules\n    CaptchaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CaptchaModule\n\n\n\ncluster_CaptchaModule_exports\n\n\n\ncluster_CaptchaModule_providers\n\n\n\n\nCaptchaService \n\nCaptchaService \n\n\n\nCaptchaModule\n\nCaptchaModule\n\nCaptchaService  -->\n\nCaptchaModule->CaptchaService \n\n\n\n\n\nCaptchaService\n\nCaptchaService\n\nCaptchaModule -->\n\nCaptchaService->CaptchaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/captcha/captcha.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CaptchaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CaptchaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { Module } from \"@nestjs/common\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { CaptchaService } from \"./captcha.service\";\n\n@Module({\n    imports: [HttpModule, ConfigModule],\n    exports: [CaptchaService],\n    providers: [CaptchaService],\n})\nexport class CaptchaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CaptchaService.html":{"url":"injectables/CaptchaService.html","title":"injectable - CaptchaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CaptchaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/captcha/captcha.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                _checkCaptchaResponse\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in server/captcha/captcha.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        _checkCaptchaResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    _checkCaptchaResponse(secret, response)\n                \n            \n\n\n            \n                \n                    Defined in server/captcha/captcha.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    secret\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(recaptchaString: string)\n                \n            \n\n\n            \n                \n                    Defined in server/captcha/captcha.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    recaptchaString\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"CaptchaService\")\n                    \n                \n                    \n                        \n                                Defined in server/captcha/captcha.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from \"@nestjs/axios\";\nimport { Injectable, Logger } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { firstValueFrom } from \"rxjs\";\n\n@Injectable()\nexport class CaptchaService {\n    private readonly logger = new Logger(\"CaptchaService\");\n    constructor(\n        private httpService: HttpService,\n        private configService: ConfigService\n    ) {}\n\n    async _checkCaptchaResponse(secret, response) {\n        const RECAPTCHA_API_URL = \"https://www.google.com/recaptcha/api\";\n        const querystring = new URLSearchParams({\n            secret,\n            response,\n        }).toString();\n        const { data } = await firstValueFrom(\n            this.httpService.post(\n                `${RECAPTCHA_API_URL}/siteverify`,\n                querystring\n            )\n        );\n\n        return data;\n    }\n\n    async validate(recaptchaString: string) {\n        try {\n            const secret = this.configService.get(\"recaptcha_secret\");\n            const captchaVerification = await this._checkCaptchaResponse(\n                secret,\n                recaptchaString\n            );\n            return captchaVerification.success;\n        } catch (err) {\n            this.logger.error(`error/recaptcha ${err} `);\n            return false;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Claim.html":{"url":"classes/Claim.html","title":"class - Claim","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Claim\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim/schemas/claim.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                latestRevision\n                            \n                            \n                                personality\n                            \n                            \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        latestRevision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ClaimRevision\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'ClaimRevision'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/schemas/claim.schema.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        personality\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Personality\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'Personality'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/schemas/claim.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/schemas/claim.schema.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport * as mongoose from \"mongoose\";\nimport { Personality } from \"../../personality/schemas/personality.schema\"\nimport { ClaimRevision } from \"../../claim-revision/schema/claim-revision.schema\"\nimport { softDeletePlugin } from 'mongoose-softdelete-typescript';\n\nexport type ClaimDocument = Claim & mongoose.Document & { revisions: any };\n\n@Schema({ toObject: {virtuals: true}, toJSON: {virtuals: true} })\nexport class Claim {\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"Personality\",\n    })\n    personality: Personality;\n    \n    @Prop({ required: true })\n    slug: string;\n\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"ClaimRevision\",\n    })\n    latestRevision: ClaimRevision\n}\nconst ClaimSchemaRaw = SchemaFactory.createForClass(Claim);\n\nClaimSchemaRaw.virtual('revisions', {\n    ref: 'ClaimRevision',\n    localField: '_id',\n    foreignField: 'claimId'\n})\n\nClaimSchemaRaw.virtual('sources', {\n    ref: 'Source',\n    localField: '_id',\n    foreignField: 'targetId'\n})\n\nClaimSchemaRaw.plugin(softDeletePlugin)\n\nexport const ClaimSchema = ClaimSchemaRaw;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ClaimController.html":{"url":"controllers/ClaimController.html","title":"controller - ClaimController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ClaimController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim/claim.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                _getSentenceByHashAndClaimId\n                            \n                            \n                                _verifyInputsQuery\n                            \n                            \n                                    Public\n                                    Async\n                                claimCreatePage\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                getById\n                            \n                            \n                                    Public\n                                    Async\n                                getClaimReviewPage\n                            \n                            \n                                listAll\n                            \n                            \n                                    Public\n                                    Async\n                                personalityClaimPage\n                            \n                            \n                                    Public\n                                    Async\n                                personalityClaimPageWithRevision\n                            \n                            \n                                    Public\n                                    Async\n                                personalityHistoryPage\n                            \n                            \n                                    Public\n                                    Async\n                                sourcesClaimPage\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        _getSentenceByHashAndClaimId\n                        \n                    \n                \n            \n            \n                \n_getSentenceByHashAndClaimId(sentence_hash, claimId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.controller.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentence_hash\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _verifyInputsQuery\n                        \n                    \n                \n            \n            \n                \n_verifyInputsQuery(query)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        claimCreatePage\n                        \n                    \n                \n            \n            \n                \n                    \n                    claimCreatePage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('personality/:slug/claim/create/')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:176\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createClaimDTO: CreateClaimDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('api/claim')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createClaimDTO\n                                    \n                                                CreateClaimDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(claimId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('api/claim/:id')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getById\n                        \n                    \n                \n            \n            \n                \ngetById(claimId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('api/claim/:id')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getClaimReviewPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    getClaimReviewPage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('personality/:personalitySlug/claim/:claimSlug/sentence/:sentence_hash')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:140\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        listAll\n                        \n                    \n                \n            \n            \n                \nlistAll(getClaimsDTO: GetClaimsDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('api/claim')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    getClaimsDTO\n                                    \n                                                GetClaimsDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        personalityClaimPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    personalityClaimPage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('personality/:personalitySlug/claim/:claimSlug')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:198\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        personalityClaimPageWithRevision\n                        \n                    \n                \n            \n            \n                \n                    \n                    personalityClaimPageWithRevision(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('personality/:personalitySlug/claim/:claimSlug/revision/:revisionId')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:226\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        personalityHistoryPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    personalityHistoryPage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('personality/:personalitySlug/claim/:claimSlug/history')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:276\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        sourcesClaimPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    sourcesClaimPage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('personality/:personalitySlug/claim/:claimSlug/sources')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:253\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(claimId, updateClaimDTO: UpdateClaimDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('api/claim/:id')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateClaimDTO\n                                    \n                                                UpdateClaimDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Logger,\n    Param,\n    Post,\n    Put,\n    Query,\n    Req,\n    Res,\n} from \"@nestjs/common\";\nimport { ClaimReviewService } from \"../claim-review/claim-review.service\";\nimport { ClaimService } from \"./claim.service\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { Request, Response } from \"express\";\nimport { parse } from \"url\";\nimport { PersonalityService } from \"../personality/personality.service\";\nimport { ViewService } from \"../view/view.service\";\nimport * as mongoose from \"mongoose\";\nimport { CreateClaimDTO } from \"./dto/create-claim.dto\";\nimport { GetClaimsDTO } from \"./dto/get-claims.dto\";\nimport { UpdateClaimDTO } from \"./dto/update-claim.dto\";\nimport { IsPublic } from \"../decorators/is-public.decorator\";\nimport { CaptchaService } from \"../captcha/captcha.service\";\nimport { ClaimReviewTaskService } from \"../claim-review-task/claim-review-task.service\";\nimport { TargetModel } from \"../history/schema/history.schema\";\n\n@Controller()\nexport class ClaimController {\n    private readonly logger = new Logger(\"ClaimController\");\n    constructor(\n        private claimReviewService: ClaimReviewService,\n        private claimReviewTaskService: ClaimReviewTaskService,\n        private personalityService: PersonalityService,\n        private claimService: ClaimService,\n        private configService: ConfigService,\n        private viewService: ViewService,\n        private captchaService: CaptchaService\n    ) {}\n\n    _verifyInputsQuery(query) {\n        const inputs = {};\n        if (query.personality) {\n            // @ts-ignore\n            inputs.personality = new mongoose.Types.ObjectId(query.personality);\n        }\n\n        return inputs;\n    }\n\n    @IsPublic()\n    @Get(\"api/claim\")\n    listAll(@Query() getClaimsDTO: GetClaimsDTO) {\n        const { page = 0, pageSize = 10, order = \"asc\" } = getClaimsDTO;\n        const queryInputs = this._verifyInputsQuery(getClaimsDTO);\n        return Promise.all([\n            this.claimService.listAll(page, pageSize, order, queryInputs),\n            this.claimService.count(queryInputs),\n        ])\n            .then(([claims, totalClaims]) => {\n                const totalPages = Math.ceil(totalClaims / pageSize);\n\n                this.logger.log(\n                    `Found ${totalClaims} claims. Page ${page} of ${totalPages}`\n                );\n\n                return {\n                    claims,\n                    totalClaims,\n                    totalPages,\n                    page,\n                    pageSize,\n                };\n            })\n            .catch((error) => this.logger.error(error));\n    }\n\n    @Post(\"api/claim\")\n    async create(@Body() createClaimDTO: CreateClaimDTO) {\n        const validateCaptcha = await this.captchaService.validate(\n            createClaimDTO.recaptcha\n        );\n        if (!validateCaptcha) {\n            throw new Error(\"Error validating captcha\");\n        }\n        return this.claimService.create(createClaimDTO);\n    }\n\n    @IsPublic()\n    @Get(\"api/claim/:id\")\n    getById(@Param(\"id\") claimId) {\n        return this.claimService.getById(claimId);\n    }\n\n    @Put(\"api/claim/:id\")\n    update(@Param(\"id\") claimId, @Body() updateClaimDTO: UpdateClaimDTO) {\n        return this.claimService.update(claimId, updateClaimDTO);\n    }\n\n    @Delete(\"api/claim/:id\")\n    delete(@Param(\"id\") claimId) {\n        return this.claimService.delete(claimId);\n    }\n\n    _getSentenceByHashAndClaimId(sentence_hash, claimId) {\n        return Promise.all([\n            this.claimReviewService.getReviewStatsBySentenceHash({\n                sentence_hash,\n                isDeleted: false,\n                isPublished: true,\n            }),\n            this.claimService.getById(claimId),\n            this.claimReviewService.getUserReviewBySentenceHash(sentence_hash),\n        ]).then(([stats, claimObj, userReview]) => {\n            let sentenceObj;\n\n            claimObj.content.forEach((p) => {\n                p.content.forEach((sentence) => {\n                    if (sentence.data_hash === sentence_hash) {\n                        sentenceObj = sentence;\n                    }\n                });\n            });\n            return {\n                userReview,\n                date: claimObj.date,\n                personality: claimObj.personality,\n                stats,\n                ...sentenceObj,\n            };\n        });\n    }\n\n    @IsPublic()\n    @Get(\n        \"personality/:personalitySlug/claim/:claimSlug/sentence/:sentence_hash\"\n    )\n    public async getClaimReviewPage(@Req() req: Request, @Res() res: Response) {\n        const { sentence_hash, personalitySlug, claimSlug } = req.params;\n        const parsedUrl = parse(req.url, true);\n        const personality = await this.personalityService.getBySlug(\n            personalitySlug,\n            // @ts-ignore\n            req.language\n        );\n\n        const claim = await this.claimService.getByPersonalityIdAndClaimSlug(\n            personality._id,\n            claimSlug\n        );\n\n        const sentence = await this._getSentenceByHashAndClaimId(sentence_hash, claim._id);\n\n        const claimReviewTask =\n            await this.claimReviewTaskService.getClaimReviewTaskBySentenceHash(\n                sentence_hash\n            );\n\n        await this.viewService.getNextServer().render(\n            req,\n            res,\n            \"/claim-review\",\n            Object.assign(parsedUrl.query, {\n                personality,\n                claim,\n                sentence,\n                claimReviewTask,\n                sitekey: this.configService.get(\"recaptcha_sitekey\"),\n            })\n        );\n    }\n\n    @Get(\"personality/:slug/claim/create/\")\n    public async claimCreatePage(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n\n        const personality = await this.personalityService.getBySlug(\n            req.params.slug,\n            // @ts-ignore\n            req.language\n        );\n\n        await this.viewService.getNextServer().render(\n            req,\n            res,\n            \"/claim-create\",\n            Object.assign(parsedUrl.query, {\n                personality,\n                sitekey: this.configService.get(\"recaptcha_sitekey\"),\n            })\n        );\n    }\n\n    @IsPublic()\n    @Get(\"personality/:personalitySlug/claim/:claimSlug\")\n    public async personalityClaimPage(\n        @Req() req: Request,\n        @Res() res: Response\n    ) {\n        const parsedUrl = parse(req.url, true);\n\n        const personality = await this.personalityService.getBySlug(\n            req.params.personalitySlug,\n            // @ts-ignore\n            req.language\n        );\n\n        const claim = await this.claimService.getByPersonalityIdAndClaimSlug(\n            personality._id,\n            req.params.claimSlug\n        );\n\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/claim-page\",\n                Object.assign(parsedUrl.query, { personality, claim })\n            );\n    }\n\n    @Get(\"personality/:personalitySlug/claim/:claimSlug/revision/:revisionId\")\n    public async personalityClaimPageWithRevision(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n        const personality = await this.personalityService.getBySlug(\n            req.params.personalitySlug,\n            // @ts-ignore\n            req.language\n        );\n\n        const claim = await this.claimService.getByPersonalityIdAndClaimSlug(\n            personality._id,\n            req.params.claimSlug,\n            req?.params?.revisionId\n        );\n\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/claim-page\",\n                Object.assign(parsedUrl.query, { personality, claim })\n            );\n    }\n\n    @IsPublic()\n    @Get(\"personality/:personalitySlug/claim/:claimSlug/sources\")\n    public async sourcesClaimPage(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n\n        const personality = await this.personalityService.getBySlug(\n            req.params.personalitySlug\n        );\n\n        const claim = await this.claimService.getByPersonalityIdAndClaimSlug(\n            personality._id,\n            req.params.claimSlug\n        );\n\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/claim-sources-page\",\n                Object.assign(parsedUrl.query, { claimId: claim._id })\n            );\n    }\n\n    @Get(\"personality/:personalitySlug/claim/:claimSlug/history\")\n    public async personalityHistoryPage(\n        @Req() req: Request,\n        @Res() res: Response\n    ) {\n        const parsedUrl = parse(req.url, true);\n\n        const personality = await this.personalityService.getBySlug(\n            req.params.personalitySlug\n        );\n\n        const claim = await this.claimService.getByPersonalityIdAndClaimSlug(\n            personality._id,\n            req.params.claimSlug\n        );\n\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/history-page\",\n                Object.assign(parsedUrl.query, { targetId: claim._id, targetModel: TargetModel.Claim })\n            );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ClaimModule.html":{"url":"modules/ClaimModule.html","title":"module - ClaimModule","body":"\n                   \n\n\n\n\n    Modules\n    ClaimModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ClaimModule\n\n\n\ncluster_ClaimModule_exports\n\n\n\ncluster_ClaimModule_providers\n\n\n\ncluster_ClaimModule_imports\n\n\n\n\nCaptchaModule\n\nCaptchaModule\n\n\n\nClaimModule\n\nClaimModule\n\nClaimModule -->\n\nCaptchaModule->ClaimModule\n\n\n\n\n\nClaimReviewModule\n\nClaimReviewModule\n\nClaimModule -->\n\nClaimReviewModule->ClaimModule\n\n\n\n\n\nClaimReviewTaskModule\n\nClaimReviewTaskModule\n\nClaimModule -->\n\nClaimReviewTaskModule->ClaimModule\n\n\n\n\n\nClaimRevisionModule\n\nClaimRevisionModule\n\nClaimModule -->\n\nClaimRevisionModule->ClaimModule\n\n\n\n\n\nHistoryModule\n\nHistoryModule\n\nClaimModule -->\n\nHistoryModule->ClaimModule\n\n\n\n\n\nParserModule\n\nParserModule\n\nClaimModule -->\n\nParserModule->ClaimModule\n\n\n\n\n\nPersonalityModule\n\nPersonalityModule\n\nClaimModule -->\n\nPersonalityModule->ClaimModule\n\n\n\n\n\nSourceModule\n\nSourceModule\n\nClaimModule -->\n\nSourceModule->ClaimModule\n\n\n\n\n\nViewModule\n\nViewModule\n\nClaimModule -->\n\nViewModule->ClaimModule\n\n\n\n\n\nClaimService \n\nClaimService \n\nClaimService  -->\n\nClaimModule->ClaimService \n\n\n\n\n\nClaimService\n\nClaimService\n\nClaimModule -->\n\nClaimService->ClaimModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/claim/claim.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ClaimService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ClaimController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CaptchaModule\n                        \n                        \n                            ClaimReviewModule\n                        \n                        \n                            ClaimReviewTaskModule\n                        \n                        \n                            ClaimRevisionModule\n                        \n                        \n                            HistoryModule\n                        \n                        \n                            ParserModule\n                        \n                        \n                            PersonalityModule\n                        \n                        \n                            SourceModule\n                        \n                        \n                            ViewModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ClaimService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { Claim, ClaimSchema } from \"./schemas/claim.schema\";\nimport { ClaimService } from \"./claim.service\";\nimport { ClaimController } from \"./claim.controller\";\nimport { ClaimReviewModule } from \"../claim-review/claim-review.module\";\nimport { ParserModule } from \"../parser/parser.module\";\nimport { PersonalityModule } from \"../personality/personality.module\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { ViewModule } from \"../view/view.module\";\nimport { SourceModule } from \"../source/source.module\";\nimport { ClaimRevisionModule } from \"../claim-revision/claim-revision.module\";\nimport { HistoryModule } from \"../history/history.module\";\nimport { CaptchaModule } from \"../captcha/captcha.module\";\nimport { ClaimReviewTaskModule } from \"../claim-review-task/claim-review-task.module\";\n\nconst ClaimModel = MongooseModule.forFeature([\n    {\n        name: Claim.name,\n        schema: ClaimSchema,\n    },\n]);\n\n@Module({\n    imports: [\n        ClaimModel,\n        ClaimReviewModule,\n        ClaimReviewTaskModule,\n        ClaimRevisionModule,\n        ParserModule,\n        PersonalityModule,\n        HistoryModule,\n        ConfigModule,\n        ViewModule,\n        SourceModule,\n        CaptchaModule,\n    ],\n    exports: [ClaimService],\n    providers: [ClaimService],\n    controllers: [ClaimController],\n})\nexport class ClaimModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClaimReview.html":{"url":"classes/ClaimReview.html","title":"class - ClaimReview","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClaimReview\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim-review/schemas/claim-review.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                claim\n                            \n                            \n                                isPublished\n                            \n                            \n                                personality\n                            \n                            \n                                report\n                            \n                            \n                                sentence_hash\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        claim\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Claim\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'ClaimRevision'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/schemas/claim-review.schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isPublished\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/schemas/claim-review.schema.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        personality\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Personality\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'Personality'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/schemas/claim-review.schema.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        report\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Report\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'Report'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/schemas/claim-review.schema.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sentence_hash\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/schemas/claim-review.schema.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/schemas/claim-review.schema.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { Personality } from \"../../personality/schemas/personality.schema\";\nimport * as mongoose from \"mongoose\";\nimport { Claim } from \"../../claim/schemas/claim.schema\";\nimport { softDeletePlugin } from 'mongoose-softdelete-typescript';\nimport { Report } from \"../../report/schemas/report.schema\";\nimport { User } from \"../../users/schemas/user.schema\";\n\nexport type ClaimReviewDocument = ClaimReview & mongoose.Document;\n\n@Schema({ toObject: {virtuals: true}, toJSON: {virtuals: true} })\nexport class ClaimReview {\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"ClaimRevision\",\n    })\n    claim: Claim;\n\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"Personality\",\n    })\n    personality: Personality;\n\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"User\",\n    })\n    userId: User;\n\n    @Prop({ required: true })\n    sentence_hash: string;\n\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"Report\",\n    })\n    report: Report;\n\n    @Prop({ required: true })\n    isPublished: boolean;\n}\n\nconst ClaimReviewSchemaRaw = SchemaFactory.createForClass(ClaimReview);\n\nClaimReviewSchemaRaw.virtual('sources', {\n    ref: 'Source',\n    localField: '_id',\n    foreignField: 'targetId'\n});\n\nClaimReviewSchemaRaw.plugin(softDeletePlugin)\n\nexport const ClaimReviewSchema = ClaimReviewSchemaRaw;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ClaimReviewController.html":{"url":"controllers/ClaimReviewController.html","title":"controller - ClaimReviewController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ClaimReviewController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim-review/claim-review.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createClaimReview: CreateClaimReview, req, sentence_hash)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('api/review/:sentence_hash')\n                \n            \n\n            \n                \n                    Defined in server/claim-review/claim-review.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createClaimReview\n                                    \n                                                CreateClaimReview\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sentence_hash\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(params)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('api/review/:id')\n                \n            \n\n            \n                \n                    Defined in server/claim-review/claim-review.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(params)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('api/review/:id')\n                \n            \n\n            \n                \n                    Defined in server/claim-review/claim-review.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    Req,\n} from \"@nestjs/common\";\nimport { ClaimReviewService } from \"./claim-review.service\";\nimport { CreateClaimReview } from \"./dto/create-claim-review.dto\";\nimport { IsPublic } from \"../decorators/is-public.decorator\";\n\n@Controller()\nexport class ClaimReviewController {\n    constructor(\n        private claimReviewService: ClaimReviewService,\n    ) { }\n\n    @Post(\"api/review/:sentence_hash\")\n    async create(\n        @Body() createClaimReview: CreateClaimReview,\n        @Req() req,\n        @Param(\"sentence_hash\") sentence_hash\n    ) {\n        return this.claimReviewService.create(\n            {\n                ...createClaimReview,\n                userId: req?.user?._id,\n            },\n            sentence_hash\n        );\n    }\n\n    @IsPublic()\n    @Get(\"api/review/:id\")\n    get(@Param() params) {\n        return this.claimReviewService.getById(params.id);\n    }\n\n    @Delete(\"api/review/:id\")\n    delete(@Param() params) {\n        return this.claimReviewService.delete(params.id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ClaimReviewController-1.html":{"url":"controllers/ClaimReviewController-1.html","title":"controller - ClaimReviewController-1","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ClaimReviewController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim-review-task/claim-review-task.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Public\n                                    Async\n                                getByMachineValue\n                            \n                            \n                                    Async\n                                getBySentenceHash\n                            \n                            \n                                    Public\n                                    Async\n                                personalityList\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createClaimReviewTask: CreateClaimReviewTaskDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('api/claimreviewtask')\n                \n            \n\n            \n                \n                    Defined in server/claim-review-task/claim-review-task.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createClaimReviewTask\n                                    \n                                                CreateClaimReviewTaskDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('api/claimreviewtask/:id')\n                \n            \n\n            \n                \n                    Defined in server/claim-review-task/claim-review-task.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getByMachineValue\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByMachineValue(getTasksDTO: GetTasksDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('api/claimreviewtask')\n                \n            \n\n            \n                \n                    Defined in server/claim-review-task/claim-review-task.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    getTasksDTO\n                                    \n                                                GetTasksDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getBySentenceHash\n                        \n                    \n                \n            \n            \n                \n                    \n                    getBySentenceHash(sentence_hash: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('api/claimreviewtask/sentence/:sentence_hash')\n                \n            \n\n            \n                \n                    Defined in server/claim-review-task/claim-review-task.controller.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentence_hash\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        personalityList\n                        \n                    \n                \n            \n            \n                \n                    \n                    personalityList(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('kanban')\n                \n            \n\n            \n                \n                    Defined in server/claim-review-task/claim-review-task.controller.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(sentence_hash, newClaimReviewTask: UpdateClaimReviewTaskDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('api/claimreviewtask/:sentence_hash')\n                \n            \n\n            \n                \n                    Defined in server/claim-review-task/claim-review-task.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentence_hash\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newClaimReviewTask\n                                    \n                                                UpdateClaimReviewTaskDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Post,\n    Param,\n    Get,\n    Put,\n    Query,\n    Req,\n    Res,\n} from \"@nestjs/common\";\nimport { ClaimReviewTaskService } from \"./claim-review-task.service\";\nimport { CreateClaimReviewTaskDTO } from \"./dto/create-claim-review-task.dto\";\nimport { UpdateClaimReviewTaskDTO } from \"./dto/update-claim-review-task.dto\";\nimport { CaptchaService } from \"../captcha/captcha.service\";\nimport { IsPublic } from \"../decorators/is-public.decorator\";\nimport { parse } from \"url\";\nimport { Request, Response } from \"express\";\nimport { ViewService } from \"../view/view.service\";\nimport { GetTasksDTO } from \"./dto/get-tasks.dto\";\n\n@Controller()\nexport class ClaimReviewController {\n    constructor(\n        private claimReviewTaskService: ClaimReviewTaskService,\n        private captchaService: CaptchaService,\n        private viewService: ViewService\n    ) { }\n\n    @IsPublic()\n    @Get(\"api/claimreviewtask\")\n    public async getByMachineValue(@Query() getTasksDTO: GetTasksDTO) {\n        const { page = 0, pageSize = 10, order = 1, value } = getTasksDTO;\n        return Promise.all([\n            this.claimReviewTaskService.listAll(page, pageSize, order, value),\n            // This should count the number of documents for the original query without pagination\n            this.claimReviewTaskService.count({ \"machine.value\": value }),\n        ]).then(([tasks, totalTasks]) => {\n            const totalPages = Math.ceil(totalTasks / pageSize);\n\n            return {\n                tasks,\n                totalTasks,\n                totalPages,\n                page,\n                pageSize,\n            };\n        });\n    }\n\n    @Get(\"api/claimreviewtask/:id\")\n    async getById(@Param(\"id\") id: string) {\n        return this.claimReviewTaskService.getById(id);\n    }\n\n    @Post(\"api/claimreviewtask\")\n    async create(@Body() createClaimReviewTask: CreateClaimReviewTaskDTO) {\n        const validateCaptcha = await this.captchaService.validate(\n            createClaimReviewTask.recaptcha\n        );\n        if (!validateCaptcha) {\n            throw new Error(\"Error validating captcha\");\n        }\n        return this.claimReviewTaskService.create(createClaimReviewTask);\n    }\n\n    @Put(\"api/claimreviewtask/:sentence_hash\")\n    async update(\n        @Param(\"sentence_hash\") sentence_hash,\n        @Body() newClaimReviewTask: UpdateClaimReviewTaskDTO\n    ) {\n        const validateCaptcha = await this.captchaService.validate(\n            newClaimReviewTask.recaptcha\n        );\n        if (!validateCaptcha) {\n            throw new Error(\"Error validating captcha\");\n        }\n        return this.claimReviewTaskService.update(\n            sentence_hash,\n            newClaimReviewTask\n        );\n    }\n\n    @Get(\"api/claimreviewtask/sentence/:sentence_hash\")\n    async getBySentenceHash(@Param(\"sentence_hash\") sentence_hash: string) {\n        return this.claimReviewTaskService.getClaimReviewTaskBySentenceHash(\n            sentence_hash\n        );\n    }\n\n    @Get(\"kanban\")\n    public async personalityList(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/kanban-page\",\n                Object.assign(parsedUrl.query, {})\n            );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ClaimReviewModule.html":{"url":"modules/ClaimReviewModule.html","title":"module - ClaimReviewModule","body":"\n                   \n\n\n\n\n    Modules\n    ClaimReviewModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ClaimReviewModule\n\n\n\ncluster_ClaimReviewModule_exports\n\n\n\ncluster_ClaimReviewModule_providers\n\n\n\ncluster_ClaimReviewModule_imports\n\n\n\n\nHistoryModule\n\nHistoryModule\n\n\n\nClaimReviewModule\n\nClaimReviewModule\n\nClaimReviewModule -->\n\nHistoryModule->ClaimReviewModule\n\n\n\n\n\nSourceModule\n\nSourceModule\n\nClaimReviewModule -->\n\nSourceModule->ClaimReviewModule\n\n\n\n\n\nClaimReviewService \n\nClaimReviewService \n\nClaimReviewService  -->\n\nClaimReviewModule->ClaimReviewService \n\n\n\n\n\nClaimReviewService\n\nClaimReviewService\n\nClaimReviewModule -->\n\nClaimReviewService->ClaimReviewModule\n\n\n\n\n\nUtilService\n\nUtilService\n\nClaimReviewModule -->\n\nUtilService->ClaimReviewModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/claim-review/claim-review.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ClaimReviewService\n                        \n                        \n                            UtilService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ClaimReviewController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            HistoryModule\n                        \n                        \n                            SourceModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ClaimReviewService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ClaimReview, ClaimReviewSchema } from \"./schemas/claim-review.schema\";\nimport { ClaimReviewService } from \"./claim-review.service\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { ClaimReviewController } from \"./claim-review.controller\";\nimport { UtilService } from \"../util\";\nimport { SourceModule } from \"../source/source.module\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { HistoryModule } from \"../history/history.module\";\n\nexport const ClaimReviewModel = MongooseModule.forFeature([\n    {\n        name: ClaimReview.name,\n        schema: ClaimReviewSchema,\n    },\n]);\n\n@Module({\n    imports: [\n        ClaimReviewModel,\n        HistoryModule,\n        SourceModule,\n        ConfigModule,\n    ],\n    providers: [UtilService, ClaimReviewService],\n    exports: [ClaimReviewService],\n    controllers: [ClaimReviewController],\n})\nexport class ClaimReviewModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClaimReviewService.html":{"url":"injectables/ClaimReviewService.html","title":"injectable - ClaimReviewService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClaimReviewService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim-review/claim-review.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                agreggateClassification\n                            \n                            \n                                count\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                getById\n                            \n                            \n                                getReviewBySentenceHash\n                            \n                            \n                                getReviewsByClaimId\n                            \n                            \n                                    Async\n                                getReviewStatsByClaimId\n                            \n                            \n                                    Async\n                                getReviewStatsBySentenceHash\n                            \n                            \n                                    Async\n                                getUserReviewBySentenceHash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ClaimReviewModel, historyService: HistoryService, util: UtilService)\n                    \n                \n                        \n                            \n                                Defined in server/claim-review/claim-review.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ClaimReviewModel\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        historyService\n                                                  \n                                                        \n                                                                        HistoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        util\n                                                  \n                                                        \n                                                                        UtilService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        agreggateClassification\n                        \n                    \n                \n            \n            \n                \nagreggateClassification(match: any)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    match\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        count\n                        \n                    \n                \n            \n            \n                \ncount(query: any)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(claimReview, sentence_hash)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:118\n                \n            \n\n\n            \n                \n                    This function creates a new claim review.\nAlso creates a History Module that tracks creation of claim reviews.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    claimReview\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ClaimReviewBody received of the client.\n\n                                    \n                                \n                                \n                                    sentence_hash\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        Return a new claim review object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(claimReviewId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:169\n                \n            \n\n\n            \n                \n                    This function does a soft deletion, doesn't delete claim review in DataBase,\nbut omit its in the front page\nAlso creates a History Module that tracks deletion of claim reviews.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    claimReviewId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        claimId Claim id which wants to delete\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        Returns the claim review with the param isDeleted equal to true\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getById\n                        \n                    \n                \n            \n            \n                \ngetById(claimReviewId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimReviewId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getReviewBySentenceHash\n                        \n                    \n                \n            \n            \n                \ngetReviewBySentenceHash(sentence_hash)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:156\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentence_hash\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getReviewsByClaimId\n                        \n                    \n                \n            \n            \n                \ngetReviewsByClaimId(claimId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:79\n                \n            \n\n\n            \n                \n                    get all personality claim claimIDs\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        claim Id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getReviewStatsByClaimId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getReviewStatsByClaimId(claimId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getReviewStatsBySentenceHash\n                        \n                    \n                \n            \n            \n                \n                    \n                    getReviewStatsBySentenceHash(match: any)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    match\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserReviewBySentenceHash\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserReviewBySentenceHash(sentence_hash)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentence_hash\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"ClaimReviewService\")\n                    \n                \n                    \n                        \n                                Defined in server/claim-review/claim-review.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from \"@nestjs/common\";\nimport { Model, Types } from \"mongoose\";\nimport { ClaimReview, ClaimReviewDocument } from \"./schemas/claim-review.schema\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport { UtilService } from \"../util\";\nimport { HistoryService } from \"../history/history.service\";\nimport { HistoryType, TargetModel } from \"../history/schema/history.schema\";\nimport { ISoftDeletedModel } from 'mongoose-softdelete-typescript';\n\n@Injectable()\nexport class ClaimReviewService {\n    private readonly logger = new Logger(\"ClaimReviewService\");\n    constructor(\n        @InjectModel(ClaimReview.name)\n        private ClaimReviewModel: Model & ISoftDeletedModel,\n        private historyService: HistoryService,\n        private util: UtilService\n    ) {}\n\n    agreggateClassification(match: any) {\n        return this.ClaimReviewModel.aggregate([\n            { $match: match },\n            {\n                $lookup: {\n                    from: 'reports',\n                    localField: 'report',\n                    foreignField: '_id',\n                    as: 'report'\n                }\n            },\n            { $group: { _id: \"$report.classification\", count: { $sum: 1 } } },\n            { $sort: { count: -1 } },\n        ]);\n    }\n\n    count(query: any = {}) {\n        return this.ClaimReviewModel.countDocuments().where(query);\n    }\n\n    async getReviewStatsBySentenceHash(match: any) {\n        const reviews = await this.ClaimReviewModel.aggregate([\n            { $match: match },\n            {\n                $lookup: {\n                    from: 'reports',\n                    localField: 'report',\n                    foreignField: '_id',\n                    as: 'report'\n                }\n            },\n            { $group: { _id: \"$report.classification\", count: { $sum: 1 } } },\n            { $sort: { count: -1 } },\n        ]);\n        return this.util.formatStats(reviews);\n    }\n\n    async getReviewStatsByClaimId(claimId) {\n        const reviews = await this.ClaimReviewModel.aggregate([\n            { $match: { claim: claimId, isDeleted: false, isPublished: true, } },\n            {\n                $lookup: {\n                    from: 'reports',\n                    localField: 'report',\n                    foreignField: '_id',\n                    as: 'report'\n                }\n            },\n            { $group: { _id: \"$report.classification\", count: { $sum: 1 } } },\n            { $sort: { count: -1 } },\n        ]);\n        return this.util.formatStats(reviews);\n    }\n\n    /**\n     * get all personality claim claimIDs\n     * @param claimId claim Id\n     * @returns\n     */\n    getReviewsByClaimId(claimId) {\n        return this.ClaimReviewModel.aggregate([\n            { $match: { claim: claimId, isDeleted: false, isPublished: true } },\n            {\n                $lookup: {\n                    from: 'reports',\n                    localField: 'report',\n                    foreignField: '_id',\n                    as: 'report'\n                }\n            },\n            {\n                $group: {\n                    _id: {sentence_hash: \"$sentence_hash\", classification: \"$report.classification\"},\n                    count: { $sum: 1 }\n                },\n            },\n        ]).option({ serializeFunctions: true });\n    }\n\n    async getUserReviewBySentenceHash(sentence_hash) {\n        const user = await this.ClaimReviewModel.findOne(\n            { sentence_hash, isDeleted: false, isPublished: true },\n            {\n                userId: 1,\n            }\n        );\n        const userReview = user?.userId\n        return userReview\n    }\n\n\n\n    /**\n     * This function creates a new claim review.\n     * Also creates a History Module that tracks creation of claim reviews.\n     * @param claimReview ClaimReviewBody received of the client.\n     * @returns Return a new claim review object.\n     */\n    async create(claimReview, sentence_hash) {\n        const review = await this.getReviewBySentenceHash(claimReview.sentence_hash)\n\n        if (review.length) {\n            throw new Error(\"This Claim already has a review\");\n            //TODO: verify if already start a review and isn't published\n        } else {\n            // Cast ObjectId\n            claimReview.personality = Types.ObjectId(claimReview.personality);\n            claimReview.claim = Types.ObjectId(claimReview.claim);\n            claimReview.report = Types.ObjectId(claimReview.report._id)\n            claimReview.userId = Types.ObjectId(claimReview.userId)\n            claimReview.sentence_hash = sentence_hash\n            const newClaimReview = new this.ClaimReviewModel(claimReview)\n\n            newClaimReview.isPublished = true\n\n            const history = \n                this.historyService.getHistoryParams(\n                    newClaimReview._id,\n                    TargetModel.ClaimReview,\n                    claimReview.userId,\n                    HistoryType.Create,\n                    newClaimReview\n                )\n\n            this.historyService.createHistory(history)\n\n            return newClaimReview.save();\n        }\n    }\n\n    getById(claimReviewId) {\n        return this.ClaimReviewModel.findById(claimReviewId)\n            .populate(\"claims\", \"_id title\")\n            .populate(\"sources\", \"_id link classification\");\n    }\n\n    getReviewBySentenceHash(sentence_hash) {\n        return this.ClaimReviewModel.aggregate([\n            { $match: { sentence_hash } },\n        ])\n    }\n\n    /**\n     * This function does a soft deletion, doesn't delete claim review in DataBase,\n     * but omit its in the front page\n     * Also creates a History Module that tracks deletion of claim reviews.\n     * @param claimReviewId claimId Claim id which wants to delete\n     * @returns Returns the claim review with the param isDeleted equal to true\n     */\n    async delete(claimReviewId) {\n        // This line may cause a false positive in sonarCloud because if we remove the await, we cannot iterate through the results\n        const claimReview = await this.getById(claimReviewId)\n        const history = \n            this.historyService.getHistoryParams(\n                claimReview._id,\n                TargetModel.ClaimReview,\n                claimReview.userId,\n                HistoryType.Delete,\n                null,\n                claimReview\n            )\n        this.historyService.createHistory(history)\n        return this.ClaimReviewModel.softDelete({ _id: claimReviewId });\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClaimReviewTask.html":{"url":"classes/ClaimReviewTask.html","title":"class - ClaimReviewTask","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClaimReviewTask\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim-review-task/schemas/claim-review-task.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                machine\n                            \n                            \n                                sentence_hash\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        machine\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Machine\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review-task/schemas/claim-review-task.schema.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sentence_hash\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review-task/schemas/claim-review-task.schema.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import * as mongoose from \"mongoose\";\nimport { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { Machine } from \"../dto/create-claim-review-task.dto\";\n\nexport type ClaimReviewTaskDocument = ClaimReviewTask & mongoose.Document;\n\n@Schema({ toObject: {virtuals: true}, toJSON: {virtuals: true} })\nexport class ClaimReviewTask {\n    @Prop({ type: Object, required: true })\n    machine: Machine;\n\n    @Prop({ unique: true, required: true })\n    sentence_hash: string;\n}\n\nexport const ClaimReviewTaskSchema = SchemaFactory.createForClass(ClaimReviewTask);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ClaimReviewTaskModule.html":{"url":"modules/ClaimReviewTaskModule.html","title":"module - ClaimReviewTaskModule","body":"\n                   \n\n\n\n\n    Modules\n    ClaimReviewTaskModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ClaimReviewTaskModule\n\n\n\ncluster_ClaimReviewTaskModule_imports\n\n\n\ncluster_ClaimReviewTaskModule_exports\n\n\n\ncluster_ClaimReviewTaskModule_providers\n\n\n\n\nCaptchaModule\n\nCaptchaModule\n\n\n\nClaimReviewTaskModule\n\nClaimReviewTaskModule\n\nClaimReviewTaskModule -->\n\nCaptchaModule->ClaimReviewTaskModule\n\n\n\n\n\nClaimReviewModule\n\nClaimReviewModule\n\nClaimReviewTaskModule -->\n\nClaimReviewModule->ClaimReviewTaskModule\n\n\n\n\n\nReportModule\n\nReportModule\n\nClaimReviewTaskModule -->\n\nReportModule->ClaimReviewTaskModule\n\n\n\n\n\nViewModule\n\nViewModule\n\nClaimReviewTaskModule -->\n\nViewModule->ClaimReviewTaskModule\n\n\n\n\n\nClaimReviewTaskService \n\nClaimReviewTaskService \n\nClaimReviewTaskService  -->\n\nClaimReviewTaskModule->ClaimReviewTaskService \n\n\n\n\n\nClaimReviewTaskService\n\nClaimReviewTaskService\n\nClaimReviewTaskModule -->\n\nClaimReviewTaskService->ClaimReviewTaskModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/claim-review-task/claim-review-task.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ClaimReviewTaskService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ClaimReviewController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CaptchaModule\n                        \n                        \n                            ClaimReviewModule\n                        \n                        \n                            ReportModule\n                        \n                        \n                            ViewModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ClaimReviewTaskService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport {\n    ClaimReviewTask,\n    ClaimReviewTaskSchema,\n} from \"./schemas/claim-review-task.schema\";\nimport { ClaimReviewTaskService } from \"./claim-review-task.service\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { ClaimReviewController } from \"./claim-review-task.controller\";\nimport { ClaimReviewModule } from \"../claim-review/claim-review.module\";\nimport { ReportModule } from \"../report/report.module\";\nimport { CaptchaModule } from \"../captcha/captcha.module\";\nimport { ViewModule } from \"../view/view.module\";\n\nexport const ClaimReviewTaskModel = MongooseModule.forFeature([\n    {\n        name: ClaimReviewTask.name,\n        schema: ClaimReviewTaskSchema,\n    },\n]);\n\n@Module({\n    imports: [\n        ClaimReviewTaskModel,\n        ClaimReviewModule,\n        ReportModule,\n        CaptchaModule,\n        ViewModule\n    ],\n    providers: [ClaimReviewTaskService],\n    exports: [ClaimReviewTaskService],\n    controllers: [ClaimReviewController],\n})\nexport class ClaimReviewTaskModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClaimReviewTaskService.html":{"url":"injectables/ClaimReviewTaskService.html","title":"injectable - ClaimReviewTaskService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClaimReviewTaskService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim-review-task/claim-review-task.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                count\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                getById\n                            \n                            \n                                getClaimReviewTaskBySentenceHash\n                            \n                            \n                                    Async\n                                listAll\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ClaimReviewTaskModel: Model, claimReviewService: ClaimReviewService, reportService: ReportService)\n                    \n                \n                        \n                            \n                                Defined in server/claim-review-task/claim-review-task.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ClaimReviewTaskModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        claimReviewService\n                                                  \n                                                        \n                                                                        ClaimReviewService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reportService\n                                                  \n                                                        \n                                                                        ReportService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        count\n                        \n                    \n                \n            \n            \n                \ncount(query: any)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review-task/claim-review-task.service.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(claimReviewTaskBody: CreateClaimReviewTaskDTO)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review-task/claim-review-task.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimReviewTaskBody\n                                    \n                                                CreateClaimReviewTaskDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getById\n                        \n                    \n                \n            \n            \n                \ngetById(claimReviewTaskId: string)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review-task/claim-review-task.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimReviewTaskId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getClaimReviewTaskBySentenceHash\n                        \n                    \n                \n            \n            \n                \ngetClaimReviewTaskBySentenceHash(sentence_hash: string)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review-task/claim-review-task.service.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentence_hash\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAll(page, pageSize, order, value)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review-task/claim-review-task.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    page\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageSize\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    order\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(sentence_hash: string, newClaimReviewTaskBody: UpdateClaimReviewTaskDTO)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review-task/claim-review-task.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentence_hash\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newClaimReviewTaskBody\n                                    \n                                                UpdateClaimReviewTaskDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Model, Types } from \"mongoose\";\nimport {\n    ClaimReviewTask,\n    ClaimReviewTaskDocument,\n} from \"./schemas/claim-review-task.schema\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport { CreateClaimReviewTaskDTO } from \"./dto/create-claim-review-task.dto\";\nimport { UpdateClaimReviewTaskDTO } from \"./dto/update-claim-review-task.dto\";\nimport { ClaimReviewService } from \"../claim-review/claim-review.service\";\nimport { ReportService } from \"../report/report.service\";\n\n@Injectable()\nexport class ClaimReviewTaskService {\n    constructor(\n        @InjectModel(ClaimReviewTask.name)\n        private ClaimReviewTaskModel: Model,\n        private claimReviewService: ClaimReviewService,\n        private reportService: ReportService,\n    ) { }\n\n    async listAll(page, pageSize, order, value) {\n        const reviewTasks = await this.ClaimReviewTaskModel.find({\n            \"machine.value\": value,\n        })\n            .skip(page * pageSize)\n            .limit(pageSize)\n            .sort({ _id: order })\n            .populate({\n                path: \"machine.context.reviewData.userId\",\n                model: \"User\",\n                select: \"name\",\n            })\n            .populate({\n                path: \"machine.context.claimReview.personality\",\n                model: \"Personality\",\n                select: \"slug name\"\n            })\n            .populate({\n                path: \"machine.context.claimReview.claim\",\n                model: \"Claim\",\n                populate: {\n                    path: \"latestRevision\",\n                    select: \"title\"\n                },\n                select: \"slug\"\n            })\n\n\n        return reviewTasks.map(({ sentence_hash, machine }) => {\n            const { personality, claim } = machine.context.claimReview;\n            const reviewHref = `/personality/${personality.slug}/claim/${claim.slug}/sentence/${sentence_hash}`;\n\n            return {\n                sentence_hash,\n                userName: machine.context.reviewData.userId.name,\n                value: machine.value,\n                personalityName: personality.name,\n                claimTitle: claim.latestRevision.title,\n                reviewHref\n            };\n        });\n    }\n\n    getById(claimReviewTaskId: string) {\n        return this.ClaimReviewTaskModel.findById(claimReviewTaskId);\n    }\n\n    async create(claimReviewTaskBody: CreateClaimReviewTaskDTO) {\n        claimReviewTaskBody.machine.context.reviewData.userId = Types.ObjectId(\n            claimReviewTaskBody.machine.context.reviewData.userId\n        );\n        const newClaimReviewTask = new this.ClaimReviewTaskModel(\n            claimReviewTaskBody\n        );\n        newClaimReviewTask.save();\n        return newClaimReviewTask;\n    }\n\n    async update(\n        sentence_hash: string,\n        newClaimReviewTaskBody: UpdateClaimReviewTaskDTO\n    ) {\n        // This line may cause a false positive in sonarCloud because if we remove the await, we cannot iterate through the results\n        try {\n            newClaimReviewTaskBody.machine.context.reviewData.userId =\n                Types.ObjectId(\n                    newClaimReviewTaskBody.machine.context.reviewData.userId\n                );\n            const claimReviewTask = await this.getClaimReviewTaskBySentenceHash(\n                sentence_hash\n            );\n            const newClaimReviewTaskMachine = Object.assign(\n                claimReviewTask.machine,\n                newClaimReviewTaskBody.machine\n            );\n            const newClaimReviewTask = Object.assign(\n                claimReviewTask,\n                newClaimReviewTaskMachine\n            );\n\n            if (newClaimReviewTaskMachine.value === \"published\") {\n                const claimReviewData =\n                    newClaimReviewTaskMachine.context.claimReview;\n\n                const newReport = Object.assign(\n                    newClaimReviewTaskMachine.context.reviewData,\n                    { sentence_hash }\n                );\n\n                const report = await this.reportService.create(newReport);\n\n                this.claimReviewService.create(\n                    {\n                        ...claimReviewData,\n                        report,\n                    },\n                    sentence_hash\n                );\n            }\n\n            return this.ClaimReviewTaskModel.updateOne(\n                { _id: newClaimReviewTask._id },\n                newClaimReviewTask\n            );\n        } catch (e) {\n            throw new Error(e);\n        }\n    }\n\n    getClaimReviewTaskBySentenceHash(sentence_hash: string) {\n        return this.ClaimReviewTaskModel.findOne({ sentence_hash });\n    }\n\n    count(query: any = {}) {\n        return this.ClaimReviewTaskModel.countDocuments().where(query)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClaimRevision.html":{"url":"classes/ClaimRevision.html","title":"class - ClaimRevision","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClaimRevision\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim-revision/schema/claim-revision.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                claimId\n                            \n                            \n                                contentId\n                            \n                            \n                                contentModel\n                            \n                            \n                                date\n                            \n                            \n                                personality\n                            \n                            \n                                slug\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        claimId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Claim\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'Claim'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-revision/schema/claim-revision.schema.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        contentId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'Speech'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-revision/schema/claim-revision.schema.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        contentModel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ContentModelEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, validate: undefined, message: tag => })\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-revision/schema/claim-revision.schema.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-revision/schema/claim-revision.schema.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        personality\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Personality\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'Personality'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-revision/schema/claim-revision.schema.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-revision/schema/claim-revision.schema.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-revision/schema/claim-revision.schema.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport * as mongoose from \"mongoose\";\nimport { Claim } from \"../../claim/schemas/claim.schema\";\nimport { Personality } from \"../../personality/schemas/personality.schema\"\n\nexport type ClaimRevisionDocument = ClaimRevision & mongoose.Document;\n\nexport enum ContentModelEnum {\n    Speech = \"Speech\",\n    Twitter = \"Twitter\",\n}\n\n@Schema({ toObject: {virtuals: true}, toJSON: {virtuals: true} })\nexport class ClaimRevision {\n    @Prop({ required: true })\n    title: string;\n\n    @Prop({ required: true })\n    slug: string;\n\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"Speech\",\n    })\n    contentId: mongoose.Types.ObjectId;\n\n    @Prop({\n        required: true,\n        validate: {\n            validator: (v) => {\n                return v === ContentModelEnum.Speech || v === ContentModelEnum.Twitter;\n            },\n        },\n        message: (tag) => `${tag} is not a valid claim type.`,\n    })\n    contentModel: ContentModelEnum;\n\n    @Prop({ required: true })\n    date: Date;\n\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"Claim\",\n    })\n    claimId: Claim;\n\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"Personality\",\n    })\n    personality: Personality;\n\n    // TODO: Let's not use the auto-increment yet\n    // mongodb will create a default _id field and we can use it for the first version\n    // @Prop({ required: true })\n    // revisionId: number;\n}\n\nconst ClaimRevisionSchemaRaw = SchemaFactory.createForClass(ClaimRevision);\n\nClaimRevisionSchemaRaw.virtual('reviews', {\n    ref: 'ClaimReview',\n    localField: '_id',\n    foreignField: 'claim'\n});\n\nClaimRevisionSchemaRaw.virtual('content', {\n    ref: 'Speech',\n    localField: 'contentId',\n    foreignField: '_id'\n})\n\nexport const ClaimRevisionSchema = ClaimRevisionSchemaRaw;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ClaimRevisionModule.html":{"url":"modules/ClaimRevisionModule.html","title":"module - ClaimRevisionModule","body":"\n                   \n\n\n\n\n    Modules\n    ClaimRevisionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ClaimRevisionModule\n\n\n\ncluster_ClaimRevisionModule_exports\n\n\n\ncluster_ClaimRevisionModule_imports\n\n\n\ncluster_ClaimRevisionModule_providers\n\n\n\n\nParagraphModule\n\nParagraphModule\n\n\n\nClaimRevisionModule\n\nClaimRevisionModule\n\nClaimRevisionModule -->\n\nParagraphModule->ClaimRevisionModule\n\n\n\n\n\nParserModule\n\nParserModule\n\nClaimRevisionModule -->\n\nParserModule->ClaimRevisionModule\n\n\n\n\n\nSourceModule\n\nSourceModule\n\nClaimRevisionModule -->\n\nSourceModule->ClaimRevisionModule\n\n\n\n\n\nSpeechModule\n\nSpeechModule\n\nClaimRevisionModule -->\n\nSpeechModule->ClaimRevisionModule\n\n\n\n\n\nViewModule\n\nViewModule\n\nClaimRevisionModule -->\n\nViewModule->ClaimRevisionModule\n\n\n\n\n\nClaimRevisionService \n\nClaimRevisionService \n\nClaimRevisionService  -->\n\nClaimRevisionModule->ClaimRevisionService \n\n\n\n\n\nClaimRevisionService\n\nClaimRevisionService\n\nClaimRevisionModule -->\n\nClaimRevisionService->ClaimRevisionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/claim-revision/claim-revision.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ClaimRevisionService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ParagraphModule\n                        \n                        \n                            ParserModule\n                        \n                        \n                            SourceModule\n                        \n                        \n                            SpeechModule\n                        \n                        \n                            ViewModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ClaimRevisionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { ClaimRevision, ClaimRevisionSchema } from \"./schema/claim-revision.schema\";\nimport { ParserModule } from \"../parser/parser.module\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { HttpModule } from \"@nestjs/axios\";\nimport { ViewModule } from \"../view/view.module\";\nimport { SourceModule } from \"../source/source.module\";\nimport { ClaimRevisionService } from \"./claim-revision.service\";\nimport { ParagraphModule } from \"../paragraph/paragraph.module\";\nimport { SpeechModule } from \"../speech/speech.module\";\n\nconst ClaimRevisionModel = MongooseModule.forFeature([\n    {\n        name: ClaimRevision.name,\n        schema: ClaimRevisionSchema,\n    },\n]);\n\n@Module({\n    // TODO: clean-up Claim module after logic is fully migrated to ClaimRevision\n    imports: [\n        ClaimRevisionModel,\n        ParserModule,\n        ParagraphModule,\n        SpeechModule,\n        ConfigModule,\n        HttpModule,\n        ViewModule,\n        SourceModule,\n    ],\n    exports: [ClaimRevisionService],\n    providers: [ClaimRevisionService],\n})\nexport class ClaimRevisionModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClaimRevisionService.html":{"url":"injectables/ClaimRevisionService.html","title":"injectable - ClaimRevisionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClaimRevisionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim-revision/claim-revision.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                optionsToUpdate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                getRevision\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ClaimRevisionModel: Model, sourceService: SourceService, parserService: ParserService)\n                    \n                \n                        \n                            \n                                Defined in server/claim-revision/claim-revision.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ClaimRevisionModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sourceService\n                                                  \n                                                        \n                                                                        SourceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        parserService\n                                                  \n                                                        \n                                                                        ParserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(claimId, claim)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-revision/claim-revision.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        an unique claim id\n\n                                    \n                                \n                                \n                                    claim\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Claim Content\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        Save the claimRevision in database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRevision\n                        \n                    \n                \n            \n            \n                \ngetRevision(match)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-revision/claim-revision.service.ts:28\n                \n            \n\n\n            \n                \n                    get ClaimRevision by ID\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    match\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"ClaimService\")\n                    \n                \n                    \n                        \n                                Defined in server/claim-revision/claim-revision.service.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        optionsToUpdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in server/claim-revision/claim-revision.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {Injectable, Logger, NotFoundException} from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport { Model } from \"mongoose\";\nimport slugify from 'slugify'\nimport { ParserService } from \"../parser/parser.service\";\nimport { SourceService } from \"../source/source.service\";\nimport { SourceTargetModel } from \"../source/schemas/source.schema\";\nimport { ClaimRevision, ClaimRevisionDocument } from \"./schema/claim-revision.schema\";\n\n@Injectable()\nexport class ClaimRevisionService {\n    private optionsToUpdate: { new: boolean; upsert: boolean };\n    private readonly logger = new Logger(\"ClaimService\");\n\n    constructor(\n        @InjectModel(ClaimRevision.name)\n        private ClaimRevisionModel: Model,\n        private sourceService: SourceService,\n        private parserService: ParserService\n    ) {\n        this.optionsToUpdate = {\n            new: true,\n            upsert: true,\n        };\n    }\n\n    /** get ClaimRevision by ID */\n    getRevision(match) {\n        try {\n            return this.ClaimRevisionModel.findOne(match)\n                .populate(\"personality\", \"_id name\")\n                .lean()\n        } catch {\n            throw new NotFoundException()\n        }\n    }\n    /**\n     *\n     * @param claimId an unique claim id\n     * @param claim Claim Content\n     * @returns Save the claimRevision in database\n     */\n    async create(claimId, claim) {\n        claim.claimId = claimId;\n        claim.slug = slugify(claim.title, {\n            lower: true,     // convert to lower case, defaults to `false`\n            strict: true     // strip special characters except replacement, defaults to `false`\n        })\n\n        if (typeof claim.content === \"string\") {\n            const newSpeech = await this.parserService.parse(claim.content);\n            claim.contentId = newSpeech._id;\n        }\n\n        const newClaimRevision = new this.ClaimRevisionModel(claim);\n\n        if (claim.sources && Array.isArray(claim.sources)) {\n            try {\n                for (let source of claim.sources) {\n                    await this.sourceService.create({\n                        link: source,\n                        targetId: claimId,\n                        targetModel: SourceTargetModel.Claim,\n                    });\n                }\n            } catch (e) {\n                this.logger.error(e);\n                throw e;\n            }\n        }\n        return newClaimRevision.save();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClaimService.html":{"url":"injectables/ClaimService.html","title":"injectable - ClaimService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClaimService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim/claim.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                optionsToUpdate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                _getClaim\n                            \n                            \n                                    Private\n                                calculateOverallStats\n                            \n                            \n                                count\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getByPersonalityIdAndClaimSlug\n                            \n                            \n                                    Async\n                                listAll\n                            \n                            \n                                    Private\n                                    Async\n                                postProcess\n                            \n                            \n                                    Private\n                                transformContentObject\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(req: Request, ClaimModel, claimReviewService: ClaimReviewService, historyService: HistoryService, claimRevisionService: ClaimRevisionService)\n                    \n                \n                        \n                            \n                                Defined in server/claim/claim.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        req\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        ClaimModel\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        claimReviewService\n                                                  \n                                                        \n                                                                        ClaimReviewService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        historyService\n                                                  \n                                                        \n                                                                        HistoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        claimRevisionService\n                                                  \n                                                        \n                                                                        ClaimRevisionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        _getClaim\n                        \n                    \n                \n            \n            \n                \n                    \n                    _getClaim(match: ClaimMatchParameters, revisionId, postprocess)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:172\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    match\n                                    \n                                                ClaimMatchParameters\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    revisionId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        undefined\n                                    \n\n                                \n                                \n                                    postprocess\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        calculateOverallStats\n                        \n                    \n                \n            \n            \n                \n                    \n                    calculateOverallStats(claim)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:253\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claim\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         { totalClaims: number; totalClaimsReviewed: number; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        count\n                        \n                    \n                \n            \n            \n                \ncount(query: any)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(claim)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:77\n                \n            \n\n\n            \n                \n                    This function will create a new claim and claim Revision and save it to the dataBase.\nAlso creates a History Module that tracks creation of claims.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    claim\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ClaimBody received of the client.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        Return a new claim object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(claimId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:148\n                \n            \n\n\n            \n                \n                    This function does a soft deletion, doesn't delete claim in DataBase,\nbut omit its in the front page\nAlso creates a History Module that tracks deletion of claims.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Claim id which wants to delete\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        Returns the claim with the param isDeleted equal to true\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(claimId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:164\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByPersonalityIdAndClaimSlug\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByPersonalityIdAndClaimSlug(personalityId, claimSlug, revisionId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:168\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    personalityId\n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    claimSlug\n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    revisionId\n\n                                    \n                                        No\n                                    \n\n                                    \n                                        undefined\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAll(page, pageSize, order, query)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    page\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageSize\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    order\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        postProcess\n                        \n                    \n                \n            \n            \n                \n                    \n                    postProcess(claim)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:222\n                \n            \n\n\n            \n                \n                    This function return all personality claims\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    claim\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        all personality claims\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        return all claims\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        transformContentObject\n                        \n                    \n                \n            \n            \n                \n                    \n                    transformContentObject(claimContent, reviews)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:272\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimContent\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    reviews\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(claimId, claimRevisionUpdate)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:112\n                \n            \n\n\n            \n                \n                    This function creates a new claim with the old claim data\nand overwrite with the new data, keeping data that hasn't changed.\nAlso creates a History Module that tracks updation of claims.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Claim id which wants updated.\n\n                                    \n                                \n                                \n                                    claimRevisionUpdate\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ClaimBody received of the client.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        Return a new claim object.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"ClaimService\")\n                    \n                \n                    \n                        \n                                Defined in server/claim/claim.service.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        optionsToUpdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in server/claim/claim.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, Logger, Scope, NotFoundException } from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport { FilterQuery, Model, Types } from \"mongoose\";\nimport { Claim, ClaimDocument } from \"../claim/schemas/claim.schema\";\nimport { ClaimReviewService } from \"../claim-review/claim-review.service\";\nimport { ClaimRevisionService } from \"../claim-revision/claim-revision.service\";\nimport { HistoryService } from \"../history/history.service\"\nimport { HistoryType, TargetModel } from \"../history/schema/history.schema\";\nimport { ISoftDeletedModel } from 'mongoose-softdelete-typescript';\nimport { REQUEST } from '@nestjs/core';\nimport { Request } from 'express';\n\ntype ClaimMatchParameters = ({ _id: string } | { personality: string, slug: string }) & FilterQuery;\n\n@Injectable({ scope: Scope.REQUEST })\nexport class ClaimService {\n    private optionsToUpdate: { new: boolean; upsert: boolean };\n    private readonly logger = new Logger(\"ClaimService\");\n\n    constructor(\n        @Inject(REQUEST) private req: Request,\n        @InjectModel(Claim.name)\n        private ClaimModel: ISoftDeletedModel & Model,\n        private claimReviewService: ClaimReviewService,\n        private historyService: HistoryService,\n        private claimRevisionService: ClaimRevisionService,\n    ) {\n        this.optionsToUpdate = {\n            new: true,\n            upsert: true,\n        };\n    }\n\n    async listAll(page, pageSize, order, query) {\n        if (query.personality) {\n            query.personality = Types.ObjectId(query.personality)\n        }\n        const claims = await this.ClaimModel.find(query)\n            .populate({\n                path: 'latestRevision',\n                populate: {\n                    path: 'content',\n                    populate: {\n                        path: 'content',\n                        populate: {\n                            path: 'content'\n                        }\n                    }\n                }\n            })\n            .skip(page * pageSize)\n            .limit(pageSize)\n            .sort({ _id: order })\n            .lean();\n\n        return Promise.all(\n            claims.map(async (claim) => {\n                // This line may cause a false positive in sonarCloud because if we remove the await, we cannot iterate through the results\n                return this.postProcess({\n                    ...claim.latestRevision,\n                    ...claim\n                });\n            })\n        );\n    }\n\n    count(query: any = {}) {\n        return this.ClaimModel.countDocuments().where(query);\n    }\n\n    /**\n     * This function will create a new claim and claim Revision and save it to the dataBase.\n     * Also creates a History Module that tracks creation of claims.\n     * @param claim ClaimBody received of the client.\n     * @returns Return a new claim object.\n     */\n    async create(claim) {\n        claim.personality = Types.ObjectId(claim.personality);\n        const newClaim = new this.ClaimModel(claim);\n        const newClaimRevision = await this.claimRevisionService.create(newClaim._id, claim)\n        newClaim.latestRevision = newClaimRevision._id\n        newClaim.slug = newClaimRevision.slug\n\n        const user = this.req.user\n\n        const history =\n            this.historyService.getHistoryParams(\n                newClaim._id,\n                TargetModel.Claim,\n                user,\n                HistoryType.Create,\n                newClaim.latestRevision\n            )\n        await this.historyService.createHistory(history)\n\n        newClaim.save();\n\n        return {\n            ...newClaim.toObject(),\n            ...newClaimRevision.toObject()\n        }\n    }\n\n    /**\n     * This function creates a new claim with the old claim data\n     * and overwrite with the new data, keeping data that hasn't changed.\n     * Also creates a History Module that tracks updation of claims.\n     * @param claimId Claim id which wants updated.\n     * @param claimRevisionUpdate ClaimBody received of the client.\n     * @returns Return a new claim object.\n     */\n    async update(claimId, claimRevisionUpdate) {\n        const claim = await this._getClaim({ _id: claimId }, undefined, false);\n        const previousRevision = claim.toObject().latestRevision\n        delete previousRevision._id\n        const newClaimRevision =\n            await this.claimRevisionService.create(claim._id, {\n                ...previousRevision,\n                ...claimRevisionUpdate\n            })\n        claim.latestRevision = newClaimRevision._id\n        claim.slug = newClaimRevision.slug\n\n        const user = this.req.user\n\n        const history =\n            this.historyService.getHistoryParams(\n                claimId,\n                TargetModel.Claim,\n                user,\n                HistoryType.Update,\n                newClaimRevision,\n                previousRevision\n            )\n        await this.historyService.createHistory(history)\n\n        claim.save()\n        return newClaimRevision;\n    }\n\n    /**\n     * This function does a soft deletion, doesn't delete claim in DataBase,\n     * but omit its in the front page\n     * Also creates a History Module that tracks deletion of claims.\n     * @param claimId Claim id which wants to delete\n     * @returns Returns the claim with the param isDeleted equal to true\n     */\n    async delete(claimId) {\n        const user = this.req.user\n        const previousClaim = await this.getById(claimId)\n        const history = this.historyService.getHistoryParams(\n            claimId,\n            TargetModel.Claim,\n            user,\n            HistoryType.Delete,\n            null,\n            previousClaim\n        )\n        await this.historyService.createHistory(history)\n        return this.ClaimModel.softDelete({ _id: claimId });\n    }\n\n    // TODO: add optional revisionId that will fetch a specifc revision that matches\n    async getById(claimId) {\n        return this._getClaim({_id: claimId})\n    }\n\n    async getByPersonalityIdAndClaimSlug(personalityId, claimSlug, revisionId = undefined) {\n        return this._getClaim({personality: personalityId, slug: claimSlug}, revisionId)\n    }\n\n    private async _getClaim(match: ClaimMatchParameters, revisionId = undefined, postprocess = true) {\n        let claim\n        if(revisionId) {\n            const rawClaim = await this.ClaimModel.findOne(match)\n                .select({\"latestRevision\": 0})\n            // This line may cause a false positive in sonarCloud because if we remove the await, we cannot iterate through the results\n            const revision = await this.claimRevisionService.getRevision({\n                _id: revisionId,\n                claimId: rawClaim._id\n            })\n\n            if (!revision || !rawClaim) {\n                throw new NotFoundException()\n            }\n\n            claim = {\n                ...rawClaim,\n                revision\n            }\n        } else {\n            // This line may cause a false positive in sonarCloud because if we remove the await, we cannot iterate through the results\n            claim = await this.ClaimModel.findOne(match)\n                .populate(\"personality\", \"_id name\")\n                .populate(\"sources\", \"_id link classification\")\n                .populate({\n                    path: 'latestRevision',\n                    populate: {\n                        path: 'content',\n                        populate: {\n                            path: 'content',\n                            populate: {\n                                path: 'content'\n                            }\n                        }\n                    }\n                })\n                .lean()\n\n        }\n        if (!claim) {\n            throw new NotFoundException()\n        }\n        return postprocess === true ? this.postProcess(claim) : claim;\n    }\n\n    /**\n     * This function return all personality claims\n     * @param claim all personality claims\n     * @returns return all claims\n     */\n    private async postProcess(claim) {\n        // TODO: we should not transform the object in this function\n        claim = {\n            ...(claim?.latestRevision || claim?.revision),\n            ...claim,\n            latestRevision: undefined\n        }\n        const reviews = await this.claimReviewService.getReviewsByClaimId(\n            claim._id\n        );\n\n        claim.content = claim.content[0].content\n\n        if (claim) {\n            if (claim?.content) {\n                claim.content = this.transformContentObject(\n                    claim.content,\n                    reviews\n                );\n            }\n            const reviewStats =\n                await this.claimReviewService.getReviewStatsByClaimId(\n                    claim._id\n                );\n            const overallStats = this.calculateOverallStats(claim);\n            const stats = { ...reviewStats, ...overallStats };\n            claim = Object.assign(claim, { stats });\n        }\n        return claim;\n    }\n\n    private calculateOverallStats(claim) {\n        let totalClaims = 0;\n        let totalClaimsReviewed = 0;\n        if (claim?.content) {\n            claim.content.forEach((p) => {\n                totalClaims += p.content.length;\n                p.content.forEach((sentence) => {\n                    if (sentence.props.classification) {\n                        totalClaimsReviewed++;\n                    }\n                });\n            }, 0);\n        }\n        return {\n            totalClaims,\n            totalClaimsReviewed,\n        };\n    }\n\n    private transformContentObject(claimContent, reviews) {\n        if (!claimContent || reviews.length  {\n            paragraph.content.forEach((sentence, sentenceIndex) => {\n                const claimReview = reviews.find((review) => {\n                    return review._id.sentence_hash === sentence.data_hash;\n                });\n                if (claimReview) {\n                    claimContent[paragraphIndex].content[sentenceIndex].props =\n                        Object.assign(sentence.props, {\n                            classification: claimReview._id.classification[0],\n                        });\n                }\n            });\n        });\n        return claimContent;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateClaimDTO.html":{"url":"classes/CreateClaimDTO.html","title":"class - CreateClaimDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateClaimDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim/dto/create-claim.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                contentModel\n                            \n                            \n                                date\n                            \n                            \n                                personality\n                            \n                            \n                                recaptcha\n                            \n                            \n                                sources\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/create-claim.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        contentModel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@IsEnum(ContentModelEnum)\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/create-claim.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/create-claim.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        personality\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Personality\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/create-claim.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recaptcha\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/create-claim.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sources\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ArrayNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/create-claim.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/create-claim.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    ArrayNotEmpty,\n    IsEnum,\n    IsArray,\n    IsDateString,\n    IsNotEmpty,\n    IsString,\n} from \"class-validator\";\nimport { ContentModelEnum } from \"../../claim-revision/schema/claim-revision.schema\";\nimport { Personality } from \"../../personality/schemas/personality.schema\";\n\nexport class CreateClaimDTO {\n    @IsNotEmpty()\n    @IsString()\n    title: string;\n\n    @IsNotEmpty()\n    @IsString()\n    content: string;\n\n    @IsNotEmpty()\n    @IsString()\n    @IsDateString()\n    date: string;\n\n    @IsNotEmpty()\n    @IsString()\n    @IsEnum(ContentModelEnum)\n    contentModel: string;\n\n    @IsArray()\n    @ArrayNotEmpty()\n    sources: string[];\n\n    @IsNotEmpty()\n    @IsString()\n    recaptcha: string;\n\n    @IsNotEmpty()\n    @IsString()\n    personality: Personality;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateClaimReview.html":{"url":"classes/CreateClaimReview.html","title":"class - CreateClaimReview","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateClaimReview\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim-review/dto/create-claim-review.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                claim\n                            \n                            \n                                classification\n                            \n                            \n                                personality\n                            \n                            \n                                report\n                            \n                            \n                                sentence_hash\n                            \n                            \n                                sources\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        claim\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Claim\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsAlphanumeric()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/dto/create-claim-review.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        classification\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@IsEnum(ClassificationEnum)\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/dto/create-claim-review.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        personality\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Personality\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsAlphanumeric()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/dto/create-claim-review.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        report\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/dto/create-claim-review.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sentence_hash\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsAlphanumeric()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/dto/create-claim-review.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sources\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/dto/create-claim-review.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    IsAlphanumeric,\n    IsArray,\n    IsEnum,\n    IsNotEmpty,\n    IsString,\n} from \"class-validator\";\nimport { Personality } from \"../../personality/schemas/personality.schema\";\nimport { Claim } from \"../../claim/schemas/claim.schema\";\nimport { ClassificationEnum } from \"../../report/schemas/report.schema\";\n\nexport class CreateClaimReview {\n    @IsNotEmpty()\n    @IsString()\n    @IsEnum(ClassificationEnum)\n    classification: string;\n\n    @IsString()\n    @IsAlphanumeric()\n    claim: Claim;\n\n    @IsAlphanumeric()\n    personality: Personality;\n\n    @IsString()\n    @IsAlphanumeric()\n    sentence_hash: string;\n\n    @IsNotEmpty()\n    @IsString()\n    report: string;\n\n    @IsNotEmpty()\n    @IsArray()\n    sources: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateClaimReviewTaskDTO.html":{"url":"classes/CreateClaimReviewTaskDTO.html","title":"class - CreateClaimReviewTaskDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateClaimReviewTaskDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim-review-task/dto/create-claim-review-task.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                machine\n                            \n                            \n                                recaptcha\n                            \n                            \n                                sentence_hash\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        machine\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Machine\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review-task/dto/create-claim-review-task.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recaptcha\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review-task/dto/create-claim-review-task.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sentence_hash\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review-task/dto/create-claim-review-task.dto.ts:38\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsObject, IsString } from \"class-validator\";\nimport { User } from \"../../users/schemas/user.schema\";\nimport { ClassificationEnum } from \"../../report/schemas/report.schema\";\nimport { Personality } from \"../../personality/schemas/personality.schema\";\nimport { Claim } from \"../../claim/schemas/claim.schema\";\n\nexport type ReviewTaskMachineContext = {\n    reviewData: {\n        userId?: any;\n        summary?: string;\n        questions?: string[];\n        report?: string;\n        verification?: string;\n        sources?: string[];\n        classification?: ClassificationEnum;\n        sentence_hash: string;\n    };\n    claimReview: {\n        userId?: User;\n        sentence_hash: string;\n        personality: Personality;\n        claim: Claim;\n    };\n};\n\nexport type Machine = {\n    context: ReviewTaskMachineContext;\n    value: string;\n};\n\nexport class CreateClaimReviewTaskDTO {\n    @IsNotEmpty()\n    @IsObject()\n    machine: Machine;\n\n    @IsNotEmpty()\n    @IsString()\n    sentence_hash: string;\n\n    @IsNotEmpty()\n    @IsString()\n    recaptcha: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePersonality.html":{"url":"classes/CreatePersonality.html","title":"class - CreatePersonality","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePersonality\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/personality/dto/create-personality.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                avatar\n                            \n                            \n                                description\n                            \n                            \n                                    Optional\n                                image\n                            \n                            \n                                    Optional\n                                isAllowedProp\n                            \n                            \n                                name\n                            \n                            \n                                wikidata\n                            \n                            \n                                    Optional\n                                wikipedia\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/create-personality.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/create-personality.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/create-personality.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        isAllowedProp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/create-personality.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MinLength(3)\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/create-personality.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wikidata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/create-personality.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        wikipedia\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/create-personality.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsNotEmpty, IsOptional, IsString, MinLength } from 'class-validator';\nexport class CreatePersonality {\n    @IsNotEmpty()\n    @IsString()\n    @MinLength(3)\n    name: string;\n\n    @IsString()\n    description: string;\n\n    @IsString()\n    wikidata: string;\n\n    @IsBoolean()\n    @IsOptional()\n    isAllowedProp?: boolean\n\n    @IsString()\n    @IsOptional()\n    image?: string\n\n    @IsString()\n    @IsOptional()\n    avatar?: string\n\n    @IsString()\n    @IsOptional()\n    wikipedia?: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DisableBodyParserMiddleware.html":{"url":"injectables/DisableBodyParserMiddleware.html","title":"injectable - DisableBodyParserMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DisableBodyParserMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/middleware/disable-body-parser.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, _res: Response, next: () => void)\n                \n            \n\n\n            \n                \n                    Defined in server/middleware/disable-body-parser.middleware.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    _res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Injectable, NestMiddleware} from '@nestjs/common';\nimport {Request, Response} from 'express';\n\n@Injectable()\nexport class DisableBodyParserMiddleware implements NestMiddleware {\n    use(req: Request, _res: Response, next: () => any) {\n        req['disableBodyParser'] = true\n        next();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailModule.html":{"url":"modules/EmailModule.html","title":"module - EmailModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_EmailModule_exports\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/email/email.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { EmailService } from \"./email.service\";\nimport { ConfigModule } from \"@nestjs/config\";\n\n\n@Module({\n    exports: [EmailService],\n    imports: [ConfigModule],\n    providers: [EmailService],\n})\nexport class EmailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/email/email.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTransport\n                            \n                            \n                                getEmailBody\n                            \n                            \n                                    Async\n                                sendEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in server/email/email.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createTransport\n                        \n                    \n                \n            \n            \n                \n                    \n                    createTransport()\n                \n            \n\n\n            \n                \n                    Defined in server/email/email.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEmailBody\n                        \n                    \n                \n            \n            \n                \ngetEmailBody(options, templatePath: string)\n                \n            \n\n\n            \n                \n                    Defined in server/email/email.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    templatePath\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"./template/email.html\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendEmail(to, subject, text, templateOptions, templatePath)\n                \n            \n\n\n            \n                \n                    Defined in server/email/email.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    to\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    subject\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    text\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    templateOptions\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    templatePath\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"EmailService\")\n                    \n                \n                    \n                        \n                                Defined in server/email/email.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nconst nodemailer = require(\"nodemailer\");\nconst handlebars = require(\"handlebars\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\n@Injectable()\nexport class EmailService {\n    private readonly logger = new Logger(\"EmailService\");\n\n    constructor(\n        private configService: ConfigService,\n    ) {}\n\n    getEmailBody (options, templatePath = \"./template/email.html\") {\n        const html = fs.readFileSync(path.resolve(__dirname, templatePath), {\n            encoding: \"utf-8\",\n        });\n        const template = handlebars.compile(html);\n        return template({\n            ...options,\n            baseUrl: this.configService.get(\"web_url\"),\n        });\n    }\n\n    async createTransport() {\n        const transporter = nodemailer.createTransport({\n            host: this.configService.get(\"smtp_host\"),\n            port: this.configService.get(\"smtp_port\"),\n            secure: this.configService.get(\"smtp_secure\"),\n            auth: {\n                user: this.configService.get(\"smtp_email_user\"),\n                pass: this.configService.get(\"smtp_email_pass\")\n            },\n        });\n        return transporter;\n    }\n\n    async sendEmail(to, subject, text, templateOptions, templatePath) {\n        const transporter = await this.createTransport();\n        const html = this.getEmailBody(templateOptions, templatePath);\n        const from = this.configService.get(\"smtp_email_user\")\n        this.logger.log(`Sending e-mail to ${to} ...`);\n        const emailResult = await transporter.sendMail({ from, to, subject, text, html })//.then(() => transporter.close());\n        return emailResult;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetClaimsDTO.html":{"url":"classes/GetClaimsDTO.html","title":"class - GetClaimsDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetClaimsDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim/dto/get-claims.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                language\n                            \n                            \n                                order\n                            \n                            \n                                page\n                            \n                            \n                                pageSize\n                            \n                            \n                                personality\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsAlpha()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/get-claims.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/get-claims.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsInt()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/get-claims.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pageSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/get-claims.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        personality\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/get-claims.dto.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsAlpha, IsInt, IsNumber, IsString, Min } from 'class-validator';\nexport class GetClaimsDTO {\n    @IsNumber()\n    @IsInt()\n    @Min(0)\n    page: number;\n\n    @IsNumber()\n    @Min(0)\n    pageSize: number;\n\n    @IsString()\n    order: string;\n\n    @IsString()\n    @IsAlpha()\n    language: string;\n\n    @IsString()\n    personality: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GetLanguageMiddleware.html":{"url":"injectables/GetLanguageMiddleware.html","title":"injectable - GetLanguageMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GetLanguageMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/middleware/language.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in server/middleware/language.middleware.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\n@Injectable()\nexport class GetLanguageMiddleware implements NestMiddleware {\n    use(req: Request & { language: string }, res: Response, next: NextFunction) {\n        req.language = req.headers[\"accept-language\"] || \"en\";\n        next();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPersonalities.html":{"url":"classes/GetPersonalities.html","title":"class - GetPersonalities","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPersonalities\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/personality/dto/get-personalities.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                language\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                order\n                            \n                            \n                                page\n                            \n                            \n                                pageSize\n                            \n                            \n                                    Optional\n                                withSuggestions\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsAlpha()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/get-personalities.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/get-personalities.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/get-personalities.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsInt()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/get-personalities.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pageSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/get-personalities.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        withSuggestions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/get-personalities.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsAlpha, IsBoolean, IsInt, IsNumber, IsOptional, IsString, Min } from 'class-validator';\nexport class GetPersonalities {\n    @IsNumber()\n    @IsInt()\n    @Min(0)\n    page: number;\n\n    @IsNumber()\n    @Min(0)\n    pageSize: number;\n\n    @IsString()\n    order: string;\n\n    @IsString()\n    @IsAlpha()\n    language: string;\n\n    @IsBoolean()\n    @IsOptional()\n    withSuggestions?: boolean;\n\n    @IsString()\n    @IsOptional()\n    name?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetTasksDTO.html":{"url":"classes/GetTasksDTO.html","title":"class - GetTasksDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetTasksDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim-review-task/dto/get-tasks.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                order\n                            \n                            \n                                page\n                            \n                            \n                                pageSize\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review-task/dto/get-tasks.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsInt()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review-task/dto/get-tasks.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pageSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review-task/dto/get-tasks.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review-task/dto/get-tasks.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsNumber, IsString, Min } from \"class-validator\";\n\nexport class GetTasksDTO {\n    @IsNumber()\n    @IsInt()\n    @Min(0)\n    page: number;\n\n    @IsNumber()\n    @Min(0)\n    pageSize: number;\n\n    @IsString()\n    order: string;\n\n    @IsString()\n    value: string;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/History.html":{"url":"classes/History.html","title":"class - History","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  History\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/history/schema/history.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                date\n                            \n                            \n                                details\n                            \n                            \n                                targetId\n                            \n                            \n                                targetModel\n                            \n                            \n                                type\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Date, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/history/schema/history.schema.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        details\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/history/schema/history.schema.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        targetId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, refPath: 'onModel'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/history/schema/history.schema.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        targetModel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TargetModel\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/history/schema/history.schema.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HistoryType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/history/schema/history.schema.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/history/schema/history.schema.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport * as mongoose from \"mongoose\";\nimport { User } from \"../../users/schemas/user.schema\";\n\nexport type HistoryDocument = History & mongoose.Document;\n\nexport enum TargetModel { \n  Claim = 'Claim',\n  Personality = 'Personality',\n  ClaimReview = 'ClaimReview'\n}\n\nexport enum HistoryType { \n  Create = 'create',\n  Update = 'update',\n  Delete = 'delete'\n}\n@Schema({ toObject: {virtuals: true}, toJSON: {virtuals: true} })\nexport class History {\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        refPath: \"onModel\",\n    })\n    targetId: mongoose.Types.ObjectId;\n\n    @Prop({\n        required: true,\n    })\n    targetModel: TargetModel;\n\n    @Prop({\n      type: mongoose.Types.ObjectId,\n      required: true,\n      ref: \"User\",\n    })\n    user: User;\n        \n    @Prop({\n      required: true,\n    })\n    type: HistoryType //TODO: Validate if details field(after, before) it's optional or required based on type\n\n    @Prop({\n      type: Object,\n      required: true,\n    })\n    details: object\n\n    @Prop({\n      type: Date,\n      required: true,\n    })\n    date: mongoose.Date\n}\n\nexport const HistorySchema = SchemaFactory.createForClass(History);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HistoryController.html":{"url":"controllers/HistoryController.html","title":"controller - HistoryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HistoryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/history/history.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getHistory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getHistory\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHistory(param, getHistory: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('api/history/:targetModel/:targetId')\n                \n            \n\n            \n                \n                    Defined in server/history/history.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    param\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    getHistory\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    Logger,\n    Param,\n    Query,\n} from \"@nestjs/common\";\nimport { HistoryService } from \"./history.service\";\n\n@Controller()\nexport class HistoryController {\n    private readonly logger = new Logger(\"HistoryController\");\n    constructor(\n        private historyService: HistoryService\n    ) {}\n\n    @Get(\"api/history/:targetModel/:targetId\")\n    public async getHistory(@Param() param, @Query() getHistory: any) {\n        const { targetId, targetModel } = param;\n        const { page, order } = getHistory;\n        const pageSize = parseInt(getHistory.pageSize, 10);\n        return this.historyService\n            .getByTargetIdAndModel(targetId, targetModel, page, pageSize, order)\n            .then((history) => {\n                const totalChanges = history.length;\n                const totalPages = Math.ceil(totalChanges / pageSize);\n                this.logger.log(\n                    `Found ${totalChanges} changes for targetId ${targetId}. Page ${page} of ${totalPages}`\n                );\n                return { history, totalChanges, totalPages, page, pageSize };\n            })\n            .catch();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HistoryModule.html":{"url":"modules/HistoryModule.html","title":"module - HistoryModule","body":"\n                   \n\n\n\n\n    Modules\n    HistoryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HistoryModule\n\n\n\ncluster_HistoryModule_providers\n\n\n\ncluster_HistoryModule_exports\n\n\n\n\nHistoryService \n\nHistoryService \n\n\n\nHistoryModule\n\nHistoryModule\n\nHistoryService  -->\n\nHistoryModule->HistoryService \n\n\n\n\n\nHistoryService\n\nHistoryService\n\nHistoryModule -->\n\nHistoryService->HistoryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/history/history.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HistoryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            HistoryController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HistoryService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { HistorySchema } from \"./schema/history.schema\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { HistoryService } from \"./history.service\";\nimport { HistoryController } from \"./history.controller\";\n\nconst HistoryModel = MongooseModule.forFeature([\n    {\n        name: \"HISTORY_MODEL\",\n        schema: HistorySchema,\n    },\n]);\n\n@Module({\n    imports: [\n        HistoryModel,\n        ConfigModule\n    ],\n    exports: [HistoryService],\n    providers: [HistoryService],\n    controllers:[HistoryController]\n})\n\nexport class HistoryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HistoryService.html":{"url":"injectables/HistoryService.html","title":"injectable - HistoryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HistoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/history/history.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                optionsToUpdate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createHistory\n                            \n                            \n                                    Async\n                                getByTargetIdAndModel\n                            \n                            \n                                getHistoryParams\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(HistoryModel: Model)\n                    \n                \n                        \n                            \n                                Defined in server/history/history.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        HistoryModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createHistory\n                        \n                    \n                \n            \n            \n                \n                    \n                    createHistory(data)\n                \n            \n\n\n            \n                \n                    Defined in server/history/history.service.ts:58\n                \n            \n\n\n            \n                \n                    This function create a new history document to database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object with the history data\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        Returns a new history document to database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByTargetIdAndModel\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByTargetIdAndModel(targetId, targetModel, page, pageSize, order: string)\n                \n            \n\n\n            \n                \n                    Defined in server/history/history.service.ts:73\n                \n            \n\n\n            \n                \n                    This function queries the database for the history of changes on a target.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    targetId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The id of the target.\n\n                                    \n                                \n                                \n                                    targetModel\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The model of the target (claim or personality).\n\n                                    \n                                \n                                \n                                    page\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The page of results, used in combination with pageSize to paginate results.\n\n                                    \n                                \n                                \n                                    pageSize\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        How many results per page.\n\n                                    \n                                \n                                \n                                    order\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"asc\"\n                                    \n\n                                    \n                                        asc or desc.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        The paginated history of a target.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHistoryParams\n                        \n                    \n                \n            \n            \n                \ngetHistoryParams(dataId, targetModel, user, type, latestChange, previousChange: null)\n                \n            \n\n\n            \n                \n                    Defined in server/history/history.service.ts:31\n                \n            \n\n\n            \n                \n                    This function return an history object.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Target Id.\n\n                                    \n                                \n                                \n                                    targetModel\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The model of the target(claim or personality ).\n\n                                    \n                                \n                                \n                                    user\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        User who made the change.\n\n                                    \n                                \n                                \n                                    type\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Type of the change(create, personality or delete).\n\n                                    \n                                \n                                \n                                    latestChange\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Model latest change .\n\n                                    \n                                \n                                \n                                    previousChange\n                                    \n                                            null\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        null\n                                    \n\n                                    \n                                        Model previous change.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { targetId: any; targetModel: any; user: any; type: any; details: { after: any; before: any; }; date: any; }\n\n                    \n                    \n                        Returns an object with de params necessary to create an history.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"HistoryService\")\n                    \n                \n                    \n                        \n                                Defined in server/history/history.service.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        optionsToUpdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in server/history/history.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {Injectable, Logger} from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport { Model, Types } from \"mongoose\";\nimport { HistoryDocument } from \"./schema/history.schema\";\n\n@Injectable()\nexport class HistoryService {\n    private optionsToUpdate: { new: boolean; upsert: boolean };\n    private readonly logger = new Logger(\"HistoryService\");\n\n    constructor(\n        @InjectModel('HISTORY_MODEL')\n        private HistoryModel: Model,\n    ) {\n        this.optionsToUpdate = {\n            new: true,\n            upsert: true,\n        };\n    }\n\n    /**\n     * This function return an history object.\n     * @param dataId Target Id.\n     * @param targetModel The model of the target(claim or personality ).\n     * @param user User who made the change.\n     * @param type Type of the change(create, personality or delete).\n     * @param latestChange Model latest change .\n     * @param previousChange Model previous change.\n     * @returns Returns an object with de params necessary to create an history.\n     */\n    getHistoryParams(\n        dataId,\n        targetModel,\n        user,\n        type,\n        latestChange,\n        previousChange = null\n    ) {\n        const date = new Date()\n        return {\n            targetId: Types.ObjectId(dataId),\n            targetModel,\n            user: user?._id || user,\n            type,\n            details: {\n                after: latestChange,\n                before: previousChange\n            },\n            date,\n        }\n    }\n\n    /**\n     * This function create a new history document to database\n     * @param data Object with the history data\n     * @returns Returns a new history document to database\n     */\n    async createHistory(data) {\n        const newHistory = new this.HistoryModel(data);\n        return newHistory.save();\n    }\n\n\n    /**\n     * This function queries the database for the history of changes on a target.\n     * @param targetId The id of the target.\n     * @param targetModel The model of the target (claim or personality).\n     * @param page The page of results, used in combination with pageSize to paginate results.\n     * @param pageSize How many results per page.\n     * @param order asc or desc.\n     * @returns The paginated history of a target.\n     */\n    async getByTargetIdAndModel(targetId, targetModel, page, pageSize, order = \"asc\") {\n        return this.HistoryModel.find({\n            targetId: Types.ObjectId(targetId),\n            targetModel,\n        })\n        .populate(\"user\", \"_id name\")\n        .skip(page * pageSize)\n        .limit(pageSize)\n        .sort({ date: order });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HomeController.html":{"url":"controllers/HomeController.html","title":"controller - HomeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HomeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/home/home.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                redirect\n                            \n                            \n                                    Public\n                                    Async\n                                showHome\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        redirect\n                        \n                    \n                \n            \n            \n                \nredirect(res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/home')\n                \n            \n\n            \n                \n                    Defined in server/home/home.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        showHome\n                        \n                    \n                \n            \n            \n                \n                    \n                    showHome(req: BaseRequest, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get()\n                \n            \n\n            \n                \n                    Defined in server/home/home.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                BaseRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Req, Res } from \"@nestjs/common\";\nimport { ViewService } from \"../view/view.service\";\nimport { Response } from \"express\";\nimport { parse } from \"url\";\nimport { PersonalityService } from \"../personality/personality.service\";\nimport { StatsService } from \"../stats/stats.service\";\nimport { IsPublic } from \"../decorators/is-public.decorator\";\nimport { BaseRequest } from \"../types\";\n\n@Controller(\"/\")\nexport class HomeController {\n    constructor(\n        private viewService: ViewService,\n        private personalityService: PersonalityService,\n        private statsService: StatsService\n    ) { }\n\n    @Get('/home')\n    /**\n     * Redirect /home to / for backwards compatibility\n     * @param res\n     */\n    redirect(@Res() res) {\n        return res.redirect('/');\n    }\n\n    @IsPublic()\n    @Get()\n    public async showHome(@Req() req: BaseRequest, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n\n        const { personalities } = await this.personalityService.combinedListAll({\n            language: req.language,\n            order: 'random',\n            pageSize: 6,\n            fetchOnly: true\n        });\n\n        const stats = await this.statsService.getHomeStats();\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/home-page\",\n                Object.assign(parsedUrl.query, { personalities, stats })\n            );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HomeModule.html":{"url":"modules/HomeModule.html","title":"module - HomeModule","body":"\n                   \n\n\n\n\n    Modules\n    HomeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HomeModule\n\n\n\ncluster_HomeModule_imports\n\n\n\n\nPersonalityModule\n\nPersonalityModule\n\n\n\nHomeModule\n\nHomeModule\n\nHomeModule -->\n\nPersonalityModule->HomeModule\n\n\n\n\n\nStatsModule\n\nStatsModule\n\nHomeModule -->\n\nStatsModule->HomeModule\n\n\n\n\n\nViewModule\n\nViewModule\n\nHomeModule -->\n\nViewModule->HomeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/home/home.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HomeController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PersonalityModule\n                        \n                        \n                            StatsModule\n                        \n                        \n                            ViewModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { HomeController } from \"./home.controller\";\nimport {PersonalityModule} from \"../personality/personality.module\";\nimport {StatsModule} from \"../stats/stats.module\";\nimport {ViewModule} from \"../view/view.module\";\n\n@Module({\n    imports: [PersonalityModule, StatsModule, ViewModule],\n    providers: [],\n    controllers: [HomeController],\n})\nexport class HomeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JsonBodyMiddleware.html":{"url":"injectables/JsonBodyMiddleware.html","title":"injectable - JsonBodyMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JsonBodyMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/middleware/json-body.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: () => void)\n                \n            \n\n\n            \n                \n                    Defined in server/middleware/json-body.middleware.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Request, Response} from 'express';\nimport * as bodyParser from 'body-parser';\nimport {Injectable, NestMiddleware} from '@nestjs/common';\n\n@Injectable()\nexport class JsonBodyMiddleware implements NestMiddleware {\n    use(req: Request, res: Response, next: () => any) {\n        if (!req['disableBodyParser']) {\n            bodyParser.json()(req, res, next);\n        } else {\n            next()\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Logger.html":{"url":"classes/Logger.html","title":"class - Logger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Logger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/logger.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            LoggerService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                log\n                            \n                            \n                                verbose\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger)\n                    \n                \n                        \n                            \n                                Defined in server/logger.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in server/logger.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(message: any, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in server/logger.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: any, trace?: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in server/logger.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    trace\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(message)\n                \n            \n\n\n            \n                \n                    Defined in server/logger.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verbose\n                        \n                    \n                \n            \n            \n                \nverbose(message: any, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in server/logger.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(message: any, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in server/logger.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { LoggerService } from \"@nestjs/common\";\n\nexport default class Logger implements LoggerService {\n    private logger: any;\n    constructor(logger) {\n        this.logger = logger;\n    }\n\n    log(message) {\n        this.logger.log(\"info\", message);\n    }\n\n    debug(message: any, context?: string): any {\n        this.logger.log(\"debug\", message);\n    }\n\n    error(message: any, trace?: string, context?: string): any {\n        this.logger.log(\"error\", message + trace);\n    }\n\n    verbose(message: any, context?: string): any {\n        this.logger.log(\"verbose\", message);\n    }\n\n    warn(message: any, context?: string): any {\n        this.logger.log(\"warn\", message);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerMiddleware.html":{"url":"injectables/LoggerMiddleware.html","title":"injectable - LoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/middleware/logger.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(request: Request, response: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in server/middleware/logger.middleware.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('HTTP')\n                    \n                \n                    \n                        \n                                Defined in server/middleware/logger.middleware.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\n\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n  private logger = new Logger('HTTP');\n\n  use(request: Request, response: Response, next: NextFunction): void {\n    const { ip, method, originalUrl } = request;\n    const userAgent = request.get('user-agent') || '';\n\n    response.on('finish', () => {\n      const { statusCode } = response;\n      const contentLength = response.get('content-length');\n\n      this.logger.log(\n        `${method} ${originalUrl} ${statusCode} ${contentLength} - ${userAgent} ${ip}`,\n      );\n    });\n\n    next();\n  }\n} \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotFoundFilter.html":{"url":"classes/NotFoundFilter.html","title":"class - NotFoundFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotFoundFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/filters/not-found.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                Filters out not found exceptions and redirect to our custom 404 page, avoiding the default json error message\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: NotFoundException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in server/filters/not-found.filter.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            NotFoundException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, ExceptionFilter, NotFoundException } from '@nestjs/common'\nimport { Response } from 'express';\n\n/**\n * Filters out not found exceptions and redirect to our custom 404 page, avoiding the default json error message\n */\n@Catch(NotFoundException)\nexport class NotFoundFilter implements ExceptionFilter {\n  catch(exception: NotFoundException, host: ArgumentsHost) {\n    const context = host.switchToHttp();\n    const response = context.getResponse();\n\n    response.redirect('/404')\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OryController.html":{"url":"controllers/OryController.html","title":"controller - OryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/ory/ory.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getOryPaths\n                            \n                            \n                                    Private\n                                    Async\n                                oryPaths\n                            \n                            \n                                    Public\n                                    Async\n                                postOryPaths\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getOryPaths\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOryPaths(req: NextApiRequest, res: NextApiResponse)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('api/.ory/*')\n                \n            \n\n            \n                \n                    Defined in server/ory/ory.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            NextApiRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            NextApiResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        oryPaths\n                        \n                    \n                \n            \n            \n                \n                    \n                    oryPaths(req: NextApiRequest, res: NextApiResponse)\n                \n            \n\n\n            \n                \n                    Defined in server/ory/ory.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            NextApiRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            NextApiResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        postOryPaths\n                        \n                    \n                \n            \n            \n                \n                    \n                    postOryPaths(req: NextApiRequest, res: NextApiResponse)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Post('api/.ory/*')\n                \n            \n\n            \n                \n                    Defined in server/ory/ory.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            NextApiRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            NextApiResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get, Post,\n    Req,\n    Res,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { NextApiRequest, NextApiResponse } from 'next'\nimport { parse } from \"url\";\nimport { ViewService } from \"../view/view.service\";\nimport OryService from \"./ory.service\";\nimport { IsPublic } from \"../decorators/is-public.decorator\";\n\n@Controller()\nexport default class OryController {\n    constructor(\n        private configService: ConfigService,\n        private viewService: ViewService,\n        private oryService: OryService\n    ) {}\n\n    @IsPublic()\n    @Get(\"api/.ory/*\")\n    public async getOryPaths(@Req() req: NextApiRequest, @Res() res: NextApiResponse) {\n        await this.oryPaths(req, res)\n    }\n\n    @IsPublic()\n    @Post(\"api/.ory/*\")\n    public async postOryPaths(@Req() req: NextApiRequest, @Res() res: NextApiResponse) {\n        await this.oryPaths(req, res)\n    }\n\n    private async oryPaths(@Req() req: NextApiRequest, @Res() res: NextApiResponse) {\n        const parsedUrl = parse(req.url, true);\n        await this.viewService\n            .getNextServer()\n            .getRequestHandler()(\n                req,\n                res,\n                parsedUrl,\n            )\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OryModule.html":{"url":"modules/OryModule.html","title":"module - OryModule","body":"\n                   \n\n\n\n\n    Modules\n    OryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_OryModule\n\n\n\ncluster_OryModule_exports\n\n\n\ncluster_OryModule_imports\n\n\n\ncluster_OryModule_providers\n\n\n\n\nViewModule\n\nViewModule\n\n\n\nOryModule\n\nOryModule\n\nOryModule -->\n\nViewModule->OryModule\n\n\n\n\n\nOryService \n\nOryService \n\nOryService  -->\n\nOryModule->OryService \n\n\n\n\n\nOryService\n\nOryService\n\nOryModule -->\n\nOryService->OryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/ory/ory.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            OryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            OryController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ViewModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            OryService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport OryController from \"./ory.controller\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { ViewModule } from \"../view/view.module\";\nimport OryService from \"./ory.service\";\n\n@Module({\n    imports: [ViewModule],\n    controllers: [OryController],\n    providers: [OryService, ConfigService],\n    exports: [OryService],\n})\nexport default class OryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OryService.html":{"url":"injectables/OryService.html","title":"injectable - OryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/ory/ory.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                adminEndpoint\n                            \n                            \n                                    Readonly\n                                ory\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createIdentity\n                            \n                            \n                                deleteIdentity\n                            \n                            \n                                updateIdentity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in server/ory/ory.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createIdentity\n                        \n                    \n                \n            \n            \n                \ncreateIdentity(user, password)\n                \n            \n\n\n            \n                \n                    Defined in server/ory/ory.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteIdentity\n                        \n                    \n                \n            \n            \n                \ndeleteIdentity(identityId)\n                \n            \n\n\n            \n                \n                    Defined in server/ory/ory.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    identityId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateIdentity\n                        \n                    \n                \n            \n            \n                \nupdateIdentity(user, password)\n                \n            \n\n\n            \n                \n                    Defined in server/ory/ory.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        adminEndpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"api/kratos/admin\"\n                    \n                \n                    \n                        \n                                Defined in server/ory/ory.service.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        ory\n                        \n                    \n                \n            \n                \n                    \n                        Type :     V0alpha2ApiInterface\n\n                    \n                \n                    \n                        \n                                Defined in server/ory/ory.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport axios from \"axios\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { Configuration, V0alpha2Api, V0alpha2ApiInterface } from \"@ory/client\";\n\n@Injectable()\nexport default class OryService {\n    private readonly adminEndpoint: string = \"api/kratos/admin\";\n    readonly ory: V0alpha2ApiInterface;\n\n    constructor(private configService: ConfigService) {\n        const { access_token: accessToken, url } =\n            this.configService.get(\"ory\");\n        this.ory = new V0alpha2Api(\n            new Configuration({\n                basePath: url,\n                accessToken,\n                baseOptions: {\n                    // Ensures that cookies are included in CORS requests:\n                    withCredentials: true,\n                },\n            })\n        );\n    }\n\n    updateIdentity(user, password): Promise {\n        const { access_token: token, url, schema_id } = this.configService.get(\"ory\");\n        return axios({\n            method: \"put\",\n            url: `${url}/${this.adminEndpoint}/identities/${user.oryId}`,\n            data: {\n                schema_id,\n                traits: { email: user.email, user_id: user._id },\n                credentials: {\n                    password: {\n                        config: { password },\n                    },\n                },\n            },\n            headers: { Authorization: `Bearer ${token}` },\n        });\n    }\n\n    createIdentity(user, password): Promise {\n        const { access_token: token, url, schema_id } = this.configService.get(\"ory\");\n        return axios({\n            method: \"post\",\n            url: `${url}/${this.adminEndpoint}/identities`,\n            data: {\n                schema_id,\n                traits: { email: user.email, user_id: user._id },\n                credentials: {\n                    password: {\n                        config: { password },\n                    },\n                },\n            },\n            headers: { Authorization: `Bearer ${token}` },\n        });\n    }\n\n    deleteIdentity(identityId): Promise {\n        const { access_token: token, url } = this.configService.get(\"ory\");\n        return axios({\n            method: \"delete\",\n            url: `${url}/${this.adminEndpoint}/identities/${identityId}`,\n            headers: { Authorization: `Bearer ${token}` },\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Paragraph.html":{"url":"classes/Paragraph.html","title":"class - Paragraph","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Paragraph\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/paragraph/schemas/paragraph.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                data_hash\n                            \n                            \n                                props\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Sentence[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/paragraph/schemas/paragraph.schema.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        data_hash\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/paragraph/schemas/paragraph.schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        props\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/paragraph/schemas/paragraph.schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, default: 'paragraph', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/paragraph/schemas/paragraph.schema.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport * as mongoose from \"mongoose\";\nimport { Sentence } from \"../../sentence/schemas/sentence.schema\";\n\nexport type ParagraphDocument = Paragraph & mongoose.Document;\n\n@Schema()\nexport class Paragraph {\n    @Prop({\n        type: String,\n        default: \"paragraph\",\n        required: true,\n    })\n    type: string;\n\n    @Prop({ required: true })\n    data_hash: string;\n\n    @Prop({ type: Object, required: true })\n    props: object;\n\n    @Prop({\n        type: [{\n            type: mongoose.Types.ObjectId,\n            required: true,\n            ref: \"Sentence\"\n        }]\n    })\n    content: Sentence[];\n}\n\nconst ParagraphSchemaRaw = SchemaFactory.createForClass(Paragraph);\n\nexport const ParagraphSchema = ParagraphSchemaRaw;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ParagraphModule.html":{"url":"modules/ParagraphModule.html","title":"module - ParagraphModule","body":"\n                   \n\n\n\n\n    Modules\n    ParagraphModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ParagraphModule\n\n\n\ncluster_ParagraphModule_providers\n\n\n\ncluster_ParagraphModule_exports\n\n\n\n\nParagraphService \n\nParagraphService \n\n\n\nParagraphModule\n\nParagraphModule\n\nParagraphService  -->\n\nParagraphModule->ParagraphService \n\n\n\n\n\nParagraphService\n\nParagraphService\n\nParagraphModule -->\n\nParagraphService->ParagraphModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/paragraph/paragraph.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ParagraphService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ParagraphService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { Paragraph, ParagraphSchema } from \"./schemas/paragraph.schema\";\nimport { ParagraphService } from \"./paragraph.service\";\n\nconst ParagraphModel = MongooseModule.forFeature([\n    {\n        name: Paragraph.name,\n        schema: ParagraphSchema,\n    },\n]);\n\n@Module({\n    imports: [ParagraphModel],\n    providers: [ParagraphService],\n    exports: [ParagraphService],\n})\nexport class ParagraphModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParagraphService.html":{"url":"injectables/ParagraphService.html","title":"injectable - ParagraphService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParagraphService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/paragraph/paragraph.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ParagraphModel: Model)\n                    \n                \n                        \n                            \n                                Defined in server/paragraph/paragraph.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ParagraphModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(paragraphBody)\n                \n            \n\n\n            \n                \n                    Defined in server/paragraph/paragraph.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paragraphBody\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Model } from \"mongoose\";\nimport { ParagraphDocument, Paragraph } from \"./schemas/paragraph.schema\";\nimport { InjectModel } from \"@nestjs/mongoose\";\n\n@Injectable()\nexport class ParagraphService {\n    constructor(\n        @InjectModel(Paragraph.name)\n        private ParagraphModel: Model\n    ) {}\n\n    async create(paragraphBody) {\n        return await Promise.all(paragraphBody.content).then(async(paragraph) => {\n            paragraphBody.content = paragraph\n            const newParagraph = await new this.ParagraphModel(paragraphBody).save();\n            return newParagraph._id\n        })\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ParserModule.html":{"url":"modules/ParserModule.html","title":"module - ParserModule","body":"\n                   \n\n\n\n\n    Modules\n    ParserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ParserModule\n\n\n\ncluster_ParserModule_providers\n\n\n\ncluster_ParserModule_imports\n\n\n\ncluster_ParserModule_exports\n\n\n\n\nParagraphModule\n\nParagraphModule\n\n\n\nParserModule\n\nParserModule\n\nParserModule -->\n\nParagraphModule->ParserModule\n\n\n\n\n\nSentenceModule\n\nSentenceModule\n\nParserModule -->\n\nSentenceModule->ParserModule\n\n\n\n\n\nSpeechModule\n\nSpeechModule\n\nParserModule -->\n\nSpeechModule->ParserModule\n\n\n\n\n\nParserService \n\nParserService \n\nParserService  -->\n\nParserModule->ParserService \n\n\n\n\n\nParserService\n\nParserService\n\nParserModule -->\n\nParserService->ParserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/parser/parser.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ParserService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ParagraphModule\n                        \n                        \n                            SentenceModule\n                        \n                        \n                            SpeechModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ParserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ParserService } from \"./parser.service\";\nimport { Module } from \"@nestjs/common\";\nimport { SpeechModule } from \"../speech/speech.module\";\nimport { ParagraphModule } from \"../paragraph/paragraph.module\";\nimport { SentenceModule } from \"../sentence/sentence.module\";\n\n@Module({\n    imports: [\n        SpeechModule,\n        ParagraphModule,\n        SentenceModule,\n    ],\n    exports: [ParserService],\n    providers: [ParserService],\n})\nexport class ParserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParserService.html":{"url":"injectables/ParserService.html","title":"injectable - ParserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/parser/parser.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                nlpOptions\n                            \n                            \n                                paragraphSequence\n                            \n                            \n                                sentenceSequence\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createParagraphId\n                            \n                            \n                                createSentenceId\n                            \n                            \n                                    Async\n                                parse\n                            \n                            \n                                parseSentence\n                            \n                            \n                                postProcessSentences\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(speechService: SpeechService, paragraphService: ParagraphService, sentenceService: SentenceService)\n                    \n                \n                        \n                            \n                                Defined in server/parser/parser.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        speechService\n                                                  \n                                                        \n                                                                        SpeechService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paragraphService\n                                                  \n                                                        \n                                                                        ParagraphService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sentenceService\n                                                  \n                                                        \n                                                                        SentenceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createParagraphId\n                        \n                    \n                \n            \n            \n                \ncreateParagraphId()\n                \n            \n\n\n            \n                \n                    Defined in server/parser/parser.service.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createSentenceId\n                        \n                    \n                \n            \n            \n                \ncreateSentenceId()\n                \n            \n\n\n            \n                \n                    Defined in server/parser/parser.service.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        parse\n                        \n                    \n                \n            \n            \n                \n                    \n                    parse(content: string)\n                \n            \n\n\n            \n                \n                    Defined in server/parser/parser.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parseSentence\n                        \n                    \n                \n            \n            \n                \nparseSentence(sentenceContent, paragraphDataHash)\n                \n            \n\n\n            \n                \n                    Defined in server/parser/parser.service.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentenceContent\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    paragraphDataHash\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postProcessSentences\n                        \n                    \n                \n            \n            \n                \npostProcessSentences(sentences)\n                \n            \n\n\n            \n                \n                    Defined in server/parser/parser.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentences\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        nlpOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : { trim:true }\n                    \n                \n                    \n                        \n                                Defined in server/parser/parser.service.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        paragraphSequence\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in server/parser/parser.service.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sentenceSequence\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in server/parser/parser.service.ts:28\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { SentenceService } from \"../sentence/sentence.service\";\nimport { ParagraphService } from \"../paragraph/paragraph.service\";\nimport { SpeechService } from \"../speech/speech.service\";\nimport { SpeechDocument } from \"../speech/schemas/speech.schema\";\nconst md5 = require(\"md5\");\nconst nlp = require('compromise')\nnlp.extend(require('compromise-sentences'))\nnlp.extend(require('compromise-paragraphs'))\n\n// TODO: regex for future rules\n// const alphabets = /([A-Za-z])/g;\nconst prefixes = /(Mr|St|Mrs|Ms|Dr)[.]/g;\nconst phdRegex = /Ph\\.D\\./g;\n// const suffixes = \"(Inc|Ltd|Jr|Sr|Co)\";\n// const starters = /(Mr|Mrs|Ms|Dr|He\\s|She\\s|It\\s|They\\s|Their\\s|Our\\s|We\\s|But\\s|However\\s|That\\s|This\\s|Wherever)/g;\n// const acronyms = /([A-Z][.][A-Z][.](?:[A-Z][.])?)/g;\n// const websites = /[.](com|net|org|io|gov)/g;\n\n@Injectable()\nexport class ParserService {\n    constructor(\n        private speechService: SpeechService,\n        private paragraphService: ParagraphService,\n        private sentenceService: SentenceService,\n    ) {}\n    paragraphSequence: number;\n    sentenceSequence: number;\n    nlpOptions: object = { trim:true };\n\n    async parse(content: string): Promise {\n        this.paragraphSequence = 0;\n        this.sentenceSequence = 0;\n        const result = [];\n        const nlpContent = nlp(content);\n        const paragraphs = nlpContent.paragraphs();\n        const text = nlpContent.text(this.nlpOptions)\n\n        paragraphs.forEach((paragraph) => {\n            const paragraphId = this.createParagraphId();\n            const sentences = this.postProcessSentences(paragraph.sentences());\n\n            const paragraphDataHash = md5(\n                `${this.paragraphSequence}${text}${paragraph}`\n            );\n\n            if (sentences && sentences.length) {\n                return result.push(\n                    this.paragraphService.create({\n                        data_hash: paragraphDataHash,\n                        props: {\n                            id: paragraphId,\n                        },\n                        content: sentences.map((sentence) => this.parseSentence(sentence, paragraphDataHash)),\n                    })\n                )\n            }\n        })\n\n        return await Promise.all(result).then((object): Promise => {\n            return this.speechService.create({ content: object })\n        })\n    }\n\n    postProcessSentences(sentences) {\n        let newSentences = [];\n        sentences.forEach(sentence => {\n            const sentenceText = sentence.text(this.nlpOptions);\n            // Extract semicolon sentences\n            let semicolonSentences = sentenceText.split(\";\");\n            if (sentenceText.includes(\";\")) {\n                semicolonSentences = semicolonSentences.map(\n                    (semicolonSentence, index) => {\n                        return index !== (semicolonSentences.length - 1)\n                            ? `${semicolonSentence};`.trim()\n                            : semicolonSentence.trim();\n                    }\n                );\n            }\n            newSentences = newSentences.concat(semicolonSentences);\n        });\n        return newSentences;\n    }\n\n    parseSentence(sentenceContent, paragraphDataHash) {\n        const sentenceId = this.createSentenceId();\n        const sentenceDataHash = md5(\n            `${paragraphDataHash}${this.sentenceSequence}${sentenceContent}`\n        );\n\n        return this.sentenceService.create({\n            data_hash: sentenceDataHash,\n            props: {\n                id: sentenceId,\n            },\n            content: sentenceContent,\n        });\n    }\n\n    createParagraphId() {\n        this.paragraphSequence++;\n        return this.paragraphSequence;\n    }\n\n    createSentenceId() {\n        this.sentenceSequence++;\n        return this.sentenceSequence;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Personality.html":{"url":"classes/Personality.html","title":"class - Personality","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Personality\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/personality/schemas/personality.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                name\n                            \n                            \n                                slug\n                            \n                            \n                                wikidata\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/schemas/personality.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/schemas/personality.schema.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/schemas/personality.schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wikidata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true, sparse: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/schemas/personality.schema.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { softDeletePlugin } from 'mongoose-softdelete-typescript';\nimport * as mongoose from \"mongoose\";\n\nexport type PersonalityDocument = Personality & mongoose.Document;\n\n@Schema({ toJSON: { virtuals: true }, toObject: { virtuals: true } })\nexport class Personality {\n    @Prop({ required: true })\n    name: string;\n\n    @Prop({ required: true })\n    slug: string;\n\n    @Prop({ required: true })\n    description: string;\n\n    @Prop({ unique: true, sparse: true })\n    wikidata: string;\n}\n\n\nconst PersonalitySchemaRaw = SchemaFactory.createForClass(Personality);\n\nPersonalitySchemaRaw.virtual('claims', {\n    ref: 'Claim',\n    localField: '_id',\n    foreignField: 'personality'\n});\n\nPersonalitySchemaRaw.plugin(softDeletePlugin)\n\nexport const PersonalitySchema = PersonalitySchemaRaw;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PersonalityController.html":{"url":"controllers/PersonalityController.html","title":"controller - PersonalityController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PersonalityController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/personality/personality.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                getReviewStats\n                            \n                            \n                                    Async\n                                listAll\n                            \n                            \n                                    Public\n                                    Async\n                                personalityCreateSearch\n                            \n                            \n                                    Public\n                                    Async\n                                personalityHistoryPage\n                            \n                            \n                                    Public\n                                    Async\n                                personalityList\n                            \n                            \n                                    Public\n                                    Async\n                                personalityPage\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createPersonality: CreatePersonality)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('api/personality')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createPersonality\n                                    \n                                                CreatePersonality\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(personalityId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('api/personality/:id')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    personalityId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(personalityId, query)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('api/personality/:id')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    personalityId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getReviewStats\n                        \n                    \n                \n            \n            \n                \ngetReviewStats(personalityId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('api/personality/:id/reviews')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    personalityId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAll(getPersonalities: GetPersonalities)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('api/personality')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    getPersonalities\n                                    \n                                                GetPersonalities\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        personalityCreateSearch\n                        \n                    \n                \n            \n            \n                \n                    \n                    personalityCreateSearch(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('personality/search')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        personalityHistoryPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    personalityHistoryPage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('personality/:slug/history')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        personalityList\n                        \n                    \n                \n            \n            \n                \n                    \n                    personalityList(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('personality')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:133\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        personalityPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    personalityPage(req: BaseRequest, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('personality/:slug')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                BaseRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(personalityId, body)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('api/personality/:id')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    personalityId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Logger,\n    Param,\n    Post,\n    Put,\n    Query,\n    Req,\n    Res\n} from \"@nestjs/common\";\nimport { parse } from \"url\";\nimport { Request, Response } from \"express\";\nimport { ViewService } from \"../view/view.service\";\nimport { PersonalityService } from \"./personality.service\";\nimport { GetPersonalities } from \"./dto/get-personalities.dto\";\nimport { CreatePersonality } from \"./dto/create-personality.dto\";\nimport { IsPublic } from \"../decorators/is-public.decorator\";\nimport { TargetModel } from \"../history/schema/history.schema\";\nimport { BaseRequest } from \"../types\";\n\n@Controller()\nexport class PersonalityController {\n    private readonly logger = new Logger(\"PersonalityController\");\n    constructor(\n        private personalityService: PersonalityService,\n        private viewService: ViewService\n    ) { }\n\n    @IsPublic()\n    @Get(\"api/personality\")\n    async listAll(@Query() getPersonalities: GetPersonalities) {\n        return this.personalityService.combinedListAll(getPersonalities);\n    }\n\n    @Post(\"api/personality\")\n    async create(@Body() createPersonality: CreatePersonality) {\n        try {\n            return await this.personalityService.create(createPersonality);\n        } catch (error) {\n            if (\n                error.name === \"MongoError\" &&\n                error.keyPattern &&\n                error.keyPattern.wikidata\n            ) {\n                error.message = `Personality with wikidata id ${error.keyValue.wikidata} already exists`;\n            }\n            this.logger.error(error);\n        }\n    }\n\n    @IsPublic()\n    @Get(\"api/personality/:id\")\n    async get(@Param(\"id\") personalityId, @Query() query) {\n        return this.personalityService\n            .getById(personalityId, query.language) // TODO: get language from request object in the future\n            .catch((err) => {\n                this.logger.error(err);\n            });\n    }\n\n    @Put(\"api/personality/:id\")\n    async update(@Param(\"id\") personalityId, @Body() body) {\n        return this.personalityService.update(personalityId, body)\n    }\n\n    @Delete(\"api/personality/:id\")\n    async delete(@Param(\"id\") personalityId) {\n        try {\n            await this.personalityService.delete(personalityId);\n            return { message: \"Personality successfully deleted\" };\n        } catch (error) {\n            this.logger.error(error);\n        }\n    }\n\n    @IsPublic()\n    @Get(\"api/personality/:id/reviews\")\n    getReviewStats(@Param(\"id\") personalityId) {\n        return this.personalityService\n            .getReviewStats(personalityId)\n            .catch((err) => {\n                this.logger.error(err);\n            });\n    }\n\n    @Get(\"personality/search\")\n    public async personalityCreateSearch(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/personality-create-search\",\n                Object.assign(parsedUrl.query)\n            );\n    }\n\n    @IsPublic()\n    @Get(\"personality/:slug\")\n    public async personalityPage(@Req() req: BaseRequest, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n\n        const personality = await this.personalityService.getBySlug(\n            req.params.slug,\n            req.language\n        );\n\n        const { personalities } = await this.personalityService.combinedListAll({\n            language: req.language,\n            order: 'random',\n            pageSize: 6,\n            fetchOnly: true\n        });\n\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/personality-page\",\n                Object.assign(parsedUrl.query, { personality, personalities })\n            );\n    }\n\n    @IsPublic()\n    @Get(\"personality\")\n    public async personalityList(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/personality-list\",\n                Object.assign(parsedUrl.query, {})\n            );\n    }\n\n    @Get(\"personality/:slug/history\")\n    public async personalityHistoryPage(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n\n        const personality = await this.personalityService.getBySlug(\n            req.params.slug\n        );\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/history-page\",\n                Object.assign(parsedUrl.query, { targetId: personality._id, targetModel: TargetModel.Personality })\n            );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PersonalityModule.html":{"url":"modules/PersonalityModule.html","title":"module - PersonalityModule","body":"\n                   \n\n\n\n\n    Modules\n    PersonalityModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PersonalityModule\n\n\n\ncluster_PersonalityModule_providers\n\n\n\ncluster_PersonalityModule_exports\n\n\n\ncluster_PersonalityModule_imports\n\n\n\n\nClaimReviewModule\n\nClaimReviewModule\n\n\n\nPersonalityModule\n\nPersonalityModule\n\nPersonalityModule -->\n\nClaimReviewModule->PersonalityModule\n\n\n\n\n\nClaimRevisionModule\n\nClaimRevisionModule\n\nPersonalityModule -->\n\nClaimRevisionModule->PersonalityModule\n\n\n\n\n\nHistoryModule\n\nHistoryModule\n\nPersonalityModule -->\n\nHistoryModule->PersonalityModule\n\n\n\n\n\nViewModule\n\nViewModule\n\nPersonalityModule -->\n\nViewModule->PersonalityModule\n\n\n\n\n\nWikidataModule\n\nWikidataModule\n\nPersonalityModule -->\n\nWikidataModule->PersonalityModule\n\n\n\n\n\nPersonalityService \n\nPersonalityService \n\nPersonalityService  -->\n\nPersonalityModule->PersonalityService \n\n\n\n\n\nPersonalityService\n\nPersonalityService\n\nPersonalityModule -->\n\nPersonalityService->PersonalityModule\n\n\n\n\n\nUtilService\n\nUtilService\n\nPersonalityModule -->\n\nUtilService->PersonalityModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/personality/personality.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PersonalityService\n                        \n                        \n                            UtilService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PersonalityController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClaimReviewModule\n                        \n                        \n                            ClaimRevisionModule\n                        \n                        \n                            HistoryModule\n                        \n                        \n                            ViewModule\n                        \n                        \n                            WikidataModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PersonalityService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PersonalityService } from \"./personality.service\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { Personality, PersonalitySchema } from \"./schemas/personality.schema\";\nimport { UtilService } from \"../util\";\nimport { WikidataModule } from \"../wikidata/wikidata.module\";\nimport { ClaimReviewModule } from \"../claim-review/claim-review.module\";\nimport { ClaimRevisionModule } from \"../claim-revision/claim-revision.module\";\nimport { HistoryModule } from \"../history/history.module\";\nimport { PersonalityController } from \"./personality.controller\";\nimport Logger from \"../logger\";\nimport { ViewModule } from \"../view/view.module\";\n\nconst PersonalityModel = MongooseModule.forFeature([\n    {\n        name: Personality.name,\n        schema: PersonalitySchema,\n    },\n]);\n\n@Module({\n    imports: [\n        PersonalityModel,\n        WikidataModule,\n        ClaimReviewModule,\n        ClaimRevisionModule,\n        HistoryModule,\n        ViewModule\n    ],\n    exports: [PersonalityService],\n    providers: [UtilService, PersonalityService, Logger],\n    controllers: [PersonalityController],\n})\nexport class PersonalityModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PersonalityService.html":{"url":"injectables/PersonalityService.html","title":"injectable - PersonalityService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PersonalityService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/personality/personality.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                    Readonly\n                                optionsToUpdate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                combinedListAll\n                            \n                            \n                                count\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                extractClaimWithTextSummary\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getBySlug\n                            \n                            \n                                getDeletedPersonalityByWikidata\n                            \n                            \n                                    Async\n                                getReviewStats\n                            \n                            \n                                    Async\n                                listAll\n                            \n                            \n                                    Async\n                                postProcess\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                verifyInputsQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(req: Request, PersonalityModel, claimReview: ClaimReviewService, history: HistoryService, wikidata: WikidataService, util: UtilService)\n                    \n                \n                        \n                            \n                                Defined in server/personality/personality.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        req\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        PersonalityModel\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        claimReview\n                                                  \n                                                        \n                                                                        ClaimReviewService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        history\n                                                  \n                                                        \n                                                                        HistoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        wikidata\n                                                  \n                                                        \n                                                                        WikidataService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        util\n                                                  \n                                                        \n                                                                        UtilService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        combinedListAll\n                        \n                    \n                \n            \n            \n                \ncombinedListAll(query)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:285\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        count\n                        \n                    \n                \n            \n            \n                \ncount(query: any)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:262\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(personality)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:82\n                \n            \n\n\n            \n                \n                    This function will create a new personality and save it to the dataBase.\nAlso creates a History Module that tracks creation of personalities.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    personality\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        PersonalityBody received of the client.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        Return a new personality.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(personalityId)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:247\n                \n            \n\n\n            \n                \n                    This function does a soft deletion, doesn't delete claim in DataBase,\nbut omit its in the front page\nAlso creates a History Module that tracks deletion of personalities.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    personalityId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Personality Id which wants to delete\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        Returns the personality with the param isDeleted equal to true\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        extractClaimWithTextSummary\n                        \n                    \n                \n            \n            \n                \nextractClaimWithTextSummary(claims: any)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:266\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claims\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(personalityId, language: string)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    personalityId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"en\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getBySlug\n                        \n                    \n                \n            \n            \n                \n                    \n                    getBySlug(personalitySlug, language: string)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    personalitySlug\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"en\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDeletedPersonalityByWikidata\n                        \n                    \n                \n            \n            \n                \ngetDeletedPersonalityByWikidata(wikidata)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    wikidata\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getReviewStats\n                        \n                    \n                \n            \n            \n                \n                    \n                    getReviewStats(id)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:186\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAll(page, pageSize, order, query, language, withSuggestions)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    page\n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    pageSize\n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    order\n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    language\n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    withSuggestions\n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postProcess\n                        \n                    \n                \n            \n            \n                \n                    \n                    postProcess(personality, language: string)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:160\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    personality\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"en\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(personalityId, newPersonalityBody)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:205\n                \n            \n\n\n            \n                \n                    This function overwrites personality data with the new data,\nkeeping data that has not changed.\nAlso creates a History Module that tracks updation of personalities.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    personalityId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Personality id which wants updated.\n\n                                    \n                                \n                                \n                                    newPersonalityBody\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        PersonalityBody received of the client.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        Return changed personality.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifyInputsQuery\n                        \n                    \n                \n            \n            \n                \nverifyInputsQuery(query)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:276\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"PersonalityService\")\n                    \n                \n                    \n                        \n                                Defined in server/personality/personality.service.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        optionsToUpdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n        new: true,\n        upsert: true,\n    }\n                    \n                \n                    \n                        \n                                Defined in server/personality/personality.service.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, Logger, Scope, NotFoundException } from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport { Model } from \"mongoose\";\nimport slugify from 'slugify'\nimport { Personality, PersonalityDocument } from \"./schemas/personality.schema\";\nimport { WikidataService } from \"../wikidata/wikidata.service\";\nimport { UtilService } from \"../util\";\nimport { ClaimReviewService } from \"../claim-review/claim-review.service\";\nimport { HistoryService } from \"../history/history.service\";\nimport { HistoryType, TargetModel } from \"../history/schema/history.schema\";\nimport { ISoftDeletedModel } from 'mongoose-softdelete-typescript';\nimport { REQUEST } from '@nestjs/core';\nimport { Request } from 'express';\n\n@Injectable({ scope: Scope.REQUEST })\nexport class PersonalityService {\n    private readonly logger = new Logger(\"PersonalityService\");\n    private readonly optionsToUpdate = {\n        new: true,\n        upsert: true,\n    };\n\n    constructor(\n        @Inject(REQUEST) private req: Request,\n        @InjectModel(Personality.name)\n        private PersonalityModel: ISoftDeletedModel & Model,\n        private claimReview: ClaimReviewService,\n        private history: HistoryService,\n        private wikidata: WikidataService,\n        private util: UtilService\n    ) {}\n    async listAll(\n        page,\n        pageSize,\n        order,\n        query,\n        language,\n        withSuggestions = false\n    ) {\n        let personalities;\n\n        if (order === 'random') {\n            // This line may cause a false positive in sonarCloud because if we remove the await, we cannot iterate through the results\n            personalities = await this.PersonalityModel.aggregate([\n                { $match: query },\n                { $sample: { size: pageSize } },\n            ])\n\n\n        } else {\n            // This line may cause a false positive in sonarCloud because if we remove the await, we cannot iterate through the results\n            personalities = await this.PersonalityModel.find(query)\n                .skip(page * pageSize)\n                .limit(pageSize)\n                .sort({ _id: order })\n                .lean()\n        }\n\n        if (withSuggestions) {\n            const wbentities = await this.wikidata.queryWikibaseEntities(\n                query.name.$regex,\n                language\n            );\n            personalities = this.util.mergeObjectsInUnique(\n                [...wbentities, ...personalities],\n                \"wikidata\"\n            );\n        }\n        return Promise.all(\n            personalities.map(async (personality) => {\n                return await this.postProcess(personality, language);\n            })\n        );\n    }\n\n    /**\n     * This function will create a new personality and save it to the dataBase.\n     * Also creates a History Module that tracks creation of personalities.\n     * @param personality PersonalityBody received of the client.\n     * @returns Return a new personality.\n     */\n    async create(personality) {\n        try {\n            const personalityExists =\n                await this.getDeletedPersonalityByWikidata(personality.wikidata)\n\n            if(personalityExists) {\n                return personalityExists.restore()\n            } else {\n                personality.slug = slugify(personality.name, {\n                    lower: true,     // convert to lower case, defaults to `false`\n                    strict: true     // strip special characters except replacement, defaults to `false`\n                })\n                const newPersonality = new this.PersonalityModel(personality);\n                this.logger.log(\n                    `Attempting to create new personality with data ${personality}`\n                );\n\n                const user = this.req.user\n\n                const history = this.history.getHistoryParams(\n                    newPersonality._id,\n                    TargetModel.Personality,\n                    user,\n                    HistoryType.Create,\n                    personality\n                )\n\n                this.history.createHistory(history)\n\n                return newPersonality.save();\n            }\n        } catch (err) {}\n    }\n\n    getDeletedPersonalityByWikidata(wikidata) {\n        return this.PersonalityModel.findOne({\n            isDeleted: true,\n            wikidata\n        })\n    }\n\n    async getById(personalityId, language = \"en\") {\n        const personality = await this.PersonalityModel.findById(\n            personalityId\n        ).populate({\n            path: \"claims\",\n            select: \"_id title content\",\n        });\n        this.logger.log(`Found personality ${personality._id}`);\n        return await this.postProcess(personality.toObject(), language);\n    }\n\n    async getBySlug(personalitySlug, language = \"en\") {\n        try {\n             // This line may cause a false positive in sonarCloud because if we remove the await, we cannot iterate through the results\n            const personality: any = await this.PersonalityModel.findOne({\n                slug: personalitySlug\n            }).populate({\n                path: \"claims\",\n                populate: {\n                    path: \"latestRevision\",\n                    select: \"_id title content\"\n                },\n                select: \"_id\",\n            });\n            personality.claims = await Promise.all(personality.claims.map((claim) => {\n                return {\n                    ...claim.lastestRevision,\n                    ...claim\n                }\n            }))\n            this.logger.log(`Found personality ${personality._id}`);\n            return await this.postProcess(personality.toObject(), language);\n        } catch {\n            throw new NotFoundException()\n        }\n    }\n\n    async postProcess(personality, language: string = \"en\") {\n        if (personality) {\n            // TODO: allow wikdiata resolver to fetch in batches\n            const wikidataExtract = await this.wikidata.fetchProperties({\n                wikidataId: personality.wikidata,\n                language,\n            });\n            // bail out if wikidata property is not allowed\n            if (wikidataExtract.isAllowedProp === false) {\n                return;\n            }\n\n            return Object.assign(\n                wikidataExtract,\n                personality, {\n                stats:\n                    personality._id &&\n                    (await this.getReviewStats(personality._id)),\n                claims:\n                    personality.claims &&\n                    this.extractClaimWithTextSummary(personality.claims),\n            });\n        }\n        return personality;\n    }\n\n    async getReviewStats(id) {\n        const personality = await this.PersonalityModel.findById(id);\n        const reviews = await this.claimReview.agreggateClassification({\n            personality: personality._id,\n            isDeleted: false,\n            isPublished: true,\n        });\n        this.logger.log(`Got stats ${reviews}`);\n        return this.util.formatStats(reviews);\n    }\n\n    /**\n     * This function overwrites personality data with the new data,\n     * keeping data that has not changed.\n     * Also creates a History Module that tracks updation of personalities.\n     * @param personalityId Personality id which wants updated.\n     * @param newPersonalityBody PersonalityBody received of the client.\n     * @returns Return changed personality.\n     */\n    async update(personalityId, newPersonalityBody) {\n        // eslint-disable-next-line no-useless-catch\n        if(newPersonalityBody.name) {\n            newPersonalityBody.slug = slugify(newPersonalityBody.name, {\n                lower: true,\n                strict: true\n            })\n        }\n        const personality = await this.getById(personalityId);\n        const previousPersonality = {...personality}\n        const newPersonality = Object.assign(personality, newPersonalityBody);\n        const personalityUpdate =\n            await this.PersonalityModel.findByIdAndUpdate(\n                personalityId,\n                newPersonality,\n                this.optionsToUpdate\n            );\n        this.logger.log(`Updated personality with data ${newPersonality}`);\n\n        const user = this.req.user;\n\n        const history =\n            this.history.getHistoryParams(\n                personalityId,\n                TargetModel.Personality,\n                user,\n                HistoryType.Update,\n                personalityUpdate,\n                previousPersonality\n            )\n        await this.history.createHistory(history)\n\n        return personalityUpdate;\n    }\n\n    /**\n     * This function does a soft deletion, doesn't delete claim in DataBase,\n     * but omit its in the front page\n     * Also creates a History Module that tracks deletion of personalities.\n     * @param personalityId Personality Id which wants to delete\n     * @returns Returns the personality with the param isDeleted equal to true\n     */\n    async delete(personalityId) {\n        const user = this.req.user\n        const previousPersonality = await this.getById(personalityId)\n        const history = this.history.getHistoryParams(\n            personalityId,\n            TargetModel.Personality,\n            user,\n            HistoryType.Delete,\n            null,\n            previousPersonality\n        )\n        await this.history.createHistory(history)\n        return this.PersonalityModel.softDelete({ _id: personalityId });\n    }\n\n    count(query: any = {}) {\n        return this.PersonalityModel.countDocuments().where(query);\n    }\n\n    extractClaimWithTextSummary(claims: any) {\n        claims = Array.isArray(claims) ? claims : [claims];\n        return claims.map((claim) => {\n            if (!claim.content) {\n                return claim;\n            }\n            return { ...claim, content: claim.content.text };\n        });\n    }\n\n    verifyInputsQuery(query) {\n        const queryInputs = {};\n        if (query.name) {\n            // @ts-ignore\n            queryInputs.name = { $regex: query.name, $options: \"i\" };\n        }\n        return queryInputs;\n    }\n\n    combinedListAll(query) : any {\n        const { page = 0, pageSize = 10, order = \"asc\" } = query;\n        const queryInputs = this.verifyInputsQuery(query);\n\n        return Promise.all([\n            this.listAll(\n                page,\n                parseInt(pageSize, 10),\n                order,\n                queryInputs,\n                query.language,\n                query.withSuggestions\n            ),\n            this.count(queryInputs),\n        ])\n            .then(([personalities, totalPersonalities]) => {\n                const totalPages = Math.ceil(\n                    totalPersonalities / parseInt(pageSize, 10)\n                );\n\n                this.logger.log(\n                    `Found ${totalPersonalities} personalities. Page ${page} of ${totalPages}`\n                );\n\n                return {\n                    personalities,\n                    totalPersonalities,\n                    totalPages,\n                    page,\n                    pageSize,\n                };\n            })\n            .catch((error) => this.logger.error(error));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Report.html":{"url":"classes/Report.html","title":"class - Report","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Report\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/report/schemas/report.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                classification\n                            \n                            \n                                questions\n                            \n                            \n                                report\n                            \n                            \n                                sentence_hash\n                            \n                            \n                                sources\n                            \n                            \n                                summary\n                            \n                            \n                                userId\n                            \n                            \n                                verification\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        classification\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, validate: undefined, message: tag => })\n                        \n                    \n                \n                    \n                        \n                                Defined in server/report/schemas/report.schema.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        questions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/report/schemas/report.schema.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        report\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/report/schemas/report.schema.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sentence_hash\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/report/schemas/report.schema.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sources\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/report/schemas/report.schema.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        summary\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/report/schemas/report.schema.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/report/schemas/report.schema.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verification\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/report/schemas/report.schema.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport * as mongoose from \"mongoose\";\nimport { User } from \"../../users/schemas/user.schema\";\n\nexport type ReportDocument = Report & mongoose.Document;\n\nexport enum ClassificationEnum {\n    \"not-fact\",\n    \"true\",\n    \"true-but\",\n    \"arguable\",\n    \"misleading\",\n    \"false\",\n    \"unsustainable\",\n    \"exaggerated\",\n    \"unverifiable\",\n}\n\n@Schema({ toObject: { virtuals: true }, toJSON: { virtuals: true } })\nexport class Report {\n    @Prop({ required: true })\n    sentence_hash: string;\n\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"User\",\n    })\n    userId: User;\n\n    @Prop({ required: true })\n    summary: string;\n    \n    @Prop({ required: true })\n    questions: string[];\n\n    @Prop({ required: true })\n    report: string;\n\n    @Prop({ required: true })\n    verification: string;\n\n    @Prop({ required: true })\n    sources: string[];\n\n    @Prop({\n        required: true,\n        validate: {\n            validator: (v) => {\n                return (\n                    [\n                        \"not-fact\",\n                        \"true\",\n                        \"true-but\",\n                        \"arguable\",\n                        \"misleading\",\n                        \"false\",\n                        \"unsustainable\",\n                        \"exaggerated\",\n                        \"unverifiable\",\n                    ].indexOf(v) !== -1\n                );\n            },\n        },\n        message: (tag) => `${tag} is not a valid classification.`,\n    })\n    classification: string;\n}\n\nconst ReportSchemaRaw = SchemaFactory.createForClass(Report);\n\nReportSchemaRaw.virtual('reviews', {\n    ref: 'ClaimReview',\n    localField: '_id',\n    foreignField: 'report'\n})\n\nexport const ReportSchema = ReportSchemaRaw;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ReportController.html":{"url":"controllers/ReportController.html","title":"controller - ReportController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ReportController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/report/report.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getBySentenceHash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getBySentenceHash\n                        \n                    \n                \n            \n            \n                \n                    \n                    getBySentenceHash(sentence_hash: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('api/report/:sentence_hash')\n                \n            \n\n            \n                \n                    Defined in server/report/report.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentence_hash\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Param, Get } from \"@nestjs/common\";\nimport { ReportService } from \"./report.service\";\n@Controller()\nexport class ReportController {\n    constructor(\n        private reportService: ReportService,\n    ) {}\n    \n    @Get(\"api/report/:sentence_hash\")\n    async getBySentenceHash(@Param(\"sentence_hash\") sentence_hash: string) {\n        return this.reportService.findBySentenceHash(sentence_hash)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ReportModule.html":{"url":"modules/ReportModule.html","title":"module - ReportModule","body":"\n                   \n\n\n\n\n    Modules\n    ReportModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ReportModule\n\n\n\ncluster_ReportModule_imports\n\n\n\ncluster_ReportModule_exports\n\n\n\ncluster_ReportModule_providers\n\n\n\n\nSourceModule\n\nSourceModule\n\n\n\nReportModule\n\nReportModule\n\nReportModule -->\n\nSourceModule->ReportModule\n\n\n\n\n\nReportService \n\nReportService \n\nReportService  -->\n\nReportModule->ReportService \n\n\n\n\n\nReportService\n\nReportService\n\nReportModule -->\n\nReportService->ReportModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/report/report.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ReportService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ReportController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SourceModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ReportService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { Report, ReportSchema } from \"./schemas/report.schema\";\nimport { ReportService } from \"./report.service\";\nimport { SourceModule } from \"../source/source.module\";\nimport { ReportController } from \"./report.controller\";\n\nconst ReportModel = MongooseModule.forFeature([\n    {\n        name: Report.name,\n        schema: ReportSchema,\n    },\n]);\n\n@Module({\n    imports: [\n        ReportModel,\n        ConfigModule,\n        SourceModule,\n    ],\n    exports: [ReportService],\n    providers: [ReportService],\n    controllers: [ReportController]\n})\n\nexport class ReportModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ReportService.html":{"url":"injectables/ReportService.html","title":"injectable - ReportService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ReportService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/report/report.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findBySentenceHash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ReportModel: Model, sourceService: SourceService)\n                    \n                \n                        \n                            \n                                Defined in server/report/report.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ReportModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sourceService\n                                                  \n                                                        \n                                                                        SourceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(report)\n                \n            \n\n\n            \n                \n                    Defined in server/report/report.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    report\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findBySentenceHash\n                        \n                    \n                \n            \n            \n                \nfindBySentenceHash(sentence_hash)\n                \n            \n\n\n            \n                \n                    Defined in server/report/report.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentence_hash\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport { Model } from \"mongoose\";\nimport { SourceService } from \"../source/source.service\";\nimport { SourceTargetModel } from \"../source/schemas/source.schema\";\nimport { Report, ReportDocument } from \"./schemas/report.schema\";\n\n@Injectable()\nexport class ReportService {\n    constructor(\n        @InjectModel(Report.name)\n        private ReportModel: Model,\n        private sourceService: SourceService\n    ) {}\n\n    async create(report) {\n        const newReport = new this.ReportModel(report);\n        if (report.sources && Array.isArray(report.sources)) {\n            try {\n                for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RootController.html":{"url":"controllers/RootController.html","title":"controller - RootController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RootController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/root/root.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                health\n                            \n                            \n                                robots\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        health\n                        \n                    \n                \n            \n            \n                \nhealth()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('api/health')\n                \n            \n\n            \n                \n                    Defined in server/root/root.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { status: string; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        robots\n                        \n                    \n                \n            \n            \n                \nrobots(res, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('robots.txt')\n                \n            \n\n            \n                \n                    Defined in server/root/root.controller.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Req, Res } from \"@nestjs/common\";\nimport { IsPublic } from \"../decorators/is-public.decorator\";\n\n@Controller(\"\")\nexport class RootController {\n    @IsPublic()\n    @Get(\"robots.txt\")\n    robots(@Res() res, @Req() req) {\n        const host = req.protocol + \"://\" + req.get(\"host\");\n        res.type(\"text/plain\").end(\n            `User-agent: *\\nDisallow: /api\\nDisallow: /_next\\nSitemap: ${host}/sitemap.xml`\n        );\n    }\n\n    @IsPublic()\n    @Get(\"api/health\")\n    health() {\n        return { status: \"ok\" };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Sentence.html":{"url":"classes/Sentence.html","title":"class - Sentence","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Sentence\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/sentence/schemas/sentence.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                data_hash\n                            \n                            \n                                props\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/sentence/schemas/sentence.schema.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        data_hash\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/sentence/schemas/sentence.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        props\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/sentence/schemas/sentence.schema.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, default: 'sentence', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/sentence/schemas/sentence.schema.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport * as mongoose from \"mongoose\";\n\nexport type SentenceDocument = Sentence & mongoose.Document;\n\n@Schema()\nexport class Sentence {\n    @Prop({\n        type: String,\n        default: \"sentence\",\n        required: true,\n    })\n    type: string;\n\n    @Prop({ required: true })\n    data_hash: string;\n\n    @Prop({ type: Object, required: true })\n    props: object;\n\n    @Prop({ required: true })\n    content: string;\n}\n\nconst SentenceSchemaRaw = SchemaFactory.createForClass(Sentence);\n\nexport const SentenceSchema = SentenceSchemaRaw;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SentenceModule.html":{"url":"modules/SentenceModule.html","title":"module - SentenceModule","body":"\n                   \n\n\n\n\n    Modules\n    SentenceModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SentenceModule\n\n\n\ncluster_SentenceModule_exports\n\n\n\ncluster_SentenceModule_providers\n\n\n\n\nSentenceService \n\nSentenceService \n\n\n\nSentenceModule\n\nSentenceModule\n\nSentenceService  -->\n\nSentenceModule->SentenceService \n\n\n\n\n\nSentenceService\n\nSentenceService\n\nSentenceModule -->\n\nSentenceService->SentenceModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/sentence/sentence.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SentenceService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SentenceService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { Sentence, SentenceSchema } from \"./schemas/sentence.schema\";\nimport { SentenceService } from \"./sentence.service\";\n\nconst SentenceModel = MongooseModule.forFeature([\n    {\n        name: Sentence.name,\n        schema: SentenceSchema,\n    },\n]);\n\n@Module({\n    imports: [SentenceModel],\n    providers: [SentenceService],\n    exports: [SentenceService],\n})\nexport class SentenceModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SentenceService.html":{"url":"injectables/SentenceService.html","title":"injectable - SentenceService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SentenceService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/sentence/sentence.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(SentenceModel: Model)\n                    \n                \n                        \n                            \n                                Defined in server/sentence/sentence.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        SentenceModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(sentenceBody)\n                \n            \n\n\n            \n                \n                    Defined in server/sentence/sentence.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentenceBody\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Model } from \"mongoose\";\nimport { SentenceDocument, Sentence } from \"./schemas/sentence.schema\";\nimport { InjectModel } from \"@nestjs/mongoose\";\n\n@Injectable()\nexport class SentenceService {\n    constructor(\n        @InjectModel(Sentence.name)\n        private SentenceModel: Model\n    ) {}\n\n    async create(sentenceBody) {\n        const newSentence = await new this.SentenceModel(sentenceBody).save();\n        return newSentence._id\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/SessionGuard.html":{"url":"guards/SessionGuard.html","title":"guard - SessionGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    SessionGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                server/auth/session.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                next\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in server/auth/session.guard.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in server/auth/session.guard.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        next\n                        \n                    \n                \n            \n            \n                \nnext(request, response, isPublic)\n                \n            \n\n\n            \n                \n                    Defined in server/auth/session.guard.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    isPublic\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n    CanActivate,\n    ExecutionContext, Injectable,\n} from \"@nestjs/common\";\nimport { Configuration, V0alpha2Api } from '@ory/client';\nimport { Reflector } from \"@nestjs/core\";\nimport {ConfigService} from \"@nestjs/config\";\n\n@Injectable()\nexport class SessionGuard implements CanActivate {\n    constructor(\n        private configService: ConfigService,\n        private readonly reflector: Reflector\n    ) {}\n\n    // @ts-ignore\n    async canActivate(context: ExecutionContext): Promise> {\n        const isPublic = this.reflector.get('public', context.getHandler());\n\n        const httpContext = context.switchToHttp();\n        const request = httpContext.getRequest();\n        const response = httpContext.getResponse();\n        const type = this.configService.get('authentication_type')\n\n        try {\n            if (type === 'ory') {\n                const ory = new V0alpha2Api(\n                    new Configuration({\n                        basePath: this.configService.get('ory.url'),\n                        accessToken: this.configService.get('access_token'),\n                    })\n                );\n                const { data: session } = await ory.toSession(undefined, request.header('Cookie'))\n                request.user = { _id: session?.identity?.traits?.user_id };\n                return true\n            }\n\n            return this.next(request, response, isPublic);\n        } catch (e) {\n            // TODO: logging\n            return this.next(request, response, isPublic);\n        }\n    }\n\n    next(request, response, isPublic) {\n        if (isPublic) {\n            return true\n        }\n        if (request.url.startsWith(\"/api\")) {\n            return false;\n        } else {\n            response.redirect(\"/login\");\n        }\n    }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SitemapController.html":{"url":"controllers/SitemapController.html","title":"controller - SitemapController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SitemapController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/sitemap/sitemap.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getSitemap\n                            \n                            \n                                    Async\n                                submitSitemap\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSitemap\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSitemap(res, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('sitemap.xml')@Header('Content-Type', 'text/xml')\n                \n            \n\n            \n                \n                    Defined in server/sitemap/sitemap.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitSitemap\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitSitemap(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('submit-sitemap')\n                \n            \n\n            \n                \n                    Defined in server/sitemap/sitemap.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    Header,\n    Request,\n    Res,\n} from \"@nestjs/common\";\nimport { SitemapService } from \"./sitemap.service\";\nimport {IsPublic} from \"../decorators/is-public.decorator\";\n\n@Controller(\"/\")\nexport class SitemapController {\n    constructor(private sitemapService: SitemapService) {}\n\n    @IsPublic()\n    @Get(\"sitemap.xml\")\n    @Header(\"Content-Type\", \"text/xml\")\n    async getSitemap(@Res() res, @Request() req) {\n        const sitemapXml = await this.sitemapService.getSitemap(\n            req.protocol + \"://\" + req.get(\"host\")\n        );\n        res.send(sitemapXml);\n    }\n\n    @Get(\"submit-sitemap\")\n    async submitSitemap(@Request() req) {\n        return this.sitemapService.submitSitemap(\n            req.protocol + \"://\" + req.get(\"host\")\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SitemapModule.html":{"url":"modules/SitemapModule.html","title":"module - SitemapModule","body":"\n                   \n\n\n\n\n    Modules\n    SitemapModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SitemapModule\n\n\n\ncluster_SitemapModule_exports\n\n\n\ncluster_SitemapModule_providers\n\n\n\ncluster_SitemapModule_imports\n\n\n\n\nClaimModule\n\nClaimModule\n\n\n\nSitemapModule\n\nSitemapModule\n\nSitemapModule -->\n\nClaimModule->SitemapModule\n\n\n\n\n\nClaimReviewModule\n\nClaimReviewModule\n\nSitemapModule -->\n\nClaimReviewModule->SitemapModule\n\n\n\n\n\nPersonalityModule\n\nPersonalityModule\n\nSitemapModule -->\n\nPersonalityModule->SitemapModule\n\n\n\n\n\nSitemapService \n\nSitemapService \n\nSitemapService  -->\n\nSitemapModule->SitemapService \n\n\n\n\n\nSitemapService\n\nSitemapService\n\nSitemapModule -->\n\nSitemapService->SitemapModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/sitemap/sitemap.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SitemapService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SitemapController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClaimModule\n                        \n                        \n                            ClaimReviewModule\n                        \n                        \n                            PersonalityModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SitemapService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { SitemapController } from \"./sitemap.controller\";\nimport { PersonalityModule } from \"../personality/personality.module\";\nimport { ClaimModule } from \"../claim/claim.module\";\nimport { ClaimReviewModule } from \"../claim-review/claim-review.module\";\nimport { SitemapService } from \"./sitemap.service\";\n\n@Module({\n    imports: [PersonalityModule, ClaimModule, ClaimReviewModule],\n    controllers: [SitemapController],\n    providers: [SitemapService],\n    exports: [SitemapService],\n})\nexport class SitemapModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SitemapService.html":{"url":"injectables/SitemapService.html","title":"injectable - SitemapService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SitemapService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/sitemap/sitemap.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getSitemap\n                            \n                            \n                                    Async\n                                submitSitemap\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(personalityService: PersonalityService, claimService: ClaimService, claimReviewService: ClaimReviewService)\n                    \n                \n                        \n                            \n                                Defined in server/sitemap/sitemap.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        personalityService\n                                                  \n                                                        \n                                                                        PersonalityService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        claimService\n                                                  \n                                                        \n                                                                        ClaimService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        claimReviewService\n                                                  \n                                                        \n                                                                        ClaimReviewService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSitemap\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSitemap(hostname)\n                \n            \n\n\n            \n                \n                    Defined in server/sitemap/sitemap.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    hostname\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitSitemap\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitSitemap(hostname)\n                \n            \n\n\n            \n                \n                    Defined in server/sitemap/sitemap.service.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    hostname\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"SitemapService\")\n                    \n                \n                    \n                        \n                                Defined in server/sitemap/sitemap.service.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from \"@nestjs/common\";\nimport { SitemapStream, streamToPromise } from \"sitemap\";\nimport { PersonalityService } from \"../personality/personality.service\";\nimport { ClaimService } from \"../claim/claim.service\";\nimport { ClaimReviewService } from \"../claim-review/claim-review.service\";\nconst axios = require(\"axios\");\n\n@Injectable()\nexport class SitemapService {\n    constructor(\n        private personalityService: PersonalityService,\n        private claimService: ClaimService,\n        private claimReviewService: ClaimReviewService\n    ) {}\n    private readonly logger = new Logger(\"SitemapService\");\n\n    async getSitemap(hostname) {\n        const sites: any[] = [\n            { url: \"/\" },\n            { url: \"/about\" },\n            { url: \"/privacy-policy\" },\n            { url: \"/code-of-conduct\" },\n            { url: \"/login\" },\n            { url: \"/profile\" },\n            { url: \"/personality\" },\n        ];\n\n        // TODO: Add a loop strategy that paginates the results to improve performance\n        const personalities: any[] = await this.personalityService.listAll(\n            0,\n            0,\n            \"asc\",\n            {},\n            \"pt\",\n            false\n        );\n\n        for (const personality of personalities) {\n            sites.push({ url: `/personality/${personality.slug}` });\n            const claims = await this.claimService.listAll(0, 0, \"asc\", {\n                personality: personality._id,\n            });\n\n            for (const claim of claims) {\n                sites.push({\n                    url: `/personality/${personality.slug}/claim/${claim.slug}`,\n                });\n                // This line may cause a false positive in sonarCloud because if we remove the await, we cannot iterate through the results\n                //TODO: maybe with the changes, we have to change something\n                const reviews =\n                    await this.claimReviewService.getReviewsByClaimId(\n                        claim._id\n                    );\n                for (const review of reviews) {\n                    sites.push({\n                        url: `/personality/${personality.slug}/claim/${claim.slug}/sentence/${review._id}`,\n                        priority: 0.9,\n                    });\n                }\n            }\n        }\n        const sitemapStream = new SitemapStream({\n            hostname,\n        });\n        for (const site of sites) {\n            sitemapStream.write(site);\n        }\n        sitemapStream.end();\n\n        return streamToPromise(sitemapStream);\n    }\n\n    async submitSitemap(hostname) {\n        try {\n            await axios.get(\n                `https://google.com/ping?sitemap=${hostname}/sitemap.xml`\n            );\n            return \"Sitemap submitted\";\n        } catch (e) {\n            const message =\n                \"Error while submitting sitemap to search engine: \" + e.message;\n            this.logger.error(message);\n            return message;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Source.html":{"url":"classes/Source.html","title":"class - Source","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Source\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/source/schemas/source.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                classification\n                            \n                            \n                                description\n                            \n                            \n                                link\n                            \n                            \n                                targetId\n                            \n                            \n                                targetModel\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        classification\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({validate: undefined, message: tag => })\n                        \n                    \n                \n                    \n                        \n                                Defined in server/source/schemas/source.schema.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/source/schemas/source.schema.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        link\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/source/schemas/source.schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        targetId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, refPath: 'onModel'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/source/schemas/source.schema.ts:41\n                        \n                    \n\n            \n                \n                    Use Dynamic ref https://mongoosejs.com/docs/populate.html#dynamic-ref\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        targetModel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SourceTargetModel\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/source/schemas/source.schema.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/source/schemas/source.schema.ts:53\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport * as mongoose from \"mongoose\";\nimport { User } from \"../../users/schemas/user.schema\";\n\nexport type SourceDocument = Source & mongoose.Document;\n\nexport enum SourceTargetModel {\n    Claim = 'Claim',\n    ClaimReview = 'ClaimReview'\n} \n@Schema()\nexport class Source {\n    @Prop({ required: true })\n    link: string;\n\n    @Prop({\n        validate: {\n            validator: (v) => {\n                return (\n                    [\"unclassified\", \"reliable\", \"unreliable\", \"fake\"].indexOf(\n                        v\n                    ) !== -1\n                );\n            },\n        },\n        message: (tag) => `${tag} is not a valid classification.`,\n    })\n    classification: string;\n\n    @Prop()\n    description: string;\n\n    /**\n     * Use Dynamic ref https://mongoosejs.com/docs/populate.html#dynamic-ref\n     */\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        refPath: \"onModel\",\n    })\n    targetId: mongoose.Types.ObjectId;\n\n    @Prop({\n        required: true,\n    })\n    targetModel: SourceTargetModel;\n\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"User\",\n    })\n    user: User;\n}\n\nexport const SourceSchema = SchemaFactory.createForClass(Source);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SourceController.html":{"url":"controllers/SourceController.html","title":"controller - SourceController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SourceController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/source/source.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getSourcesClaim\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getSourcesClaim\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSourcesClaim(params, getSources: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('api/source/:targetId')\n                \n            \n\n            \n                \n                    Defined in server/source/source.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    getSources\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Logger, Param, Query } from \"@nestjs/common\";\nimport { SourceService } from \"./source.service\";\n\n@Controller()\nexport class SourceController {\n    private readonly logger = new Logger(\"SourceController\");\n    constructor(private sourceService: SourceService) {}\n\n    @Get(\"api/source/:targetId\")\n    public async getSourcesClaim(@Param() params, @Query() getSources: any) {\n        const { targetId } = params;\n        const { page, order } = getSources;\n        const pageSize = parseInt(getSources.pageSize, 10)\n        return this.sourceService\n            .getByTargetId(targetId, page, pageSize, order)\n            .then((sources) => {\n                const totalSources = sources.length;\n                const totalPages = Math.ceil(\n                    totalSources / pageSize\n                );\n                this.logger.log(\n                    `Found ${totalSources} sources for targetId ${targetId}. Page ${page} of ${totalPages}`\n                );\n                return { sources, totalSources, totalPages, page, pageSize };\n            })\n            .catch();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SourceModule.html":{"url":"modules/SourceModule.html","title":"module - SourceModule","body":"\n                   \n\n\n\n\n    Modules\n    SourceModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SourceModule\n\n\n\ncluster_SourceModule_exports\n\n\n\ncluster_SourceModule_providers\n\n\n\n\nSourceService \n\nSourceService \n\n\n\nSourceModule\n\nSourceModule\n\nSourceService  -->\n\nSourceModule->SourceService \n\n\n\n\n\nSourceService\n\nSourceService\n\nSourceModule -->\n\nSourceService->SourceModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/source/source.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SourceService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SourceController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SourceService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { Source, SourceSchema } from \"./schemas/source.schema\";\nimport { SourceController } from \"./source.controller\";\nimport { SourceService } from \"./source.service\";\n\nconst SourceModel = MongooseModule.forFeature([\n    {\n        name: Source.name,\n        schema: SourceSchema,\n    },\n]);\n\n@Module({\n    imports: [SourceModel],\n    providers: [SourceService],\n    exports: [SourceService],\n    controllers: [SourceController],\n})\nexport class SourceModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SourceService.html":{"url":"injectables/SourceService.html","title":"injectable - SourceService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SourceService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/source/source.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                getByTargetId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(SourceModel: Model)\n                    \n                \n                        \n                            \n                                Defined in server/source/source.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        SourceModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data)\n                \n            \n\n\n            \n                \n                    Defined in server/source/source.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByTargetId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByTargetId(targetId, page, pageSize, order: string)\n                \n            \n\n\n            \n                \n                    Defined in server/source/source.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    targetId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    page\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    pageSize\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    order\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"asc\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Model, Types } from \"mongoose\";\nimport { SourceDocument, Source } from \"./schemas/source.schema\";\nimport { InjectModel } from \"@nestjs/mongoose\";\n\n@Injectable()\nexport class SourceService {\n    constructor(\n        @InjectModel(Source.name)\n        private SourceModel: Model\n    ) {}\n    async create(data) {\n        data.targetId = Types.ObjectId(data.targetId);\n        data.user = Types.ObjectId(data.user);\n        const source = new this.SourceModel(data);\n        await source.save();\n        return source;\n    }\n\n    async getByTargetId(targetId, page, pageSize, order = \"asc\") {\n        targetId = Types.ObjectId(targetId);\n\n        return this.SourceModel.find({ targetId })\n        .skip(page * pageSize)\n        .limit(pageSize)\n        .sort({ _id: order });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Speech.html":{"url":"classes/Speech.html","title":"class - Speech","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Speech\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/speech/schemas/speech.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Paragraph[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/speech/schemas/speech.schema.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: 'speech', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/speech/schemas/speech.schema.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport * as mongoose from \"mongoose\";\nimport { Paragraph } from \"../../paragraph/schemas/paragraph.schema\";\n\nexport type SpeechDocument = Speech & mongoose.Document;\n\n@Schema({ toObject: {virtuals: true}, toJSON: {virtuals: true} })\nexport class Speech {\n    @Prop({\n        default: \"speech\",\n        required: true,\n    })\n    type: string;\n\n    @Prop({\n        type: [{\n            type: mongoose.Types.ObjectId,\n            required: true,\n            ref: \"Paragraph\"\n        }]\n    })\n    content: Paragraph[];\n}\n\nconst SpeechSchemaRaw = SchemaFactory.createForClass(Speech);\n\nexport const SpeechSchema = SpeechSchemaRaw;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SpeechModule.html":{"url":"modules/SpeechModule.html","title":"module - SpeechModule","body":"\n                   \n\n\n\n\n    Modules\n    SpeechModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SpeechModule\n\n\n\ncluster_SpeechModule_exports\n\n\n\ncluster_SpeechModule_providers\n\n\n\n\nSpeechService \n\nSpeechService \n\n\n\nSpeechModule\n\nSpeechModule\n\nSpeechService  -->\n\nSpeechModule->SpeechService \n\n\n\n\n\nSpeechService\n\nSpeechService\n\nSpeechModule -->\n\nSpeechService->SpeechModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/speech/speech.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SpeechService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SpeechService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { Speech, SpeechSchema } from \"./schemas/speech.schema\";\nimport { SpeechService } from \"./speech.service\";\n\nconst SpeechModel = MongooseModule.forFeature([\n    {\n        name: Speech.name,\n        schema: SpeechSchema,\n    },\n]);\n\n@Module({\n    imports: [SpeechModel],\n    providers: [SpeechService],\n    exports: [SpeechService],\n})\nexport class SpeechModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SpeechService.html":{"url":"injectables/SpeechService.html","title":"injectable - SpeechService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SpeechService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/speech/speech.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(SpeechModel: Model)\n                    \n                \n                        \n                            \n                                Defined in server/speech/speech.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        SpeechModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(speechBody)\n                \n            \n\n\n            \n                \n                    Defined in server/speech/speech.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    speechBody\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Model } from \"mongoose\";\nimport { SpeechDocument, Speech } from \"./schemas/speech.schema\";\nimport { InjectModel } from \"@nestjs/mongoose\";\n\n@Injectable()\nexport class SpeechService {\n    constructor(\n        @InjectModel(Speech.name)\n        private SpeechModel: Model\n    ) {}\n\n    create(speechBody) {\n        return new this.SpeechModel(speechBody).save();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StatsController.html":{"url":"controllers/StatsController.html","title":"controller - StatsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StatsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/stats/stats.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/stats\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHomeStats\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHomeStats\n                        \n                    \n                \n            \n            \n                \ngetHomeStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('home')\n                \n            \n\n            \n                \n                    Defined in server/stats/stats.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport {StatsService} from \"./stats.service\";\n\n@Controller(\"api/stats\")\nexport class StatsController {\n    constructor(\n        private statsService: StatsService,\n    ) {}\n    @Get(\"home\")\n    getHomeStats() {\n        return this.statsService.getHomeStats();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StatsModule.html":{"url":"modules/StatsModule.html","title":"module - StatsModule","body":"\n                   \n\n\n\n\n    Modules\n    StatsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StatsModule\n\n\n\ncluster_StatsModule_exports\n\n\n\ncluster_StatsModule_imports\n\n\n\ncluster_StatsModule_providers\n\n\n\n\nClaimModule\n\nClaimModule\n\n\n\nStatsModule\n\nStatsModule\n\nStatsModule -->\n\nClaimModule->StatsModule\n\n\n\n\n\nClaimReviewModule\n\nClaimReviewModule\n\nStatsModule -->\n\nClaimReviewModule->StatsModule\n\n\n\n\n\nPersonalityModule\n\nPersonalityModule\n\nStatsModule -->\n\nPersonalityModule->StatsModule\n\n\n\n\n\nStatsService \n\nStatsService \n\nStatsService  -->\n\nStatsModule->StatsService \n\n\n\n\n\nStatsService\n\nStatsService\n\nStatsModule -->\n\nStatsService->StatsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/stats/stats.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StatsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StatsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClaimModule\n                        \n                        \n                            ClaimReviewModule\n                        \n                        \n                            PersonalityModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StatsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { StatsController } from \"./stats.controller\";\nimport { PersonalityModule } from \"../personality/personality.module\";\nimport { ClaimModule } from \"../claim/claim.module\";\nimport { ClaimReviewModule } from \"../claim-review/claim-review.module\";\nimport {StatsService} from \"./stats.service\";\n\n@Module({\n    imports: [PersonalityModule, ClaimModule, ClaimReviewModule],\n    controllers: [StatsController],\n    providers: [StatsService],\n    exports: [StatsService]\n})\nexport class StatsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StatsService.html":{"url":"injectables/StatsService.html","title":"injectable - StatsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StatsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/stats/stats.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHomeStats\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(claimReviewService: ClaimReviewService, personalityService: PersonalityService, claimService: ClaimService)\n                    \n                \n                        \n                            \n                                Defined in server/stats/stats.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        claimReviewService\n                                                  \n                                                        \n                                                                        ClaimReviewService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        personalityService\n                                                  \n                                                        \n                                                                        PersonalityService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        claimService\n                                                  \n                                                        \n                                                                        ClaimService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHomeStats\n                        \n                    \n                \n            \n            \n                \ngetHomeStats()\n                \n            \n\n\n            \n                \n                    Defined in server/stats/stats.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Injectable} from \"@nestjs/common\";\nimport {ClaimReviewService} from \"../claim-review/claim-review.service\";\nimport {PersonalityService} from \"../personality/personality.service\";\nimport {ClaimService} from \"../claim/claim.service\";\n\n@Injectable()\nexport class StatsService {\n    constructor(\n        private claimReviewService: ClaimReviewService,\n        private personalityService: PersonalityService,\n        private claimService: ClaimService\n    ) {}\n\n    getHomeStats() {\n        return Promise.all([\n            this.claimService.count(),\n            this.personalityService.count(),\n            this.claimReviewService.count(),\n        ]).then((values) => {\n            return {\n                claims: values[0],\n                personalities: values[1],\n                reviews: values[2],\n            };\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateClaimDTO.html":{"url":"classes/UpdateClaimDTO.html","title":"class - UpdateClaimDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateClaimDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim/dto/update-claim.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/mapped-types\"\nimport { CreateClaimDTO } from \"./create-claim.dto\";\n\nexport class UpdateClaimDTO extends PartialType(CreateClaimDTO){}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateClaimReviewTaskDTO.html":{"url":"classes/UpdateClaimReviewTaskDTO.html","title":"class - UpdateClaimReviewTaskDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateClaimReviewTaskDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim-review-task/dto/update-claim-review-task.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                recaptcha\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        recaptcha\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review-task/dto/update-claim-review-task.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/mapped-types\";\nimport { IsNotEmpty, IsString } from \"class-validator\";\nimport { CreateClaimReviewTaskDTO } from \"./create-claim-review-task.dto\";\n\nexport class UpdateClaimReviewTaskDTO extends PartialType(\n    CreateClaimReviewTaskDTO\n) {\n    @IsNotEmpty()\n    @IsString()\n    recaptcha: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/users/schemas/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstPasswordChanged\n                            \n                            \n                                name\n                            \n                            \n                                oryId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/users/schemas/user.schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstPasswordChanged\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/users/schemas/user.schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/users/schemas/user.schema.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        oryId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/users/schemas/user.schema.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { Document } from \"mongoose\";\n\nexport interface UserDocument extends User, Document {\n    authenticate(): any;\n}\n\n@Schema()\nexport class User {\n    @Prop({ required: true })\n    name: string;\n\n    @Prop({ required: true, unique: true })\n    email: string;\n\n    @Prop({ required: true, unique: true })\n    oryId: string;\n\n    @Prop({ required: true, default: false })\n    firstPasswordChanged: boolean;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserDocument.html":{"url":"interfaces/UserDocument.html","title":"interface - UserDocument","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserDocument\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/users/schemas/user.schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        User\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        authenticate\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate()\n                \n            \n\n\n            \n                \n                    Defined in server/users/schemas/user.schema.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { Document } from \"mongoose\";\n\nexport interface UserDocument extends User, Document {\n    authenticate(): any;\n}\n\n@Schema()\nexport class User {\n    @Prop({ required: true })\n    name: string;\n\n    @Prop({ required: true, unique: true })\n    email: string;\n\n    @Prop({ required: true, unique: true })\n    oryId: string;\n\n    @Prop({ required: true, default: false })\n    firstPasswordChanged: boolean;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/users/users.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getAll\n                            \n                            \n                                    Public\n                                    Async\n                                personalityList\n                            \n                            \n                                    Public\n                                    Async\n                                profile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll(getUsers)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('api/user')\n                \n            \n\n            \n                \n                    Defined in server/users/users.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    getUsers\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        personalityList\n                        \n                    \n                \n            \n            \n                \n                    \n                    personalityList(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('login')\n                \n            \n\n            \n                \n                    Defined in server/users/users.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        profile\n                        \n                    \n                \n            \n            \n                \n                    \n                    profile(req: BaseRequest, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('profile')\n                \n            \n\n            \n                \n                    Defined in server/users/users.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                BaseRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get, Logger,\n    Query, Req,\n    Res,\n} from \"@nestjs/common\";\nimport {Request, Response} from \"express\";\nimport { UsersService } from \"./users.service\";\nimport { parse } from \"url\";\nimport { ViewService } from \"../view/view.service\";\nimport {ConfigService} from \"@nestjs/config\";\nimport {IsPublic} from \"../decorators/is-public.decorator\";\nimport { BaseRequest } from \"../types\";\n\n\n@Controller()\nexport class UsersController {\n    constructor(\n        private readonly usersService: UsersService,\n        private viewService: ViewService,\n        private configService: ConfigService\n    ) {}\n\n    @IsPublic()\n    @Get(\"login\")\n    public async personalityList(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        const authType = this.configService.get(\"authentication_type\")\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/login\",\n                Object.assign(parsedUrl.query, { authType })\n            );\n    }\n\n    @Get(\"profile\")\n    public async profile(@Req() req: BaseRequest, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        const user = await this.usersService.getById(req.user._id);\n\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/profile-page\",\n                Object.assign(parsedUrl.query, {user})\n            );\n    }\n\n    @IsPublic()\n    @Get(\"api/user\")\n    public async getAll(@Query() getUsers) {\n        return this.usersService.findAll(getUsers);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nOryModule\n\nOryModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nOryModule->UsersModule\n\n\n\n\n\nViewModule\n\nViewModule\n\nUsersModule -->\n\nViewModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            OryModule\n                        \n                        \n                            ViewModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { User, UserSchema } from \"./schemas/user.schema\";\nimport { UsersService } from \"./users.service\";\nimport { UsersController } from \"./users.controller\";\nimport { ViewModule } from \"../view/view.module\";\nimport OryModule from \"../ory/ory.module\";\nimport { ConfigModule } from \"@nestjs/config\";\n\nconst UserModel = MongooseModule.forFeature([\n    {\n        name: User.name,\n        schema: UserSchema,\n    },\n]);\n\n@Module({\n    imports: [UserModel, ViewModule, OryModule, ConfigModule],\n    exports: [UsersService, UserModel],\n    controllers: [UsersController],\n    providers: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                registerPasswordChange\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(UserModel: Model, oryService: OryService)\n                    \n                \n                        \n                            \n                                Defined in server/users/users.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        UserModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        oryService\n                                                  \n                                                        \n                                                                        OryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(getUsers)\n                \n            \n\n\n            \n                \n                    Defined in server/users/users.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    getUsers\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(userId)\n                \n            \n\n\n            \n                \n                    Defined in server/users/users.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(user)\n                \n            \n\n\n            \n                \n                    Defined in server/users/users.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        registerPasswordChange\n                        \n                    \n                \n            \n            \n                \n                    \n                    registerPasswordChange(userId)\n                \n            \n\n\n            \n                \n                    Defined in server/users/users.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"UserService\")\n                    \n                \n                    \n                        \n                                Defined in server/users/users.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\n\nimport OryService from '../ory/ory.service';\nimport { User, UserDocument } from './schemas/user.schema';\n\n@Injectable()\nexport class UsersService {\n    private readonly logger = new Logger(\"UserService\");\n    constructor(\n        @InjectModel(User.name) private UserModel: Model,\n        private oryService: OryService\n    ) {}\n\n    async findAll(getUsers): Promise {\n        const { searchName } = getUsers;\n        return this.UserModel.aggregate([\n            { $match: { name: { $regex: searchName, $options: \"i\" } } },\n            { $project: { _id: 1, name: 1 } },\n        ]);\n    }\n\n    async register(user) {\n        const newUser = new this.UserModel(user);\n\n        if (!newUser.oryId) {\n            this.logger.log(\"No user id provided, creating a new ory identity\")\n            const { data: oryUser } = await this.oryService.createIdentity(\n                newUser,\n                user.password\n            );\n            newUser.oryId = oryUser.id;\n        } else {\n            this.logger.log(\"User id provided, updating a new ory identity\")\n            await this.oryService.updateIdentity(\n                newUser,\n                user.password\n            );\n        }\n        try {\n            // @ts-ignore\n            return this.UserModel.register(newUser, user.password);\n        } catch (e) {\n            this.logger.error(`Error registering user ${user.email}`);\n        }\n    }\n\n    async getById(userId) {\n        const user = await this.UserModel.findById(userId);\n        this.logger.log(`Found user ${user._id}`);\n        return user;\n    }\n\n    async registerPasswordChange(userId) {\n        const user = await this.getById(userId);\n        if (user.firstPasswordChanged === false) {\n            user.firstPasswordChanged = true;\n            this.logger.log(`User ${user._id} changed first password`);\n            user.save();\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UtilService.html":{"url":"injectables/UtilService.html","title":"injectable - UtilService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UtilService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/util.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                formatStats\n                            \n                            \n                                generatePassword\n                            \n                            \n                                mergeObjectsInUnique\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        formatStats\n                        \n                    \n                \n            \n            \n                \nformatStats(reviews)\n                \n            \n\n\n            \n                \n                    Defined in server/util.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reviews\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { total: any; reviews: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generatePassword\n                        \n                    \n                \n            \n            \n                \ngeneratePassword(isTestUser, forcePassword: null)\n                \n            \n\n\n            \n                \n                    Defined in server/util.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    isTestUser\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                                \n                                    forcePassword\n                                    \n                                            null\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        null\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mergeObjectsInUnique\n                        \n                    \n                \n            \n            \n                \nmergeObjectsInUnique(array: T[], property: any)\n                \n            \n\n\n            \n                \n                    Defined in server/util.ts:27\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    https://medium.com/javascript-in-plain-english/javascript-merge-duplicate-objects-in-array-of-objects-9a76c3a1c35c\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    array\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    property\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { randomBytes } from \"crypto\";\n\n@Injectable()\nexport class UtilService {\n    formatStats(reviews) {\n        const total = reviews.reduce((agg, review) => {\n            agg += review.count;\n            return agg;\n        }, 0);\n        const result = reviews.map((review) => {\n            const percentage = (review.count / total) * 100;\n            return {\n                _id: review._id[0],\n                percentage: percentage.toFixed(0),\n                count: review.count,\n            };\n        });\n        return { total, reviews: result };\n    }\n\n    /**\n     * https://medium.com/javascript-in-plain-english/javascript-merge-duplicate-objects-in-array-of-objects-9a76c3a1c35c\n     * @param array\n     * @param property\n     */\n    mergeObjectsInUnique(array: T[], property: any): T[] {\n        const newArray = new Map();\n\n        array.forEach((item: T) => {\n            const propertyValue = item[property];\n            newArray.has(propertyValue)\n                ? newArray.set(propertyValue, {\n                      ...item,\n                      ...newArray.get(propertyValue),\n                  })\n                : newArray.set(propertyValue, item);\n        });\n\n        return Array.from(newArray.values());\n    }\n\n    generatePassword(isTestUser = false, forcePassword = null) {\n        const buf = randomBytes(8);\n\n        if (isTestUser) {\n            return forcePassword ? `${forcePassword}` : process.env.DEVELOPMENT_PASSWORD;\n        }\n\n        return buf.toString(\"hex\");\n    };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ViewController.html":{"url":"controllers/ViewController.html","title":"controller - ViewController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ViewController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/view/view.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                assets\n                            \n                            \n                                    Public\n                                    Async\n                                codeOfConductPage\n                            \n                            \n                                    Async\n                                handler\n                            \n                            \n                                    Public\n                                    Async\n                                show404\n                            \n                            \n                                    Public\n                                    Async\n                                showAboutPage\n                            \n                            \n                                    Public\n                                    Async\n                                showPrivacyPolicyPage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        assets\n                        \n                    \n                \n            \n            \n                \n                    \n                    assets(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('_next*')\n                \n            \n\n            \n                \n                    Defined in server/view/view.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        codeOfConductPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    codeOfConductPage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('code-of-conduct')\n                \n            \n\n            \n                \n                    Defined in server/view/view.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handler\n                        \n                    \n                \n            \n            \n                \n                    \n                    handler(req: Request, res: Response)\n                \n            \n\n\n            \n                \n                    Defined in server/view/view.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        show404\n                        \n                    \n                \n            \n            \n                \n                    \n                    show404(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('404')\n                \n            \n\n            \n                \n                    Defined in server/view/view.controller.ts:65\n                \n            \n\n\n            \n                \n                    Redirects to our custom 404 page.\nThe render404() method was not used here as it conflicts with our i18n strategy.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        showAboutPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    showAboutPage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('about')\n                \n            \n\n            \n                \n                    Defined in server/view/view.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        showPrivacyPolicyPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    showPrivacyPolicyPage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @IsPublic()@Get('privacy-policy')\n                \n            \n\n            \n                \n                    Defined in server/view/view.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Res, Req } from \"@nestjs/common\";\nimport { Request, Response } from \"express\";\nimport { parse } from \"url\";\nimport { ViewService } from \"./view.service\";\nimport {IsPublic} from \"../decorators/is-public.decorator\";\n\n@Controller(\"/\")\nexport class ViewController {\n    constructor(private viewService: ViewService) {}\n\n    async handler(req: Request, res: Response) {\n        const parsedUrl = parse(req.url, true);\n\n        await this.viewService\n            .getNextServer()\n            .render(req, res, parsedUrl.pathname, parsedUrl.query);\n    }\n\n    @IsPublic()\n    @Get(\"about\")\n    public async showAboutPage(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n\n        await this.viewService\n            .getNextServer()\n            .render(req, res, \"/about-page\", Object.assign(parsedUrl.query));\n    }\n\n    @IsPublic()\n    @Get(\"privacy-policy\")\n    public async showPrivacyPolicyPage(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n\n        await this.viewService\n            .getNextServer()\n            .render(req, res, \"/privacy-policy-page\", Object.assign(parsedUrl.query));\n    }\n\n    @IsPublic()\n    @Get(\"code-of-conduct\")\n    public async codeOfConductPage(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n\n        await this.viewService\n            .getNextServer()\n            .render(req, res, \"/code-of-conduct-page\", Object.assign(parsedUrl.query));\n    }\n\n    @IsPublic()\n    @Get(\"_next*\")\n    public async assets(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n\n        await this.viewService\n            .getNextServer()\n            .render(req, res, parsedUrl.pathname, parsedUrl.query);\n    }\n\n    /**\n     * Redirects to our custom 404 page.\n     * The render404() method was not used here as it conflicts with our i18n strategy.\n     */\n    @IsPublic()\n    @Get(\"404\")\n    public async show404(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n\n        await this.viewService\n            .getNextServer()\n            .render(req, res, \"/404-page\", Object.assign(parsedUrl.query));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ViewModule.html":{"url":"modules/ViewModule.html","title":"module - ViewModule","body":"\n                   \n\n\n\n\n    Modules\n    ViewModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ViewModule\n\n\n\ncluster_ViewModule_exports\n\n\n\ncluster_ViewModule_providers\n\n\n\n\nViewService \n\nViewService \n\n\n\nViewModule\n\nViewModule\n\nViewService  -->\n\nViewModule->ViewService \n\n\n\n\n\nViewService\n\nViewService\n\nViewModule -->\n\nViewService->ViewModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/view/view.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ViewService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ViewController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ViewService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ViewController } from \"./view.controller\";\nimport { ViewService } from \"./view.service\";\nimport {ConfigModule} from \"@nestjs/config\";\n\n@Module({\n    imports: [ConfigModule],\n    providers: [ViewService],\n    controllers: [ViewController],\n    exports: [ViewService]\n})\nexport class ViewModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ViewService.html":{"url":"injectables/ViewService.html","title":"injectable - ViewService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ViewService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/view/view.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getNextServer\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in server/view/view.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getNextServer\n                        \n                    \n                \n            \n            \n                \ngetNextServer()\n                \n            \n\n\n            \n                \n                    Defined in server/view/view.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     NextServer\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in server/view/view.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"ViewService\")\n                    \n                \n                    \n                        \n                                Defined in server/view/view.service.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     NextServer\n\n                    \n                \n                    \n                        \n                                Defined in server/view/view.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {Injectable, Logger, OnModuleInit} from \"@nestjs/common\";\nimport createServer from \"next\";\nimport { NextServer } from \"next/dist/server/next\";\nimport {ConfigService} from \"@nestjs/config\";\n\n@Injectable()\nexport class ViewService implements OnModuleInit {\n    private server: NextServer;\n    private readonly logger = new Logger(\"ViewService\");\n\n    constructor(private configService: ConfigService) {}\n\n    async onModuleInit(): Promise {\n        try {\n            this.server = createServer({\n                dev: process.env.ENVIRONMENT === \"watch-dev\",\n                dir: this.configService.get(\"nextjs.dir\") || \"./\",\n            });\n            await this.server.prepare();\n        } catch (error) {\n            this.logger.error(\"Failed to load NextServer\", error);\n        }\n    }\n\n    getNextServer(): NextServer {\n        return this.server;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WikidataCache.html":{"url":"classes/WikidataCache.html","title":"class - WikidataCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WikidataCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/wikidata/schemas/wikidata.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                language\n                            \n                            \n                                props\n                            \n                            \n                                wikidataId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/wikidata/schemas/wikidata.schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/wikidata/schemas/wikidata.schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        props\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/wikidata/schemas/wikidata.schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wikidataId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/wikidata/schemas/wikidata.schema.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { Document } from \"mongoose\";\n\nexport type WikidataCacheDocument = WikidataCache & Document;\n\n@Schema()\nexport class WikidataCache {\n    @Prop({ required: true })\n    wikidataId: string;\n\n    @Prop({ required: true })\n    language: string;\n\n    @Prop({ type: Object, required: true })\n    props: object;\n\n    @Prop({ default: Date.now })\n    createdAt: Date;\n}\n\nexport const WikidataCacheSchema = SchemaFactory.createForClass(WikidataCache);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WikidataModule.html":{"url":"modules/WikidataModule.html","title":"module - WikidataModule","body":"\n                   \n\n\n\n\n    Modules\n    WikidataModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_WikidataModule\n\n\n\ncluster_WikidataModule_exports\n\n\n\ncluster_WikidataModule_providers\n\n\n\n\nWikidataService \n\nWikidataService \n\n\n\nWikidataModule\n\nWikidataModule\n\nWikidataService  -->\n\nWikidataModule->WikidataService \n\n\n\n\n\nWikidataService\n\nWikidataService\n\nWikidataModule -->\n\nWikidataService->WikidataModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/wikidata/wikidata.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            WikidataService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            WikidataService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { WikidataService } from \"./wikidata.service\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { WikidataCache, WikidataCacheSchema } from \"./schemas/wikidata.schema\";\n\nconst WikidataCacheModel = MongooseModule.forFeatureAsync([\n    {\n        name: WikidataCache.name,\n        useFactory: () => {\n            const wikidataCacheSchema = WikidataCacheSchema;\n            wikidataCacheSchema.index(\n                { wikidataId: 1, language: 1 },\n                { unique: true }\n            );\n            wikidataCacheSchema.index(\n                { createdAt: 1 },\n                { expireAfterSeconds: 86400 }\n            );\n            return wikidataCacheSchema;\n        },\n    },\n]);\n\n@Module({\n    imports: [WikidataCacheModel],\n    exports: [WikidataService],\n    providers: [WikidataService],\n})\nexport class WikidataModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WikidataService.html":{"url":"injectables/WikidataService.html","title":"injectable - WikidataService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WikidataService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/wikidata/wikidata.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                extractProperties\n                            \n                            \n                                extractValue\n                            \n                            \n                                    Async\n                                fetchProperties\n                            \n                            \n                                    Async\n                                getCommonsThumbURL\n                            \n                            \n                                getSiteLinkName\n                            \n                            \n                                queryWikibaseEntities\n                            \n                            \n                                    Async\n                                requestProperties\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(WikidataCache: Model)\n                    \n                \n                        \n                            \n                                Defined in server/wikidata/wikidata.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        WikidataCache\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        extractProperties\n                        \n                    \n                \n            \n            \n                \n                    \n                    extractProperties(wikidata, language: string)\n                \n            \n\n\n            \n                \n                    Defined in server/wikidata/wikidata.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    wikidata\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"en\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        extractValue\n                        \n                    \n                \n            \n            \n                \nextractValue(wikidata, property, language)\n                \n            \n\n\n            \n                \n                    Defined in server/wikidata/wikidata.service.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    wikidata\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    property\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    language\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        fetchProperties\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchProperties(params)\n                \n            \n\n\n            \n                \n                    Defined in server/wikidata/wikidata.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCommonsThumbURL\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCommonsThumbURL(imageTitle, imageSize)\n                \n            \n\n\n            \n                \n                    Defined in server/wikidata/wikidata.service.ts:155\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imageTitle\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imageSize\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSiteLinkName\n                        \n                    \n                \n            \n            \n                \ngetSiteLinkName(language)\n                \n            \n\n\n            \n                \n                    Defined in server/wikidata/wikidata.service.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    language\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        queryWikibaseEntities\n                        \n                    \n                \n            \n            \n                \nqueryWikibaseEntities(query, language: string)\n                \n            \n\n\n            \n                \n                    Defined in server/wikidata/wikidata.service.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"en\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        requestProperties\n                        \n                    \n                \n            \n            \n                \n                    \n                    requestProperties(params)\n                \n            \n\n\n            \n                \n                    Defined in server/wikidata/wikidata.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Model } from \"mongoose\";\nimport { Injectable } from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport {\n    WikidataCache,\n    WikidataCacheDocument,\n} from \"./schemas/wikidata.schema\";\n\nconst axios = require(\"axios\");\n\nconst languageVariantMap = {\n    \"pt-br\": \"pt\",\n};\n\n@Injectable()\nexport class WikidataService {\n    constructor(\n        @InjectModel(WikidataCache.name)\n        private WikidataCache: Model\n    ) {}\n\n    async fetchProperties(params) {\n        const wikidataCache = await this.WikidataCache.findOne({\n            wikidataId: params.wikidataId,\n            language: params.language,\n        }).exec();\n        if (!wikidataCache) {\n            const props = await this.requestProperties(params);\n            const newWikidataCache = new this.WikidataCache({\n                ...params,\n                props,\n            });\n            newWikidataCache.save();\n            return props;\n        }\n        return wikidataCache.props;\n    }\n\n    async requestProperties(params) {\n        const { data } = await axios.get(\"https://www.wikidata.org/w/api.php\", {\n            params: {\n                action: \"wbgetentities\",\n                ids: encodeURIComponent(params.wikidataId),\n                format: \"json\",\n                formatversion: \"2\",\n            },\n        });\n        const entities = data && data.entities;\n        return this.extractProperties(\n            entities && entities[params.wikidataId],\n            params.language\n        );\n    }\n\n    async extractProperties(wikidata, language = \"en\"): Promise {\n        const wikidataProps = {\n            name: undefined,\n            description: undefined,\n            isAllowedProp: undefined,\n            image: undefined,\n            wikipedia: undefined,\n            avatar: undefined,\n        };\n        if (!wikidata) {\n            return {};\n        }\n\n        // Get label for the personality name\n        wikidataProps.name = this.extractValue(wikidata, \"labels\", language);\n\n        // Get description for the personality description\n        wikidataProps.description = this.extractValue(\n            wikidata,\n            \"descriptions\",\n            language\n        );\n\n        if (wikidata.claims.P31) {\n            const wikidataInstanceof =\n                wikidata.claims.P31[0].mainsnak.datavalue.value;\n            wikidataProps.isAllowedProp = wikidataInstanceof.id === \"Q5\";\n        } else {\n            wikidataProps.isAllowedProp = false;\n        }\n        \n        // Extract image if it exists\n        if (wikidata.claims.P18) {\n            const fileName = wikidata.claims.P18[0].mainsnak.datavalue.value;\n            wikidataProps.image = await this.getCommonsThumbURL(fileName, 400);\n            wikidataProps.avatar = await this.getCommonsThumbURL(fileName, 100);\n        }\n        const siteLinkName = this.getSiteLinkName(language);\n        if (wikidata.sitelinks[siteLinkName]) {\n            const wikiLang = siteLinkName.match(/^(.*)wiki$/)[1];\n            const wikiTitle = wikidata.sitelinks[siteLinkName].title;\n            if (wikiLang && wikiTitle) {\n                wikidataProps.wikipedia = `https://${wikiLang.replace(\n                    \"_\",\n                    \"-\"\n                )}.wikipedia.org/wiki/${encodeURI(wikiTitle)}`;\n            }\n        }\n        return wikidataProps;\n    }\n\n    getSiteLinkName(language) {\n        if (languageVariantMap[language]) {\n            language = languageVariantMap[language];\n        }\n        return `${language}wiki`;\n    }\n\n    extractValue(wikidata, property, language) {\n        if (!wikidata[property]) {\n            return;\n        }\n        const languageFallback =\n            wikidata[property] && wikidata[property][language]\n                ? language\n                : \"en\";\n        return (\n            wikidata[property][languageFallback] &&\n            wikidata[property][languageFallback].value\n        );\n    }\n\n    queryWikibaseEntities(query, language = \"en\") {\n        const params = {\n            action: \"wbsearchentities\",\n            search: query,\n            format: \"json\",\n            errorformat: \"plaintext\",\n            language,\n            type: \"item\",\n            origin: \"*\",\n        };\n\n        return axios\n            .get(`https://www.wikidata.org/w/api.php`, { params })\n            .then((response) => {\n                const { search } = response && response.data;\n                return search.map((wbentity) => {\n                    if (!wbentity.label) {\n                        return;\n                    }\n                    return {\n                        name: wbentity.label,\n                        description: wbentity.description,\n                        wikidata: wbentity.id,\n                    };\n                });\n            });\n    }\n\n    async getCommonsThumbURL(imageTitle, imageSize) {\n        const { data } = await axios.get(\n            \"https://commons.wikimedia.org/w/api.php\",\n            {\n                params: {\n                    action: \"query\",\n                    titles: `File:${imageTitle}`,\n                    prop: \"imageinfo\",\n                    iiprop: \"url\",\n                    iiurlwidth: imageSize,\n                    format: \"json\",\n                    formatversion: \"2\",\n                },\n            }\n        );\n        const { pages } = data && data.query;\n        if (pages.length \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                server/auth/session.guard.ts\n            \n            guard\n            SessionGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                server/captcha/captcha.service.ts\n            \n            injectable\n            CaptchaService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                server/claim-review-task/claim-review-task.controller.ts\n            \n            controller\n            ClaimReviewController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                server/claim-review-task/claim-review-task.module.ts\n            \n            variable\n            ClaimReviewTaskModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim-review-task/claim-review-task.service.ts\n            \n            injectable\n            ClaimReviewTaskService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                server/claim-review-task/dto/create-claim-review-task.dto.ts\n            \n            class\n            CreateClaimReviewTaskDTO\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                server/claim-review-task/dto/get-tasks.dto.ts\n            \n            class\n            GetTasksDTO\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                server/claim-review-task/dto/update-claim-review-task.dto.ts\n            \n            class\n            UpdateClaimReviewTaskDTO\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/claim-review-task/schemas/claim-review-task.schema.ts\n            \n            class\n            ClaimReviewTask\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                server/claim-review-task/schemas/claim-review-task.schema.ts\n            \n            variable\n            ClaimReviewTaskSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim-review/claim-review.controller.ts\n            \n            controller\n            ClaimReviewController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                server/claim-review/claim-review.module.ts\n            \n            variable\n            ClaimReviewModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim-review/claim-review.service.ts\n            \n            injectable\n            ClaimReviewService\n            \n                23 %\n                (3/13)\n            \n        \n        \n            \n                \n                server/claim-review/dto/create-claim-review.dto.ts\n            \n            class\n            CreateClaimReview\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                server/claim-review/schemas/claim-review.schema.ts\n            \n            class\n            ClaimReview\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                server/claim-review/schemas/claim-review.schema.ts\n            \n            variable\n            ClaimReviewSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim-review/schemas/claim-review.schema.ts\n            \n            variable\n            ClaimReviewSchemaRaw\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim-revision/claim-revision.module.ts\n            \n            variable\n            ClaimRevisionModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim-revision/claim-revision.service.ts\n            \n            injectable\n            ClaimRevisionService\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                server/claim-revision/schema/claim-revision.schema.ts\n            \n            class\n            ClaimRevision\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                server/claim-revision/schema/claim-revision.schema.ts\n            \n            variable\n            ClaimRevisionSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim-revision/schema/claim-revision.schema.ts\n            \n            variable\n            ClaimRevisionSchemaRaw\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim/claim.controller.ts\n            \n            controller\n            ClaimController\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                server/claim/claim.module.ts\n            \n            variable\n            ClaimModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim/claim.service.ts\n            \n            injectable\n            ClaimService\n            \n                26 %\n                (4/15)\n            \n        \n        \n            \n                \n                server/claim/dto/create-claim.dto.ts\n            \n            class\n            CreateClaimDTO\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                server/claim/dto/get-claims.dto.ts\n            \n            class\n            GetClaimsDTO\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                server/claim/dto/update-claim.dto.ts\n            \n            class\n            UpdateClaimDTO\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim/schemas/claim.schema.ts\n            \n            class\n            Claim\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                server/claim/schemas/claim.schema.ts\n            \n            variable\n            ClaimSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim/schemas/claim.schema.ts\n            \n            variable\n            ClaimSchemaRaw\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/command.ts\n            \n            variable\n            runner\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/command.ts\n            \n            variable\n            ServiceRunner\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/decorators/is-public.decorator.ts\n            \n            variable\n            IsPublic\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/email/email.service.ts\n            \n            injectable\n            EmailService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                server/email/email.service.ts\n            \n            variable\n            fs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/email/email.service.ts\n            \n            variable\n            handlebars\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/email/email.service.ts\n            \n            variable\n            nodemailer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/email/email.service.ts\n            \n            variable\n            path\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/filters/not-found.filter.ts\n            \n            class\n            NotFoundFilter\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                server/history/history.controller.ts\n            \n            controller\n            HistoryController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/history/history.module.ts\n            \n            variable\n            HistoryModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/history/history.service.ts\n            \n            injectable\n            HistoryService\n            \n                42 %\n                (3/7)\n            \n        \n        \n            \n                \n                server/history/schema/history.schema.ts\n            \n            class\n            History\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                server/history/schema/history.schema.ts\n            \n            variable\n            HistorySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/home/home.controller.ts\n            \n            controller\n            HomeController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                server/logger.ts\n            \n            class\n            Logger\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                server/main.ts\n            \n            variable\n            cookieParser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/main.ts\n            \n            variable\n            initApp\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/middleware/disable-body-parser.middleware.ts\n            \n            injectable\n            DisableBodyParserMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/middleware/json-body.middleware.ts\n            \n            injectable\n            JsonBodyMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/middleware/language.middleware.ts\n            \n            injectable\n            GetLanguageMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/middleware/logger.middleware.ts\n            \n            injectable\n            LoggerMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                server/ory/ory.controller.ts\n            \n            controller\n            OryController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                server/ory/ory.service.ts\n            \n            injectable\n            OryService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                server/paragraph/paragraph.module.ts\n            \n            variable\n            ParagraphModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/paragraph/paragraph.service.ts\n            \n            injectable\n            ParagraphService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                server/paragraph/schemas/paragraph.schema.ts\n            \n            class\n            Paragraph\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                server/paragraph/schemas/paragraph.schema.ts\n            \n            variable\n            ParagraphSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/paragraph/schemas/paragraph.schema.ts\n            \n            variable\n            ParagraphSchemaRaw\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/parser/parser.service.ts\n            \n            injectable\n            ParserService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                server/parser/parser.service.ts\n            \n            variable\n            md5\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/parser/parser.service.ts\n            \n            variable\n            nlp\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/parser/parser.service.ts\n            \n            variable\n            phdRegex\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/parser/parser.service.ts\n            \n            variable\n            prefixes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/personality/dto/create-personality.dto.ts\n            \n            class\n            CreatePersonality\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                server/personality/dto/get-personalities.dto.ts\n            \n            class\n            GetPersonalities\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                server/personality/personality.controller.ts\n            \n            controller\n            PersonalityController\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                server/personality/personality.module.ts\n            \n            variable\n            PersonalityModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/personality/personality.service.ts\n            \n            injectable\n            PersonalityService\n            \n                17 %\n                (3/17)\n            \n        \n        \n            \n                \n                server/personality/schemas/personality.schema.ts\n            \n            class\n            Personality\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                server/personality/schemas/personality.schema.ts\n            \n            variable\n            PersonalitySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/personality/schemas/personality.schema.ts\n            \n            variable\n            PersonalitySchemaRaw\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/report/report.controller.ts\n            \n            controller\n            ReportController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/report/report.module.ts\n            \n            variable\n            ReportModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/report/report.service.ts\n            \n            injectable\n            ReportService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                server/report/schemas/report.schema.ts\n            \n            class\n            Report\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                server/report/schemas/report.schema.ts\n            \n            variable\n            ReportSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/report/schemas/report.schema.ts\n            \n            variable\n            ReportSchemaRaw\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/root/root.controller.ts\n            \n            controller\n            RootController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                server/seed.ts\n            \n            variable\n            initApp\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/sentence/schemas/sentence.schema.ts\n            \n            class\n            Sentence\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                server/sentence/schemas/sentence.schema.ts\n            \n            variable\n            SentenceSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/sentence/schemas/sentence.schema.ts\n            \n            variable\n            SentenceSchemaRaw\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/sentence/sentence.module.ts\n            \n            variable\n            SentenceModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/sentence/sentence.service.ts\n            \n            injectable\n            SentenceService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                server/server.ts\n            \n            variable\n            ServiceRunner\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/sitemap/sitemap.controller.ts\n            \n            controller\n            SitemapController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                server/sitemap/sitemap.service.ts\n            \n            injectable\n            SitemapService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                server/sitemap/sitemap.service.ts\n            \n            variable\n            axios\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/source/schemas/source.schema.ts\n            \n            class\n            Source\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                server/source/schemas/source.schema.ts\n            \n            variable\n            SourceSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/source/source.controller.ts\n            \n            controller\n            SourceController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/source/source.module.ts\n            \n            variable\n            SourceModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/source/source.service.ts\n            \n            injectable\n            SourceService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                server/speech/schemas/speech.schema.ts\n            \n            class\n            Speech\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                server/speech/schemas/speech.schema.ts\n            \n            variable\n            SpeechSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/speech/schemas/speech.schema.ts\n            \n            variable\n            SpeechSchemaRaw\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/speech/speech.module.ts\n            \n            variable\n            SpeechModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/speech/speech.service.ts\n            \n            injectable\n            SpeechService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                server/stats/stats.controller.ts\n            \n            controller\n            StatsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/stats/stats.service.ts\n            \n            injectable\n            StatsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                server/tests/mocks/SessionGuardMock.ts\n            \n            variable\n            SessionGuardMock\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/tests/utils/SeedTestUser.ts\n            \n            variable\n            SeedTestUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/tests/utils/TestConfigOptions.ts\n            \n            variable\n            TestConfigOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/tests/utils/UserMock.ts\n            \n            variable\n            UserMock\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/users/schemas/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                server/users/schemas/user.schema.ts\n            \n            interface\n            UserDocument\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/users/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                server/users/users.module.ts\n            \n            variable\n            UserModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                server/util.ts\n            \n            injectable\n            UtilService\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                server/view/view.controller.ts\n            \n            controller\n            ViewController\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                server/view/view.service.ts\n            \n            injectable\n            ViewService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                server/wikidata/schemas/wikidata.schema.ts\n            \n            class\n            WikidataCache\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                server/wikidata/schemas/wikidata.schema.ts\n            \n            variable\n            WikidataCacheSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/wikidata/wikidata.module.ts\n            \n            variable\n            WikidataCacheModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/wikidata/wikidata.service.ts\n            \n            injectable\n            WikidataService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                server/wikidata/wikidata.service.ts\n            \n            variable\n            axios\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/wikidata/wikidata.service.ts\n            \n            variable\n            languageVariantMap\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @ant-design/icons : ^4.6.2\n        \n            @ant-design/icons-svg : ^4.1.0\n        \n            @babel/polyfill : ^7.12.1\n        \n            @compodoc/compodoc : ^1.1.18\n        \n            @dhaiwat10/react-link-preview : ^1.9.1\n        \n            @nestjs/axios : ^0.0.1\n        \n            @nestjs/common : ^8.0.6\n        \n            @nestjs/config : ^1.0.1\n        \n            @nestjs/core : ^8.0.6\n        \n            @nestjs/mapped-types : ^1.0.1\n        \n            @nestjs/mongoose : ^8.0.0\n        \n            @nestjs/platform-express : ^8.0.6\n        \n            @nestjs/throttler : ^2.0.0\n        \n            @ory/cli : ^0.1.24\n        \n            @ory/client : 0.0.1-alpha.153\n        \n            @ory/integrations : ^0.2.5\n        \n            @types/jest : ^27.4.0\n        \n            @typescript-eslint/eslint-plugin : ^4.29.0\n        \n            @xstate/react : ^3.0.0\n        \n            accept-language-parser : ^1.5.0\n        \n            antd : ^4.18.5\n        \n            axios : ^0.21.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            compromise : ^13.11.4\n        \n            compromise-paragraphs : ^0.0.5\n        \n            compromise-sentences : ^0.3.0\n        \n            cookie-parser : ^1.4.5\n        \n            country-flag-icons : ^1.5.5\n        \n            domino : ^2.1.6\n        \n            draft-js : ^0.11.7\n        \n            draft-js-export-html : ^1.4.1\n        \n            draft-js-import-html : ^1.4.1\n        \n            express : ^4.17.1\n        \n            express-session : ^1.17.2\n        \n            handlebars : ^4.7.7\n        \n            i18next : ^21.6.10\n        \n            md5 : ^2.3.0\n        \n            mongoose : ^  5.13.5\n        \n            mongoose-softdelete-typescript : ^0.0.3\n        \n            next : ^12.1.0\n        \n            next-i18next : ^10.2.0\n        \n            next-plugin-antd-less : ^1.8.0\n        \n            next-seo : ^5.4.0\n        \n            nodemailer : ^6.7.0\n        \n            react : ^17.0.2\n        \n            react-cookie-consent : ^6.4.1\n        \n            react-countdown : ^2.3.2\n        \n            react-dom : ^17.0.2\n        \n            react-google-recaptcha : ^2.1.0\n        \n            react-hook-form : ^7.31.2\n        \n            react-is : ^17.0.2\n        \n            react-markdown : ^8.0.0\n        \n            react-redux : ^7.2.4\n        \n            react-share : ^4.4.0\n        \n            react-social-icons : ^5.5.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rehype-raw : ^6.1.1\n        \n            rxjs : ^7.3.0\n        \n            service-runner : ^2.8.4\n        \n            set-cookie-parser : ^2.4.8\n        \n            sitemap : 5\n        \n            slugify : ^1.6.1\n        \n            styled-components : ^5.3.0\n        \n            xstate : ^4.32.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ClassificationEnum   (server/.../report.schema.ts)\n                        \n                        \n                            ContentModelEnum   (server/.../claim-revision.schema.ts)\n                        \n                        \n                            HistoryType   (server/.../history.schema.ts)\n                        \n                        \n                            SourceTargetModel   (server/.../source.schema.ts)\n                        \n                        \n                            TargetModel   (server/.../history.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    server/report/schemas/report.schema.ts\n    \n        \n            \n                \n                    \n                        \n                        ClassificationEnum\n                    \n                \n                        \n                            \n                                 not-fact\n                            \n                        \n                        \n                            \n                                 true\n                            \n                        \n                        \n                            \n                                 true-but\n                            \n                        \n                        \n                            \n                                 arguable\n                            \n                        \n                        \n                            \n                                 misleading\n                            \n                        \n                        \n                            \n                                 false\n                            \n                        \n                        \n                            \n                                 unsustainable\n                            \n                        \n                        \n                            \n                                 exaggerated\n                            \n                        \n                        \n                            \n                                 unverifiable\n                            \n                        \n            \n        \n\n    server/claim-revision/schema/claim-revision.schema.ts\n    \n        \n            \n                \n                    \n                        \n                        ContentModelEnum\n                    \n                \n                        \n                            \n                                 Speech\n                            \n                        \n                        \n                            \n                                Value : Speech\n                            \n                        \n                        \n                            \n                                 Twitter\n                            \n                        \n                        \n                            \n                                Value : Twitter\n                            \n                        \n            \n        \n\n    server/history/schema/history.schema.ts\n    \n        \n            \n                \n                    \n                        \n                        HistoryType\n                    \n                \n                        \n                            \n                                 Create\n                            \n                        \n                        \n                            \n                                Value : create\n                            \n                        \n                        \n                            \n                                 Update\n                            \n                        \n                        \n                            \n                                Value : update\n                            \n                        \n                        \n                            \n                                 Delete\n                            \n                        \n                        \n                            \n                                Value : delete\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        TargetModel\n                    \n                \n                        \n                            \n                                 Claim\n                            \n                        \n                        \n                            \n                                Value : Claim\n                            \n                        \n                        \n                            \n                                 Personality\n                            \n                        \n                        \n                            \n                                Value : Personality\n                            \n                        \n                        \n                            \n                                 ClaimReview\n                            \n                        \n                        \n                            \n                                Value : ClaimReview\n                            \n                        \n            \n        \n\n    server/source/schemas/source.schema.ts\n    \n        \n            \n                \n                    \n                        \n                        SourceTargetModel\n                    \n                \n                        \n                            \n                                 Claim\n                            \n                        \n                        \n                            \n                                Value : Claim\n                            \n                        \n                        \n                            \n                                 ClaimReview\n                            \n                        \n                        \n                            \n                                Value : ClaimReview\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nAletheia\n\nPlataforma de análise de discursos de personalidades públicas e combate a Fake News.\n\nInstalação\n\nFork this repo and clone it locally:git clone https://github.com//aletheia\ncd aletheia\nStartup Mongo DB via Docker:docker-compose up -d\nInstall packages:yarn install\nTo run in dev modeyarn dev\nAccess http://localhost:3000 in your browser.\n\nDevelopment DB\n\nRun seeder:\nyarn seedBuild to production\n\nThe build step should be run as follow:\nyarn buildConfiguring Ory\n\n\nTaking What You Need:\n\nCreate an account and a project on https://console.ory.sh/login.\nCopy the SDK Configuration url and save it.\nScroll down in the same page and create a Personal Access Tokens, copy the acess token that gonna show up on the bottom of your screen and save it.\nGo to Identity Schema and click on Customize Identity Schema then change the actual schema to the code below and click Update after the change:{\n\"$id\": \"https://schemas.ory.sh/presets/kratos/identity.email.schema.json\",\n\"title\": \"Person\",\n\"type\": \"object\",\n\"properties\": {\n  \"traits\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"email\": {\n        \"type\": \"string\",\n        \"format\": \"email\",\n        \"title\": \"E-Mail\",\n        \"ory.sh/kratos\": {\n          \"credentials\": {\n            \"password\": {\n              \"identifier\": true\n            },\n            \"webauthn\": {\n              \"identifier\": true\n            },\n            \"totp\": {\n              \"account_name\": true\n            }\n          },\n          \"recovery\": {\n            \"via\": \"email\"\n          },\n          \"verification\": {\n            \"via\": \"email\"\n          }\n        },\n        \"maxLength\": 320\n      },\n      \"user_id\": {\n        \"type\": \"string\"\n      }\n    },\n    \"required\": [\n      \"email\",\n      \"user_id\"\n    ],\n    \"additionalProperties\": false\n  }\n}\n}\nGo to SDK Configuration url that you saved and add /schemas in the end of the url then copy the first id on the page and save it.\n\nMaking The Changes On Your Code:\n\nFirst you gonna have to change the authentication_type:  to ory on your config.yaml and config.seed.yaml.\nNow take SDK Configuration url and paste on url:  in both pages config.yaml, config.seed.yaml and on ORY_SDK_URL= in your .env too. \nNow Paste the acess token that you saved on access_token:  in your config.yaml and congig.seed.yaml.\nDo the same as above but now with the id that you saved and paste it on schema_id: .\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\n                GNU GENERAL PUBLIC LICENSE\n                   Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n                        Preamble  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n                   TERMS AND CONDITIONS\nDefinitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\nSource Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n  The Corresponding Source for a work in source code form is that\nsame work.\n\nBasic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\nProtecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\nConveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\nConveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\na) The work must carry prominent notices stating that you modified\nit, and giving a relevant date.\n\nb) The work must carry prominent notices stating that it is\nreleased under this License and any conditions added under section\n7.  This requirement modifies the requirement in section 4 to\n\"keep intact all notices\".\n\nc) You must license the entire work, as a whole, under this\nLicense to anyone who comes into possession of a copy.  This\nLicense will therefore apply, along with any applicable section 7\nadditional terms, to the whole of the work, and all its parts,\nregardless of how they are packaged.  This License gives no\npermission to license the work in any other way, but it does not\ninvalidate such permission if you have separately received it.\n\nd) If the work has interactive user interfaces, each must display\nAppropriate Legal Notices; however, if the Program has interactive\ninterfaces that do not display Appropriate Legal Notices, your\nwork need not make them do so.  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\nConveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\na) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by the\nCorresponding Source fixed on a durable physical medium\ncustomarily used for software interchange.\n\nb) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by a\nwritten offer, valid for at least three years and valid for as\nlong as you offer spare parts or customer support for that product\nmodel, to give anyone who possesses the object code either (1) a\ncopy of the Corresponding Source for all the software in the\nproduct that is covered by this License, on a durable physical\nmedium customarily used for software interchange, for a price no\nmore than your reasonable cost of physically performing this\nconveying of source, or (2) access to copy the\nCorresponding Source from a network server at no charge.\n\nc) Convey individual copies of the object code with a copy of the\nwritten offer to provide the Corresponding Source.  This\nalternative is allowed only occasionally and noncommercially, and\nonly if you received the object code with such an offer, in accord\nwith subsection 6b.\n\nd) Convey the object code by offering access from a designated\nplace (gratis or for a charge), and offer equivalent access to the\nCorresponding Source in the same way through the same place at no\nfurther charge.  You need not require recipients to copy the\nCorresponding Source along with the object code.  If the place to\ncopy the object code is a network server, the Corresponding Source\nmay be on a different server (operated by you or a third party)\nthat supports equivalent copying facilities, provided you maintain\nclear directions next to the object code saying where to find the\nCorresponding Source.  Regardless of what server hosts the\nCorresponding Source, you remain obligated to ensure that it is\navailable for as long as needed to satisfy these requirements.\n\ne) Convey the object code using peer-to-peer transmission, provided\nyou inform other peers where the object code and Corresponding\nSource of the work are being offered to the general public at no\ncharge under subsection 6d.  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\nAdditional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\na) Disclaiming warranty or limiting liability differently from the\nterms of sections 15 and 16 of this License; or\n\nb) Requiring preservation of specified reasonable legal notices or\nauthor attributions in that material or in the Appropriate Legal\nNotices displayed by works containing it; or\n\nc) Prohibiting misrepresentation of the origin of that material, or\nrequiring that modified versions of such material be marked in\nreasonable ways as different from the original version; or\n\nd) Limiting the use for publicity purposes of names of licensors or\nauthors of the material; or\n\ne) Declining to grant rights under trademark law for use of some\ntrade names, trademarks, or service marks; or\n\nf) Requiring indemnification of licensors and authors of that\nmaterial by anyone who conveys the material (or modified versions of\nit) with contractual assumptions of liability to the recipient, for\nany liability that these contractual assumptions directly impose on\nthose licensors and authors.  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\nTermination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\nAcceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\nAutomatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\nPatents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\nNo Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\nUse with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\nRevised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\nDisclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\nLimitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\nInterpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n                 END OF TERMS AND CONDITIONS\n\n        How to Apply These Terms to Your New Programs  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\nCopyright (C)   \n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see .Also add information on how to contact you by electronic and paper mail.\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n  Copyright (C)   \nThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.The hypothetical commands show w' and show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\nhttps://www.gnu.org/licenses/.\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\nhttps://www.gnu.org/licenses/why-not-lgpl.html.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CaptchaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ClaimModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ClaimReviewModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ClaimReviewTaskModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ClaimRevisionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HistoryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HomeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ParagraphModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ParserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PersonalityModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ReportModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SentenceModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SitemapModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SourceModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SpeechModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StatsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ViewModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        WikidataModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CaptchaModule\n\n\n\ncluster_CaptchaModule_exports\n\n\n\ncluster_CaptchaModule_providers\n\n\n\ncluster_ClaimModule\n\n\n\ncluster_ClaimModule_imports\n\n\n\ncluster_ClaimModule_exports\n\n\n\ncluster_ClaimModule_providers\n\n\n\ncluster_ClaimReviewModule\n\n\n\ncluster_ClaimReviewModule_exports\n\n\n\ncluster_ClaimReviewModule_providers\n\n\n\ncluster_ClaimReviewTaskModule\n\n\n\ncluster_ClaimReviewTaskModule_imports\n\n\n\ncluster_ClaimReviewTaskModule_exports\n\n\n\ncluster_ClaimReviewTaskModule_providers\n\n\n\ncluster_ClaimRevisionModule\n\n\n\ncluster_ClaimRevisionModule_imports\n\n\n\ncluster_ClaimRevisionModule_exports\n\n\n\ncluster_ClaimRevisionModule_providers\n\n\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_HistoryModule\n\n\n\ncluster_HistoryModule_exports\n\n\n\ncluster_HistoryModule_providers\n\n\n\ncluster_HomeModule\n\n\n\ncluster_HomeModule_imports\n\n\n\ncluster_OryModule\n\n\n\ncluster_OryModule_exports\n\n\n\ncluster_OryModule_providers\n\n\n\ncluster_ParagraphModule\n\n\n\ncluster_ParagraphModule_exports\n\n\n\ncluster_ParagraphModule_providers\n\n\n\ncluster_ParserModule\n\n\n\ncluster_ParserModule_imports\n\n\n\ncluster_ParserModule_exports\n\n\n\ncluster_ParserModule_providers\n\n\n\ncluster_PersonalityModule\n\n\n\ncluster_PersonalityModule_imports\n\n\n\ncluster_PersonalityModule_exports\n\n\n\ncluster_PersonalityModule_providers\n\n\n\ncluster_ReportModule\n\n\n\ncluster_ReportModule_exports\n\n\n\ncluster_ReportModule_providers\n\n\n\ncluster_SentenceModule\n\n\n\ncluster_SentenceModule_exports\n\n\n\ncluster_SentenceModule_providers\n\n\n\ncluster_SitemapModule\n\n\n\ncluster_SitemapModule_exports\n\n\n\ncluster_SitemapModule_providers\n\n\n\ncluster_SourceModule\n\n\n\ncluster_SourceModule_exports\n\n\n\ncluster_SourceModule_providers\n\n\n\ncluster_SpeechModule\n\n\n\ncluster_SpeechModule_exports\n\n\n\ncluster_SpeechModule_providers\n\n\n\ncluster_StatsModule\n\n\n\ncluster_StatsModule_exports\n\n\n\ncluster_StatsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_ViewModule\n\n\n\ncluster_ViewModule_exports\n\n\n\ncluster_ViewModule_providers\n\n\n\ncluster_WikidataModule\n\n\n\ncluster_WikidataModule_exports\n\n\n\ncluster_WikidataModule_providers\n\n\n\n\nCaptchaService \n\nCaptchaService \n\n\n\nCaptchaModule\n\nCaptchaModule\n\nCaptchaService  -->\n\nCaptchaModule->CaptchaService \n\n\n\n\n\nClaimReviewTaskModule\n\nClaimReviewTaskModule\n\nClaimReviewTaskModule -->\n\nCaptchaModule->ClaimReviewTaskModule\n\n\n\n\n\nClaimModule\n\nClaimModule\n\nClaimModule -->\n\nCaptchaModule->ClaimModule\n\n\n\n\n\nCaptchaService\n\nCaptchaService\n\nCaptchaModule -->\n\nCaptchaService->CaptchaModule\n\n\n\n\n\nClaimReviewModule\n\nClaimReviewModule\n\nClaimReviewTaskModule -->\n\nClaimReviewModule->ClaimReviewTaskModule\n\n\n\n\n\nPersonalityModule\n\nPersonalityModule\n\nPersonalityModule -->\n\nClaimReviewModule->PersonalityModule\n\n\n\nClaimModule -->\n\nClaimReviewModule->ClaimModule\n\n\n\n\n\nClaimReviewService \n\nClaimReviewService \n\nClaimReviewService  -->\n\nClaimReviewModule->ClaimReviewService \n\n\n\n\n\nStatsModule\n\nStatsModule\n\nStatsModule -->\n\nClaimReviewModule->StatsModule\n\n\n\n\n\nSitemapModule\n\nSitemapModule\n\nSitemapModule -->\n\nClaimReviewModule->SitemapModule\n\n\n\nClaimModule -->\n\nClaimReviewTaskModule->ClaimModule\n\n\n\n\n\nClaimReviewTaskService \n\nClaimReviewTaskService \n\nClaimReviewTaskService  -->\n\nClaimReviewTaskModule->ClaimReviewTaskService \n\n\n\n\n\nClaimRevisionModule\n\nClaimRevisionModule\n\nPersonalityModule -->\n\nClaimRevisionModule->PersonalityModule\n\n\n\nClaimModule -->\n\nClaimRevisionModule->ClaimModule\n\n\n\n\n\nClaimRevisionService \n\nClaimRevisionService \n\nClaimRevisionService  -->\n\nClaimRevisionModule->ClaimRevisionService \n\n\n\n\n\nHistoryModule\n\nHistoryModule\n\nClaimReviewModule -->\n\nHistoryModule->ClaimReviewModule\n\n\n\nPersonalityModule -->\n\nHistoryModule->PersonalityModule\n\n\n\nClaimModule -->\n\nHistoryModule->ClaimModule\n\n\n\n\n\nHistoryService \n\nHistoryService \n\nHistoryService  -->\n\nHistoryModule->HistoryService \n\n\n\n\n\nParserModule\n\nParserModule\n\nClaimRevisionModule -->\n\nParserModule->ClaimRevisionModule\n\n\n\nClaimModule -->\n\nParserModule->ClaimModule\n\n\n\n\n\nParserService \n\nParserService \n\nParserService  -->\n\nParserModule->ParserService \n\n\n\nClaimModule -->\n\nPersonalityModule->ClaimModule\n\n\n\nStatsModule -->\n\nPersonalityModule->StatsModule\n\n\n\n\n\nHomeModule\n\nHomeModule\n\nHomeModule -->\n\nPersonalityModule->HomeModule\n\n\n\n\n\nPersonalityService \n\nPersonalityService \n\nPersonalityService  -->\n\nPersonalityModule->PersonalityService \n\n\n\nSitemapModule -->\n\nPersonalityModule->SitemapModule\n\n\n\n\n\nSourceModule\n\nSourceModule\n\nClaimReviewModule -->\n\nSourceModule->ClaimReviewModule\n\n\n\nClaimRevisionModule -->\n\nSourceModule->ClaimRevisionModule\n\n\n\nClaimModule -->\n\nSourceModule->ClaimModule\n\n\n\n\n\nReportModule\n\nReportModule\n\nReportModule -->\n\nSourceModule->ReportModule\n\n\n\n\n\nSourceService \n\nSourceService \n\nSourceService  -->\n\nSourceModule->SourceService \n\n\n\n\n\nViewModule\n\nViewModule\n\nClaimReviewTaskModule -->\n\nViewModule->ClaimReviewTaskModule\n\n\n\nClaimRevisionModule -->\n\nViewModule->ClaimRevisionModule\n\n\n\nPersonalityModule -->\n\nViewModule->PersonalityModule\n\n\n\nClaimModule -->\n\nViewModule->ClaimModule\n\n\n\nHomeModule -->\n\nViewModule->HomeModule\n\n\n\n\n\nOryModule\n\nOryModule\n\nOryModule -->\n\nViewModule->OryModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nViewModule->UsersModule\n\n\n\n\n\nViewService \n\nViewService \n\nViewService  -->\n\nViewModule->ViewService \n\n\n\n\n\nClaimService \n\nClaimService \n\nClaimService  -->\n\nClaimModule->ClaimService \n\n\n\nStatsModule -->\n\nClaimModule->StatsModule\n\n\n\nSitemapModule -->\n\nClaimModule->SitemapModule\n\n\n\n\n\nClaimService\n\nClaimService\n\nClaimModule -->\n\nClaimService->ClaimModule\n\n\n\n\n\nClaimReviewService\n\nClaimReviewService\n\nClaimReviewModule -->\n\nClaimReviewService->ClaimReviewModule\n\n\n\n\n\nUtilService\n\nUtilService\n\nClaimReviewModule -->\n\nUtilService->ClaimReviewModule\n\n\n\nPersonalityModule -->\n\nUtilService->PersonalityModule\n\n\n\nClaimReviewTaskModule -->\n\nReportModule->ClaimReviewTaskModule\n\n\n\n\n\nReportService \n\nReportService \n\nReportService  -->\n\nReportModule->ReportService \n\n\n\n\n\nClaimReviewTaskService\n\nClaimReviewTaskService\n\nClaimReviewTaskModule -->\n\nClaimReviewTaskService->ClaimReviewTaskModule\n\n\n\n\n\nParagraphModule\n\nParagraphModule\n\nClaimRevisionModule -->\n\nParagraphModule->ClaimRevisionModule\n\n\n\nParserModule -->\n\nParagraphModule->ParserModule\n\n\n\n\n\nParagraphService \n\nParagraphService \n\nParagraphService  -->\n\nParagraphModule->ParagraphService \n\n\n\n\n\nSpeechModule\n\nSpeechModule\n\nClaimRevisionModule -->\n\nSpeechModule->ClaimRevisionModule\n\n\n\nParserModule -->\n\nSpeechModule->ParserModule\n\n\n\n\n\nSpeechService \n\nSpeechService \n\nSpeechService  -->\n\nSpeechModule->SpeechService \n\n\n\n\n\nClaimRevisionService\n\nClaimRevisionService\n\nClaimRevisionModule -->\n\nClaimRevisionService->ClaimRevisionModule\n\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\nHistoryService\n\nHistoryService\n\nHistoryModule -->\n\nHistoryService->HistoryModule\n\n\n\nHomeModule -->\n\nStatsModule->HomeModule\n\n\n\n\n\nStatsService \n\nStatsService \n\nStatsService  -->\n\nStatsModule->StatsService \n\n\n\n\n\nOryService \n\nOryService \n\nOryService  -->\n\nOryModule->OryService \n\n\n\nUsersModule -->\n\nOryModule->UsersModule\n\n\n\n\n\nOryService\n\nOryService\n\nOryModule -->\n\nOryService->OryModule\n\n\n\n\n\nParagraphService\n\nParagraphService\n\nParagraphModule -->\n\nParagraphService->ParagraphModule\n\n\n\n\n\nSentenceModule\n\nSentenceModule\n\nParserModule -->\n\nSentenceModule->ParserModule\n\n\n\n\n\nSentenceService \n\nSentenceService \n\nSentenceService  -->\n\nSentenceModule->SentenceService \n\n\n\n\n\nParserService\n\nParserService\n\nParserModule -->\n\nParserService->ParserModule\n\n\n\n\n\nWikidataModule\n\nWikidataModule\n\nPersonalityModule -->\n\nWikidataModule->PersonalityModule\n\n\n\n\n\nWikidataService \n\nWikidataService \n\nWikidataService  -->\n\nWikidataModule->WikidataService \n\n\n\n\n\nPersonalityService\n\nPersonalityService\n\nPersonalityModule -->\n\nPersonalityService->PersonalityModule\n\n\n\n\n\nReportService\n\nReportService\n\nReportModule -->\n\nReportService->ReportModule\n\n\n\n\n\nSentenceService\n\nSentenceService\n\nSentenceModule -->\n\nSentenceService->SentenceModule\n\n\n\n\n\nSitemapService \n\nSitemapService \n\nSitemapService  -->\n\nSitemapModule->SitemapService \n\n\n\n\n\nSitemapService\n\nSitemapService\n\nSitemapModule -->\n\nSitemapService->SitemapModule\n\n\n\n\n\nSourceService\n\nSourceService\n\nSourceModule -->\n\nSourceService->SourceModule\n\n\n\n\n\nSpeechService\n\nSpeechService\n\nSpeechModule -->\n\nSpeechService->SpeechModule\n\n\n\n\n\nStatsService\n\nStatsService\n\nStatsModule -->\n\nStatsService->StatsModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nViewService\n\nViewService\n\nViewModule -->\n\nViewService->ViewModule\n\n\n\n\n\nWikidataService\n\nWikidataService\n\nWikidataModule -->\n\nWikidataService->WikidataModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        22 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    14 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    25 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    24 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.2\n        \n            Description : Crowd-sourced fact-checking platform.\n        \n            Keywords : aletheia, REST, API, react, fact-checking\n        \n            License : MIT\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BaseRequest   (server/.../BaseRequest.ts)\n                        \n                        \n                            ClaimDocument   (server/.../claim.schema.ts)\n                        \n                        \n                            ClaimMatchParameters   (server/.../claim.service.ts)\n                        \n                        \n                            ClaimReviewDocument   (server/.../claim-review.schema.ts)\n                        \n                        \n                            ClaimReviewTaskDocument   (server/.../claim-review-task.schema.ts)\n                        \n                        \n                            ClaimRevisionDocument   (server/.../claim-revision.schema.ts)\n                        \n                        \n                            HistoryDocument   (server/.../history.schema.ts)\n                        \n                        \n                            Machine   (server/.../create-claim-review-task.dto.ts)\n                        \n                        \n                            ParagraphDocument   (server/.../paragraph.schema.ts)\n                        \n                        \n                            PersonalityDocument   (server/.../personality.schema.ts)\n                        \n                        \n                            ReportDocument   (server/.../report.schema.ts)\n                        \n                        \n                            ReviewTaskMachineContext   (server/.../create-claim-review-task.dto.ts)\n                        \n                        \n                            SentenceDocument   (server/.../sentence.schema.ts)\n                        \n                        \n                            SourceDocument   (server/.../source.schema.ts)\n                        \n                        \n                            SpeechDocument   (server/.../speech.schema.ts)\n                        \n                        \n                            WikidataCacheDocument   (server/.../wikidata.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    server/types/BaseRequest.ts\n    \n    \n        \n            \n                \n                    \n                    BaseRequest\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    server/claim/schemas/claim.schema.ts\n    \n    \n        \n            \n                \n                    \n                    ClaimDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    server/claim/claim.service.ts\n    \n    \n        \n            \n                \n                    \n                    ClaimMatchParameters\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    server/claim-review/schemas/claim-review.schema.ts\n    \n    \n        \n            \n                \n                    \n                    ClaimReviewDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    server/claim-review-task/schemas/claim-review-task.schema.ts\n    \n    \n        \n            \n                \n                    \n                    ClaimReviewTaskDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    server/claim-revision/schema/claim-revision.schema.ts\n    \n    \n        \n            \n                \n                    \n                    ClaimRevisionDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    server/history/schema/history.schema.ts\n    \n    \n        \n            \n                \n                    \n                    HistoryDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    server/claim-review-task/dto/create-claim-review-task.dto.ts\n    \n    \n        \n            \n                \n                    \n                    Machine\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ReviewTaskMachineContext\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    server/paragraph/schemas/paragraph.schema.ts\n    \n    \n        \n            \n                \n                    \n                    ParagraphDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    server/personality/schemas/personality.schema.ts\n    \n    \n        \n            \n                \n                    \n                    PersonalityDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    server/report/schemas/report.schema.ts\n    \n    \n        \n            \n                \n                    \n                    ReportDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    server/sentence/schemas/sentence.schema.ts\n    \n    \n        \n            \n                \n                    \n                    SentenceDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    server/source/schemas/source.schema.ts\n    \n    \n        \n            \n                \n                    \n                    SourceDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    server/speech/schemas/speech.schema.ts\n    \n    \n        \n            \n                \n                    \n                    SpeechDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    server/wikidata/schemas/wikidata.schema.ts\n    \n    \n        \n            \n                \n                    \n                    WikidataCacheDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            axios   (server/.../sitemap.service.ts)\n                        \n                        \n                            axios   (server/.../wikidata.service.ts)\n                        \n                        \n                            ClaimModel   (server/.../claim.module.ts)\n                        \n                        \n                            ClaimReviewModel   (server/.../claim-review.module.ts)\n                        \n                        \n                            ClaimReviewSchema   (server/.../claim-review.schema.ts)\n                        \n                        \n                            ClaimReviewSchemaRaw   (server/.../claim-review.schema.ts)\n                        \n                        \n                            ClaimReviewTaskModel   (server/.../claim-review-task.module.ts)\n                        \n                        \n                            ClaimReviewTaskSchema   (server/.../claim-review-task.schema.ts)\n                        \n                        \n                            ClaimRevisionModel   (server/.../claim-revision.module.ts)\n                        \n                        \n                            ClaimRevisionSchema   (server/.../claim-revision.schema.ts)\n                        \n                        \n                            ClaimRevisionSchemaRaw   (server/.../claim-revision.schema.ts)\n                        \n                        \n                            ClaimSchema   (server/.../claim.schema.ts)\n                        \n                        \n                            ClaimSchemaRaw   (server/.../claim.schema.ts)\n                        \n                        \n                            cookieParser   (server/.../main.ts)\n                        \n                        \n                            fs   (server/.../email.service.ts)\n                        \n                        \n                            handlebars   (server/.../email.service.ts)\n                        \n                        \n                            HistoryModel   (server/.../history.module.ts)\n                        \n                        \n                            HistorySchema   (server/.../history.schema.ts)\n                        \n                        \n                            initApp   (server/.../main.ts)\n                        \n                        \n                            initApp   (server/.../seed.ts)\n                        \n                        \n                            IsPublic   (server/.../is-public.decorator.ts)\n                        \n                        \n                            languageVariantMap   (server/.../wikidata.service.ts)\n                        \n                        \n                            md5   (server/.../parser.service.ts)\n                        \n                        \n                            nlp   (server/.../parser.service.ts)\n                        \n                        \n                            nodemailer   (server/.../email.service.ts)\n                        \n                        \n                            ParagraphModel   (server/.../paragraph.module.ts)\n                        \n                        \n                            ParagraphSchema   (server/.../paragraph.schema.ts)\n                        \n                        \n                            ParagraphSchemaRaw   (server/.../paragraph.schema.ts)\n                        \n                        \n                            path   (server/.../email.service.ts)\n                        \n                        \n                            PersonalityModel   (server/.../personality.module.ts)\n                        \n                        \n                            PersonalitySchema   (server/.../personality.schema.ts)\n                        \n                        \n                            PersonalitySchemaRaw   (server/.../personality.schema.ts)\n                        \n                        \n                            phdRegex   (server/.../parser.service.ts)\n                        \n                        \n                            prefixes   (server/.../parser.service.ts)\n                        \n                        \n                            ReportModel   (server/.../report.module.ts)\n                        \n                        \n                            ReportSchema   (server/.../report.schema.ts)\n                        \n                        \n                            ReportSchemaRaw   (server/.../report.schema.ts)\n                        \n                        \n                            runner   (server/.../command.ts)\n                        \n                        \n                            SeedTestUser   (server/.../SeedTestUser.ts)\n                        \n                        \n                            SentenceModel   (server/.../sentence.module.ts)\n                        \n                        \n                            SentenceSchema   (server/.../sentence.schema.ts)\n                        \n                        \n                            SentenceSchemaRaw   (server/.../sentence.schema.ts)\n                        \n                        \n                            ServiceRunner   (server/.../command.ts)\n                        \n                        \n                            ServiceRunner   (server/.../server.ts)\n                        \n                        \n                            SessionGuardMock   (server/.../SessionGuardMock.ts)\n                        \n                        \n                            SourceModel   (server/.../source.module.ts)\n                        \n                        \n                            SourceSchema   (server/.../source.schema.ts)\n                        \n                        \n                            SpeechModel   (server/.../speech.module.ts)\n                        \n                        \n                            SpeechSchema   (server/.../speech.schema.ts)\n                        \n                        \n                            SpeechSchemaRaw   (server/.../speech.schema.ts)\n                        \n                        \n                            TestConfigOptions   (server/.../TestConfigOptions.ts)\n                        \n                        \n                            UserMock   (server/.../UserMock.ts)\n                        \n                        \n                            UserModel   (server/.../users.module.ts)\n                        \n                        \n                            UserSchema   (server/.../user.schema.ts)\n                        \n                        \n                            WikidataCacheModel   (server/.../wikidata.module.ts)\n                        \n                        \n                            WikidataCacheSchema   (server/.../wikidata.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    server/sitemap/sitemap.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        axios\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"axios\")\n                    \n                \n\n\n        \n    \n\n    server/wikidata/wikidata.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        axios\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"axios\")\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        languageVariantMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    \"pt-br\": \"pt\",\n}\n                    \n                \n\n\n        \n    \n\n    server/claim/claim.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ClaimModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeature([\n    {\n        name: Claim.name,\n        schema: ClaimSchema,\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/claim-review/claim-review.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ClaimReviewModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeature([\n    {\n        name: ClaimReview.name,\n        schema: ClaimReviewSchema,\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/claim-review/schemas/claim-review.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ClaimReviewSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ClaimReviewSchemaRaw\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ClaimReviewSchemaRaw\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(ClaimReview)\n                    \n                \n\n\n        \n    \n\n    server/claim-review-task/claim-review-task.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ClaimReviewTaskModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeature([\n    {\n        name: ClaimReviewTask.name,\n        schema: ClaimReviewTaskSchema,\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/claim-review-task/schemas/claim-review-task.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ClaimReviewTaskSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(ClaimReviewTask)\n                    \n                \n\n\n        \n    \n\n    server/claim-revision/claim-revision.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ClaimRevisionModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeature([\n    {\n        name: ClaimRevision.name,\n        schema: ClaimRevisionSchema,\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/claim-revision/schema/claim-revision.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ClaimRevisionSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ClaimRevisionSchemaRaw\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ClaimRevisionSchemaRaw\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(ClaimRevision)\n                    \n                \n\n\n        \n    \n\n    server/claim/schemas/claim.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ClaimSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ClaimSchemaRaw\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ClaimSchemaRaw\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Claim)\n                    \n                \n\n\n        \n    \n\n    server/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cookieParser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"cookie-parser\")\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initApp\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (options) => {\n    const corsOptions = {\n        origin: options?.config?.cors || \"*\",\n        credentials: true,\n        methods: \"GET,HEAD,PUT,PATCH,POST,DELETE, OPTIONS\",\n        allowedHeaders: [\"accept\", \"x-requested-with\", \"content-type\"],\n    };\n\n    const app = await NestFactory.create(\n        AppModule.register(options),\n        {\n            bodyParser: false,\n            logger: new Logger(options.logger) || undefined,\n            cors: corsOptions,\n        }\n    );\n\n    app.useGlobalPipes(\n        new ValidationPipe({\n            transform: true,\n            transformOptions: {enableImplicitConversion: true},\n            whitelist: true,\n            forbidNonWhitelisted: true,\n        }),\n    )\n\n    app.use(cookieParser());\n    app.useStaticAssets(join(__dirname, \"..\", \"public\"));\n    // app.setGlobalPrefix(\"api\");\n    await app.listen(options.config.port);\n    options.logger.log(\n        \"info\",\n        `${options.name} with PID ${process.pid} listening on ${\n            options.config.interface || \"*\"\n        }:${options.config.port}`\n    );\n    return app;\n}\n                    \n                \n\n\n        \n    \n\n    server/email/email.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        fs\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"fs\")\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handlebars\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"handlebars\")\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nodemailer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"nodemailer\")\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"path\")\n                    \n                \n\n\n        \n    \n\n    server/history/history.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        HistoryModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeature([\n    {\n        name: \"HISTORY_MODEL\",\n        schema: HistorySchema,\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/history/schema/history.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        HistorySchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(History)\n                    \n                \n\n\n        \n    \n\n    server/seed.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        initApp\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (options) => {\n    options.logger.log(\"info\", `Loading AppModule`);\n    const app = await NestFactory.create(\n        AppModule.register(options),\n        {\n            logger: new Logger(options.logger) || undefined\n        }\n    );\n    options.logger.log(\"info\", `AppModule loaded`);\n    const emailService = app.get(EmailService);\n    const configService = app.get(ConfigService);\n    const userService = app.get(UsersService);\n    const utilService = app.get(UtilService);\n    const users = configService.get(\"users\");\n    const disableSMTP = configService.get(\"disable_smtp\");\n\n    const seedSingleUser = async (userData, password) => {\n        return userService.register({ ...userData, password})\n            .then(async (user) => {\n                options.logger.log(\"info\", `${userData.email} seeded`);\n                if (userData.sendAuthDetails && !disableSMTP) {\n                    const emailResponse = await emailService.sendEmail(\n                        userData.email,\n                        \"Bem-vinda(o) a Aletheia\",\n                        \"Você poderá acessar o sistema usando as credenciais abaixo\",\n                        { ...userData, password },\n                        \"./templates/userSeed.html\"\n                    );\n                    options.logger.log(\"info\", emailResponse);\n                    options.logger.log(\"info\", `E-mail sent to ${userData.email}`);\n                }\n                return user;\n            })\n            .catch((e) => {\n                options.logger.log(\"error\", e);\n                options.logger.log(\"info\", `Error while seeding ${userData.email}`);\n                return null;\n            });\n    };\n    // Using await Promise.all to force loop to finish before continuing\n    await Promise.all(\n        users.map(async (userData) => {\n            const password = utilService.generatePassword(userData.isTestUser, userData.password);\n            return seedSingleUser(userData, password);\n        })\n    );\n\n    options.logger.log(\n        \"info\",\n        \"Seed is finished\"\n    );\n    await app.close();\n}\n                    \n                \n\n\n        \n    \n\n    server/decorators/is-public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsPublic\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata('public', true)\n                    \n                \n\n\n        \n    \n\n    server/parser/parser.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        md5\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"md5\")\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nlp\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('compromise')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phdRegex\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /Ph\\.D\\./g\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prefixes\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /(Mr|St|Mrs|Ms|Dr)[.]/g\n                    \n                \n\n\n        \n    \n\n    server/paragraph/paragraph.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ParagraphModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeature([\n    {\n        name: Paragraph.name,\n        schema: ParagraphSchema,\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/paragraph/schemas/paragraph.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ParagraphSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ParagraphSchemaRaw\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ParagraphSchemaRaw\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Paragraph)\n                    \n                \n\n\n        \n    \n\n    server/personality/personality.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PersonalityModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeature([\n    {\n        name: Personality.name,\n        schema: PersonalitySchema,\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/personality/schemas/personality.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PersonalitySchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : PersonalitySchemaRaw\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PersonalitySchemaRaw\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Personality)\n                    \n                \n\n\n        \n    \n\n    server/report/report.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ReportModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeature([\n    {\n        name: Report.name,\n        schema: ReportSchema,\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/report/schemas/report.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ReportSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ReportSchemaRaw\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ReportSchemaRaw\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Report)\n                    \n                \n\n\n        \n    \n\n    server/command.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        runner\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ServiceRunner()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ServiceRunner\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"service-runner\")\n                    \n                \n\n\n        \n    \n\n    server/tests/utils/SeedTestUser.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SeedTestUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (uri) => {\n    const client = await new MongoClient(uri);\n    await client.connect()\n\n    try {\n        return await client\n            .db(\"Aletheia\")\n            .collection(\"users\")\n            .insertOne(UserMock);\n    } finally {\n        await client.close();\n    }\n}\n                    \n                \n\n\n        \n    \n\n    server/sentence/sentence.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SentenceModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeature([\n    {\n        name: Sentence.name,\n        schema: SentenceSchema,\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/sentence/schemas/sentence.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SentenceSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SentenceSchemaRaw\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SentenceSchemaRaw\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Sentence)\n                    \n                \n\n\n        \n    \n\n    server/server.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ServiceRunner\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"service-runner\")\n                    \n                \n\n\n        \n    \n\n    server/tests/mocks/SessionGuardMock.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SessionGuardMock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    canActivate: (context: ExecutionContext) => {\n        const httpContext = context.switchToHttp();\n        const request = httpContext.getRequest();\n        request.user = { _id: UserMock._id };\n        return true\n    }\n}\n                    \n                \n\n\n        \n    \n\n    server/source/source.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SourceModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeature([\n    {\n        name: Source.name,\n        schema: SourceSchema,\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/source/schemas/source.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SourceSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Source)\n                    \n                \n\n\n        \n    \n\n    server/speech/speech.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SpeechModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeature([\n    {\n        name: Speech.name,\n        schema: SpeechSchema,\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/speech/schemas/speech.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SpeechSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SpeechSchemaRaw\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SpeechSchemaRaw\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Speech)\n                    \n                \n\n\n        \n    \n\n    server/tests/utils/TestConfigOptions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TestConfigOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    config:{\n        port: 3000,\n        cors: '*',\n        debug: true,\n        recaptcha_secret: process.env.TEST_RECAPTCHA_SECRET,\n        recaptcha_sitekey: process.env.TEST_RECAPTCHA_SITEKEY,\n        throttle:{\n            ttl: 60\n        },\n        limit: 1000,\n        authentication_type: \"ory\",\n        ory:{\n            url: process.env.ORY_SDK_URL,\n            access_token: process.env.ORY_ACCESS_TOKEN,\n            schema_id: process.env.ALETHEIA_SCHEMA_ID\n        },\n        db: {\n            connection_uri: process.env.CI_MONGODB_URI,\n            options: {\n                useUnifiedTopology: true,\n                useNewUrlParser: true,\n            }\n        },\n        nextjs: {\n            dir: \"../\"\n        }\n    }\n}\n                    \n                \n\n\n        \n    \n\n    server/tests/utils/UserMock.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserMock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    \"_id\": \"62585756d665dc7bf4b14aa3\",\n    \"email\": \"test-e2e@aletheiafact.org\",\n    \"firstPasswordChanged\": true,\n    \"hash\": null,\n    \"name\": \"Test User\",\n    \"oryId\": null,\n    \"salt\": null\n}\n                    \n                \n\n\n        \n    \n\n    server/users/users.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeature([\n    {\n        name: User.name,\n        schema: UserSchema,\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/users/schemas/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n    server/wikidata/wikidata.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        WikidataCacheModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeatureAsync([\n    {\n        name: WikidataCache.name,\n        useFactory: () => {\n            const wikidataCacheSchema = WikidataCacheSchema;\n            wikidataCacheSchema.index(\n                { wikidataId: 1, language: 1 },\n                { unique: true }\n            );\n            wikidataCacheSchema.index(\n                { createdAt: 1 },\n                { expireAfterSeconds: 86400 }\n            );\n            return wikidataCacheSchema;\n        },\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/wikidata/schemas/wikidata.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        WikidataCacheSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(WikidataCache)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}

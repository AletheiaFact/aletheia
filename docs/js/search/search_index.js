var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,0.749,1,2.853]],["body/modules/AppModule.html",[0,1.203,1,4.586,2,1.446,3,0.149,4,0.116,5,0.132,6,4.226,7,0.892,8,5.662,9,3.672,10,5.662,11,0.481,12,4.226,13,0.961,14,0.015,15,0.551,16,0.827,17,2.817,18,0.961,19,6.385,20,0.256,21,0.458,22,2.225,23,0.997,24,3.532,25,3.672,26,3.775,27,4.226,28,3.532,29,3.672,30,2.981,31,2.817,32,3.325,33,3.307,34,2.981,35,1.438,36,1.694,37,2.817,38,3.143,39,3.035,40,3.532,41,3.672,42,4.066,43,4.226,44,2.636,45,2.117,46,2.836,47,2.636,48,3.775,49,4.226,50,3.775,51,4.226,52,5.662,53,5.662,54,3.035,55,4.066,56,4.226,57,4.226,58,4.226,59,5.662,60,3.672,61,3.775,62,4.226,63,3.325,64,2.346,65,3.307,66,3.143,67,3.035,68,0.149,69,0.117,70,2.117,71,3.325,72,3.672,73,3.307,74,3.307,75,4.226,76,0.892,77,1.694,78,4.226,79,3.672,80,3.672,81,4.226,82,3.672,83,4.226,84,4.226,85,4.226,86,4.226,87,3.672,88,4.226,89,1.243,90,1.627,91,4.92,92,5.662,93,0.01,94,0.01]],["title/modules/AuthModule.html",[0,0.749,26,2.649]],["body/modules/AuthModule.html",[0,1.247,2,1.843,3,0.19,4,0.148,5,0.169,14,0.014,20,0.24,21,0.584,24,4.871,25,4.682,26,5.399,68,0.19,69,0.149,77,2.654,90,2.548,93,0.012,94,0.012,95,2.353,96,4.682,97,4.682,98,4.682,99,5.205,100,5.205,101,2.548,102,1.993,103,1.843,104,5.388,105,5.388,106,3.87,107,5.388,108,5.388,109,5.388,110,4.217,111,1.472]],["title/classes/Claim.html",[35,1.009,69,0.11]],["body/classes/Claim.html",[3,0.163,4,0.165,5,0.145,11,0.759,14,0.015,20,0.229,23,1.09,35,1.794,68,0.235,69,0.128,93,0.01,94,0.01,111,2.117,112,1.643,113,3.318,114,0.501,115,1.641,116,5.222,117,2.551,118,4.448,119,0.853,120,4.407,121,1.823,122,3.746,123,3.162,124,3.668,125,4.682,126,4.62,127,4.62,128,1.582,129,2.564,130,4.62,131,3.538,132,2.221,133,2.432,134,1.892,135,3.08,136,3.08,137,3.616,138,3.616,139,2.713,140,2.713,141,3.616,142,2.882,143,4.62,144,3.08,145,4.004,146,3.08,147,4.004,148,0.854,149,4.7,150,4.014,151,4.62,152,4.004,153,3.008,154,4.004,155,2.882,156,4.62,157,2.107,158,4.62,159,3.318]],["title/controllers/ClaimController.html",[160,1.169,161,2.853]],["body/controllers/ClaimController.html",[3,0.065,4,0.051,5,0.058,7,0.642,11,0.774,13,1.548,14,0.015,15,0.888,16,1.332,18,1.548,20,0.219,21,0.2,35,1.671,36,0.741,45,0.926,68,0.065,69,0.051,76,1.389,89,0.544,93,0.005,94,0.005,111,1.356,114,0.2,117,2.011,119,0.694,121,1.761,134,0.862,148,1.08,155,3.923,157,0.843,160,0.895,161,2.185,162,1.606,163,2.318,164,2.643,165,3.042,166,3.042,167,3.634,168,3.042,169,1.691,170,2.041,171,2.028,172,3.042,173,3.042,174,2.185,175,3.042,176,2.643,177,3.042,178,1.898,179,2.643,180,3.661,181,1.849,182,3.515,183,1.125,184,3.042,185,3.465,186,1.849,187,4.904,188,3.042,189,1.849,190,2.151,191,1.849,192,3.679,193,4.176,194,1.849,195,1.849,196,1.849,197,3.762,198,1.849,199,1.849,200,1.606,201,1.849,202,1.849,203,1.606,204,1.849,205,1.849,206,1.849,207,1.849,208,1.849,209,1.849,210,4.234,211,1.849,212,1.849,213,2.584,214,1.849,215,4.053,216,1.849,217,1.849,218,1.849,219,1.849,220,1.849,221,1.606,222,1.849,223,1.849,224,1.849,225,1.849,226,1.849,227,1.606,228,4.234,229,1.849,230,1.849,231,2.185,232,1.041,233,0.883,234,1.328,235,1.447,236,1.233,237,1.851,238,1.086,239,2.151,240,1.606,241,1.606,242,1.606,243,2.783,244,3.368,245,1.153,246,1.026,247,1.233,248,0.926,249,1.153,250,1.086,251,1.941,252,1.328,253,1.941,254,1.328,255,1.447,256,2.643,257,2.643,258,1.849,259,2.041,260,1.849,261,1.849,262,1.6,263,0.773,264,0.964,265,1.849,266,0.565,267,1.606,268,1.606,269,1.602,270,2.512,271,1.606,272,1.606,273,1.606,274,1.606,275,3.902,276,1.606,277,2.953,278,2.953,279,1.849,280,1.849,281,1.849,282,1.606,283,2.579,284,1.026,285,2.574,286,2.028,287,1.96,288,1.233,289,1.849,290,2.584,291,1.849,292,1.849,293,1.849,294,3.368,295,3.834,296,1.849,297,2.185,298,1.898,299,1.898,300,1.606,301,1.447,302,2.584,303,1.849,304,1.447,305,1.606,306,2.643,307,1.606,308,1.849,309,1.606,310,1.849,311,1.086,312,1.606,313,1.688,314,1.233,315,1.086,316,1.849,317,1.849,318,1.849,319,3.042,320,1.849,321,1.606,322,1.849,323,1.849,324,1.606,325,1.849,326,1.849,327,1.849,328,1.849,329,1.606,330,1.849,331,1.849,332,4.491,333,1.849,334,1.849,335,1.447,336,3.902,337,2.381,338,0.565,339,1.606,340,1.849,341,1.233,342,0.741,343,1.849,344,1.606,345,1.849,346,1.849,347,3.042,348,3.875,349,1.849,350,1.606,351,1.606,352,1.086,353,1.849,354,1.849,355,1.328,356,1.849,357,1.849,358,2.643,359,2.643,360,1.849,361,3.31,362,3.31,363,4.313,364,3.033,365,4.491,366,3.225,367,1.849,368,3.033,369,3.31,370,3.097,371,3.31,372,1.153,373,3.31,374,3.042,375,3.042,376,1.849,377,1.849,378,1.606,379,1.849,380,1.849,381,3.875,382,3.875,383,1.849,384,1.849,385,1.233,386,1.849,387,1.606,388,0.926,389,0.883]],["title/modules/ClaimModule.html",[0,0.749,32,2.333]],["body/modules/ClaimModule.html",[0,1.081,2,1.475,3,0.152,4,0.118,5,0.135,14,0.015,15,0.563,20,0.251,21,0.467,22,2.271,23,1.017,30,3.877,31,2.875,32,4.81,34,3.877,35,1.638,36,1.729,37,2.875,38,4.087,39,3.097,44,3.581,45,2.16,46,3.688,47,2.69,63,4.324,64,2.394,65,3.375,66,4.087,67,3.097,68,0.152,69,0.119,77,2.301,89,1.689,90,2.209,93,0.01,94,0.01,95,2.041,101,2.209,102,1.595,103,1.475,132,1.595,148,0.613,159,4.122,161,4.633,239,4.398,240,3.747,245,2.69,390,3.747,391,3.747,392,3.747,393,3.747,394,4.594,395,3.375,396,2.505,397,4.312,398,4.312,399,3.747,400,4.492,401,4.122,402,2.532,403,3.747]],["title/classes/ClaimReview.html",[69,0.11,404,1.897]],["body/classes/ClaimReview.html",[3,0.128,4,0.14,5,0.113,11,0.833,14,0.015,20,0.219,23,0.854,35,1.773,68,0.225,69,0.1,76,0.764,93,0.009,94,0.009,111,2.194,112,1.287,114,0.392,115,1.391,117,2.411,119,0.875,120,2.99,121,2.001,122,3.674,123,3.365,124,3.82,125,4.476,128,1.929,129,3.737,131,3.729,132,1.883,133,1.906,134,1.67,135,2.414,138,2.834,139,2.126,140,2.126,142,2.259,144,2.414,145,3.395,146,2.414,147,3.927,148,0.724,152,2.414,153,1.813,154,2.414,157,1.651,338,2.236,341,3.927,342,2.562,404,2.812,405,3.396,406,4.963,407,2.414,408,4.26,409,4.609,410,5.118,411,4.609,412,3.62,413,3.657,414,2.826,415,4.609,416,3.62,417,2.681,418,3.62,419,3.62,420,3.62,421,3.62,422,3.62,423,3.62,424,2.414,425,2.6,426,2.834,427,2.834,428,2.834,429,4.424,430,4.424,431,4.424,432,4.424,433,4.424,434,4.424,435,1.813,436,2.834,437,3.62,438,1.906,439,2.6,440,3.985,441,3.146,442,3.62,443,3.62,444,2.6]],["title/controllers/ClaimReviewController.html",[160,1.169,445,2.853]],["body/controllers/ClaimReviewController.html",[3,0.142,4,0.111,5,0.126,7,1.159,11,0.761,13,1.522,14,0.015,15,0.873,16,1.31,18,1.522,20,0.231,21,0.437,35,1.394,36,2.808,45,2.022,68,0.142,69,0.112,76,1.413,89,1.188,93,0.01,94,0.01,114,0.437,119,0.459,121,1.705,148,0.952,160,1.188,163,2.29,164,4.77,169,2.396,170,3.285,179,4.77,180,3.507,182,5.24,183,2.03,185,3.344,213,4.463,231,2.899,233,1.928,234,3.943,236,2.691,237,2.979,238,2.37,241,3.508,242,3.508,243,4.48,244,5.421,245,2.518,246,2.241,247,2.691,255,3.159,262,1.769,266,1.233,267,3.508,268,3.508,269,2.891,270,1.952,271,3.508,272,3.508,273,3.508,274,3.508,277,2.022,278,2.022,302,3.66,304,3.159,305,3.508,306,4.77,307,3.508,309,3.508,311,2.37,312,3.508,313,3.047,314,2.691,315,2.37,338,1.233,405,3.194,445,3.943,446,3.508,447,2.518,448,4.037,449,4.037,450,4.037,451,5.401,452,4.037,453,4.037,454,4.037,455,4.037,456,4.037,457,4.037,458,4.037,459,4.037,460,4.037,461,4.037,462,4.037,463,4.037,464,4.037,465,4.037,466,4.037,467,4.037,468,4.037,469,4.037,470,4.037,471,4.037]],["title/modules/ClaimReviewModule.html",[0,0.749,34,2.092]],["body/modules/ClaimReviewModule.html",[0,1.146,2,1.613,3,0.166,4,0.129,5,0.148,14,0.015,15,0.615,20,0.248,21,0.511,22,2.482,23,1.112,34,4.248,35,1.545,36,1.89,38,4.189,39,3.386,44,3.796,45,2.361,66,4.189,67,3.386,68,0.214,69,0.13,77,2.44,89,1.79,90,2.342,93,0.011,94,0.011,95,2.164,101,2.342,102,1.744,103,1.613,132,1.744,148,0.671,237,3.834,238,2.768,245,2.941,396,2.655,400,4.762,402,2.768,404,2.251,405,2.151,444,4.37,445,4.839,472,4.097,473,4.715,474,4.097,475,4.097,476,4.189,477,3.69,478,3.69,479,3.69,480,4.715,481,3.386,482,4.37,483,4.097]],["title/injectables/ClaimReviewService.html",[237,1.897,484,0.749]],["body/injectables/ClaimReviewService.html",[0,0.78,3,0.072,4,0.056,5,0.064,7,0.694,11,0.803,13,1.563,14,0.015,15,0.897,16,1.346,18,1.623,20,0.198,21,0.22,23,0.48,35,1.876,36,2.863,68,0.072,69,0.056,70,1.018,76,1.548,93,0.006,94,0.006,111,0.898,114,0.22,115,0.898,117,1.082,119,0.54,128,0.536,134,0.932,139,1.194,140,1.194,148,0.676,152,1.356,153,3.063,154,1.356,155,3.483,157,0.927,163,2.104,169,1.434,170,2.502,171,2.192,183,1.758,187,4.851,190,1.129,232,1.626,233,1.976,237,1.57,259,2.747,262,1.666,263,1.73,264,2.057,266,1.004,270,1.169,283,2.009,284,1.129,285,2.38,287,2.074,335,1.591,338,1.264,341,3.479,342,1.906,372,3.816,385,3.169,388,2.072,389,0.971,404,1.976,405,3.257,408,4.65,409,1.591,411,3.238,426,1.591,438,3.76,476,2.638,478,1.591,479,1.591,481,3.413,482,2.361,484,0.619,485,0.723,486,1.767,487,3.287,488,4.753,489,3.287,490,4.857,491,3.287,492,3.287,493,3.287,494,3.287,495,3.287,496,3.287,497,2.033,498,3.094,499,3.261,500,3.287,501,3.287,502,2.033,503,2.033,504,3.287,505,3.287,506,3.287,507,4.534,508,3.287,509,2.856,510,4.138,511,4.138,512,3.287,513,3.287,514,3.287,515,2.033,516,4.537,517,2.573,518,2.033,519,1.082,520,1.318,521,3.287,522,2.033,523,3.287,524,2.033,525,3.917,526,4.084,527,3.238,528,2.573,529,2.072,530,3.287,531,2.361,532,2.573,533,1.57,534,2.033,535,2.033,536,1.591,537,2.573,538,2.361,539,1.356,540,1.591,541,1.591,542,3.287,543,2.791,544,1.591,545,2.033,546,2.033,547,3.287,548,2.033,549,3.287,550,3.287,551,2.033,552,3.287,553,2.033,554,3.287,555,2.033,556,3.287,557,4.534,558,2.033,559,3.287,560,1.57,561,1.268,562,1.018,563,1.767,564,1.591,565,1.356,566,1.591,567,2.573,568,2.033,569,5.218,570,4.753,571,4.138,572,3.169,573,2.033,574,2.856,575,3.596,576,2.033,577,1.767,578,2.033,579,2.033,580,2.033,581,2.033,582,2.033,583,2.033,584,1.356,585,1.356,586,3.287,587,2.033,588,1.767,589,1.767,590,2.033,591,1.767,592,2.033,593,2.033,594,2.033,595,4.753,596,1.767,597,2.033,598,2.033,599,3.287,600,3.287,601,2.033,602,2.033,603,1.767,604,2.033,605,2.033,606,2.033,607,2.033,608,3.287,609,2.033,610,2.033,611,1.767,612,2.033,613,2.033,614,2.033,615,2.033,616,2.033,617,2.033,618,2.033,619,2.033,620,2.033,621,2.033,622,2.033,623,1.129]],["title/classes/ClaimRevision.html",[69,0.11,120,2.333]],["body/classes/ClaimRevision.html",[3,0.135,4,0.105,5,0.12,11,0.828,14,0.015,20,0.205,23,0.902,35,1.849,68,0.214,69,0.106,70,1.915,76,0.807,93,0.009,94,0.009,111,2.184,112,1.359,114,0.414,115,1.445,117,2.444,118,4.043,119,0.901,120,3.56,121,1.99,122,3.783,123,3.193,124,3.86,125,4.285,128,1.871,129,3.632,131,3.774,132,1.956,133,2.013,134,1.5,135,2.549,136,4.949,142,2.385,144,2.549,145,3.526,146,2.549,147,3.526,148,0.752,152,2.549,153,2.649,154,2.549,155,3.783,169,1.668,352,4.033,404,1.826,405,3.386,413,3.798,414,2.936,415,4.746,425,2.746,435,1.915,436,2.992,438,2.013,439,2.746,519,1.259,533,3.124,624,2.746,625,3.56,626,4.746,627,3.823,628,3.823,629,3.823,630,3.823,631,3.823,632,3.823,633,3.823,634,2.992,635,3.823,636,3.823,637,3.823,638,4.139,639,3.823,640,3.823,641,3.823,642,3.823,643,2.992,644,3.322,645,3.322,646,2.245,647,4.139,648,3.322,649,3.823,650,2.746]],["title/modules/ClaimRevisionModule.html",[0,0.749,63,2.333]],["body/modules/ClaimRevisionModule.html",[0,1.27,2,1.616,3,0.166,4,0.129,5,0.148,14,0.015,15,0.616,20,0.246,21,0.512,22,2.487,23,1.114,35,1.547,38,4.191,39,3.392,44,3.801,45,2.366,46,3.782,47,2.947,63,4.739,64,2.622,68,0.166,69,0.131,70,2.366,77,2.443,90,2.345,93,0.011,94,0.011,95,2.166,101,2.345,102,1.747,103,1.616,120,3.577,132,1.747,137,3.697,148,0.672,245,2.947,394,4.71,396,2.659,399,4.104,400,4.768,402,2.773,405,2.155,650,4.375,651,4.104,652,4.723,653,4.104,654,4.104,655,5.01,656,3.697,657,4.104,658,4.104,659,4.375,660,4.104,661,4.723,662,4.104,663,4.723,664,4.723,665,4.723]],["title/injectables/ClaimRevisionService.html",[484,0.749,655,2.479]],["body/injectables/ClaimRevisionService.html",[3,0.132,4,0.164,5,0.117,7,1.099,11,0.775,13,1.362,14,0.015,15,0.782,16,1.173,18,1.362,20,0.227,21,0.405,23,0.882,35,1.904,64,3.916,68,0.132,69,0.103,76,1.099,93,0.009,94,0.009,111,1.771,114,0.405,115,1.423,119,0.681,120,4.001,128,0.985,134,1.06,137,2.926,148,0.532,155,4.401,157,1.705,163,1.9,169,2.272,183,1.383,232,2.217,233,2.487,262,2.126,263,2.505,264,2.16,266,1.59,270,1.329,315,2.195,342,2.088,389,1.785,405,3.218,417,2.742,484,0.981,485,1.329,499,4.018,519,1.231,520,1.499,529,1.872,539,3.472,543,3.805,560,3.094,562,1.872,563,3.248,623,2.075,625,3.057,634,2.926,655,3.249,657,3.248,659,3.74,666,3.248,667,4.303,668,5.207,669,3.738,670,4.516,671,5.207,672,5.207,673,3.738,674,3.249,675,4.075,676,5.207,677,3.738,678,4.525,679,2.926,680,3.738,681,4.075,682,3.738,683,3.74,684,3.738,685,2.685,686,3.738,687,3.738,688,3.738,689,4.525,690,3.738,691,3.248,692,3.738,693,4.525,694,3.248,695,2.926,696,4.525,697,3.248,698,3.248,699,2.926,700,3.248,701,2.926,702,3.248,703,3.248,704,3.738,705,5.207,706,3.738,707,3.738,708,2.492,709,1.872,710,2.89,711,3.248,712,3.738]],["title/injectables/ClaimService.html",[239,2.205,484,0.749]],["body/injectables/ClaimService.html",[0,0.995,3,0.064,4,0.05,5,0.057,7,0.63,11,0.769,13,1.486,14,0.015,15,0.868,16,1.303,18,1.598,20,0.2,21,0.196,23,0.426,35,1.991,36,0.724,54,1.297,64,1.003,68,0.064,69,0.05,70,1.495,76,1.536,93,0.008,94,0.005,111,1.527,114,0.196,115,0.816,116,1.414,117,1.614,118,1.99,119,0.6,123,0.951,128,1.004,134,0.846,139,1.061,140,1.061,141,1.414,148,1.019,153,2.644,155,3.892,163,2.352,169,1.932,170,2.941,171,1.99,174,2.143,178,1.862,183,2.16,185,1.425,190,2.458,192,2.581,200,2.593,203,2.593,227,2.593,232,1.515,233,2.667,237,2.667,238,1.061,239,1.656,248,0.905,259,2.581,262,2.091,263,1.594,264,2.251,266,0.911,269,2.78,270,2.367,276,2.593,283,1.468,284,2.117,285,2.02,287,2.139,290,1.204,294,3.848,299,4.153,315,1.061,337,1.414,338,1.612,341,1.99,342,1.529,350,1.57,351,1.57,355,2.143,359,3.848,368,2.336,388,3.033,389,0.863,401,2.739,404,1.425,408,1.204,417,1.571,425,1.297,484,0.562,485,0.642,490,2.143,498,2.941,516,1.297,517,2.336,519,1.255,520,1.529,525,4.037,526,4.571,527,4.132,528,2.336,529,2.218,531,3.18,532,3.466,533,2.341,536,2.336,537,3.466,538,2.143,539,2.952,540,2.336,541,2.336,543,2.6,544,2.336,560,1.425,561,1.127,562,0.905,564,1.414,565,1.204,566,1.414,567,2.336,572,1.204,575,1.57,584,1.204,585,1.204,611,3.313,645,1.57,646,1.752,655,3.485,658,1.57,667,2.739,675,2.336,678,2.593,679,1.414,683,2.143,685,1.297,691,1.57,703,3.848,708,1.204,713,1.414,714,2.984,715,2.984,716,2.984,717,4.587,718,2.984,719,1.57,720,2.984,721,2.984,722,3.848,723,1.806,724,2.984,725,1.806,726,4.428,727,1.806,728,2.984,729,1.806,730,4.428,731,1.806,732,1.806,733,2.984,734,1.806,735,2.336,736,2.593,737,1.806,738,2.984,739,1.806,740,2.984,741,1.806,742,3.813,743,4.902,744,1.806,745,2.984,746,2.984,747,2.593,748,2.984,749,2.143,750,2.593,751,2.593,752,1.806,753,1.57,754,2.336,755,2.336,756,2.984,757,1.57,758,1.57,759,1.806,760,1.806,761,1.806,762,2.984,763,1.57,764,1.806,765,2.143,766,2.143,767,2.336,768,2.336,769,2.143,770,2.336,771,2.143,772,1.806,773,3.813,774,1.806,775,1.806,776,1.806,777,1.806,778,1.806,779,1.806,780,2.984,781,2.984,782,1.806,783,2.984,784,3.313,785,3.813,786,1.806,787,3.813,788,1.57,789,3.813,790,1.806,791,1.806,792,1.806,793,1.806,794,3.813,795,1.806,796,1.806,797,1.806,798,1.57,799,1.806,800,2.984,801,1.806,802,1.57,803,1.297,804,1.806,805,1.414,806,1.57,807,1.806,808,1.806,809,1.806,810,1.806,811,1.806,812,1.806,813,1.806,814,1.806,815,1.57,816,1.806,817,1.57,818,2.984,819,2.984,820,1.806,821,2.984,822,1.806,823,2.984,824,1.806,825,1.806,826,1.806,827,1.806,828,1.806,829,1.806,830,1.806,831,1.806,832,1.806,833,1.57,834,1.806,835,1.806,836,1.806]],["title/classes/CreateClaimDTO.html",[69,0.11,197,2.649]],["body/classes/CreateClaimDTO.html",[3,0.169,4,0.131,5,0.15,11,0.877,14,0.014,20,0.193,68,0.169,69,0.17,93,0.011,94,0.011,112,1.705,114,0.52,115,1.681,117,2.496,119,0.904,121,2.107,128,2.12,135,3.197,197,4.101,314,4.528,352,3.988,385,4.528,435,2.402,625,3.988,626,5.315,837,6.784,838,3.753,839,6.226,840,4.795,841,4.795,842,4.795,843,4.795,844,4.795,845,4.795,846,4.795,847,4.795,848,4.795,849,4.795,850,6.151,851,4.418,852,4.814,853,6.151,854,6.033,855,4.809]],["title/classes/CreateClaimReview.html",[69,0.11,451,2.853]],["body/classes/CreateClaimReview.html",[3,0.157,4,0.122,5,0.14,11,0.875,14,0.014,20,0.218,35,2.052,68,0.157,69,0.162,93,0.01,94,0.01,112,1.588,114,0.484,115,1.605,117,2.448,119,0.875,121,2.102,128,2.098,135,2.977,314,4.375,385,4.375,405,3.549,408,4.375,409,5.136,410,5.702,411,5.136,425,3.207,428,3.494,435,2.236,451,4.218,478,3.494,479,3.494,839,3.88,852,4.596,854,5.456,855,4.854,856,6.761,857,3.88,858,5.872,859,4.465,860,4.465,861,4.465,862,7.243,863,4.465,864,4.465,865,4.465,866,4.465,867,4.465,868,4.465,869,4.465,870,4.465,871,4.465]],["title/classes/CreatePersonality.html",[69,0.11,872,2.853]],["body/classes/CreatePersonality.html",[3,0.175,4,0.136,5,0.155,11,0.87,14,0.014,15,0.9,16,1.497,20,0.155,68,0.175,69,0.174,93,0.011,94,0.011,112,1.765,114,0.538,115,1.719,119,0.87,121,2.09,128,2.106,417,3.311,435,2.487,529,3.457,854,4.922,855,4.905,872,4.517,873,6.751,874,4.314,875,5.998,876,5.998,877,4.602,878,5.998,879,4.965,880,5.465,881,4.965,882,4.314,883,4.965,884,4.965,885,4.965,886,4.965,887,4.965,888,5.465,889,5.68,890,4.965,891,4.965]],["title/modules/EmailModule.html",[0,0.749,50,2.649]],["body/modules/EmailModule.html",[0,1.28,2,1.925,3,0.198,4,0.154,5,0.176,14,0.014,20,0.229,21,0.61,44,4.24,45,2.819,50,5.32,68,0.198,69,0.156,77,2.257,90,2.616,93,0.012,94,0.012,95,2.417,101,2.616,102,2.081,103,1.925,396,2.966,892,4.891,893,4.891,894,4.891,895,5.127,896,5.628,897,5.628]],["title/injectables/EmailService.html",[484,0.749,895,2.479]],["body/injectables/EmailService.html",[3,0.146,4,0.114,5,0.13,7,1.179,11,0.803,13,1.437,14,0.015,15,0.825,16,1.237,17,4.215,18,1.437,20,0.175,21,0.449,45,2.075,68,0.146,69,0.114,76,1.334,93,0.01,94,0.01,114,0.449,115,1.527,119,0.635,128,1.472,148,1.112,163,2.308,183,2.066,232,2.315,243,5.227,262,1.918,263,2.643,264,1.771,266,1.706,270,1.987,338,1.265,484,1.053,485,1.473,519,1.84,520,2.24,710,2.299,895,3.486,898,3.242,899,6.766,900,6.321,901,5.587,902,4.143,903,5.587,904,4.143,905,4.143,906,7.565,907,4.143,908,5.587,909,5.587,910,5.88,911,5.88,912,6.321,913,4.143,914,5.587,915,2.975,916,3.6,917,2.975,918,3.6,919,3.242,920,3.6,921,2.975,922,3.6,923,5.493,924,4.143,925,4.143,926,4.143,927,4.143,928,5.587,929,4.143,930,4.143,931,4.143,932,6.321,933,4.143,934,3.242,935,4.143,936,4.143,937,4.143,938,4.143,939,4.143,940,4.143,941,5.587,942,3.6,943,4.143,944,4.143,945,4.143,946,4.143,947,3.242,948,5.587,949,4.143,950,4.143]],["title/classes/GetClaimsByHashDTO.html",[69,0.11,210,2.853]],["body/classes/GetClaimsByHashDTO.html",[3,0.178,4,0.139,5,0.158,11,0.857,14,0.014,16,1.246,20,0.158,68,0.178,69,0.176,93,0.011,94,0.011,112,1.801,114,0.549,115,1.74,119,0.857,121,2.058,128,2.025,210,4.574,259,4.193,283,2.682,285,3.178,287,3.04,435,2.536,646,4.292,851,4.574,852,4.984,855,4.56,889,4.984,951,6.017,952,4.401,953,3.178,954,3.963,955,5.064,956,5.064,957,3.963,958,5.064,959,3.963,960,5.064,961,5.064,962,5.064,963,4.984,964,5.452,965,3.963,966,4.984]],["title/classes/GetClaimsDTO.html",[69,0.11,215,2.853]],["body/classes/GetClaimsDTO.html",[3,0.182,4,0.142,5,0.162,11,0.862,14,0.014,20,0.162,68,0.182,69,0.178,93,0.011,94,0.011,112,1.841,114,0.561,115,1.765,117,2.317,119,0.862,121,2.072,128,2.036,215,4.638,283,2.709,285,3.21,287,3.071,435,2.594,646,4.326,851,4.638,855,4.823,951,6.051,953,3.21,954,4.053,957,4.053,959,4.053,963,5.054,964,5.508,965,4.053,966,5.054,967,4.5,968,5.178,969,5.178,970,5.178,971,5.178,972,5.178]],["title/classes/GetPersonalities.html",[69,0.11,973,2.853]],["body/classes/GetPersonalities.html",[3,0.175,4,0.136,5,0.155,11,0.869,14,0.014,15,0.9,16,1.419,20,0.155,68,0.175,69,0.174,93,0.011,94,0.011,112,1.762,114,0.537,115,1.716,119,0.869,121,2.089,128,2.014,283,2.655,285,3.146,287,3.01,417,3.307,435,2.482,646,4.258,851,4.511,855,4.668,880,4.306,882,4.306,888,5.458,889,5.398,953,3.146,954,3.878,957,3.878,959,3.878,963,4.916,964,5.398,965,3.878,966,4.916,973,4.511,974,6.748,975,4.306,976,5.993,977,4.955,978,4.955,979,4.955,980,4.955,981,4.955,982,4.955]],["title/classes/History.html",[69,0.11,388,1.99]],["body/classes/History.html",[3,0.147,4,0.115,5,0.131,11,0.83,14,0.015,16,0.819,20,0.199,23,0.987,35,1.613,68,0.25,69,0.116,70,2.096,93,0.01,94,0.01,111,2.18,112,1.488,114,0.453,115,1.537,117,1.852,119,0.912,121,1.995,122,4.238,123,2.961,124,3.922,125,3.509,129,3.122,131,3.736,132,2.08,133,2.203,134,1.595,142,2.61,144,2.789,145,3.75,146,2.789,147,4.529,148,0.595,157,2.898,169,2.454,170,2.961,178,3.509,338,2.315,352,4.162,372,2.61,388,3.182,389,3.486,404,1.998,413,3.005,424,2.789,427,4.402,533,3.244,565,4.236,983,2.789,984,5.317,985,5.624,986,4.184,987,4.184,988,4.887,989,4.887,990,4.184,991,4.184,992,4.184,993,4.184,994,3.275,995,4.184,996,3.275,997,4.184,998,3.636,999,3.005,1000,3.636]],["title/controllers/HistoryController.html",[160,1.169,1001,2.853]],["body/controllers/HistoryController.html",[3,0.171,4,0.133,5,0.152,7,1.309,11,0.553,13,1.105,14,0.015,15,0.634,16,0.951,18,1.105,20,0.194,21,0.527,68,0.171,69,0.134,76,1.309,89,1.43,93,0.011,94,0.011,114,0.527,119,0.553,121,1.328,148,1.058,157,3.117,160,1.825,163,2.167,167,3.599,183,1.797,190,3.444,232,2.122,233,3.438,262,1.759,263,2.032,264,1.541,266,1.484,283,2.863,285,3.284,286,3.24,287,2.707,295,4.908,297,3.49,298,3.032,388,2.434,389,2.963,498,3.599,709,2.434,1001,4.456,1002,4.223,1003,7.607,1004,4.86,1005,4.86,1006,4.86,1007,4.223,1008,4.86,1009,4.86,1010,4.86,1011,4.86,1012,4.86,1013,4.223,1014,4.86,1015,6.834,1016,4.86,1017,4.86,1018,4.223]],["title/modules/HistoryModule.html",[0,0.749,66,2.205]],["body/modules/HistoryModule.html",[0,1.228,2,1.797,3,0.185,4,0.144,5,0.164,14,0.015,15,0.685,20,0.243,21,0.569,22,2.766,23,1.239,44,4.065,45,2.631,66,4.366,68,0.185,69,0.145,77,2.107,89,1.546,90,2.508,93,0.011,94,0.011,95,2.317,101,2.508,102,1.943,103,1.797,132,1.943,148,0.747,396,2.844,402,3.085,498,4.29,999,4.68,1001,4.68,1007,4.565,1019,4.565,1020,4.565,1021,4.565,1022,4.112,1023,4.565,1024,5.254,1025,4.68,1026,4.565,1027,5.254]],["title/injectables/HistoryService.html",[484,0.749,498,2.092]],["body/injectables/HistoryService.html",[3,0.105,4,0.082,5,0.093,7,0.934,11,0.743,13,1.328,14,0.015,15,0.814,16,1.143,18,1.642,20,0.183,21,0.323,23,0.704,35,1.124,68,0.105,69,0.082,76,1.317,93,0.012,94,0.008,111,1.21,114,0.323,115,1.21,117,2.152,119,0.852,128,1.166,134,0.846,148,0.63,153,1.494,157,2.845,163,2.072,169,2.549,170,2.331,183,1.637,213,2.952,232,1.998,233,3.542,262,1.918,263,2.207,264,2.352,266,1.352,269,3.075,283,2.675,285,3.086,287,2.722,288,3.894,329,3.847,338,2.122,344,2.593,352,3.663,388,3.789,389,3.499,417,2.331,484,0.834,485,1.061,498,2.331,519,1.738,520,2.116,525,4.357,529,2.644,533,3.121,539,4.357,543,3.429,560,3.542,561,1.861,562,1.494,572,1.989,584,1.989,585,1.989,667,3.791,679,2.335,683,3.18,685,2.143,803,4.194,984,3.465,994,2.335,996,3.465,1013,3.847,1018,3.847,1023,2.593,1025,3.18,1028,2.593,1029,4.427,1030,4.427,1031,5.278,1032,2.984,1033,4.427,1034,4.427,1035,2.984,1036,3.894,1037,2.984,1038,4.427,1039,7.223,1040,3.465,1041,3.847,1042,4.427,1043,4.427,1044,4.427,1045,4.427,1046,2.984,1047,6.238,1048,6.238,1049,2.984,1050,5.278,1051,4.427,1052,3.847,1053,5.115,1054,4.427,1055,4.427,1056,3.847,1057,3.847,1058,3.847,1059,4.427,1060,2.984,1061,2.984,1062,2.984,1063,2.984,1064,2.984,1065,2.984,1066,2.984,1067,2.593,1068,2.984]],["title/controllers/HomeController.html",[160,1.169,1069,2.853]],["body/controllers/HomeController.html",[3,0.167,4,0.13,5,0.148,7,1.287,11,0.538,13,1.076,14,0.015,15,0.617,16,0.926,18,1.076,20,0.236,21,0.513,68,0.167,69,0.131,89,1.392,93,0.011,94,0.011,111,1.667,114,0.513,119,0.538,121,1.293,148,0.96,160,1.795,163,2.14,167,3.554,180,3.571,185,3.404,192,3.754,193,4.193,248,2.37,249,2.952,250,2.779,251,3.38,252,3.399,253,3.38,254,3.399,262,1.914,266,1.445,270,2.4,277,3.055,278,3.055,283,1.822,285,2.159,287,2.065,355,4.38,361,3.155,362,3.155,364,3.704,369,3.155,370,2.952,371,3.155,373,3.155,447,2.952,953,2.159,1069,4.38,1070,4.112,1071,5.3,1072,4.112,1073,4.112,1074,4.732,1075,3.963,1076,4.732,1077,4.112,1078,4.112,1079,4.38,1080,4.732,1081,4.112,1082,3.704,1083,4.732,1084,4.112,1085,4.112]],["title/modules/HomeModule.html",[0,0.749,48,2.649]],["body/modules/HomeModule.html",[0,1.258,2,1.871,3,0.193,4,0.15,5,0.171,14,0.014,20,0.241,21,0.593,30,4.125,31,3.647,40,4.888,41,4.753,46,3.924,47,3.412,48,5.411,68,0.193,69,0.151,77,2.678,89,1.965,90,2.105,93,0.012,94,0.012,95,2.375,101,2.571,102,2.023,103,1.871,1069,5.179,1086,4.753,1087,4.753,1088,5.47,1089,5.47]],["title/injectables/LocalAuthGuard.html",[484,0.749,1090,2.853]],["body/injectables/LocalAuthGuard.html",[3,0.216,4,0.168,5,0.191,14,0.014,20,0.224,21,0.663,68,0.216,69,0.169,93,0.012,94,0.012,106,4.394,484,1.346,485,2.176,1090,5.129,1091,5.317,1092,5.317,1093,6.118,1094,4.079,1095,6.118]],["title/injectables/LocalSerializer.html",[99,2.649,484,0.749]],["body/injectables/LocalSerializer.html",[3,0.196,4,0.153,5,0.174,11,0.633,13,1.265,14,0.015,15,0.726,16,1.089,20,0.242,21,0.603,23,1.313,68,0.196,69,0.154,93,0.012,94,0.012,99,4.501,119,0.633,134,1.578,262,1.578,266,2.062,277,3.381,278,3.381,338,1.7,424,3.711,484,1.272,485,1.979,560,3.608,562,2.788,1096,4.837,1097,4.356,1098,5.566,1099,4.212,1100,5.284,1101,3.268,1102,4.356,1103,5.566,1104,5.566]],["title/injectables/LocalStrategy.html",[100,2.649,484,0.749]],["body/injectables/LocalStrategy.html",[3,0.192,4,0.15,5,0.171,11,0.621,13,1.241,14,0.015,15,0.712,16,1.068,20,0.245,21,0.591,23,1.287,68,0.192,69,0.151,93,0.012,94,0.012,100,4.448,106,3.92,119,0.621,134,1.547,262,1.547,266,2.037,277,2.734,278,2.734,338,1.667,424,3.639,484,1.257,485,1.941,560,3.584,562,2.734,1094,3.639,1097,4.272,1099,4.162,1100,4.272,1101,3.205,1102,4.272,1105,4.743,1106,5.458,1107,4.272,1108,3.639,1109,5.458,1110,5.458,1111,5.458,1112,4.272,1113,3.639,1114,5.458]],["title/classes/Logger.html",[69,0.11,232,1.359]],["body/classes/Logger.html",[3,0.157,4,0.122,5,0.139,7,1.238,11,0.862,13,1.69,14,0.014,15,0.969,16,1.455,18,1.646,20,0.139,21,0.483,68,0.157,69,0.123,93,0.01,94,0.01,112,1.585,114,0.483,115,1.603,119,0.823,128,2.128,232,2.592,262,1.859,266,1.361,313,3.256,414,4.358,519,1.467,1115,3.873,1116,4.213,1117,6.557,1118,5.866,1119,5.866,1120,5.866,1121,5.866,1122,5.866,1123,5.866,1124,5.866,1125,5.719,1126,4.457,1127,7.239,1128,5.866,1129,6.967,1130,4.457,1131,5.866,1132,4.457,1133,3.201,1134,5.866,1135,4.457,1136,5.866,1137,4.457,1138,4.457,1139,4.457,1140,4.457,1141,4.457,1142,4.457,1143,4.457]],["title/classes/NotFoundFilter.html",[55,2.853,69,0.11]],["body/classes/NotFoundFilter.html",[3,0.182,4,0.142,5,0.162,7,1.363,11,0.589,13,1.177,14,0.014,15,0.676,16,1.014,18,1.177,20,0.202,21,0.561,55,4.638,68,0.182,69,0.143,93,0.011,94,0.011,103,2.209,112,1.841,114,0.561,119,0.589,148,0.919,180,3.234,248,2.594,283,2.486,298,4.029,313,3.584,414,3.584,519,2.126,529,2.594,709,3.525,755,5.767,934,5.508,1116,4.638,1125,3.719,1133,3.719,1144,5.612,1145,4.5,1146,6.458,1147,5.612,1148,6.458,1149,5.612,1150,5.612,1151,6.458,1152,5.612,1153,7.037,1154,6.458,1155,7.368,1156,5.178,1157,5.178,1158,5.178,1159,5.178,1160,5.178,1161,5.178]],["title/modules/ParserModule.html",[0,0.749,394,2.479]],["body/modules/ParserModule.html",[0,1.293,2,1.956,3,0.201,4,0.157,5,0.179,14,0.014,20,0.215,21,0.62,68,0.201,69,0.158,90,2.641,93,0.012,94,0.012,95,2.44,101,2.641,102,2.114,103,1.956,394,4.994,396,2.994,670,5.137,1162,4.968,1163,4.968,1164,4.968,1165,5.717,1166,5.717]],["title/injectables/ParserService.html",[484,0.749,670,2.479]],["body/injectables/ParserService.html",[3,0.124,4,0.096,5,0.11,7,1.051,11,0.826,13,1.316,14,0.015,15,0.755,16,1.133,18,1.513,20,0.11,21,0.38,68,0.124,69,0.097,70,1.758,76,1.459,93,0.009,94,0.009,114,0.628,115,1.361,119,0.809,128,1.66,148,1.125,249,3.108,269,2.623,284,2.765,336,3.05,337,3.899,438,1.848,484,0.939,485,1.248,519,1.156,520,1.407,533,3.01,543,3.4,625,3.701,646,4.175,670,3.108,911,4.329,1167,2.747,1168,5.79,1169,5.79,1170,5.79,1171,6.302,1172,6.302,1173,4.981,1174,4.981,1175,3.51,1176,3.51,1177,4.981,1178,3.51,1179,4.981,1180,3.51,1181,4.981,1182,4.532,1183,4.981,1184,3.51,1185,5.783,1186,4.981,1187,3.51,1188,3.51,1189,3.51,1190,3.578,1191,3.05,1192,2.747,1193,3.05,1194,4.981,1195,3.899,1196,3.05,1197,2.747,1198,3.05,1199,3.51,1200,3.51,1201,3.51,1202,2.747,1203,3.05,1204,2.747,1205,3.05,1206,3.51,1207,3.51,1208,3.51,1209,3.51,1210,3.51,1211,3.51,1212,3.51,1213,3.51,1214,3.51,1215,3.51,1216,5.79,1217,5.79,1218,3.899,1219,3.51,1220,3.51,1221,3.51,1222,3.51,1223,4.981,1224,3.51,1225,3.51,1226,3.51,1227,3.51,1228,3.05,1229,3.51,1230,3.51,1231,3.51,1232,5.79,1233,3.51,1234,3.51,1235,3.51,1236,3.05,1237,3.51,1238,4.981,1239,3.51,1240,3.51,1241,3.51,1242,3.51,1243,3.51,1244,3.51,1245,3.51,1246,3.51,1247,4.981,1248,3.51,1249,4.981,1250,3.51]],["title/classes/Personality.html",[69,0.11,117,1.308]],["body/classes/Personality.html",[3,0.168,4,0.13,5,0.149,11,0.812,14,0.015,15,0.883,20,0.212,23,1.123,35,1.208,68,0.238,69,0.132,93,0.011,94,0.011,111,2.197,112,1.692,114,0.516,115,1.673,117,2.352,118,4.512,119,0.84,121,1.952,124,3.389,125,2.969,128,2.053,129,3.756,131,3.702,132,2.264,133,2.506,134,1.919,138,3.725,139,2.794,140,2.794,142,2.969,144,3.173,145,4.081,146,3.173,148,0.871,152,3.173,153,2.384,154,3.173,529,3.389,674,2.969,877,4.512,1251,3.418,1252,4.759,1253,4.759,1254,4.759,1255,4.759,1256,6.121,1257,4.759,1258,3.725,1259,4.791,1260,4.135,1261,4.759,1262,4.759,1263,3.418]],["title/controllers/PersonalityController.html",[160,1.169,1264,2.853]],["body/controllers/PersonalityController.html",[3,0.094,4,0.073,5,0.084,7,0.86,11,0.799,13,1.597,14,0.015,15,0.916,16,1.375,18,1.597,20,0.21,21,0.29,68,0.094,69,0.074,70,1.338,76,1.323,89,0.786,93,0.007,94,0.007,111,1.51,114,0.29,117,2.267,119,0.713,121,1.92,128,0.704,148,0.892,157,1.219,160,1.199,163,2.49,167,3.814,169,2.155,170,2.6,174,2.926,176,3.54,178,2.542,180,3.672,183,2.043,185,3.501,190,3.301,192,3.9,193,4.307,221,2.321,231,4.501,232,1.394,233,1.276,234,1.919,235,2.091,236,1.781,246,1.483,247,1.781,248,1.338,249,1.667,250,1.569,251,2.473,253,2.473,254,1.919,255,2.091,257,2.321,262,1.4,263,1.117,264,0.847,266,0.816,270,2.229,277,2.473,278,2.473,282,2.321,283,1.568,301,3.188,302,3.683,304,2.091,313,2.261,321,2.321,324,2.321,361,3.683,362,3.683,363,3.54,364,2.091,366,1.919,369,3.683,370,3.446,371,3.683,373,3.683,378,3.54,387,2.321,388,1.338,389,1.276,414,2.261,533,1.276,543,1.569,623,2.261,709,2.04,735,5.259,872,4.501,877,1.781,953,1.219,973,4.501,1197,2.091,1264,2.926,1265,2.321,1266,3.54,1267,4.074,1268,3.54,1269,4.074,1270,2.671,1271,2.671,1272,2.671,1273,2.321,1274,2.671,1275,2.671,1276,2.671,1277,2.671,1278,2.671,1279,4.074,1280,2.671,1281,2.671,1282,2.671,1283,2.671,1284,2.671,1285,2.671,1286,2.671,1287,2.671,1288,2.671,1289,2.671,1290,2.321,1291,2.671,1292,2.671,1293,2.671,1294,2.671,1295,2.671,1296,2.321,1297,2.671,1298,2.671,1299,2.321,1300,2.671,1301,2.671,1302,2.671,1303,2.671,1304,2.671,1305,2.671,1306,2.671,1307,2.671,1308,2.671,1309,2.671,1310,2.671,1311,2.671,1312,2.671,1313,2.321,1314,2.321,1315,2.671,1316,2.671,1317,4.074,1318,2.321,1319,2.321,1320,4.074,1321,4.074,1322,2.671,1323,2.671,1324,2.671,1325,2.671,1326,2.671,1327,2.671,1328,2.671,1329,2.671,1330,2.671,1331,2.671,1332,2.091,1333,2.671,1334,2.671,1335,2.671,1336,2.321,1337,2.321,1338,2.671]],["title/modules/PersonalityModule.html",[0,0.749,30,2.092]],["body/modules/PersonalityModule.html",[0,1.108,2,1.53,3,0.158,4,0.123,5,0.14,14,0.015,15,0.583,20,0.249,21,0.485,22,2.355,23,1.055,28,4.641,29,3.887,30,4.308,34,3.917,35,1.493,36,1.793,37,2.982,46,3.726,47,2.79,63,4.368,64,2.483,65,3.501,66,4.129,67,3.212,68,0.158,69,0.124,77,2.357,89,1.73,90,2.263,93,0.01,94,0.01,95,2.091,101,2.263,102,1.654,103,1.53,117,1.473,132,1.654,148,0.636,232,2.247,251,3.991,396,2.566,402,2.626,476,4.129,481,3.212,1263,4.223,1264,4.717,1299,3.887,1339,3.887,1340,3.887,1341,3.887,1342,3.887,1343,3.501,1344,3.887,1345,4.473,1346,4.223,1347,3.887]],["title/injectables/PersonalityService.html",[251,1.99,484,0.749]],["body/injectables/PersonalityService.html",[0,0.951,3,0.058,4,0.045,5,0.052,7,0.585,11,0.762,13,1.474,14,0.015,15,0.846,16,1.269,17,1.101,18,1.564,20,0.203,21,0.179,23,0.39,35,1.282,36,0.662,54,1.186,68,0.058,69,0.046,70,0.827,76,1.531,93,0.008,94,0.005,103,0.565,111,1.697,114,0.179,115,0.757,116,1.293,117,2.514,118,1.101,119,0.61,128,1.413,134,0.785,139,0.97,140,0.97,148,1.025,153,2.337,163,2.267,169,2.036,170,2.658,171,1.847,174,2.569,178,1.728,183,1.984,185,1.323,190,3.124,192,2.456,232,1.433,233,2.411,237,2,238,0.97,248,0.827,251,1.387,259,1.459,262,1.802,263,2.111,264,2.056,266,0.846,269,2.963,270,2.542,275,3.639,277,0.827,278,0.827,283,2.252,284,0.917,285,2.447,286,2.385,287,2.341,288,1.101,290,1.847,295,2.569,297,1.989,298,1.03,299,3.347,300,1.435,301,1.293,311,0.97,315,0.97,335,2.168,338,1.542,341,2.385,342,2.346,355,1.989,358,2.407,366,3.008,388,3.184,389,0.789,404,1.708,476,2.324,481,3.008,484,0.522,485,0.587,490,1.989,498,2.205,516,1.186,517,2.168,519,1.766,520,2.151,525,3.366,526,3.952,527,3.952,528,2.168,529,1.792,531,3.008,532,3.278,533,0.789,536,2.168,537,3.278,538,1.989,539,2.792,540,2.168,541,2.168,543,2.739,544,2.168,560,1.323,562,0.827,564,1.293,565,1.101,566,1.293,567,2.168,572,1.101,574,1.435,584,1.101,585,1.101,591,3.109,623,1.538,625,2.101,626,2.168,667,2.569,675,2.168,681,2.168,683,1.989,685,1.186,689,1.435,693,3.109,694,1.435,695,1.293,696,2.407,697,2.407,698,1.435,699,1.293,700,1.435,701,1.293,702,1.435,709,1.792,717,2.407,719,1.435,735,4.73,736,1.435,747,2.407,749,3.008,750,2.407,751,2.407,753,1.435,754,2.168,755,2.168,757,1.435,758,1.435,763,1.435,765,3.008,766,2.569,767,2.8,768,2.8,769,2.569,770,2.8,771,2.569,784,3.109,788,1.435,798,1.435,802,1.435,803,1.186,806,1.435,877,3.11,921,2.569,953,3.138,976,3.639,1079,4.658,1081,1.435,1196,1.435,1258,1.293,1266,2.407,1273,2.407,1296,2.407,1318,2.407,1319,1.435,1344,1.435,1346,2.569,1348,1.435,1349,2.77,1350,2.77,1351,2.77,1352,2.77,1353,2.613,1354,1.652,1355,2.77,1356,1.652,1357,1.652,1358,2.77,1359,1.652,1360,4.188,1361,1.652,1362,2.77,1363,1.652,1364,1.652,1365,4.387,1366,2.77,1367,1.652,1368,2.77,1369,1.652,1370,1.652,1371,2.77,1372,1.652,1373,4.665,1374,1.652,1375,2.77,1376,2.77,1377,1.652,1378,2.77,1379,1.652,1380,1.652,1381,1.652,1382,1.652,1383,1.652,1384,1.652,1385,1.652,1386,1.652,1387,2.77,1388,1.652,1389,1.652,1390,1.652,1391,1.652,1392,1.652,1393,1.652,1394,1.652,1395,4.188,1396,1.652,1397,1.435,1398,3.577,1399,1.652,1400,3.577,1401,3.577,1402,1.652,1403,1.435,1404,1.652,1405,3.577,1406,2.407,1407,2.77,1408,1.652,1409,2.77,1410,1.652,1411,1.652,1412,1.435,1413,1.652,1414,1.652,1415,1.652,1416,2.77,1417,1.652,1418,1.101,1419,1.652,1420,1.652,1421,1.186,1422,1.435,1423,1.652,1424,1.652,1425,1.652,1426,1.652,1427,1.652,1428,1.652,1429,1.652,1430,1.652,1431,1.652,1432,1.652,1433,1.652,1434,1.652,1435,1.652,1436,2.77,1437,4.188,1438,1.652,1439,3.577,1440,1.652,1441,1.652,1442,1.652,1443,1.652,1444,1.652,1445,1.652,1446,1.652,1447,2.77,1448,1.652,1449,1.652,1450,1.652,1451,1.652,1452,1.652,1453,1.652,1454,4.188,1455,1.435]],["title/controllers/RootController.html",[42,2.853,160,1.169]],["body/controllers/RootController.html",[3,0.187,4,0.146,5,0.166,7,1.384,11,0.746,13,1.207,14,0.015,15,0.693,16,1.039,18,1.491,20,0.166,21,0.575,42,4.71,68,0.187,69,0.147,76,1.12,89,1.562,93,0.011,94,0.011,114,0.575,121,1.792,128,1.398,148,0.755,160,1.562,185,3.647,193,3.95,338,1.621,447,3.312,934,4.155,1133,3.813,1456,4.613,1457,5.309,1458,7.433,1459,6.558,1460,5.309,1461,5.309,1462,5.699,1463,5.309,1464,5.309,1465,5.309,1466,5.309,1467,5.309,1468,5.309,1469,4.613,1470,4.613,1471,5.309,1472,5.309,1473,5.309,1474,5.309,1475,5.309,1476,5.309,1477,5.309]],["title/guards/SessionGuard.html",[246,2.205,1478,3.11]],["body/guards/SessionGuard.html",[3,0.186,4,0.145,5,0.165,7,1.381,11,0.601,13,1.202,14,0.015,15,0.69,16,1.035,18,1.202,20,0.165,21,0.573,68,0.186,69,0.146,76,1.381,93,0.011,94,0.011,111,1.445,114,0.573,119,0.601,148,1.01,180,2.648,192,2.784,246,3.631,264,1.676,315,3.104,342,2.12,417,3.444,623,2.934,709,2.648,710,2.934,1116,4.698,1125,3.797,1479,5.287,1480,4.594,1481,7.627,1482,6.541,1483,7.422,1484,5.287,1485,4.361,1486,6.541,1487,5.287,1488,5.287,1489,5.287,1490,5.287,1491,6.541,1492,5.287,1493,5.287]],["title/controllers/SitemapController.html",[160,1.169,1494,2.853]],["body/controllers/SitemapController.html",[3,0.175,4,0.136,5,0.156,7,1.329,11,0.716,13,1.432,14,0.015,15,0.821,16,1.233,18,1.432,20,0.216,21,0.539,68,0.175,69,0.137,76,1.05,89,1.464,93,0.011,94,0.011,114,0.539,119,0.716,121,1.721,148,0.708,160,1.853,163,2.426,183,1.84,185,3.578,192,3.316,193,3.835,236,3.317,246,2.761,247,3.317,270,1.769,302,3.317,447,3.103,1469,5.472,1470,5.472,1494,4.522,1495,4.323,1496,5.472,1497,5.472,1498,4.974,1499,4.974,1500,6.297,1501,4.974,1502,4.974,1503,4.974,1504,4.928,1505,4.974,1506,4.974,1507,4.31,1508,4.323,1509,3.893,1510,4.974,1511,4.974,1512,4.974,1513,4.974,1514,4.974,1515,4.974,1516,4.974,1517,4.974,1518,4.974]],["title/modules/SitemapModule.html",[0,0.749,61,2.649]],["body/modules/SitemapModule.html",[0,1.206,2,1.746,3,0.18,4,0.14,5,0.16,14,0.014,20,0.241,21,0.553,30,4.056,31,3.404,32,4.523,33,3.996,34,4.056,35,1.296,36,2.047,37,3.404,61,5.434,68,0.18,69,0.141,77,2.566,89,1.883,90,2.464,93,0.011,94,0.011,95,2.276,101,2.464,102,1.888,103,1.746,396,2.793,1494,5.022,1507,5.064,1508,4.436,1519,4.436,1520,4.436,1521,4.436,1522,5.105,1523,5.105,1524,5.105]],["title/injectables/SitemapService.html",[484,0.749,1507,2.479]],["body/injectables/SitemapService.html",[3,0.129,4,0.101,5,0.115,7,1.084,11,0.731,13,1.348,14,0.015,15,0.774,16,1.161,18,1.168,20,0.212,21,0.397,35,1.305,36,1.471,68,0.129,69,0.101,70,1.837,76,1.252,93,0.011,94,0.009,114,0.397,115,1.404,117,1.953,119,0.417,148,1.088,163,2.223,183,1.9,232,2.198,237,3.438,238,2.154,239,3.997,250,4.49,251,3.512,252,2.634,259,2.705,262,1.988,263,2.48,264,1.88,266,1.569,270,2.406,284,3.292,288,3.426,299,3.206,313,2.036,342,2.06,366,2.634,368,2.871,372,2.288,414,2.852,484,0.968,485,1.304,519,1.208,520,1.471,623,2.036,709,1.837,710,2.036,765,2.634,766,2.634,767,2.871,768,2.871,769,2.634,770,2.871,771,2.634,805,2.871,817,3.187,1079,3.69,1085,3.187,1107,2.871,1332,2.871,1496,4.465,1497,4.465,1504,4.642,1507,3.206,1525,2.871,1526,3.668,1527,3.668,1528,5.138,1529,3.668,1530,5.931,1531,5.138,1532,3.668,1533,5.138,1534,3.668,1535,5.931,1536,3.668,1537,3.187,1538,2.445,1539,2.871,1540,5.138,1541,3.187,1542,3.187,1543,2.871,1544,3.187,1545,3.187,1546,3.187,1547,3.187,1548,3.668,1549,3.668,1550,3.187,1551,3.668,1552,2.871,1553,5.931,1554,3.668,1555,3.668,1556,3.668,1557,3.668,1558,3.668,1559,3.668,1560,3.668,1561,3.668,1562,3.668,1563,3.668,1564,3.187,1565,3.668,1566,3.668,1567,3.668,1568,3.668,1569,3.187,1570,3.668]],["title/classes/Source.html",[4,0.109,69,0.11]],["body/classes/Source.html",[3,0.151,4,0.188,5,0.134,11,0.835,14,0.015,20,0.201,23,1.009,35,1.086,68,0.226,69,0.118,76,0.902,93,0.01,94,0.01,111,2.082,112,1.52,114,0.463,115,1.559,119,0.877,121,2.007,122,3.56,123,3.609,124,3.679,125,4.583,128,2.007,129,3.168,131,3.816,132,2.111,133,2.251,134,1.618,142,2.668,147,4.569,148,0.608,157,2.93,338,2.327,389,3.067,404,2.042,408,4.569,413,3.071,414,3.168,415,5.027,424,2.851,427,4.466,435,2.142,436,4.466,438,2.251,439,3.071,529,3.217,638,4.466,708,4.283,988,4.959,989,4.959,1571,3.071,1572,4.276,1573,4.276,1574,4.276,1575,4.276,1576,4.276,1577,5.707,1578,5.707,1579,4.276,1580,4.276,1581,3.347,1582,4.276,1583,4.276,1584,4.276,1585,4.276,1586,3.071,1587,3.716]],["title/controllers/SourceController.html",[160,1.169,1588,2.853]],["body/controllers/SourceController.html",[3,0.172,4,0.134,5,0.153,7,1.313,11,0.555,13,1.109,14,0.015,15,0.636,16,0.955,18,1.109,20,0.195,21,0.529,68,0.172,69,0.135,76,1.313,89,1.435,93,0.011,94,0.011,114,0.529,119,0.555,121,1.333,148,1.059,157,3.123,160,1.83,163,2.171,167,3.605,183,1.804,190,3.452,213,4.565,232,2.128,233,2.33,262,1.383,263,2.04,264,1.547,283,2.867,285,3.289,286,3.253,287,2.714,295,4.917,297,3.504,298,3.044,385,4.147,499,3.8,709,2.443,1455,4.239,1509,3.818,1588,4.467,1589,4.239,1590,6.219,1591,4.878,1592,7.21,1593,4.878,1594,4.878,1595,4.239,1596,4.878,1597,4.878,1598,4.878,1599,4.878,1600,4.878,1601,4.239,1602,4.878,1603,7.21,1604,4.878]],["title/modules/SourceModule.html",[0,0.749,38,2.205]],["body/modules/SourceModule.html",[0,1.237,2,1.82,3,0.187,4,0.18,5,0.166,14,0.014,15,0.694,20,0.239,21,0.577,22,2.801,23,1.255,38,4.378,68,0.187,69,0.147,77,2.133,89,1.932,90,2.528,93,0.011,94,0.011,95,2.335,101,2.528,102,1.968,103,1.82,132,1.968,148,0.757,396,2.866,402,3.124,499,4.53,1586,4.716,1588,5.116,1595,4.623,1605,4.623,1606,4.623,1607,4.623,1608,4.164,1609,4.623,1610,5.32,1611,4.716,1612,4.623]],["title/injectables/SourceService.html",[484,0.749,499,2.205]],["body/injectables/SourceService.html",[3,0.167,4,0.196,5,0.148,7,1.289,11,0.768,13,1.536,14,0.015,15,0.881,16,1.322,18,1.388,20,0.223,21,0.514,23,1.118,68,0.167,69,0.131,76,1.289,93,0.011,94,0.011,114,0.514,119,0.694,128,1.609,134,1.344,148,0.674,153,2.375,157,3.081,163,2.396,169,2.665,183,2.258,262,1.344,264,2.262,266,1.865,269,2.496,270,1.686,283,2.6,285,3.254,287,3.113,288,4.071,484,1.151,485,1.686,499,3.39,519,1.561,520,1.901,560,3.407,561,2.958,562,2.375,572,3.161,584,3.161,585,3.161,1067,4.12,1581,3.711,1601,5.306,1609,4.12,1611,4.386,1613,4.12,1614,6.107,1615,4.741,1616,4.741,1617,6.107,1618,4.741,1619,4.741,1620,4.741,1621,4.741,1622,4.741,1623,4.741,1624,4.741,1625,4.741,1626,4.741,1627,4.741]],["title/controllers/StatsController.html",[160,1.169,1628,2.853]],["body/controllers/StatsController.html",[3,0.204,4,0.159,5,0.181,7,1.46,11,0.659,14,0.014,18,1.318,20,0.216,21,0.628,68,0.204,69,0.16,76,1.223,89,1.705,93,0.012,94,0.012,114,0.628,121,1.584,160,1.705,262,1.643,266,1.77,447,3.616,1073,5.036,1075,4.342,1077,5.036,1084,5.036,1628,4.968,1629,5.036,1630,5.796,1631,6.655,1632,5.796,1633,5.036,1634,5.796]],["title/modules/StatsModule.html",[0,0.749,40,2.479]],["body/modules/StatsModule.html",[0,1.209,2,1.753,3,0.181,4,0.14,5,0.16,14,0.014,20,0.241,21,0.555,30,4.06,31,3.417,32,4.528,33,4.012,34,4.06,35,1.301,36,2.055,37,3.417,40,5.087,68,0.181,69,0.142,77,2.573,89,1.888,90,2.47,93,0.011,94,0.011,95,2.282,101,2.47,102,1.896,103,1.753,396,2.8,1075,4.769,1628,5.031,1633,4.454,1635,4.454,1636,4.454,1637,5.126,1638,4.454,1639,5.126,1640,5.126]],["title/injectables/StatsService.html",[484,0.749,1075,2.333]],["body/injectables/StatsService.html",[3,0.186,4,0.145,5,0.165,7,1.381,11,0.744,13,1.202,14,0.014,15,0.69,16,1.035,18,1.202,20,0.232,21,0.573,35,1.342,36,2.12,68,0.186,69,0.146,76,1.381,93,0.011,94,0.011,114,0.573,119,0.601,237,3.711,238,3.104,239,4.372,251,3.945,252,3.797,259,2.784,262,2.014,266,1.998,290,3.525,299,3.298,484,1.232,485,1.88,1075,3.841,1079,3.797,1537,4.594,1631,6.45,1641,4.594,1642,5.287,1643,5.287,1644,5.287,1645,5.287,1646,5.287,1647,5.287,1648,5.287,1649,5.287,1650,5.287,1651,5.287]],["title/classes/UpdateClaimDTO.html",[69,0.11,228,2.853]],["body/classes/UpdateClaimDTO.html",[3,0.216,4,0.168,5,0.191,14,0.014,20,0.224,68,0.216,69,0.169,93,0.012,94,0.012,112,2.176,169,2.67,197,4.079,228,5.129,256,5.317,561,3.817,838,4.789,1094,4.079,1652,5.317,1653,6.118,1654,5.317,1655,6.118]],["title/classes/User.html",[69,0.11,338,1.213]],["body/classes/User.html",[3,0.182,4,0.142,5,0.162,11,0.8,14,0.014,15,0.917,20,0.202,23,1.219,68,0.248,69,0.143,71,3.034,93,0.011,94,0.011,111,2.165,112,1.838,114,0.56,115,1.762,119,0.8,121,1.921,124,3.521,128,1.939,129,3.903,131,3.688,132,2.385,133,2.721,134,1.465,148,0.735,338,2.147,342,2.586,417,3.396,519,2.124,674,4.024,1036,4.3,1094,3.445,1101,3.034,1113,4.688,1656,3.711,1657,6.11,1658,5.168,1659,5.168,1660,5.168,1661,4.491,1662,3.445,1663,4.045]],["title/interfaces/UserDocument.html",[71,2.333,1101,2.333]],["body/interfaces/UserDocument.html",[3,0.193,4,0.15,5,0.172,7,1.412,11,0.623,14,0.014,15,0.715,18,1.246,20,0.209,23,1.293,68,0.254,69,0.152,71,3.219,93,0.012,94,0.012,111,2.054,114,0.594,124,3.615,128,1.762,131,3.764,132,2.474,133,2.886,134,1.554,148,0.78,338,2.204,342,2.198,417,2.886,519,1.805,674,3.42,1036,4.459,1094,4.459,1101,3.927,1113,3.655,1656,3.937,1657,4.763,1661,6.531,1662,3.655,1663,4.29,1664,4.763,1665,5.481]],["title/controllers/UsersController.html",[160,1.169,1666,2.853]],["body/controllers/UsersController.html",[3,0.12,4,0.093,5,0.106,7,1.028,11,0.748,13,1.495,14,0.015,15,0.858,16,1.287,18,1.495,20,0.226,21,0.369,68,0.12,69,0.094,76,1.201,89,1.001,93,0.008,94,0.008,102,1.258,111,1.797,114,0.369,119,0.554,121,1.797,134,1.381,148,0.809,160,1.433,163,2.469,167,3.602,180,3.529,183,1.258,185,3.667,192,3.71,193,4.408,232,1.666,234,2.443,235,2.662,236,2.268,246,1.888,247,2.268,248,1.704,249,2.122,250,1.997,253,2.85,254,2.443,262,1.613,263,2.036,264,1.078,266,1.039,270,1.732,277,2.44,278,2.44,283,1.309,302,3.794,315,2.86,338,1.487,339,2.956,361,3.248,362,3.248,369,3.248,370,3.039,371,3.248,373,3.248,414,3.159,516,2.443,538,2.443,623,1.888,709,1.704,710,1.888,711,4.233,1053,2.662,1090,2.443,1268,4.233,1290,2.956,1336,2.956,1397,2.956,1403,2.956,1485,3.248,1545,5.714,1546,4.945,1569,4.233,1666,3.498,1667,2.956,1668,4.233,1669,4.233,1670,3.401,1671,3.401,1672,3.401,1673,3.401,1674,3.401,1675,3.401,1676,3.401,1677,3.401,1678,3.401,1679,3.401,1680,3.401,1681,3.401,1682,3.401,1683,3.401,1684,3.55,1685,2.956,1686,3.401,1687,3.401,1688,3.401,1689,3.401,1690,3.401,1691,3.401,1692,3.401,1693,3.401,1694,3.401,1695,3.401,1696,3.401,1697,3.401,1698,4.233,1699,4.945,1700,4.871,1701,3.401,1702,3.401,1703,3.401,1704,3.401,1705,4.087,1706,3.401,1707,3.401,1708,3.401,1709,3.401,1710,3.401,1711,3.401,1712,3.401,1713,3.401,1714,4.871,1715,3.401,1716,3.401,1717,3.401]],["title/modules/UsersModule.html",[0,0.749,24,2.479]],["body/modules/UsersModule.html",[0,1.188,2,1.705,3,0.176,4,0.137,5,0.156,14,0.015,15,0.65,20,0.24,21,0.54,22,2.624,23,1.176,24,4.954,46,3.835,47,3.11,68,0.176,69,0.138,76,1.052,77,2.528,89,1.855,90,2.427,93,0.011,94,0.011,95,2.242,101,2.427,102,1.843,103,1.705,132,2.332,134,1.413,148,0.897,338,1.522,396,2.751,1099,4.314,1108,3.323,1112,3.901,1113,3.323,1662,4.203,1666,4.967,1684,5.048,1685,4.331,1718,4.331,1719,4.984,1720,4.331,1721,4.331,1722,3.901,1723,4.331,1724,4.984,1725,3.901,1726,4.331,1727,3.901,1728,4.331]],["title/injectables/UsersService.html",[484,0.749,1684,2.479]],["body/injectables/UsersService.html",[3,0.151,4,0.117,5,0.134,7,1.204,9,4.959,11,0.835,13,1.558,14,0.015,15,0.894,16,1.341,18,1.558,20,0.214,21,0.463,23,1.009,68,0.151,69,0.118,76,1.446,93,0.01,94,0.01,111,1.168,114,0.463,115,1.559,119,0.486,134,1.212,148,0.812,163,2.446,171,3.805,183,2.111,232,2.344,262,1.943,263,2.685,264,2.036,266,1.743,270,2.029,277,2.858,278,2.858,338,2.243,342,1.714,484,1.075,485,1.52,519,1.408,520,1.714,557,4.959,560,3.273,562,2.142,643,3.347,749,4.099,1097,3.347,1099,3.56,1101,2.511,1102,3.347,1406,3.716,1485,3.805,1668,4.959,1669,5.955,1684,3.56,1698,5.582,1699,5.582,1705,4.099,1723,3.716,1729,3.716,1730,5.707,1731,5.707,1732,4.276,1733,4.276,1734,5.707,1735,4.276,1736,5.707,1737,4.276,1738,5.707,1739,4.276,1740,4.276,1741,4.276,1742,4.276,1743,4.276,1744,6.423,1745,4.276,1746,4.276,1747,4.276,1748,5.707,1749,5.707,1750,4.276]],["title/injectables/UtilService.html",[476,2.205,484,0.749]],["body/injectables/UtilService.html",[3,0.157,4,0.122,5,0.14,7,1.239,11,0.668,13,1.492,14,0.015,15,0.766,16,1.149,18,1.335,20,0.14,21,0.484,68,0.157,69,0.123,76,1.471,93,0.01,94,0.01,114,0.484,119,0.668,148,1.03,153,2.236,233,2.804,259,3.455,264,1.415,284,2.478,342,2.355,372,2.785,476,3.26,484,1.106,485,1.588,490,3.207,509,5.103,519,1.47,520,1.79,833,3.88,1218,4.596,1421,5.007,1751,3.88,1752,5.872,1753,5.872,1754,5.872,1755,6.972,1756,4.465,1757,6.972,1758,5.872,1759,7.58,1760,4.465,1761,5.872,1762,5.872,1763,5.872,1764,5.872,1765,6.972,1766,6.972,1767,5.872,1768,4.465,1769,5.872,1770,6.562,1771,4.465,1772,5.872,1773,4.465,1774,4.465,1775,4.465,1776,3.88,1777,4.465,1778,4.465,1779,4.465,1780,4.465,1781,4.465,1782,4.465,1783,5.872,1784,4.596,1785,4.465,1786,4.465]],["title/controllers/ViewController.html",[160,1.169,1787,2.853]],["body/controllers/ViewController.html",[3,0.108,4,0.084,5,0.096,7,0.956,11,0.777,13,1.553,14,0.015,15,0.891,16,1.337,18,1.553,20,0.186,21,0.334,68,0.108,69,0.085,89,0.906,93,0.008,94,0.008,111,1.867,114,0.334,119,0.777,121,1.806,148,0.972,160,1.333,163,2.506,167,4.108,180,3.973,185,3.632,192,4.177,193,4.523,248,1.542,249,1.92,250,1.807,253,2.693,270,2.43,277,3.422,278,3.422,283,2.63,361,4.556,362,4.556,369,4.556,370,4.263,373,4.213,447,1.92,1040,3.546,1071,3.937,1072,2.675,1078,2.675,1107,3.546,1149,3.937,1150,4.671,1509,2.409,1541,2.675,1542,4.671,1543,2.409,1544,4.671,1787,3.254,1788,2.675,1789,3.937,1790,4.53,1791,4.53,1792,4.53,1793,4.53,1794,4.53,1795,3.078,1796,3.078,1797,3.078,1798,3.078,1799,3.078,1800,3.078,1801,4.53,1802,3.078,1803,3.078,1804,3.078,1805,3.078,1806,4.53,1807,4.53,1808,4.53,1809,4.53,1810,4.53,1811,4.53,1812,3.078,1813,3.078,1814,3.078,1815,3.078,1816,3.078,1817,3.078,1818,3.078,1819,2.675,1820,6.609,1821,4.53,1822,4.53,1823,3.078,1824,3.078,1825,3.078,1826,3.078,1827,3.078,1828,3.078,1829,3.078,1830,3.078,1831,3.078,1832,3.078,1833,3.078,1834,3.078]],["title/modules/ViewModule.html",[0,0.749,46,1.99]],["body/modules/ViewModule.html",[0,1.274,2,1.908,3,0.197,4,0.153,5,0.175,14,0.014,20,0.228,21,0.605,46,3.99,68,0.197,69,0.154,77,2.237,89,1.989,90,2.602,93,0.012,94,0.012,95,2.404,101,2.602,102,2.063,103,1.908,253,4.112,396,2.95,1787,5.224,1819,4.847,1835,4.847,1836,4.847,1837,4.847,1838,5.578,1839,5.578]],["title/injectables/ViewService.html",[253,1.99,484,0.749]],["body/injectables/ViewService.html",[3,0.174,4,0.135,5,0.154,7,1.322,11,0.85,14,0.014,18,1.424,20,0.215,21,0.535,68,0.174,69,0.136,76,1.042,82,4.289,93,0.011,94,0.011,114,0.535,115,1.712,119,0.561,163,2.182,232,2.477,253,3.138,262,2.166,263,2.878,264,1.986,266,2.102,270,2.228,311,2.898,313,3.478,370,4.518,484,1.18,485,1.755,519,1.625,520,1.979,623,2.74,709,2.472,1116,3.545,1485,4.177,1840,4.289,1841,5.982,1842,7.638,1843,6.266,1844,4.936,1845,7.638,1846,4.936,1847,6.266,1848,4.936,1849,6.266,1850,4.936,1851,6.266,1852,5.445,1853,4.936,1854,4.936,1855,4.936,1856,4.936,1857,4.936]],["title/classes/WikidataCache.html",[69,0.11,1858,2.649]],["body/classes/WikidataCache.html",[3,0.178,4,0.139,5,0.158,11,0.831,14,0.014,20,0.199,23,1.192,68,0.245,69,0.14,93,0.011,94,0.011,111,2.1,112,1.797,114,0.548,115,1.738,119,0.874,121,1.996,122,3.153,123,2.661,124,3.658,128,1.924,129,3.53,131,3.77,132,2.352,133,2.661,134,1.433,148,0.719,352,3.735,519,1.664,533,3.488,953,3.175,1036,4.241,1182,5.447,1418,4.64,1858,4.64,1859,3.63,1860,5.447,1861,5.054,1862,5.054,1863,5.054,1864,5.054,1865,5.054,1866,3.956,1867,5.054,1868,3.63,1869,4.392]],["title/modules/WikidataModule.html",[0,0.749,28,2.479]],["body/modules/WikidataModule.html",[0,1.203,2,1.739,3,0.179,4,0.139,5,0.159,14,0.015,15,0.663,20,0.229,21,0.551,22,2.677,23,1.199,28,4.873,68,0.179,69,0.141,76,1.073,77,2.039,90,2.458,93,0.011,94,0.011,95,2.27,101,2.458,102,1.88,103,1.739,111,1.389,148,0.908,396,2.786,438,3.675,674,3.172,953,2.319,1353,5.061,1418,3.39,1725,3.979,1727,3.979,1858,3.39,1860,3.979,1868,5.257,1870,4.418,1871,4.418,1872,4.418,1873,3.979,1874,5.084,1875,4.418,1876,4.997,1877,4.418,1878,5.548,1879,4.418,1880,4.418]],["title/injectables/WikidataService.html",[484,0.749,1353,2.479]],["body/injectables/WikidataService.html",[3,0.1,4,0.078,5,0.089,7,0.901,11,0.779,13,1.557,14,0.015,15,0.945,16,1.341,18,1.514,20,0.178,21,0.308,23,0.671,68,0.1,69,0.079,76,1.55,93,0.007,94,0.007,114,0.308,117,1.406,119,0.648,123,3.218,128,1.61,131,1.424,134,0.806,148,1.097,163,2.328,180,1.424,183,1.897,190,2.847,213,4.439,250,1.669,262,0.806,264,0.901,266,1.304,269,3.002,270,2.173,342,1.14,484,0.805,485,1.011,519,1.406,520,1.712,529,2.856,560,2.723,562,1.424,875,3.711,876,2.47,877,4.075,878,2.47,953,3.474,1152,4.456,1182,4.014,1236,2.47,1314,2.47,1332,3.342,1353,2.664,1365,5.311,1418,1.895,1421,3.683,1485,2.847,1538,2.847,1539,2.225,1552,3.342,1564,2.47,1784,2.225,1858,4.075,1866,2.225,1875,2.47,1881,2.225,1882,4.27,1883,4.27,1884,4.27,1885,4.27,1886,4.27,1887,4.27,1888,4.27,1889,2.843,1890,2.843,1891,4.27,1892,2.843,1893,4.27,1894,2.843,1895,4.27,1896,2.843,1897,4.27,1898,2.843,1899,2.843,1900,4.27,1901,2.843,1902,4.27,1903,2.843,1904,4.27,1905,2.843,1906,2.225,1907,2.47,1908,2.843,1909,2.843,1910,2.843,1911,4.27,1912,2.843,1913,2.843,1914,2.843,1915,2.843,1916,2.843,1917,2.843,1918,2.843,1919,5.128,1920,2.843,1921,2.843,1922,2.843,1923,4.456,1924,4.27,1925,3.711,1926,4.27,1927,2.843,1928,2.843,1929,2.843,1930,4.27,1931,2.843,1932,2.843,1933,2.843,1934,2.843,1935,2.843,1936,2.843,1937,2.843,1938,2.843,1939,2.843,1940,2.843,1941,4.27,1942,2.843,1943,2.843,1944,2.843,1945,2.843,1946,2.843,1947,2.843,1948,2.843,1949,2.843,1950,2.843,1951,2.843,1952,4.27,1953,2.843,1954,4.27,1955,2.843,1956,2.843,1957,2.843,1958,2.843,1959,2.843,1960,4.27,1961,2.843,1962,4.27,1963,2.843,1964,2.843,1965,2.843,1966,2.843,1967,2.843,1968,2.843,1969,2.843,1970,2.225,1971,2.843,1972,2.843,1973,2.843,1974,2.843,1975,4.27,1976,2.843,1977,2.843,1978,2.843,1979,2.843,1980,2.843,1981,2.843,1982,2.843,1983,2.843,1984,2.843,1985,2.843,1986,2.843,1987,2.843]],["title/coverage.html",[1988,4.25]],["body/coverage.html",[4,0.072,5,0.082,14,0.015,35,1.023,36,1.962,42,1.891,55,1.891,64,2.236,69,0.209,71,1.546,93,0.007,94,0.007,99,1.755,100,1.755,113,3.514,117,0.867,119,0.299,120,1.546,136,3.263,149,2.06,159,1.891,160,2.094,161,1.891,162,2.287,197,1.755,210,1.891,215,1.891,228,1.891,232,0.901,237,1.257,239,1.461,246,1.461,251,1.318,253,1.318,259,1.386,264,0.835,284,4.628,338,0.804,388,1.318,395,2.06,401,1.891,404,1.257,405,3.293,406,3.263,407,3.263,440,2.06,444,1.891,445,1.891,446,2.287,451,1.891,476,1.461,477,2.06,482,1.891,484,1.426,486,2.287,498,1.386,499,1.461,525,1.755,624,3.514,647,2.06,650,1.891,655,1.642,656,2.06,659,1.891,666,2.287,670,1.642,713,2.06,837,2.287,838,3.153,856,2.287,857,2.287,872,1.891,873,2.287,874,2.287,895,1.642,898,4.624,915,1.891,917,1.891,919,2.06,921,1.891,951,3.153,952,2.287,967,2.287,973,1.891,974,2.287,975,2.287,983,2.686,999,1.891,1001,1.891,1002,2.287,1022,2.06,1025,1.891,1028,2.287,1069,1.891,1070,2.287,1075,1.546,1090,1.891,1091,2.287,1092,2.287,1096,2.287,1099,1.642,1101,1.546,1105,2.287,1115,2.287,1144,2.287,1145,2.287,1167,4.624,1190,1.891,1192,2.06,1202,2.06,1204,2.06,1251,3.514,1259,2.06,1263,1.891,1264,1.891,1265,2.287,1343,2.06,1346,1.891,1348,2.287,1353,1.642,1456,2.287,1478,2.06,1480,2.287,1494,1.891,1495,2.287,1507,1.642,1525,3.153,1538,2.686,1571,2.893,1586,1.891,1588,1.891,1589,2.287,1608,2.06,1611,1.891,1613,2.287,1628,1.891,1629,2.287,1641,2.287,1652,2.287,1656,3.514,1662,1.755,1666,1.891,1667,2.287,1684,1.642,1722,2.06,1729,2.287,1751,2.287,1787,1.891,1788,2.287,1840,2.287,1858,1.755,1859,2.893,1868,1.891,1873,2.06,1876,2.06,1881,3.83,1906,2.06,1988,2.06,1989,2.632,1990,2.632,1991,2.632,1992,8.149,1993,6.689,1994,5.482,1995,8.119,1996,4.028,1997,4.028,1998,5.482,1999,2.06,2000,2.632,2001,4.893,2002,2.632,2003,2.632,2004,2.632,2005,5.908,2006,4.893,2007,2.632,2008,2.632,2009,2.632,2010,2.632,2011,5.482,2012,5.134,2013,2.287,2014,3.501,2015,3.501,2016,3.501,2017,2.287,2018,2.287,2019,2.287,2020,2.632,2021,4.893,2022,4.252,2023,2.287,2024,2.287,2025,2.632,2026,2.632,2027,2.632,2028,2.632,2029,2.632,2030,2.632,2031,2.632,2032,2.632]],["title/dependencies.html",[95,1.7,2033,3.314]],["body/dependencies.html",[14,0.015,20,0.127,21,0.44,23,0.957,45,2.032,54,2.913,60,3.525,68,0.143,69,0.152,73,3.175,74,3.175,93,0.01,94,0.01,95,1.442,106,2.913,110,3.175,134,1.773,139,2.382,140,3.234,245,2.531,248,3.132,311,3.672,314,2.704,435,2.032,561,2.531,603,5.434,681,3.175,708,2.704,915,2.913,917,2.913,923,4.786,953,1.85,1082,3.175,1100,4.895,1108,3.672,1185,3.525,1190,2.913,1195,3.175,1504,3.175,1538,2.704,1654,3.525,2034,5.508,2035,5.508,2036,4.056,2037,3.525,2038,4.056,2039,4.056,2040,4.056,2041,4.056,2042,4.056,2043,4.056,2044,4.056,2045,4.056,2046,4.056,2047,6.254,2048,5.508,2049,5.508,2050,4.056,2051,4.056,2052,4.056,2053,4.056,2054,4.056,2055,4.056,2056,5.508,2057,4.056,2058,3.175,2059,4.786,2060,4.056,2061,5.508,2062,4.056,2063,4.056,2064,4.056,2065,4.056,2066,4.056,2067,6.254,2068,4.056,2069,4.056,2070,4.056,2071,4.056,2072,3.175,2073,4.056,2074,5.508,2075,4.056,2076,4.056,2077,4.056,2078,6.254,2079,4.056,2080,5.508,2081,4.056,2082,4.056,2083,4.056,2084,5.508,2085,4.056,2086,4.056,2087,4.056,2088,4.056,2089,4.056,2090,4.056,2091,4.056,2092,4.056,2093,4.056,2094,4.056,2095,4.056,2096,4.056,2097,7.717,2098,6.254,2099,4.056,2100,4.056,2101,4.056,2102,4.056,2103,4.056,2104,4.056,2105,4.056,2106,4.056,2107,4.056,2108,4.056,2109,3.525,2110,4.056,2111,4.056,2112,4.056,2113,4.056,2114,4.056,2115,4.056,2116,4.056,2117,4.056,2118,4.056,2119,4.056,2120,4.056,2121,4.056,2122,4.056,2123,4.056,2124,4.056,2125,4.056,2126,4.056]],["title/miscellaneous/enumerations.html",[2127,1.839,2128,4.154]],["body/miscellaneous/enumerations.html",[14,0.014,35,1.87,93,0.012,94,0.012,111,1.88,114,0.622,117,2.265,169,3.002,170,3.622,178,4.292,342,2.303,372,3.583,389,3.285,404,2.743,405,2.62,406,3.829,407,4.587,428,5.384,429,4.991,430,4.991,431,4.991,432,4.991,433,4.991,434,4.991,520,3.178,565,4.587,983,3.829,2127,3.188,2128,4.991,2129,4.495,2130,5.384]],["title/miscellaneous/functions.html",[2127,1.839,2131,4.154]],["body/miscellaneous/functions.html",[13,1.398,14,0.013,15,0.802,16,1.203,93,0.012,94,0.012,114,0.666,119,0.699,180,3.587,185,2.936,193,3.976,311,4.206,2018,5.343,2019,6.224,2127,3.413,2131,5.343,2132,6.148,2133,6.148,2134,7.162]],["title/index.html",[114,0.359,2135,2.88,2136,2.88]],["body/index.html",[14,0.012,93,0.012,94,0.012,662,4.968,710,3.173,1057,6.388,1852,5.962,2072,4.475,2137,5.962,2138,5.717,2139,5.717,2140,5.717,2141,5.717,2142,5.717,2143,5.717,2144,5.717,2145,5.717,2146,5.717,2147,5.717,2148,5.717,2149,6.861,2150,5.717,2151,5.717,2152,5.717,2153,5.717,2154,6.861,2155,5.717,2156,5.717,2157,5.717,2158,4.968,2159,5.962,2160,5.717,2161,6.388,2162,5.717,2163,4.968,2164,5.717,2165,4.968,2166,4.968,2167,5.717,2168,6.861,2169,5.717,2170,5.717,2171,6.861,2172,5.717,2173,4.968]],["title/license.html",[2135,2.88,2136,2.88,2174,2.88]],["body/license.html",[4,0.188,5,0.043,7,0.159,11,0.085,14,0.002,17,0.501,20,0.024,35,0.351,69,0.021,71,2.024,73,1.081,76,0.159,87,1.2,91,2.417,93,0.003,94,0.002,103,0.257,119,0.157,124,1.192,167,3.188,231,0.539,248,0.692,262,0.213,264,1.093,269,1.01,286,1.278,287,0.603,298,0.469,299,1.484,311,0.441,338,1.546,352,0.441,371,0.501,438,1.464,439,1.709,507,0.653,531,2.675,533,2.737,560,0.359,577,1.666,588,6.716,589,1.666,596,1.2,625,0.441,638,4.681,643,1.081,644,5.26,646,0.811,695,1.081,699,1.862,701,1.862,708,0.501,710,0.767,749,0.539,754,0.588,765,0.539,766,0.992,769,0.992,771,1.709,805,1.862,910,0.653,942,0.653,947,0.588,953,0.63,984,1.081,998,2.723,1036,1.278,1040,3.593,1041,0.653,1052,1.2,1053,2.177,1056,1.2,1058,1.2,1082,0.588,1108,0.921,1125,0.539,1133,0.539,1147,1.2,1195,0.588,1197,1.081,1198,0.653,1218,0.588,1228,1.2,1313,0.653,1337,1.2,1412,0.653,1421,0.539,1422,1.666,1462,0.653,1543,5.138,1550,0.653,1664,1.666,1705,0.539,1776,2.417,1784,0.588,1789,0.653,1841,2.417,1923,0.653,1925,2.417,1970,0.588,1988,1.081,1999,1.081,2058,1.081,2109,1.2,2158,1.666,2159,2.067,2161,3.237,2163,2.723,2166,0.653,2173,1.666,2174,6.762,2175,5.539,2176,5.903,2177,0.751,2178,0.751,2179,1.917,2180,6.366,2181,3.725,2182,5.639,2183,6.189,2184,3.134,2185,0.751,2186,0.751,2187,1.381,2188,2.781,2189,6.054,2190,2.781,2191,1.917,2192,4.917,2193,0.751,2194,0.751,2195,0.751,2196,1.381,2197,4.591,2198,3.134,2199,0.751,2200,3.134,2201,0.751,2202,0.751,2203,3.725,2204,0.751,2205,0.751,2206,0.751,2207,4.917,2208,7.047,2209,4.917,2210,1.917,2211,1.917,2212,3.454,2213,1.381,2214,1.381,2215,3.446,2216,3.446,2217,4.917,2218,3.134,2219,0.751,2220,0.751,2221,2.379,2222,3.725,2223,1.381,2224,3.725,2225,1.917,2226,0.751,2227,1.381,2228,0.751,2229,1.917,2230,5.539,2231,2.781,2232,1.381,2233,2.379,2234,0.751,2235,0.751,2236,1.381,2237,2.379,2238,2.379,2239,1.381,2240,4.591,2241,1.381,2242,2.781,2243,5.732,2244,2.781,2245,1.381,2246,2.379,2247,3.446,2248,2.781,2249,0.751,2250,3.134,2251,6.47,2252,1.917,2253,3.446,2254,0.751,2255,0.751,2256,0.751,2257,3.725,2258,1.381,2259,4.405,2260,4.2,2261,2.781,2262,1.381,2263,0.751,2264,0.751,2265,5.061,2266,1.381,2267,0.751,2268,0.751,2269,4.761,2270,1.381,2271,1.917,2272,0.751,2273,0.751,2274,0.751,2275,0.751,2276,0.751,2277,0.751,2278,0.751,2279,0.751,2280,0.751,2281,0.751,2282,1.381,2283,0.751,2284,0.751,2285,0.751,2286,1.381,2287,0.751,2288,1.917,2289,1.381,2290,0.751,2291,0.751,2292,1.381,2293,1.381,2294,4.917,2295,0.751,2296,1.381,2297,1.381,2298,0.751,2299,0.751,2300,1.381,2301,1.917,2302,1.917,2303,1.381,2304,0.751,2305,0.751,2306,3.134,2307,0.751,2308,0.751,2309,2.781,2310,0.751,2311,0.751,2312,0.751,2313,0.751,2314,1.381,2315,1.917,2316,0.751,2317,3.975,2318,0.751,2319,4.917,2320,2.379,2321,2.781,2322,3.134,2323,0.751,2324,1.917,2325,5.432,2326,1.381,2327,0.751,2328,0.751,2329,0.751,2330,1.917,2331,6.935,2332,4.2,2333,0.751,2334,0.751,2335,1.381,2336,1.381,2337,0.751,2338,4.2,2339,0.751,2340,2.379,2341,3.725,2342,0.751,2343,1.917,2344,1.917,2345,1.381,2346,6.839,2347,1.917,2348,3.975,2349,2.379,2350,3.446,2351,1.381,2352,0.751,2353,1.381,2354,1.917,2355,3.975,2356,4.2,2357,0.751,2358,1.381,2359,1.381,2360,2.379,2361,2.379,2362,3.454,2363,0.751,2364,1.917,2365,0.751,2366,6.123,2367,1.381,2368,0.751,2369,3.725,2370,0.751,2371,1.917,2372,3.725,2373,0.751,2374,5.061,2375,2.379,2376,1.381,2377,3.725,2378,4.405,2379,3.134,2380,0.751,2381,0.751,2382,0.751,2383,0.751,2384,3.725,2385,0.751,2386,1.381,2387,4.761,2388,0.751,2389,0.751,2390,1.917,2391,0.751,2392,1.917,2393,0.751,2394,0.751,2395,0.751,2396,4.405,2397,1.917,2398,1.917,2399,0.751,2400,0.751,2401,0.751,2402,1.381,2403,4.2,2404,0.751,2405,3.134,2406,0.751,2407,0.751,2408,2.781,2409,1.917,2410,1.917,2411,3.134,2412,1.917,2413,1.917,2414,0.751,2415,0.751,2416,2.781,2417,2.781,2418,3.134,2419,0.751,2420,0.751,2421,0.751,2422,1.381,2423,1.917,2424,0.751,2425,0.751,2426,1.917,2427,0.751,2428,0.751,2429,0.751,2430,1.381,2431,0.751,2432,5.903,2433,0.751,2434,3.725,2435,0.751,2436,3.134,2437,1.381,2438,0.751,2439,0.751,2440,1.381,2441,1.381,2442,2.379,2443,0.751,2444,0.751,2445,0.751,2446,0.751,2447,1.381,2448,1.917,2449,2.781,2450,0.751,2451,1.381,2452,0.751,2453,0.751,2454,3.134,2455,0.751,2456,2.379,2457,0.751,2458,4.2,2459,3.446,2460,2.379,2461,0.751,2462,2.781,2463,0.751,2464,1.381,2465,0.751,2466,0.751,2467,1.917,2468,1.917,2469,1.917,2470,0.751,2471,0.751,2472,0.751,2473,1.917,2474,1.917,2475,3.134,2476,0.653,2477,0.751,2478,1.381,2479,1.381,2480,1.381,2481,0.751,2482,4.761,2483,1.381,2484,0.751,2485,0.751,2486,0.751,2487,0.751,2488,0.751,2489,0.751,2490,1.917,2491,0.751,2492,0.751,2493,5.061,2494,0.751,2495,0.751,2496,0.751,2497,2.781,2498,2.781,2499,0.751,2500,0.751,2501,1.917,2502,0.751,2503,0.751,2504,2.379,2505,0.751,2506,1.2,2507,0.751,2508,0.751,2509,0.751,2510,0.751,2511,0.751,2512,0.751,2513,1.381,2514,1.381,2515,0.751,2516,1.917,2517,0.751,2518,0.751,2519,1.381,2520,0.751,2521,0.751,2522,0.751,2523,0.751,2524,1.381,2525,1.381,2526,1.381,2527,3.975,2528,1.381,2529,3.134,2530,0.751,2531,0.751,2532,1.381,2533,1.917,2534,1.917,2535,2.379,2536,2.379,2537,1.917,2538,2.379,2539,1.917,2540,0.751,2541,2.781,2542,2.781,2543,1.666,2544,1.917,2545,0.751,2546,1.381,2547,1.381,2548,2.781,2549,1.381,2550,2.379,2551,2.379,2552,1.381,2553,1.917,2554,4.917,2555,2.781,2556,0.751,2557,0.751,2558,0.751,2559,1.917,2560,1.381,2561,1.381,2562,0.751,2563,0.751,2564,0.751,2565,0.751,2566,1.381,2567,0.751,2568,0.751,2569,0.751,2570,0.751,2571,0.751,2572,1.381,2573,1.917,2574,0.751,2575,0.751,2576,1.917,2577,0.751,2578,0.751,2579,1.381,2580,1.381,2581,3.134,2582,5.732,2583,1.917,2584,1.381,2585,1.381,2586,1.381,2587,1.381,2588,2.379,2589,1.381,2590,0.751,2591,0.751,2592,0.751,2593,0.751,2594,3.446,2595,3.134,2596,1.381,2597,0.751,2598,0.751,2599,0.751,2600,0.751,2601,1.381,2602,0.751,2603,1.381,2604,0.751,2605,2.781,2606,3.725,2607,2.379,2608,0.751,2609,4.405,2610,0.751,2611,0.751,2612,0.751,2613,0.751,2614,0.751,2615,0.751,2616,0.751,2617,0.751,2618,1.381,2619,1.917,2620,2.781,2621,2.067,2622,2.379,2623,1.381,2624,0.751,2625,0.751,2626,1.381,2627,0.751,2628,0.751,2629,0.751,2630,1.381,2631,0.751,2632,0.751,2633,1.917,2634,2.379,2635,0.751,2636,1.381,2637,1.381,2638,0.751,2639,0.751,2640,1.917,2641,0.751,2642,0.751,2643,0.751,2644,0.751,2645,0.751,2646,1.381,2647,0.751,2648,0.751,2649,0.751,2650,0.751,2651,0.751,2652,1.917,2653,0.751,2654,0.751,2655,0.751,2656,0.751,2657,0.751,2658,2.781,2659,0.751,2660,0.751,2661,1.381,2662,2.379,2663,3.725,2664,0.751,2665,0.751,2666,0.751,2667,0.751,2668,0.751,2669,0.751,2670,0.751,2671,0.751,2672,0.751,2673,3.446,2674,1.917,2675,0.751,2676,2.379,2677,0.751,2678,0.751,2679,1.917,2680,0.751,2681,0.751,2682,1.917,2683,0.751,2684,1.381,2685,0.751,2686,0.751,2687,0.751,2688,0.751,2689,0.751,2690,0.751,2691,0.751,2692,0.751,2693,1.381,2694,0.751,2695,0.751,2696,0.751,2697,0.751,2698,1.381,2699,0.751,2700,0.751,2701,1.917,2702,0.751,2703,0.751,2704,1.381,2705,0.751,2706,1.381,2707,0.751,2708,1.917,2709,3.446,2710,0.751,2711,1.381,2712,0.751,2713,1.381,2714,0.751,2715,0.751,2716,0.751,2717,0.751,2718,1.381,2719,0.751,2720,1.381,2721,2.379,2722,0.751,2723,2.781,2724,0.751,2725,0.751,2726,0.751,2727,0.751,2728,0.751,2729,0.751,2730,1.381,2731,1.381,2732,1.381,2733,1.917,2734,0.751,2735,1.381,2736,1.381,2737,0.751,2738,1.381,2739,1.917,2740,0.751,2741,1.381,2742,0.751,2743,1.381,2744,0.751,2745,1.917,2746,1.381,2747,0.751,2748,0.751,2749,1.381,2750,5.903,2751,0.751,2752,2.781,2753,4.2,2754,1.917,2755,0.751,2756,0.751,2757,0.751,2758,2.379,2759,0.751,2760,0.751,2761,1.917,2762,0.751,2763,1.381,2764,0.751,2765,0.751,2766,0.751,2767,2.379,2768,0.751,2769,0.751,2770,0.751,2771,0.751,2772,0.751,2773,2.379,2774,0.751,2775,0.751,2776,1.917,2777,0.751,2778,1.381,2779,1.917,2780,0.751,2781,1.381,2782,0.751,2783,0.751,2784,0.751,2785,0.751,2786,1.381,2787,1.917,2788,0.751,2789,0.751,2790,1.381,2791,0.751,2792,1.381,2793,0.751,2794,0.751,2795,0.751,2796,0.751,2797,1.917,2798,1.381,2799,0.751,2800,0.751,2801,2.379,2802,0.751,2803,1.917,2804,0.751,2805,0.751,2806,0.751,2807,0.751,2808,0.751,2809,0.751,2810,1.917,2811,1.381,2812,1.381,2813,0.751,2814,3.446,2815,1.381,2816,1.917,2817,0.751,2818,0.751,2819,1.381,2820,0.751,2821,1.917,2822,0.751,2823,1.381,2824,0.751,2825,0.751,2826,0.751,2827,0.751,2828,1.917,2829,1.917,2830,1.381,2831,0.751,2832,1.381,2833,0.751,2834,0.751,2835,1.381,2836,1.381,2837,0.751,2838,0.751,2839,1.381,2840,0.751,2841,0.751,2842,0.751,2843,0.751,2844,0.751,2845,1.917,2846,0.751,2847,0.751,2848,0.751,2849,0.751,2850,0.751,2851,2.379,2852,1.381,2853,1.917,2854,0.751,2855,0.751,2856,0.751,2857,0.751,2858,0.751,2859,1.381,2860,0.751,2861,0.751,2862,0.751,2863,0.751,2864,0.751,2865,0.751,2866,0.751,2867,0.751,2868,0.751,2869,0.751,2870,0.751,2871,0.751,2872,0.751,2873,0.751,2874,2.379,2875,0.751,2876,1.381,2877,0.751,2878,0.751,2879,0.751,2880,0.751,2881,0.751,2882,0.751,2883,0.751,2884,0.751,2885,0.751,2886,0.751,2887,1.917,2888,0.751,2889,0.751,2890,0.751,2891,1.381,2892,0.751,2893,0.751,2894,0.751,2895,0.751,2896,0.751,2897,0.751,2898,0.751,2899,1.381,2900,1.381,2901,2.781,2902,1.917,2903,0.751,2904,1.381,2905,0.751,2906,0.751,2907,0.751,2908,0.751,2909,1.917,2910,1.381,2911,0.751,2912,1.381,2913,1.381,2914,1.381,2915,0.751,2916,0.751,2917,0.751,2918,0.751,2919,0.751,2920,0.751,2921,0.751,2922,0.751,2923,1.381,2924,0.751,2925,0.751,2926,1.917,2927,0.751,2928,0.751,2929,0.751,2930,0.751,2931,0.751,2932,0.751,2933,0.751,2934,0.751,2935,0.751,2936,0.751,2937,0.751,2938,1.381,2939,0.751,2940,0.751,2941,0.751,2942,0.751,2943,0.751,2944,0.751,2945,0.751,2946,0.751,2947,0.751,2948,0.751,2949,0.751,2950,0.751,2951,0.751,2952,0.751,2953,0.751,2954,0.751,2955,0.751,2956,0.751,2957,0.751,2958,0.751,2959,1.917,2960,1.381,2961,0.751,2962,0.751,2963,0.751,2964,0.751,2965,0.751,2966,0.751,2967,0.751,2968,1.381,2969,1.917,2970,0.751,2971,0.751,2972,0.751,2973,0.751,2974,0.751,2975,0.751,2976,0.751,2977,1.381,2978,0.751,2979,0.751,2980,0.751,2981,0.751,2982,0.751,2983,0.751,2984,0.751,2985,0.751,2986,0.751,2987,0.751,2988,0.751,2989,0.751,2990,0.751,2991,0.751,2992,0.751,2993,0.751,2994,0.751,2995,0.751,2996,0.751,2997,0.751,2998,0.751,2999,0.751]],["title/modules.html",[2,1.858]],["body/modules.html",[1,3.87,2,1.843,14,0.012,24,3.361,26,3.592,28,3.361,30,2.837,32,3.164,34,2.837,38,2.991,40,3.361,46,2.699,48,3.592,50,3.592,61,3.592,63,3.164,66,2.991,93,0.012,94,0.012,394,3.361,2037,7.17,2165,7.17,2362,4.682,2543,7.17,3000,5.388,3001,8.271]],["title/overview.html",[3002,4.719]],["body/overview.html",[2,1.117,14,0.015,24,4.447,26,4.752,28,4.21,30,4.191,32,4.674,34,4.074,38,3.956,40,4.712,46,3.695,48,4.752,50,4.315,61,4.982,63,4.476,66,3.956,71,1.917,89,0.961,93,0.008,94,0.008,95,1.682,96,2.837,97,2.837,98,2.837,99,3.708,100,3.708,101,1.821,102,1.208,103,1.117,112,1.161,237,3.323,239,3.863,251,3.486,253,3.486,390,2.837,391,2.837,392,2.837,393,2.837,394,4.342,438,2.49,472,2.837,474,2.837,475,2.837,476,3.384,485,1.161,498,3.664,499,3.863,651,2.837,653,2.837,654,2.837,655,4.342,670,4.342,892,2.837,893,2.837,894,2.837,895,4.342,1019,2.837,1020,2.837,1021,2.837,1075,4.086,1086,2.837,1087,2.837,1162,2.837,1163,2.837,1164,2.837,1339,2.837,1340,2.837,1341,2.837,1342,2.837,1353,4.342,1478,2.555,1507,4.342,1519,2.837,1520,2.837,1521,2.837,1605,2.837,1606,2.837,1607,2.837,1635,2.837,1636,2.837,1638,2.837,1684,4.342,1718,2.837,1720,2.837,1721,2.837,1835,2.837,1836,2.837,1837,2.837,1870,2.837,1871,2.837,1872,2.837,1999,2.555,2506,2.837,3002,2.837,3003,4.73]],["title/miscellaneous/typealiases.html",[2127,1.839,3004,4.781]],["body/miscellaneous/typealiases.html",[14,0.012,93,0.012,94,0.012,113,4.211,114,0.635,119,0.667,136,3.909,141,5.451,405,3.177,406,3.909,407,4.644,426,5.451,624,5.002,634,5.451,713,4.589,722,6.052,983,3.909,994,5.451,1251,4.211,1258,5.451,1571,4.211,1581,5.451,1859,4.211,1866,5.451,2127,3.254,2129,5.451,2130,4.589,3005,5.863,3006,5.095,3007,5.863,3008,5.095,3009,5.095,3010,5.095]],["title/miscellaneous/variables.html",[2127,1.839,3011,4.154]],["body/miscellaneous/variables.html",[1,2.557,3,0.125,7,0.474,14,0.015,15,0.827,17,3.657,36,0.901,64,1.247,72,3.843,74,1.758,76,1.379,79,1.952,80,1.952,93,0.006,94,0.006,110,1.758,111,1.829,113,1.613,114,0.243,119,0.405,123,1.875,132,2.346,134,0.637,136,1.498,148,1.027,149,3.461,150,1.952,159,3.176,163,1.402,167,1.183,182,1.758,232,1.218,243,1.613,264,1.402,270,2.174,290,2.374,313,1.247,338,1.087,342,1.773,395,1.758,401,2.557,402,3.427,403,1.952,405,2.295,406,1.498,407,2.949,438,2.329,440,3.461,441,1.952,444,3.176,477,2.786,482,2.557,483,1.952,519,2.638,520,3.213,533,1.073,624,3.176,625,1.319,647,3.461,648,1.952,650,3.176,656,2.786,659,2.557,660,1.952,674,1.401,710,1.976,803,2.557,815,1.952,895,1.401,898,1.758,915,2.557,916,1.952,917,2.557,918,1.952,919,2.786,920,1.952,921,2.557,922,1.952,947,1.758,953,1.025,983,1.498,996,1.758,999,3.176,1000,1.952,1022,1.758,1025,2.557,1026,1.952,1099,2.221,1108,1.498,1112,1.758,1113,1.498,1167,1.758,1190,2.557,1191,1.952,1192,2.786,1193,1.952,1202,2.786,1203,1.952,1204,2.786,1205,1.952,1251,1.613,1259,3.461,1260,1.952,1263,3.176,1343,1.758,1346,2.557,1347,1.952,1418,1.498,1525,1.758,1538,3.355,1539,2.786,1547,1.952,1552,2.786,1571,1.613,1586,3.176,1587,1.952,1608,1.758,1611,2.557,1612,1.952,1656,1.613,1662,2.949,1663,1.758,1705,3.94,1722,1.758,1725,2.786,1726,1.952,1727,2.786,1728,1.952,1859,1.613,1860,1.758,1868,3.94,1869,1.952,1873,1.758,1876,2.786,1877,1.952,1878,3.094,1879,1.952,1880,1.952,1881,1.758,1906,2.786,1907,1.952,1970,1.758,2012,1.952,2013,3.094,2014,4.372,2015,4.372,2016,4.372,2017,3.094,2022,1.952,2023,1.952,2024,3.094,2058,1.758,2059,1.952,2072,1.758,2127,1.247,2129,4.568,2130,1.758,2137,3.843,2212,1.952,2476,1.952,2621,1.952,3006,3.094,3008,3.094,3009,1.952,3010,1.952,3011,1.952,3012,2.246,3013,3.56,3014,2.246,3015,5.485,3016,5.032,3017,2.246,3018,4.422,3019,5.032,3020,2.246,3021,2.246,3022,2.246,3023,2.246,3024,2.246,3025,2.246,3026,2.246,3027,3.56,3028,2.246,3029,2.246,3030,2.246,3031,2.246,3032,2.246,3033,2.246,3034,3.56,3035,3.56,3036,3.56,3037,3.56,3038,3.56,3039,3.56,3040,3.56,3041,3.56,3042,2.246,3043,2.246,3044,2.246,3045,2.246,3046,2.246,3047,2.246,3048,2.246,3049,2.246,3050,2.246,3051,2.246,3052,2.246,3053,2.246,3054,2.246,3055,2.246,3056,2.246,3057,2.246,3058,2.246,3059,2.246,3060,2.246,3061,2.246,3062,2.246,3063,2.246,3064,3.56,3065,2.246,3066,2.246,3067,2.246,3068,2.246,3069,2.246,3070,2.246,3071,3.56,3072,3.56,3073,3.56,3074,2.246,3075,5.836,3076,2.246,3077,2.246,3078,2.246,3079,2.246,3080,2.246,3081,2.246,3082,2.246,3083,3.56,3084,2.246,3085,2.246,3086,3.56,3087,4.422,3088,2.246,3089,2.246,3090,2.246,3091,2.246,3092,2.246,3093,5.032,3094,2.246,3095,2.246,3096,5.032,3097,2.246,3098,2.246,3099,3.56,3100,2.246,3101,2.246,3102,2.246,3103,2.246,3104,2.246,3105,2.246,3106,2.246,3107,2.246,3108,2.246,3109,2.246,3110,2.246,3111,2.246,3112,2.246,3113,2.246,3114,2.246,3115,2.246,3116,2.246,3117,2.246,3118,2.246,3119,2.246,3120,2.246,3121,2.246,3122,2.246,3123,2.246,3124,2.246,3125,2.246]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":284,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/UtilService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":2046,"title":{},"body":{"dependencies.html":{}}}],["0.0.3",{"_index":2088,"title":{},"body":{"dependencies.html":{}}}],["0.0.5",{"_index":2069,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":2116,"title":{},"body":{"dependencies.html":{}}}],["0.11.7",{"_index":2079,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":2066,"title":{},"body":{"dependencies.html":{}}}],["0.21.2",{"_index":2063,"title":{},"body":{"dependencies.html":{}}}],["0.3.0",{"_index":2070,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":2094,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":2065,"title":{},"body":{"dependencies.html":{}}}],["0.9",{"_index":1559,"title":{},"body":{"injectables/SitemapService.html":{}}}],["0/1",{"_index":1992,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":2020,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":2002,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1993,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2021,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2006,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1994,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2005,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2011,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2001,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1998,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":438,"title":{},"body":{"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ParserService.html":{},"classes/Source.html":{},"modules/WikidataModule.html":{},"license.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":2095,"title":{},"body":{"dependencies.html":{}}}],["1.0.1",{"_index":2048,"title":{},"body":{"dependencies.html":{}}}],["1.1.18",{"_index":2042,"title":{},"body":{"dependencies.html":{}}}],["1.17.2",{"_index":2082,"title":{},"body":{"dependencies.html":{}}}],["1.4.1",{"_index":2080,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":2075,"title":{},"body":{"dependencies.html":{}}}],["1.5.0",{"_index":2060,"title":{},"body":{"dependencies.html":{}}}],["1.6.1",{"_index":2123,"title":{},"body":{"dependencies.html":{}}}],["1.8.0",{"_index":2092,"title":{},"body":{"dependencies.html":{}}}],["1.9.1",{"_index":2045,"title":{},"body":{"dependencies.html":{}}}],["1/2",{"_index":2008,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":2028,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":2000,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":2026,"title":{},"body":{"coverage.html":{}}}],["1/8",{"_index":2030,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":286,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HistoryController.html":{},"injectables/PersonalityService.html":{},"controllers/SourceController.html":{},"license.html":{}}}],["10.2.0",{"_index":2090,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1773,"title":{},"body":{"injectables/UtilService.html":{}}}],["11",{"_index":2506,"title":{},"body":{"license.html":{},"overview.html":{}}}],["12",{"_index":2029,"title":{},"body":{"coverage.html":{}}}],["12.1.0",{"_index":2089,"title":{},"body":{"dependencies.html":{}}}],["13",{"_index":2889,"title":{},"body":{"license.html":{}}}],["13.11.4",{"_index":2068,"title":{},"body":{"dependencies.html":{}}}],["14",{"_index":2025,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":2711,"title":{},"body":{"license.html":{}}}],["16",{"_index":1999,"title":{},"body":{"coverage.html":{},"license.html":{},"overview.html":{}}}],["17",{"_index":3003,"title":{},"body":{"overview.html":{}}}],["17.0.2",{"_index":2098,"title":{},"body":{"dependencies.html":{}}}],["18",{"_index":1996,"title":{},"body":{"coverage.html":{}}}],["1996",{"_index":2512,"title":{},"body":{"license.html":{}}}],["2",{"_index":1925,"title":{},"body":{"injectables/WikidataService.html":{},"license.html":{}}}],["2.0.0",{"_index":2052,"title":{},"body":{"dependencies.html":{}}}],["2.1.0",{"_index":2105,"title":{},"body":{"dependencies.html":{}}}],["2.1.6",{"_index":2077,"title":{},"body":{"dependencies.html":{}}}],["2.3.0",{"_index":2086,"title":{},"body":{"dependencies.html":{}}}],["2.3.2",{"_index":2102,"title":{},"body":{"dependencies.html":{}}}],["2.8.4",{"_index":2122,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":2510,"title":{},"body":{"license.html":{}}}],["2007",{"_index":2179,"title":{},"body":{"license.html":{}}}],["21.6.10",{"_index":2085,"title":{},"body":{"dependencies.html":{}}}],["26",{"_index":2003,"title":{},"body":{"coverage.html":{}}}],["27.4.0",{"_index":2054,"title":{},"body":{"dependencies.html":{}}}],["28",{"_index":2870,"title":{},"body":{"license.html":{}}}],["29",{"_index":2177,"title":{},"body":{"license.html":{}}}],["3",{"_index":1776,"title":{},"body":{"injectables/UtilService.html":{},"license.html":{}}}],["3/16",{"_index":1997,"title":{},"body":{"coverage.html":{}}}],["3/7",{"_index":2010,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":2769,"title":{},"body":{"license.html":{}}}],["33",{"_index":2027,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":2544,"title":{},"body":{"license.html":{}}}],["4.1.0",{"_index":2038,"title":{},"body":{"dependencies.html":{}}}],["4.17.1",{"_index":2081,"title":{},"body":{"dependencies.html":{}}}],["4.18.5",{"_index":2062,"title":{},"body":{"dependencies.html":{}}}],["4.29.0",{"_index":2057,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":2110,"title":{},"body":{"dependencies.html":{}}}],["4.6.0",{"_index":2073,"title":{},"body":{"dependencies.html":{}}}],["4.6.2",{"_index":2036,"title":{},"body":{"dependencies.html":{}}}],["4.7.7",{"_index":2083,"title":{},"body":{"dependencies.html":{}}}],["4/15",{"_index":2004,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":1984,"title":{},"body":{"injectables/WikidataService.html":{}}}],["404",{"_index":1150,"title":{},"body":{"classes/NotFoundFilter.html":{},"controllers/ViewController.html":{}}}],["42",{"_index":2009,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":1082,"title":{},"body":{"controllers/HomeController.html":{},"dependencies.html":{},"license.html":{}}}],["5.13.5",{"_index":2087,"title":{},"body":{"dependencies.html":{}}}],["5.3.0",{"_index":2126,"title":{},"body":{"dependencies.html":{}}}],["5.5.1",{"_index":2113,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":2007,"title":{},"body":{"coverage.html":{}}}],["6.1.0",{"_index":2096,"title":{},"body":{"dependencies.html":{}}}],["6.1.1",{"_index":2119,"title":{},"body":{"dependencies.html":{}}}],["6.4.1",{"_index":2100,"title":{},"body":{"dependencies.html":{}}}],["6.7.0",{"_index":2093,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":2762,"title":{},"body":{"license.html":{}}}],["6b",{"_index":2602,"title":{},"body":{"license.html":{}}}],["6d",{"_index":2628,"title":{},"body":{"license.html":{}}}],["7",{"_index":2539,"title":{},"body":{"license.html":{}}}],["7.12.1",{"_index":2040,"title":{},"body":{"dependencies.html":{}}}],["7.2.4",{"_index":2108,"title":{},"body":{"dependencies.html":{}}}],["7.3.0",{"_index":2121,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":927,"title":{},"body":{"injectables/EmailService.html":{}}}],["8.0.0",{"_index":2049,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":2050,"title":{},"body":{"dependencies.html":{}}}],["8.0.6",{"_index":2047,"title":{},"body":{"dependencies.html":{}}}],["86400",{"_index":1880,"title":{},"body":{"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["9a76c3a1c35c",{"_index":1767,"title":{},"body":{"injectables/UtilService.html":{}}}],["_",{"_index":1958,"title":{},"body":{"injectables/WikidataService.html":{}}}],["_checkcaptcharesponse",{"_index":164,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["_checkcaptcharesponse(secret",{"_index":179,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["_getclaim",{"_index":714,"title":{},"body":{"injectables/ClaimService.html":{}}}],["_getclaim(match",{"_index":721,"title":{},"body":{"injectables/ClaimService.html":{}}}],["_getsentencebyhashandclaimid",{"_index":165,"title":{},"body":{"controllers/ClaimController.html":{}}}],["_getsentencebyhashandclaimid(sentencehash",{"_index":184,"title":{},"body":{"controllers/ClaimController.html":{}}}],["_id",{"_index":153,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"classes/Personality.html":{},"injectables/PersonalityService.html":{},"injectables/SourceService.html":{},"injectables/UtilService.html":{}}}],["_reviewsbysentencehashaggregated",{"_index":487,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["_reviewsbysentencehashaggregated(sentencehash",{"_index":501,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["_topclassificationaccumulator",{"_index":488,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["_verifyinputsquery",{"_index":166,"title":{},"body":{"controllers/ClaimController.html":{}}}],["_verifyinputsquery(query",{"_index":188,"title":{},"body":{"controllers/ClaimController.html":{}}}],["abaixo",{"_index":3110,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ability",{"_index":2681,"title":{},"body":{"license.html":{}}}],["above",{"_index":2745,"title":{},"body":{"license.html":{}}}],["absence",{"_index":2540,"title":{},"body":{"license.html":{}}}],["absolute",{"_index":2948,"title":{},"body":{"license.html":{}}}],["absolutely",{"_index":2976,"title":{},"body":{"license.html":{}}}],["abuse",{"_index":2285,"title":{},"body":{"license.html":{}}}],["acc",{"_index":599,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["accept",{"_index":2058,"title":{},"body":{"dependencies.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["acceptance",{"_index":2773,"title":{},"body":{"license.html":{}}}],["access",{"_index":2163,"title":{},"body":{"index.html":{},"license.html":{}}}],["accessible",{"_index":2838,"title":{},"body":{"license.html":{}}}],["accompanied",{"_index":2583,"title":{},"body":{"license.html":{}}}],["accompanies",{"_index":2952,"title":{},"body":{"license.html":{}}}],["accord",{"_index":2538,"title":{},"body":{"license.html":{}}}],["according",{"_index":2943,"title":{},"body":{"license.html":{}}}],["accumulate",{"_index":506,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["accumulateargs",{"_index":508,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["accumulator",{"_index":504,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["acessar",{"_index":3105,"title":{},"body":{"miscellaneous/variables.html":{}}}],["achieve",{"_index":2958,"title":{},"body":{"license.html":{}}}],["acknowledges",{"_index":2471,"title":{},"body":{"license.html":{}}}],["acquired",{"_index":2819,"title":{},"body":{"license.html":{}}}],["acronyms",{"_index":1210,"title":{},"body":{"injectables/ParserService.html":{}}}],["action",{"_index":1919,"title":{},"body":{"injectables/WikidataService.html":{}}}],["actions",{"_index":2780,"title":{},"body":{"license.html":{}}}],["activities",{"_index":2364,"title":{},"body":{"license.html":{}}}],["activity",{"_index":2865,"title":{},"body":{"license.html":{}}}],["actual",{"_index":2843,"title":{},"body":{"license.html":{}}}],["actually",{"_index":2651,"title":{},"body":{"license.html":{}}}],["adapt",{"_index":2337,"title":{},"body":{"license.html":{}}}],["add",{"_index":805,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/SitemapService.html":{},"license.html":{}}}],["added",{"_index":2537,"title":{},"body":{"license.html":{}}}],["additional",{"_index":2554,"title":{},"body":{"license.html":{}}}],["address",{"_index":2896,"title":{},"body":{"license.html":{}}}],["addressed",{"_index":2334,"title":{},"body":{"license.html":{}}}],["adopted",{"_index":2509,"title":{},"body":{"license.html":{}}}],["adversely",{"_index":2689,"title":{},"body":{"license.html":{}}}],["advised",{"_index":2939,"title":{},"body":{"license.html":{}}}],["affects",{"_index":2690,"title":{},"body":{"license.html":{}}}],["affero",{"_index":2887,"title":{},"body":{"license.html":{}}}],["affirmed",{"_index":2802,"title":{},"body":{"license.html":{}}}],["affirms",{"_index":2465,"title":{},"body":{"license.html":{}}}],["against",{"_index":2526,"title":{},"body":{"license.html":{}}}],["agent",{"_index":1472,"title":{},"body":{"controllers/RootController.html":{}}}],["agg",{"_index":1769,"title":{},"body":{"injectables/UtilService.html":{}}}],["aggregate",{"_index":589,"title":{},"body":{"injectables/ClaimReviewService.html":{},"license.html":{}}}],["aggregates",{"_index":592,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["agree",{"_index":2882,"title":{},"body":{"license.html":{}}}],["agreed",{"_index":2925,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":2829,"title":{},"body":{"license.html":{}}}],["agreggateclassification",{"_index":489,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["agreggateclassification(match",{"_index":514,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["aim",{"_index":2281,"title":{},"body":{"license.html":{}}}],["aletheia",{"_index":2137,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["aliases",{"_index":3005,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alleging",{"_index":2809,"title":{},"body":{"license.html":{}}}],["allow",{"_index":1412,"title":{},"body":{"injectables/PersonalityService.html":{},"license.html":{}}}],["allowed",{"_index":1422,"title":{},"body":{"injectables/PersonalityService.html":{},"license.html":{}}}],["allowedheaders",{"_index":3031,"title":{},"body":{"miscellaneous/variables.html":{}}}],["along",{"_index":2542,"title":{},"body":{"license.html":{}}}],["alphabets",{"_index":1199,"title":{},"body":{"injectables/ParserService.html":{}}}],["already",{"_index":1313,"title":{},"body":{"controllers/PersonalityController.html":{},"license.html":{}}}],["alternative",{"_index":2598,"title":{},"body":{"license.html":{}}}],["although",{"_index":2277,"title":{},"body":{"license.html":{}}}],["ancillary",{"_index":2774,"title":{},"body":{"license.html":{}}}],["and/or",{"_index":2261,"title":{},"body":{"license.html":{}}}],["ant",{"_index":2034,"title":{},"body":{"dependencies.html":{}}}],["antd",{"_index":2061,"title":{},"body":{"dependencies.html":{}}}],["anti",{"_index":2496,"title":{},"body":{"license.html":{}}}],["anyone",{"_index":2551,"title":{},"body":{"license.html":{}}}],["anything",{"_index":2349,"title":{},"body":{"license.html":{}}}],["análise",{"_index":2139,"title":{},"body":{"index.html":{}}}],["api",{"_index":1457,"title":{},"body":{"controllers/RootController.html":{}}}],["api/claimreview",{"_index":448,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["api/stats",{"_index":1630,"title":{},"body":{"controllers/StatsController.html":{}}}],["api\\nsitemap",{"_index":1474,"title":{},"body":{"controllers/RootController.html":{}}}],["app",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["app.close",{"_index":3124,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.get(configservice",{"_index":3079,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.get(emailservice",{"_index":3078,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.get(usersservice",{"_index":3081,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.listen(options.config.port",{"_index":3063,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.logger.log(\"error/recaptcha",{"_index":463,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["app.setglobalprefix(\"api",{"_index":3062,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.use",{"_index":3051,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.use(cookieparser",{"_index":3050,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.use(getlanguagemiddleware",{"_index":3043,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.use(passport.initialize",{"_index":3059,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.use(passport.session",{"_index":3060,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.useglobalpipes",{"_index":3044,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.usestaticassets(join(__dirname",{"_index":3061,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app_filter",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["applicable",{"_index":2355,"title":{},"body":{"license.html":{}}}],["applications",{"_index":2993,"title":{},"body":{"license.html":{}}}],["applied",{"_index":2313,"title":{},"body":{"license.html":{}}}],["applies",{"_index":2213,"title":{},"body":{"license.html":{}}}],["apply",{"_index":2217,"title":{},"body":{"license.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["appmodule.register(options",{"_index":3040,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appropriate",{"_index":2377,"title":{},"body":{"license.html":{}}}],["appropriately",{"_index":2531,"title":{},"body":{"license.html":{}}}],["approximates",{"_index":2947,"title":{},"body":{"license.html":{}}}],["area",{"_index":2287,"title":{},"body":{"license.html":{}}}],["arguable",{"_index":430,"title":{},"body":{"classes/ClaimReview.html":{},"miscellaneous/enumerations.html":{}}}],["argumentshost",{"_index":1155,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["arise",{"_index":2295,"title":{},"body":{"license.html":{}}}],["arising",{"_index":2929,"title":{},"body":{"license.html":{}}}],["arrange",{"_index":2839,"title":{},"body":{"license.html":{}}}],["arrangement",{"_index":2853,"title":{},"body":{"license.html":{}}}],["array",{"_index":1766,"title":{},"body":{"injectables/UtilService.html":{}}}],["array.foreach((item",{"_index":1779,"title":{},"body":{"injectables/UtilService.html":{}}}],["array.from(newarray.values",{"_index":1786,"title":{},"body":{"injectables/UtilService.html":{}}}],["array.isarray(claim.sources",{"_index":706,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["array.isarray(claimreview.sources",{"_index":622,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["array.isarray(claims",{"_index":1444,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["arraynotempty",{"_index":850,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["article",{"_index":2505,"title":{},"body":{"license.html":{}}}],["asc",{"_index":288,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/SourceService.html":{}}}],["asking",{"_index":2235,"title":{},"body":{"license.html":{}}}],["assert",{"_index":2256,"title":{},"body":{"license.html":{}}}],["assets",{"_index":1789,"title":{},"body":{"controllers/ViewController.html":{},"license.html":{}}}],["assets(@req",{"_index":1831,"title":{},"body":{"controllers/ViewController.html":{}}}],["assets(req",{"_index":1795,"title":{},"body":{"controllers/ViewController.html":{}}}],["associated",{"_index":2443,"title":{},"body":{"license.html":{}}}],["assume",{"_index":2919,"title":{},"body":{"license.html":{}}}],["assumption",{"_index":2951,"title":{},"body":{"license.html":{}}}],["assumptions",{"_index":2732,"title":{},"body":{"license.html":{}}}],["assures",{"_index":2316,"title":{},"body":{"license.html":{}}}],["async",{"_index":163,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["attach",{"_index":2960,"title":{},"body":{"license.html":{}}}],["attempt",{"_index":2748,"title":{},"body":{"license.html":{}}}],["attempting",{"_index":1397,"title":{},"body":{"injectables/PersonalityService.html":{},"controllers/UsersController.html":{}}}],["attributed",{"_index":2272,"title":{},"body":{"license.html":{}}}],["attributions",{"_index":2714,"title":{},"body":{"license.html":{}}}],["auth",{"_index":940,"title":{},"body":{"injectables/EmailService.html":{}}}],["auth.guard",{"_index":1687,"title":{},"body":{"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":1092,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth/auth.module",{"_index":27,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/local",{"_index":1686,"title":{},"body":{"controllers/UsersController.html":{}}}],["auth/session.guard",{"_index":247,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/PersonalityController.html":{},"controllers/SitemapController.html":{},"controllers/UsersController.html":{}}}],["authenticate",{"_index":1661,"title":{},"body":{"classes/User.html":{},"interfaces/UserDocument.html":{}}}],["authguard",{"_index":1093,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authguard(\"local",{"_index":1095,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":26,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":2713,"title":{},"body":{"license.html":{}}}],["authorization",{"_index":2665,"title":{},"body":{"license.html":{}}}],["authorized",{"_index":2705,"title":{},"body":{"license.html":{}}}],["authorizes",{"_index":2815,"title":{},"body":{"license.html":{}}}],["authorizing",{"_index":2857,"title":{},"body":{"license.html":{}}}],["authors",{"_index":2216,"title":{},"body":{"license.html":{}}}],["auto",{"_index":639,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["automatic",{"_index":2784,"title":{},"body":{"license.html":{}}}],["automatically",{"_index":2456,"title":{},"body":{"license.html":{}}}],["available",{"_index":2362,"title":{},"body":{"license.html":{},"modules.html":{}}}],["avoid",{"_index":2311,"title":{},"body":{"license.html":{}}}],["avoiding",{"_index":1151,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["await",{"_index":270,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"injectables/SourceService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["away",{"_index":2202,"title":{},"body":{"license.html":{}}}],["axios",{"_index":1538,"title":{},"body":{"injectables/SitemapService.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["axios.get",{"_index":1564,"title":{},"body":{"injectables/SitemapService.html":{},"injectables/WikidataService.html":{}}}],["axios.get(\"https://www.wikidata.org/w/api.php",{"_index":1918,"title":{},"body":{"injectables/WikidataService.html":{}}}],["b",{"_index":2418,"title":{},"body":{"license.html":{}}}],["babel/polyfill",{"_index":2039,"title":{},"body":{"dependencies.html":{}}}],["bail",{"_index":1420,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["based",{"_index":998,"title":{},"body":{"classes/History.html":{},"license.html":{}}}],["baseurl",{"_index":930,"title":{},"body":{"injectables/EmailService.html":{}}}],["basic",{"_index":2457,"title":{},"body":{"license.html":{}}}],["batches",{"_index":1415,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["before",{"_index":996,"title":{},"body":{"classes/History.html":{},"injectables/HistoryService.html":{},"miscellaneous/variables.html":{}}}],["behalf",{"_index":2484,"title":{},"body":{"license.html":{}}}],["being",{"_index":2626,"title":{},"body":{"license.html":{}}}],["believe",{"_index":2849,"title":{},"body":{"license.html":{}}}],["below",{"_index":2491,"title":{},"body":{"license.html":{}}}],["bem",{"_index":3101,"title":{},"body":{"miscellaneous/variables.html":{}}}],["benefit",{"_index":2842,"title":{},"body":{"license.html":{}}}],["best",{"_index":2957,"title":{},"body":{"license.html":{}}}],["between",{"_index":2453,"title":{},"body":{"license.html":{}}}],["beyond",{"_index":2571,"title":{},"body":{"license.html":{}}}],["bigger",{"_index":597,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["body",{"_index":231,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/PersonalityController.html":{},"license.html":{}}}],["boolean",{"_index":417,"title":{},"body":{"classes/ClaimReview.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreatePersonality.html":{},"classes/GetPersonalities.html":{},"injectables/HistoryService.html":{},"guards/SessionGuard.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{}}}],["both",{"_index":2266,"title":{},"body":{"license.html":{}}}],["box",{"_index":2983,"title":{},"body":{"license.html":{}}}],["br",{"_index":1907,"title":{},"body":{"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["browse",{"_index":3001,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2165,"title":{},"body":{"index.html":{},"modules.html":{}}}],["buf",{"_index":3088,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buf.tostring(\"hex",{"_index":3091,"title":{},"body":{"miscellaneous/variables.html":{}}}],["build",{"_index":2171,"title":{},"body":{"index.html":{}}}],["business",{"_index":2862,"title":{},"body":{"license.html":{}}}],["c",{"_index":2181,"title":{},"body":{"license.html":{}}}],["calculateoverallstats",{"_index":715,"title":{},"body":{"injectables/ClaimService.html":{}}}],["calculateoverallstats(claim",{"_index":724,"title":{},"body":{"injectables/ClaimService.html":{}}}],["called",{"_index":2344,"title":{},"body":{"license.html":{}}}],["canactivate",{"_index":1481,"title":{},"body":{"guards/SessionGuard.html":{}}}],["canactivate(context",{"_index":1482,"title":{},"body":{"guards/SessionGuard.html":{}}}],["carry",{"_index":2546,"title":{},"body":{"license.html":{}}}],["case",{"_index":695,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{},"license.html":{}}}],["cases",{"_index":2646,"title":{},"body":{"license.html":{}}}],["cast",{"_index":604,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["catch",{"_index":709,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"controllers/HistoryController.html":{},"classes/NotFoundFilter.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"controllers/UsersController.html":{},"injectables/ViewService.html":{}}}],["catch((e",{"_index":3113,"title":{},"body":{"miscellaneous/variables.html":{}}}],["catch((err",{"_index":1320,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["catch((error",{"_index":300,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/PersonalityService.html":{}}}],["catch(e",{"_index":1713,"title":{},"body":{"controllers/UsersController.html":{}}}],["catch(exception",{"_index":1154,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["catch(notfoundexception",{"_index":1158,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["cause",{"_index":766,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"license.html":{}}}],["cd",{"_index":2152,"title":{},"body":{"index.html":{}}}],["cease",{"_index":2751,"title":{},"body":{"license.html":{}}}],["certain",{"_index":2238,"title":{},"body":{"license.html":{}}}],["certo",{"_index":612,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["cessation",{"_index":2764,"title":{},"body":{"license.html":{}}}],["change",{"_index":1053,"title":{},"body":{"injectables/HistoryService.html":{},"controllers/UsersController.html":{},"license.html":{}}}],["change(create",{"_index":1054,"title":{},"body":{"injectables/HistoryService.html":{}}}],["changed",{"_index":749,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/UsersService.html":{},"license.html":{}}}],["changepassword",{"_index":1668,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["changepassword(@req",{"_index":1697,"title":{},"body":{"controllers/UsersController.html":{}}}],["changepassword(new",{"_index":1708,"title":{},"body":{"controllers/UsersController.html":{}}}],["changepassword(req",{"_index":1670,"title":{},"body":{"controllers/UsersController.html":{}}}],["changepassword(userid",{"_index":1731,"title":{},"body":{"injectables/UsersService.html":{}}}],["changes",{"_index":1018,"title":{},"body":{"controllers/HistoryController.html":{},"injectables/HistoryService.html":{}}}],["changing",{"_index":2193,"title":{},"body":{"license.html":{}}}],["characterized",{"_index":2678,"title":{},"body":{"license.html":{}}}],["characters",{"_index":700,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{}}}],["charge",{"_index":2222,"title":{},"body":{"license.html":{}}}],["choose",{"_index":2904,"title":{},"body":{"license.html":{}}}],["choosing",{"_index":2908,"title":{},"body":{"license.html":{}}}],["circumstances",{"_index":2489,"title":{},"body":{"license.html":{}}}],["circumvention",{"_index":2497,"title":{},"body":{"license.html":{}}}],["civil",{"_index":2950,"title":{},"body":{"license.html":{}}}],["claim",{"_index":35,"title":{"classes/Claim.html":{}},"body":{"modules/AppModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimReview.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"classes/Personality.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"license.html":{}}}],["claim._id",{"_index":368,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{},"injectables/SitemapService.html":{}}}],["claim.claimid",{"_index":687,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["claim.content",{"_index":689,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{}}}],["claim.content.object",{"_index":819,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claim.content.object.foreach((p",{"_index":826,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claim.content.text",{"_index":1446,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["claim.controller",{"_index":398,"title":{},"body":{"modules/ClaimModule.html":{}}}],["claim.dto",{"_index":256,"title":{},"body":{"controllers/ClaimController.html":{},"classes/UpdateClaimDTO.html":{}}}],["claim.dto.ts",{"_index":838,"title":{},"body":{"classes/CreateClaimDTO.html":{},"classes/UpdateClaimDTO.html":{},"coverage.html":{}}}],["claim.dto.ts:11",{"_index":840,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["claim.dto.ts:16",{"_index":842,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["claim.dto.ts:21",{"_index":849,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["claim.dto.ts:25",{"_index":846,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["claim.dto.ts:29",{"_index":844,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["claim.dto.ts:33",{"_index":843,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["claim.dto.ts:7",{"_index":847,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["claim.lastestrevision",{"_index":1411,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["claim.latestrevision",{"_index":773,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claim.name",{"_index":403,"title":{},"body":{"modules/ClaimModule.html":{},"miscellaneous/variables.html":{}}}],["claim.personality",{"_index":775,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claim.save",{"_index":799,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claim.service",{"_index":240,"title":{},"body":{"controllers/ClaimController.html":{},"modules/ClaimModule.html":{}}}],["claim.slug",{"_index":691,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{}}}],["claim.sources",{"_index":705,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["claim.toobject().latestrevision",{"_index":795,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claim/claim.module",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/SitemapModule.html":{},"modules/StatsModule.html":{}}}],["claim/claim.service",{"_index":1537,"title":{},"body":{"injectables/SitemapService.html":{},"injectables/StatsService.html":{}}}],["claim/schemas/claim.schema",{"_index":425,"title":{},"body":{"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimReview.html":{}}}],["claim?.content?.object",{"_index":818,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claimbody",{"_index":730,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claimcontent",{"_index":742,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claimcontent[paragraphindex].content[sentenceindex].props",{"_index":834,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claimcontroller",{"_index":161,"title":{"controllers/ClaimController.html":{}},"body":{"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"coverage.html":{}}}],["claimcreatepage",{"_index":168,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claimcreatepage(@req",{"_index":377,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claimcreatepage(req",{"_index":191,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claimdocument",{"_index":141,"title":{},"body":{"classes/Claim.html":{},"injectables/ClaimService.html":{},"miscellaneous/typealiases.html":{}}}],["claimid",{"_index":155,"title":{},"body":{"classes/Claim.html":{},"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{}}}],["claimids",{"_index":549,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["claimmatchparameters",{"_index":722,"title":{},"body":{"injectables/ClaimService.html":{},"miscellaneous/typealiases.html":{}}}],["claimmodel",{"_index":401,"title":{},"body":{"modules/ClaimModule.html":{},"injectables/ClaimService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimmodule",{"_index":32,"title":{"modules/ClaimModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/SitemapModule.html":{},"modules/StatsModule.html":{},"modules.html":{},"overview.html":{}}}],["claimobj",{"_index":346,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claimobj.content.object.foreach((p",{"_index":349,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claimobj.date",{"_index":353,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claimobj.personality",{"_index":354,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claimreview",{"_index":404,"title":{"classes/ClaimReview.html":{}},"body":{"classes/ClaimReview.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"injectables/PersonalityService.html":{},"classes/Source.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["claimreview.claim",{"_index":615,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["claimreview.name",{"_index":483,"title":{},"body":{"modules/ClaimReviewModule.html":{},"miscellaneous/variables.html":{}}}],["claimreview.personality",{"_index":613,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["claimreview.sources",{"_index":621,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["claimreview.topclassification",{"_index":836,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claimreview.user",{"_index":617,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["claimreviewbody",{"_index":530,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["claimreviewcontroller",{"_index":445,"title":{"controllers/ClaimReviewController.html":{}},"body":{"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"coverage.html":{}}}],["claimreviewdocument",{"_index":426,"title":{},"body":{"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"miscellaneous/typealiases.html":{}}}],["claimreviewid",{"_index":542,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["claimreviewmodel",{"_index":482,"title":{},"body":{"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimreviewmodule",{"_index":34,"title":{"modules/ClaimReviewModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/PersonalityModule.html":{},"modules/SitemapModule.html":{},"modules/StatsModule.html":{},"modules.html":{},"overview.html":{}}}],["claimreviewschema",{"_index":444,"title":{},"body":{"classes/ClaimReview.html":{},"modules/ClaimReviewModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimreviewschemaraw",{"_index":440,"title":{},"body":{"classes/ClaimReview.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimreviewschemaraw.plugin(softdeleteplugin",{"_index":443,"title":{},"body":{"classes/ClaimReview.html":{}}}],["claimreviewschemaraw.virtual('sources",{"_index":442,"title":{},"body":{"classes/ClaimReview.html":{}}}],["claimreviewservice",{"_index":237,"title":{"injectables/ClaimReviewService.html":{}},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/StatsService.html":{},"coverage.html":{},"overview.html":{}}}],["claimrevision",{"_index":120,"title":{"classes/ClaimRevision.html":{}},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"coverage.html":{}}}],["claimrevision.name",{"_index":660,"title":{},"body":{"modules/ClaimRevisionModule.html":{},"miscellaneous/variables.html":{}}}],["claimrevisiondocument",{"_index":634,"title":{},"body":{"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"miscellaneous/typealiases.html":{}}}],["claimrevisionmodel",{"_index":659,"title":{},"body":{"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimrevisionmodule",{"_index":63,"title":{"modules/ClaimRevisionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/PersonalityModule.html":{},"modules.html":{},"overview.html":{}}}],["claimrevisionschema",{"_index":650,"title":{},"body":{"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimrevisionschemaraw",{"_index":647,"title":{},"body":{"classes/ClaimRevision.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimrevisionschemaraw.virtual('reviews",{"_index":649,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["claimrevisionservice",{"_index":655,"title":{"injectables/ClaimRevisionService.html":{}},"body":{"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"coverage.html":{},"overview.html":{}}}],["claimrevisionupdate",{"_index":743,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claims",{"_index":299,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/StatsService.html":{},"license.html":{}}}],["claims.dto",{"_index":258,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claims.dto.ts",{"_index":967,"title":{},"body":{"classes/GetClaimsDTO.html":{},"coverage.html":{}}}],["claims.dto.ts:10",{"_index":971,"title":{},"body":{"classes/GetClaimsDTO.html":{}}}],["claims.dto.ts:13",{"_index":969,"title":{},"body":{"classes/GetClaimsDTO.html":{}}}],["claims.dto.ts:17",{"_index":968,"title":{},"body":{"classes/GetClaimsDTO.html":{}}}],["claims.dto.ts:20",{"_index":972,"title":{},"body":{"classes/GetClaimsDTO.html":{}}}],["claims.dto.ts:6",{"_index":970,"title":{},"body":{"classes/GetClaimsDTO.html":{}}}],["claims.map((claim",{"_index":1445,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["claims.map(async",{"_index":764,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claimschema",{"_index":159,"title":{},"body":{"classes/Claim.html":{},"modules/ClaimModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimschemaraw",{"_index":149,"title":{},"body":{"classes/Claim.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimschemaraw.plugin(softdeleteplugin",{"_index":158,"title":{},"body":{"classes/Claim.html":{}}}],["claimschemaraw.virtual('revisions",{"_index":151,"title":{},"body":{"classes/Claim.html":{}}}],["claimschemaraw.virtual('sources",{"_index":156,"title":{},"body":{"classes/Claim.html":{}}}],["claimservice",{"_index":239,"title":{"injectables/ClaimService.html":{}},"body":{"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"injectables/ClaimService.html":{},"injectables/SitemapService.html":{},"injectables/StatsService.html":{},"coverage.html":{},"overview.html":{}}}],["claimslug",{"_index":359,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{}}}],["class",{"_index":69,"title":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"classes/Personality.html":{},"classes/Source.html":{},"classes/UpdateClaimDTO.html":{},"classes/User.html":{},"classes/WikidataCache.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"dependencies.html":{},"license.html":{}}}],["classes",{"_index":112,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"classes/Personality.html":{},"classes/Source.html":{},"classes/UpdateClaimDTO.html":{},"classes/User.html":{},"classes/WikidataCache.html":{},"overview.html":{}}}],["classification",{"_index":408,"title":{},"body":{"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimReview.html":{},"classes/Source.html":{}}}],["classificationenum",{"_index":428,"title":{},"body":{"classes/ClaimReview.html":{},"classes/CreateClaimReview.html":{},"miscellaneous/enumerations.html":{}}}],["clean",{"_index":661,"title":{},"body":{"modules/ClaimRevisionModule.html":{}}}],["clear",{"_index":2612,"title":{},"body":{"license.html":{}}}],["clearly",{"_index":2263,"title":{},"body":{"license.html":{}}}],["client",{"_index":532,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["clone",{"_index":2149,"title":{},"body":{"index.html":{}}}],["closely",{"_index":2946,"title":{},"body":{"license.html":{}}}],["cluster_authmodule",{"_index":96,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":97,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":98,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_claimmodule",{"_index":390,"title":{},"body":{"modules/ClaimModule.html":{},"overview.html":{}}}],["cluster_claimmodule_exports",{"_index":391,"title":{},"body":{"modules/ClaimModule.html":{},"overview.html":{}}}],["cluster_claimmodule_imports",{"_index":392,"title":{},"body":{"modules/ClaimModule.html":{},"overview.html":{}}}],["cluster_claimmodule_providers",{"_index":393,"title":{},"body":{"modules/ClaimModule.html":{},"overview.html":{}}}],["cluster_claimreviewmodule",{"_index":472,"title":{},"body":{"modules/ClaimReviewModule.html":{},"overview.html":{}}}],["cluster_claimreviewmodule_exports",{"_index":474,"title":{},"body":{"modules/ClaimReviewModule.html":{},"overview.html":{}}}],["cluster_claimreviewmodule_imports",{"_index":473,"title":{},"body":{"modules/ClaimReviewModule.html":{}}}],["cluster_claimreviewmodule_providers",{"_index":475,"title":{},"body":{"modules/ClaimReviewModule.html":{},"overview.html":{}}}],["cluster_claimrevisionmodule",{"_index":651,"title":{},"body":{"modules/ClaimRevisionModule.html":{},"overview.html":{}}}],["cluster_claimrevisionmodule_exports",{"_index":654,"title":{},"body":{"modules/ClaimRevisionModule.html":{},"overview.html":{}}}],["cluster_claimrevisionmodule_imports",{"_index":652,"title":{},"body":{"modules/ClaimRevisionModule.html":{}}}],["cluster_claimrevisionmodule_providers",{"_index":653,"title":{},"body":{"modules/ClaimRevisionModule.html":{},"overview.html":{}}}],["cluster_emailmodule",{"_index":892,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_exports",{"_index":893,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_providers",{"_index":894,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_historymodule",{"_index":1019,"title":{},"body":{"modules/HistoryModule.html":{},"overview.html":{}}}],["cluster_historymodule_exports",{"_index":1021,"title":{},"body":{"modules/HistoryModule.html":{},"overview.html":{}}}],["cluster_historymodule_providers",{"_index":1020,"title":{},"body":{"modules/HistoryModule.html":{},"overview.html":{}}}],["cluster_homemodule",{"_index":1086,"title":{},"body":{"modules/HomeModule.html":{},"overview.html":{}}}],["cluster_homemodule_imports",{"_index":1087,"title":{},"body":{"modules/HomeModule.html":{},"overview.html":{}}}],["cluster_parsermodule",{"_index":1162,"title":{},"body":{"modules/ParserModule.html":{},"overview.html":{}}}],["cluster_parsermodule_exports",{"_index":1163,"title":{},"body":{"modules/ParserModule.html":{},"overview.html":{}}}],["cluster_parsermodule_providers",{"_index":1164,"title":{},"body":{"modules/ParserModule.html":{},"overview.html":{}}}],["cluster_personalitymodule",{"_index":1339,"title":{},"body":{"modules/PersonalityModule.html":{},"overview.html":{}}}],["cluster_personalitymodule_exports",{"_index":1342,"title":{},"body":{"modules/PersonalityModule.html":{},"overview.html":{}}}],["cluster_personalitymodule_imports",{"_index":1341,"title":{},"body":{"modules/PersonalityModule.html":{},"overview.html":{}}}],["cluster_personalitymodule_providers",{"_index":1340,"title":{},"body":{"modules/PersonalityModule.html":{},"overview.html":{}}}],["cluster_sitemapmodule",{"_index":1519,"title":{},"body":{"modules/SitemapModule.html":{},"overview.html":{}}}],["cluster_sitemapmodule_exports",{"_index":1520,"title":{},"body":{"modules/SitemapModule.html":{},"overview.html":{}}}],["cluster_sitemapmodule_imports",{"_index":1522,"title":{},"body":{"modules/SitemapModule.html":{}}}],["cluster_sitemapmodule_providers",{"_index":1521,"title":{},"body":{"modules/SitemapModule.html":{},"overview.html":{}}}],["cluster_sourcemodule",{"_index":1605,"title":{},"body":{"modules/SourceModule.html":{},"overview.html":{}}}],["cluster_sourcemodule_exports",{"_index":1607,"title":{},"body":{"modules/SourceModule.html":{},"overview.html":{}}}],["cluster_sourcemodule_providers",{"_index":1606,"title":{},"body":{"modules/SourceModule.html":{},"overview.html":{}}}],["cluster_statsmodule",{"_index":1635,"title":{},"body":{"modules/StatsModule.html":{},"overview.html":{}}}],["cluster_statsmodule_exports",{"_index":1636,"title":{},"body":{"modules/StatsModule.html":{},"overview.html":{}}}],["cluster_statsmodule_imports",{"_index":1637,"title":{},"body":{"modules/StatsModule.html":{}}}],["cluster_statsmodule_providers",{"_index":1638,"title":{},"body":{"modules/StatsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1718,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1720,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":1719,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1721,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_viewmodule",{"_index":1835,"title":{},"body":{"modules/ViewModule.html":{},"overview.html":{}}}],["cluster_viewmodule_exports",{"_index":1836,"title":{},"body":{"modules/ViewModule.html":{},"overview.html":{}}}],["cluster_viewmodule_providers",{"_index":1837,"title":{},"body":{"modules/ViewModule.html":{},"overview.html":{}}}],["cluster_wikidatamodule",{"_index":1870,"title":{},"body":{"modules/WikidataModule.html":{},"overview.html":{}}}],["cluster_wikidatamodule_exports",{"_index":1872,"title":{},"body":{"modules/WikidataModule.html":{},"overview.html":{}}}],["cluster_wikidatamodule_providers",{"_index":1871,"title":{},"body":{"modules/WikidataModule.html":{},"overview.html":{}}}],["code",{"_index":1543,"title":{},"body":{"injectables/SitemapService.html":{},"controllers/ViewController.html":{},"license.html":{}}}],["codeofconductpage",{"_index":1790,"title":{},"body":{"controllers/ViewController.html":{}}}],["codeofconductpage(@req",{"_index":1829,"title":{},"body":{"controllers/ViewController.html":{}}}],["codeofconductpage(req",{"_index":1798,"title":{},"body":{"controllers/ViewController.html":{}}}],["collect",{"_index":2884,"title":{},"body":{"license.html":{}}}],["combate",{"_index":2143,"title":{},"body":{"index.html":{}}}],["combination",{"_index":1041,"title":{},"body":{"injectables/HistoryService.html":{},"license.html":{}}}],["combine",{"_index":2888,"title":{},"body":{"license.html":{}}}],["combined",{"_index":2566,"title":{},"body":{"license.html":{}}}],["combinedlistall",{"_index":1349,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["combinedlistall(query",{"_index":1355,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["comes",{"_index":2552,"title":{},"body":{"license.html":{}}}],["commands",{"_index":2390,"title":{},"body":{"license.html":{}}}],["commercial",{"_index":2656,"title":{},"body":{"license.html":{}}}],["commitment",{"_index":2830,"title":{},"body":{"license.html":{}}}],["common",{"_index":2650,"title":{},"body":{"license.html":{}}}],["communication",{"_index":2451,"title":{},"body":{"license.html":{}}}],["compilation",{"_index":2561,"title":{},"body":{"license.html":{}}}],["compilation's",{"_index":2570,"title":{},"body":{"license.html":{}}}],["compilations",{"_index":2867,"title":{},"body":{"license.html":{}}}],["compiler",{"_index":2429,"title":{},"body":{"license.html":{}}}],["compliance",{"_index":2789,"title":{},"body":{"license.html":{}}}],["comply",{"_index":2481,"title":{},"body":{"license.html":{}}}],["compodoc/compodoc",{"_index":2041,"title":{},"body":{"dependencies.html":{}}}],["component",{"_index":2417,"title":{},"body":{"license.html":{}}}],["components",{"_index":2125,"title":{},"body":{"dependencies.html":{}}}],["compose",{"_index":2157,"title":{},"body":{"index.html":{}}}],["compromise",{"_index":2067,"title":{},"body":{"dependencies.html":{}}}],["computer",{"_index":2358,"title":{},"body":{"license.html":{}}}],["computers",{"_index":2310,"title":{},"body":{"license.html":{}}}],["com|net|org|io|gov)/g",{"_index":1215,"title":{},"body":{"injectables/ParserService.html":{}}}],["concerning",{"_index":2890,"title":{},"body":{"license.html":{}}}],["concerns",{"_index":2897,"title":{},"body":{"license.html":{}}}],["conditioned",{"_index":2861,"title":{},"body":{"license.html":{}}}],["conditions",{"_index":2319,"title":{},"body":{"license.html":{}}}],["conduct",{"_index":1544,"title":{},"body":{"injectables/SitemapService.html":{},"controllers/ViewController.html":{}}}],["configmodule",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{}}}],["configmodule.forroot",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":243,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/EmailService.html":{},"miscellaneous/variables.html":{}}}],["configservice.get(\"disable_smtp",{"_index":3084,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get(\"users",{"_index":3082,"title":{},"body":{"miscellaneous/variables.html":{}}}],["conflicts",{"_index":1810,"title":{},"body":{"controllers/ViewController.html":{}}}],["connect",{"_index":2071,"title":{},"body":{"dependencies.html":{}}}],["connection",{"_index":2851,"title":{},"body":{"license.html":{}}}],["connection_uri",{"_index":3035,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consent",{"_index":2099,"title":{},"body":{"dependencies.html":{}}}],["consequence",{"_index":2776,"title":{},"body":{"license.html":{}}}],["consequential",{"_index":2928,"title":{},"body":{"license.html":{}}}],["consider",{"_index":2991,"title":{},"body":{"license.html":{}}}],["considered",{"_index":2734,"title":{},"body":{"license.html":{}}}],["consistent",{"_index":2823,"title":{},"body":{"license.html":{}}}],["conspicuously",{"_index":2530,"title":{},"body":{"license.html":{}}}],["const",{"_index":148,"title":{},"body":{"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"classes/NotFoundFilter.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["constantly",{"_index":2305,"title":{},"body":{"license.html":{}}}],["constitutes",{"_index":2470,"title":{},"body":{"license.html":{}}}],["constructor",{"_index":266,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{}}}],["constructor(claimreviewmodel",{"_index":497,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["constructor(claimreviewservice",{"_index":1642,"title":{},"body":{"injectables/StatsService.html":{}}}],["constructor(claimrevisionmodel",{"_index":669,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["constructor(configservice",{"_index":902,"title":{},"body":{"injectables/EmailService.html":{}}}],["constructor(historymodel",{"_index":1032,"title":{},"body":{"injectables/HistoryService.html":{}}}],["constructor(logger",{"_index":1122,"title":{},"body":{"classes/Logger.html":{}}}],["constructor(personalityservice",{"_index":1526,"title":{},"body":{"injectables/SitemapService.html":{}}}],["constructor(private",{"_index":1509,"title":{},"body":{"controllers/SitemapController.html":{},"controllers/SourceController.html":{},"controllers/ViewController.html":{}}}],["constructor(req",{"_index":719,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["constructor(sourcemodel",{"_index":1615,"title":{},"body":{"injectables/SourceService.html":{}}}],["constructor(usermodel",{"_index":1097,"title":{},"body":{"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["constructor(wikidatacache",{"_index":1889,"title":{},"body":{"injectables/WikidataService.html":{}}}],["construed",{"_index":2872,"title":{},"body":{"license.html":{}}}],["consumer",{"_index":2634,"title":{},"body":{"license.html":{}}}],["contact",{"_index":2970,"title":{},"body":{"license.html":{}}}],["contain",{"_index":2868,"title":{},"body":{"license.html":{}}}],["containing",{"_index":2716,"title":{},"body":{"license.html":{}}}],["contains",{"_index":2738,"title":{},"body":{"license.html":{}}}],["content",{"_index":625,"title":{},"body":{"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"classes/CreateClaimDTO.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["contents",{"_index":2827,"title":{},"body":{"license.html":{}}}],["context",{"_index":1125,"title":{},"body":{"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"guards/SessionGuard.html":{},"license.html":{}}}],["context.getresponse",{"_index":1160,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["context.switchtohttp",{"_index":1488,"title":{},"body":{"guards/SessionGuard.html":{}}}],["continue",{"_index":2684,"title":{},"body":{"license.html":{}}}],["continued",{"_index":2669,"title":{},"body":{"license.html":{}}}],["continuing",{"_index":3117,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contractual",{"_index":2731,"title":{},"body":{"license.html":{}}}],["contradict",{"_index":2878,"title":{},"body":{"license.html":{}}}],["contrast",{"_index":2204,"title":{},"body":{"license.html":{}}}],["contributor",{"_index":2814,"title":{},"body":{"license.html":{}}}],["contributor's",{"_index":2816,"title":{},"body":{"license.html":{}}}],["control",{"_index":2436,"title":{},"body":{"license.html":{}}}],["controlled",{"_index":2818,"title":{},"body":{"license.html":{}}}],["controller",{"_index":160,"title":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/HistoryController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/RootController.html":{},"controllers/SitemapController.html":{},"controllers/SourceController.html":{},"controllers/StatsController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/HistoryController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/RootController.html":{},"controllers/SitemapController.html":{},"controllers/SourceController.html":{},"controllers/StatsController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"coverage.html":{}}}],["controller(\"api",{"_index":1466,"title":{},"body":{"controllers/RootController.html":{}}}],["controller(\"api/claimreview",{"_index":461,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["controller(\"api/stats",{"_index":1634,"title":{},"body":{"controllers/StatsController.html":{}}}],["controllers",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"controllers/RootController.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"overview.html":{}}}],["controllers:[historycontroller",{"_index":1027,"title":{},"body":{"modules/HistoryModule.html":{}}}],["convenient",{"_index":2380,"title":{},"body":{"license.html":{}}}],["convert",{"_index":694,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{}}}],["convey",{"_index":2366,"title":{},"body":{"license.html":{}}}],["conveyance",{"_index":2855,"title":{},"body":{"license.html":{}}}],["conveyed",{"_index":2679,"title":{},"body":{"license.html":{}}}],["conveying",{"_index":2374,"title":{},"body":{"license.html":{}}}],["conveys",{"_index":2730,"title":{},"body":{"license.html":{}}}],["cookie",{"_index":2074,"title":{},"body":{"dependencies.html":{}}}],["cookieparser",{"_index":2013,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["copies",{"_index":2192,"title":{},"body":{"license.html":{}}}],["copy",{"_index":2189,"title":{},"body":{"license.html":{}}}],["copying",{"_index":2320,"title":{},"body":{"license.html":{}}}],["copyleft",{"_index":2195,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":2180,"title":{},"body":{"license.html":{}}}],["copyrightable",{"_index":2329,"title":{},"body":{"license.html":{}}}],["copyrighted",{"_index":2486,"title":{},"body":{"license.html":{}}}],["correction",{"_index":2922,"title":{},"body":{"license.html":{}}}],["corresponding",{"_index":2432,"title":{},"body":{"license.html":{}}}],["cors",{"_index":3042,"title":{},"body":{"miscellaneous/variables.html":{}}}],["corsoptions",{"_index":3027,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cost",{"_index":2596,"title":{},"body":{"license.html":{}}}],["count",{"_index":490,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/UtilService.html":{}}}],["count(query",{"_index":517,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["countdown",{"_index":2101,"title":{},"body":{"dependencies.html":{}}}],["counterclaim",{"_index":2807,"title":{},"body":{"license.html":{}}}],["countreviewsbysentencehash",{"_index":491,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["countreviewsbysentencehash(sentencehash",{"_index":521,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["countries",{"_index":2363,"title":{},"body":{"license.html":{}}}],["country",{"_index":2845,"title":{},"body":{"license.html":{}}}],["course",{"_index":2981,"title":{},"body":{"license.html":{}}}],["court",{"_index":2877,"title":{},"body":{"license.html":{}}}],["courts",{"_index":2945,"title":{},"body":{"license.html":{}}}],["covenant",{"_index":2833,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":1988,"title":{"coverage.html":{}},"body":{"coverage.html":{},"license.html":{}}}],["covered",{"_index":2346,"title":{},"body":{"license.html":{}}}],["create",{"_index":169,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"injectables/SourceService.html":{},"classes/UpdateClaimDTO.html":{},"miscellaneous/enumerations.html":{}}}],["create(@body",{"_index":304,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/PersonalityController.html":{}}}],["create(claim",{"_index":728,"title":{},"body":{"injectables/ClaimService.html":{}}}],["create(claimid",{"_index":672,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["create(claimreview",{"_index":523,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["create(createclaimdto",{"_index":196,"title":{},"body":{"controllers/ClaimController.html":{}}}],["create(createclaimreview",{"_index":450,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["create(createpersonality",{"_index":1270,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["create(data",{"_index":1617,"title":{},"body":{"injectables/SourceService.html":{}}}],["create(personality",{"_index":1358,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["createclaimdto",{"_index":197,"title":{"classes/CreateClaimDTO.html":{}},"body":{"controllers/ClaimController.html":{},"classes/CreateClaimDTO.html":{},"classes/UpdateClaimDTO.html":{},"coverage.html":{}}}],["createclaimdto.recaptcha",{"_index":308,"title":{},"body":{"controllers/ClaimController.html":{}}}],["createclaimreview",{"_index":451,"title":{"classes/CreateClaimReview.html":{}},"body":{"controllers/ClaimReviewController.html":{},"classes/CreateClaimReview.html":{},"coverage.html":{}}}],["createclaimreview.recaptcha",{"_index":462,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["createdat",{"_index":1860,"title":{},"body":{"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["createhistory",{"_index":1029,"title":{},"body":{"injectables/HistoryService.html":{}}}],["createhistory(data",{"_index":1034,"title":{},"body":{"injectables/HistoryService.html":{}}}],["createparagraphid",{"_index":1171,"title":{},"body":{"injectables/ParserService.html":{}}}],["createpersonality",{"_index":872,"title":{"classes/CreatePersonality.html":{}},"body":{"classes/CreatePersonality.html":{},"controllers/PersonalityController.html":{},"coverage.html":{}}}],["creates",{"_index":526,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["createsentenceid",{"_index":1172,"title":{},"body":{"injectables/ParserService.html":{}}}],["createserver",{"_index":1849,"title":{},"body":{"injectables/ViewService.html":{}}}],["createtransport",{"_index":899,"title":{},"body":{"injectables/EmailService.html":{}}}],["creation",{"_index":528,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["credenciais",{"_index":3109,"title":{},"body":{"miscellaneous/variables.html":{}}}],["credentials",{"_index":3029,"title":{},"body":{"miscellaneous/variables.html":{}}}],["criterion",{"_index":2394,"title":{},"body":{"license.html":{}}}],["cross",{"_index":2806,"title":{},"body":{"license.html":{}}}],["cure",{"_index":2768,"title":{},"body":{"license.html":{}}}],["currentpassword",{"_index":1698,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["custom",{"_index":1149,"title":{},"body":{"classes/NotFoundFilter.html":{},"controllers/ViewController.html":{}}}],["customarily",{"_index":2586,"title":{},"body":{"license.html":{}}}],["customer",{"_index":2592,"title":{},"body":{"license.html":{}}}],["d",{"_index":2158,"title":{},"body":{"index.html":{},"license.html":{}}}],["da",{"_index":607,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["damages",{"_index":2926,"title":{},"body":{"license.html":{}}}],["danger",{"_index":2312,"title":{},"body":{"license.html":{}}}],["data",{"_index":269,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"injectables/SourceService.html":{},"injectables/WikidataService.html":{},"license.html":{}}}],["data.entities",{"_index":1927,"title":{},"body":{"injectables/WikidataService.html":{}}}],["data.query",{"_index":1986,"title":{},"body":{"injectables/WikidataService.html":{}}}],["data.targetid",{"_index":1621,"title":{},"body":{"injectables/SourceService.html":{}}}],["data.user",{"_index":1623,"title":{},"body":{"injectables/SourceService.html":{}}}],["database",{"_index":539,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{}}}],["dataid",{"_index":1050,"title":{},"body":{"injectables/HistoryService.html":{}}}],["date",{"_index":352,"title":{},"body":{"controllers/ClaimController.html":{},"classes/ClaimRevision.html":{},"classes/CreateClaimDTO.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"classes/WikidataCache.html":{},"license.html":{}}}],["date.now",{"_index":1867,"title":{},"body":{"classes/WikidataCache.html":{}}}],["days",{"_index":2763,"title":{},"body":{"license.html":{}}}],["db",{"_index":2154,"title":{},"body":{"index.html":{}}}],["de",{"_index":1057,"title":{},"body":{"injectables/HistoryService.html":{},"index.html":{}}}],["debug",{"_index":1118,"title":{},"body":{"classes/Logger.html":{}}}],["debug(message",{"_index":1124,"title":{},"body":{"classes/Logger.html":{}}}],["december",{"_index":2511,"title":{},"body":{"license.html":{}}}],["decide",{"_index":2906,"title":{},"body":{"license.html":{}}}],["declining",{"_index":2722,"title":{},"body":{"license.html":{}}}],["decorators",{"_index":121,"title":{},"body":{"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"classes/ClaimRevision.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"controllers/HomeController.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"controllers/RootController.html":{},"controllers/SitemapController.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"controllers/StatsController.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"classes/WikidataCache.html":{}}}],["deemed",{"_index":2499,"title":{},"body":{"license.html":{}}}],["default",{"_index":519,"title":{},"body":{"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"injectables/HistoryService.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/SourceService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":696,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{}}}],["defective",{"_index":2918,"title":{},"body":{"license.html":{}}}],["defenses",{"_index":2875,"title":{},"body":{"license.html":{}}}],["defined",{"_index":11,"title":{},"body":{"modules/AppModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{},"license.html":{}}}],["definition",{"_index":2441,"title":{},"body":{"license.html":{}}}],["definitions",{"_index":2323,"title":{},"body":{"license.html":{}}}],["delete",{"_index":170,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"miscellaneous/enumerations.html":{}}}],["delete(\":id",{"_index":469,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["delete(\"api/claim/:id",{"_index":323,"title":{},"body":{"controllers/ClaimController.html":{}}}],["delete(\"api/personality/:id",{"_index":1324,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["delete(@param",{"_index":470,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["delete(@param(\"id",{"_index":324,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{}}}],["delete(claimid",{"_index":200,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{}}}],["delete(claimreviewid",{"_index":534,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["delete(params",{"_index":454,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["delete(personalityid",{"_index":1273,"title":{},"body":{"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["deleted",{"_index":1327,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["deletion",{"_index":537,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["denied",{"_index":2686,"title":{},"body":{"license.html":{}}}],["denominated",{"_index":2831,"title":{},"body":{"license.html":{}}}],["deny",{"_index":2275,"title":{},"body":{"license.html":{}}}],["denying",{"_index":2234,"title":{},"body":{"license.html":{}}}],["dependencies",{"_index":95,"title":{"dependencies.html":{}},"body":{"modules/AuthModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/HomeModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deprive",{"_index":2840,"title":{},"body":{"license.html":{}}}],["desc",{"_index":329,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/HistoryService.html":{}}}],["description",{"_index":529,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreatePersonality.html":{},"injectables/HistoryService.html":{},"classes/NotFoundFilter.html":{},"classes/Personality.html":{},"injectables/PersonalityService.html":{},"classes/Source.html":{},"injectables/WikidataService.html":{}}}],["descriptions",{"_index":1937,"title":{},"body":{"injectables/WikidataService.html":{}}}],["design/icons",{"_index":2035,"title":{},"body":{"dependencies.html":{}}}],["designated",{"_index":2604,"title":{},"body":{"license.html":{}}}],["designed",{"_index":2200,"title":{},"body":{"license.html":{}}}],["detail",{"_index":2895,"title":{},"body":{"license.html":{}}}],["details",{"_index":984,"title":{},"body":{"classes/History.html":{},"injectables/HistoryService.html":{},"license.html":{}}}],["details.the",{"_index":2979,"title":{},"body":{"license.html":{}}}],["determining",{"_index":2644,"title":{},"body":{"license.html":{}}}],["dev",{"_index":1852,"title":{},"body":{"injectables/ViewService.html":{},"index.html":{}}}],["develop",{"_index":2954,"title":{},"body":{"license.html":{}}}],["developers",{"_index":2252,"title":{},"body":{"license.html":{}}}],["development",{"_index":2166,"title":{},"body":{"index.html":{},"license.html":{}}}],["devices",{"_index":2274,"title":{},"body":{"license.html":{}}}],["dhaiwat10/react",{"_index":2043,"title":{},"body":{"dependencies.html":{}}}],["differ",{"_index":2894,"title":{},"body":{"license.html":{}}}],["different",{"_index":2607,"title":{},"body":{"license.html":{}}}],["differently",{"_index":2710,"title":{},"body":{"license.html":{}}}],["dir",{"_index":1855,"title":{},"body":{"injectables/ViewService.html":{}}}],["direction",{"_index":2485,"title":{},"body":{"license.html":{}}}],["directions",{"_index":2613,"title":{},"body":{"license.html":{}}}],["directly",{"_index":2351,"title":{},"body":{"license.html":{}}}],["disable",{"_index":1431,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["disablesmtp",{"_index":3083,"title":{},"body":{"miscellaneous/variables.html":{}}}],["disclaim",{"_index":2522,"title":{},"body":{"license.html":{}}}],["disclaimer",{"_index":2909,"title":{},"body":{"license.html":{}}}],["disclaiming",{"_index":2707,"title":{},"body":{"license.html":{}}}],["discriminatory",{"_index":2859,"title":{},"body":{"license.html":{}}}],["discursos",{"_index":2140,"title":{},"body":{"index.html":{}}}],["display",{"_index":2560,"title":{},"body":{"license.html":{}}}],["displayed",{"_index":2715,"title":{},"body":{"license.html":{}}}],["displays",{"_index":2376,"title":{},"body":{"license.html":{}}}],["distinguishing",{"_index":2898,"title":{},"body":{"license.html":{}}}],["distribute",{"_index":2190,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":2966,"title":{},"body":{"license.html":{}}}],["distributing",{"_index":2863,"title":{},"body":{"license.html":{}}}],["distribution",{"_index":2321,"title":{},"body":{"license.html":{}}}],["docker:docker",{"_index":2156,"title":{},"body":{"index.html":{}}}],["document",{"_index":1036,"title":{},"body":{"injectables/HistoryService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"classes/WikidataCache.html":{},"license.html":{}}}],["documentation",{"_index":1989,"title":{},"body":{"coverage.html":{}}}],["documented",{"_index":2694,"title":{},"body":{"license.html":{}}}],["doesn't",{"_index":538,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"controllers/UsersController.html":{}}}],["dom",{"_index":2103,"title":{},"body":{"dependencies.html":{}}}],["domains",{"_index":2297,"title":{},"body":{"license.html":{}}}],["domino",{"_index":2076,"title":{},"body":{"dependencies.html":{}}}],["doubtful",{"_index":2645,"title":{},"body":{"license.html":{}}}],["downstream",{"_index":2786,"title":{},"body":{"license.html":{}}}],["draft",{"_index":2078,"title":{},"body":{"dependencies.html":{}}}],["dto/create",{"_index":255,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/PersonalityController.html":{}}}],["dto/get",{"_index":257,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{}}}],["dto/update",{"_index":261,"title":{},"body":{"controllers/ClaimController.html":{}}}],["duplicate",{"_index":1764,"title":{},"body":{"injectables/UtilService.html":{}}}],["durable",{"_index":2585,"title":{},"body":{"license.html":{}}}],["dwelling",{"_index":2643,"title":{},"body":{"license.html":{}}}],["dynamic",{"_index":1577,"title":{},"body":{"classes/Source.html":{}}}],["dynamically",{"_index":2445,"title":{},"body":{"license.html":{}}}],["dynamicmodule",{"_index":19,"title":{},"body":{"modules/AppModule.html":{}}}],["e",{"_index":710,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/EmailService.html":{},"guards/SessionGuard.html":{},"injectables/SitemapService.html":{},"controllers/UsersController.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["e.message",{"_index":1569,"title":{},"body":{"injectables/SitemapService.html":{},"controllers/UsersController.html":{}}}],["each",{"_index":2332,"title":{},"body":{"license.html":{}}}],["earlier",{"_index":2345,"title":{},"body":{"license.html":{}}}],["effect",{"_index":2942,"title":{},"body":{"license.html":{}}}],["effected",{"_index":2520,"title":{},"body":{"license.html":{}}}],["effective",{"_index":2500,"title":{},"body":{"license.html":{}}}],["effectively",{"_index":2314,"title":{},"body":{"license.html":{}}}],["efforts",{"_index":2800,"title":{},"body":{"license.html":{}}}],["electronic",{"_index":2971,"title":{},"body":{"license.html":{}}}],["email",{"_index":1113,"title":{},"body":{"injectables/LocalStrategy.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["email.service",{"_index":897,"title":{},"body":{"modules/EmailModule.html":{}}}],["email/email.module",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["emailmodule",{"_index":50,"title":{"modules/EmailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EmailModule.html":{},"modules.html":{},"overview.html":{}}}],["emailresponse",{"_index":3099,"title":{},"body":{"miscellaneous/variables.html":{}}}],["emailresult",{"_index":948,"title":{},"body":{"injectables/EmailService.html":{}}}],["emailservice",{"_index":895,"title":{"injectables/EmailService.html":{}},"body":{"modules/EmailModule.html":{},"injectables/EmailService.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["emailservice.sendemail",{"_index":3100,"title":{},"body":{"miscellaneous/variables.html":{}}}],["embodied",{"_index":2580,"title":{},"body":{"license.html":{}}}],["employer",{"_index":2984,"title":{},"body":{"license.html":{}}}],["en",{"_index":1365,"title":{},"body":{"injectables/PersonalityService.html":{},"injectables/WikidataService.html":{}}}],["enable",{"_index":2420,"title":{},"body":{"license.html":{}}}],["enableimplicitconversion",{"_index":3047,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enables",{"_index":2368,"title":{},"body":{"license.html":{}}}],["encodeuricomponent(params.wikidataid",{"_index":1922,"title":{},"body":{"injectables/WikidataService.html":{}}}],["encoding",{"_index":925,"title":{},"body":{"injectables/EmailService.html":{}}}],["end",{"_index":2953,"title":{},"body":{"license.html":{}}}],["enforce",{"_index":2832,"title":{},"body":{"license.html":{}}}],["enforcing",{"_index":2525,"title":{},"body":{"license.html":{}}}],["engine",{"_index":1568,"title":{},"body":{"injectables/SitemapService.html":{}}}],["english/javascript",{"_index":1763,"title":{},"body":{"injectables/UtilService.html":{}}}],["ensure",{"_index":2618,"title":{},"body":{"license.html":{}}}],["entered",{"_index":2869,"title":{},"body":{"license.html":{}}}],["entire",{"_index":2550,"title":{},"body":{"license.html":{}}}],["entirely",{"_index":2886,"title":{},"body":{"license.html":{}}}],["entities",{"_index":1926,"title":{},"body":{"injectables/WikidataService.html":{}}}],["entities[params.wikidataid",{"_index":1929,"title":{},"body":{"injectables/WikidataService.html":{}}}],["entity",{"_index":2790,"title":{},"body":{"license.html":{}}}],["enum",{"_index":427,"title":{},"body":{"classes/ClaimReview.html":{},"classes/History.html":{},"classes/Source.html":{}}}],["enumerations",{"_index":2128,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["equal",{"_index":544,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["equivalent",{"_index":2473,"title":{},"body":{"license.html":{}}}],["err",{"_index":1403,"title":{},"body":{"injectables/PersonalityService.html":{},"controllers/UsersController.html":{}}}],["erroneously",{"_index":2273,"title":{},"body":{"license.html":{}}}],["error",{"_index":313,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"controllers/PersonalityController.html":{},"injectables/SitemapService.html":{},"injectables/ViewService.html":{},"miscellaneous/variables.html":{}}}],["error(\"invalid",{"_index":1704,"title":{},"body":{"controllers/UsersController.html":{}}}],["error(\"repeated",{"_index":1706,"title":{},"body":{"controllers/UsersController.html":{}}}],["error(message",{"_index":1128,"title":{},"body":{"classes/Logger.html":{}}}],["error.keypattern",{"_index":1309,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["error.keypattern.wikidata",{"_index":1310,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["error.keyvalue.wikidata",{"_index":1312,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["error.message",{"_index":1311,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["error.name",{"_index":1307,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["errorformat",{"_index":1968,"title":{},"body":{"injectables/WikidataService.html":{}}}],["eslint",{"_index":1430,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["eslint/eslint",{"_index":2055,"title":{},"body":{"dependencies.html":{}}}],["essential",{"_index":2423,"title":{},"body":{"license.html":{}}}],["est",{"_index":608,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["even",{"_index":2938,"title":{},"body":{"license.html":{}}}],["event",{"_index":2924,"title":{},"body":{"license.html":{}}}],["everyone",{"_index":2187,"title":{},"body":{"license.html":{}}}],["exact",{"_index":2342,"title":{},"body":{"license.html":{}}}],["exaggerated",{"_index":433,"title":{},"body":{"classes/ClaimReview.html":{},"miscellaneous/enumerations.html":{}}}],["example",{"_index":2242,"title":{},"body":{"license.html":{}}}],["except",{"_index":701,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{},"license.html":{}}}],["exception",{"_index":1157,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["exceptionfilter",{"_index":1153,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["exceptions",{"_index":1147,"title":{},"body":{"classes/NotFoundFilter.html":{},"license.html":{}}}],["excluded",{"_index":2632,"title":{},"body":{"license.html":{}}}],["excluding",{"_index":2873,"title":{},"body":{"license.html":{}}}],["exclusion",{"_index":2963,"title":{},"body":{"license.html":{}}}],["exclusive",{"_index":2824,"title":{},"body":{"license.html":{}}}],["exclusively",{"_index":2479,"title":{},"body":{"license.html":{}}}],["excuse",{"_index":2879,"title":{},"body":{"license.html":{}}}],["exec",{"_index":1912,"title":{},"body":{"injectables/WikidataService.html":{}}}],["executable",{"_index":2410,"title":{},"body":{"license.html":{}}}],["execute",{"_index":2667,"title":{},"body":{"license.html":{}}}],["executing",{"_index":2357,"title":{},"body":{"license.html":{}}}],["executioncontext",{"_index":1483,"title":{},"body":{"guards/SessionGuard.html":{}}}],["exercise",{"_index":2801,"title":{},"body":{"license.html":{}}}],["exercising",{"_index":2521,"title":{},"body":{"license.html":{}}}],["exists",{"_index":1314,"title":{},"body":{"controllers/PersonalityController.html":{},"injectables/WikidataService.html":{}}}],["expected",{"_index":2654,"title":{},"body":{"license.html":{}}}],["expects",{"_index":2653,"title":{},"body":{"license.html":{}}}],["expireafterseconds",{"_index":1879,"title":{},"body":{"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["explains",{"_index":2264,"title":{},"body":{"license.html":{}}}],["explicitly",{"_index":2464,"title":{},"body":{"license.html":{}}}],["export",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"dependencies.html":{}}}],["exports",{"_index":396,"title":{},"body":{"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{}}}],["express",{"_index":248,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{},"controllers/HomeController.html":{},"classes/NotFoundFilter.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"dependencies.html":{},"license.html":{}}}],["expressed",{"_index":2911,"title":{},"body":{"license.html":{}}}],["expressly",{"_index":2747,"title":{},"body":{"license.html":{}}}],["extend",{"_index":2300,"title":{},"body":{"license.html":{}}}],["extended",{"_index":2858,"title":{},"body":{"license.html":{}}}],["extends",{"_index":1094,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateClaimDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{}}}],["extensions",{"_index":2565,"title":{},"body":{"license.html":{}}}],["extent",{"_index":2379,"title":{},"body":{"license.html":{}}}],["extract",{"_index":1236,"title":{},"body":{"injectables/ParserService.html":{},"injectables/WikidataService.html":{}}}],["extractclaimwithtextsummary",{"_index":1350,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["extractclaimwithtextsummary(claims",{"_index":1362,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["extractproperties",{"_index":1882,"title":{},"body":{"injectables/WikidataService.html":{}}}],["extractproperties(wikidata",{"_index":1891,"title":{},"body":{"injectables/WikidataService.html":{}}}],["extractvalue",{"_index":1883,"title":{},"body":{"injectables/WikidataService.html":{}}}],["extractvalue(wikidata",{"_index":1893,"title":{},"body":{"injectables/WikidataService.html":{}}}],["f",{"_index":2728,"title":{},"body":{"license.html":{}}}],["facilities",{"_index":2480,"title":{},"body":{"license.html":{}}}],["fact",{"_index":429,"title":{},"body":{"classes/ClaimReview.html":{},"miscellaneous/enumerations.html":{}}}],["fails",{"_index":2759,"title":{},"body":{"license.html":{}}}],["failure",{"_index":2936,"title":{},"body":{"license.html":{}}}],["fair",{"_index":2472,"title":{},"body":{"license.html":{}}}],["fake",{"_index":2144,"title":{},"body":{"index.html":{}}}],["fake\"].indexof",{"_index":1585,"title":{},"body":{"classes/Source.html":{}}}],["false",{"_index":342,"title":{},"body":{"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"injectables/SitemapService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/WikidataService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["family",{"_index":2638,"title":{},"body":{"license.html":{}}}],["fashion",{"_index":2339,"title":{},"body":{"license.html":{}}}],["favor",{"_index":2648,"title":{},"body":{"license.html":{}}}],["feature",{"_index":2383,"title":{},"body":{"license.html":{}}}],["fee",{"_index":2246,"title":{},"body":{"license.html":{}}}],["fetch",{"_index":806,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["fetchonly",{"_index":1083,"title":{},"body":{"controllers/HomeController.html":{}}}],["fetchproperties",{"_index":1884,"title":{},"body":{"injectables/WikidataService.html":{}}}],["fetchproperties(params",{"_index":1895,"title":{},"body":{"injectables/WikidataService.html":{}}}],["field",{"_index":642,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["field(after",{"_index":995,"title":{},"body":{"classes/History.html":{}}}],["file",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"license.html":{}}}],["file:${imagetitle",{"_index":1980,"title":{},"body":{"injectables/WikidataService.html":{}}}],["filename",{"_index":1945,"title":{},"body":{"injectables/WikidataService.html":{}}}],["files",{"_index":2442,"title":{},"body":{"license.html":{}}}],["filterquery",{"_index":756,"title":{},"body":{"injectables/ClaimService.html":{}}}],["filters",{"_index":1146,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["filters/not",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["finalize",{"_index":512,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["finally",{"_index":2303,"title":{},"body":{"license.html":{}}}],["find",{"_index":596,"title":{},"body":{"injectables/ClaimReviewService.html":{},"license.html":{}}}],["findall",{"_index":1669,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findall(@req",{"_index":1690,"title":{},"body":{"controllers/UsersController.html":{}}}],["findall(req",{"_index":1673,"title":{},"body":{"controllers/UsersController.html":{}}}],["finish",{"_index":3116,"title":{},"body":{"miscellaneous/variables.html":{}}}],["finished",{"_index":3123,"title":{},"body":{"miscellaneous/variables.html":{}}}],["first",{"_index":643,"title":{},"body":{"classes/ClaimRevision.html":{},"injectables/UsersService.html":{},"license.html":{}}}],["firstpasswordchanged",{"_index":1657,"title":{},"body":{"classes/User.html":{},"interfaces/UserDocument.html":{}}}],["fitness",{"_index":2914,"title":{},"body":{"license.html":{}}}],["fixed",{"_index":2584,"title":{},"body":{"license.html":{}}}],["flow",{"_index":2452,"title":{},"body":{"license.html":{}}}],["follow",{"_index":2173,"title":{},"body":{"index.html":{},"license.html":{}}}],["following",{"_index":2828,"title":{},"body":{"license.html":{}}}],["forbid",{"_index":2519,"title":{},"body":{"license.html":{}}}],["forbidnonwhitelisted",{"_index":3049,"title":{},"body":{"miscellaneous/variables.html":{}}}],["force",{"_index":2476,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["forcepassword",{"_index":3087,"title":{},"body":{"miscellaneous/variables.html":{}}}],["foreignfield",{"_index":154,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"classes/Personality.html":{}}}],["fork",{"_index":2147,"title":{},"body":{"index.html":{}}}],["form",{"_index":2396,"title":{},"body":{"license.html":{}}}],["format",{"_index":1923,"title":{},"body":{"injectables/WikidataService.html":{},"license.html":{}}}],["formatstats",{"_index":1752,"title":{},"body":{"injectables/UtilService.html":{}}}],["formatstats(reviews",{"_index":1754,"title":{},"body":{"injectables/UtilService.html":{}}}],["formatversion",{"_index":1924,"title":{},"body":{"injectables/WikidataService.html":{}}}],["forms",{"_index":2575,"title":{},"body":{"license.html":{}}}],["found",{"_index":298,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HistoryController.html":{},"classes/NotFoundFilter.html":{},"injectables/PersonalityService.html":{},"controllers/SourceController.html":{},"license.html":{}}}],["found.filter",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["found.filter.ts",{"_index":1145,"title":{},"body":{"classes/NotFoundFilter.html":{},"coverage.html":{}}}],["found.filter.ts:9",{"_index":1156,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["foundation",{"_index":2184,"title":{},"body":{"license.html":{}}}],["free",{"_index":2182,"title":{},"body":{"license.html":{}}}],["freedom",{"_index":2203,"title":{},"body":{"license.html":{}}}],["freedoms",{"_index":2249,"title":{},"body":{"license.html":{}}}],["front",{"_index":541,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["fs",{"_index":919,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["fs.readfilesync(path.resolve(__dirname",{"_index":924,"title":{},"body":{"injectables/EmailService.html":{}}}],["fulfilling",{"_index":2503,"title":{},"body":{"license.html":{}}}],["full",{"_index":2965,"title":{},"body":{"license.html":{}}}],["fully",{"_index":664,"title":{},"body":{"modules/ClaimRevisionModule.html":{}}}],["function",{"_index":525,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{},"coverage.html":{}}}],["functioning",{"_index":2670,"title":{},"body":{"license.html":{}}}],["functions",{"_index":2131,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["fundamentally",{"_index":2279,"title":{},"body":{"license.html":{}}}],["further",{"_index":2606,"title":{},"body":{"license.html":{}}}],["future",{"_index":1197,"title":{},"body":{"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"license.html":{}}}],["general",{"_index":2176,"title":{},"body":{"license.html":{}}}],["generally",{"_index":2439,"title":{},"body":{"license.html":{}}}],["generate",{"_index":2433,"title":{},"body":{"license.html":{}}}],["generatepassword",{"_index":3085,"title":{},"body":{"miscellaneous/variables.html":{}}}],["generatepassword(userdata.istestuser",{"_index":3119,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get(\"404",{"_index":1832,"title":{},"body":{"controllers/ViewController.html":{}}}],["get(\":id",{"_index":466,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["get(\"_next",{"_index":1830,"title":{},"body":{"controllers/ViewController.html":{}}}],["get(\"about",{"_index":1824,"title":{},"body":{"controllers/ViewController.html":{}}}],["get(\"api/claim",{"_index":281,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get(\"api/claim/:claimid/sentence/:sentencehash/reviews",{"_index":326,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get(\"api/claim/:id",{"_index":317,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get(\"api/history/:targetmodel/:targetid",{"_index":1009,"title":{},"body":{"controllers/HistoryController.html":{}}}],["get(\"api/personality",{"_index":1303,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get(\"api/personality/:id",{"_index":1315,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get(\"api/personality/:id/reviews",{"_index":1328,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get(\"api/source/:targetid",{"_index":1597,"title":{},"body":{"controllers/SourceController.html":{}}}],["get(\"api/user/validate",{"_index":1689,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(\"code",{"_index":1828,"title":{},"body":{"controllers/ViewController.html":{}}}],["get(\"health",{"_index":1476,"title":{},"body":{"controllers/RootController.html":{}}}],["get(\"home",{"_index":1077,"title":{},"body":{"controllers/HomeController.html":{},"controllers/StatsController.html":{}}}],["get(\"login",{"_index":1715,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(\"personality",{"_index":1335,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get(\"personality/:personalityslug/claim/:claimslug",{"_index":379,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get(\"personality/:personalityslug/claim/:claimslug/history",{"_index":386,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get(\"personality/:personalityslug/claim/:claimslug/sentence/:sentencehash",{"_index":356,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get(\"personality/:personalityslug/claim/:claimslug/sources",{"_index":383,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get(\"personality/:slug",{"_index":1333,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get(\"personality/:slug/claim/create",{"_index":376,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get(\"personality/:slug/history",{"_index":1338,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get(\"personality/search",{"_index":1330,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get(\"privacy",{"_index":1826,"title":{},"body":{"controllers/ViewController.html":{}}}],["get(\"profile",{"_index":1716,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(\"robots.txt",{"_index":1467,"title":{},"body":{"controllers/RootController.html":{}}}],["get(\"sitemap.xml",{"_index":1510,"title":{},"body":{"controllers/SitemapController.html":{}}}],["get(\"submit",{"_index":1516,"title":{},"body":{"controllers/SitemapController.html":{}}}],["get('404",{"_index":1804,"title":{},"body":{"controllers/ViewController.html":{}}}],["get(':id",{"_index":458,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["get('_next",{"_index":1796,"title":{},"body":{"controllers/ViewController.html":{}}}],["get('about",{"_index":1813,"title":{},"body":{"controllers/ViewController.html":{}}}],["get('api/claim",{"_index":216,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get('api/claim/:claimid/sentence/:sentencehash/reviews",{"_index":211,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get('api/claim/:id",{"_index":204,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get('api/history/:targetmodel/:targetid",{"_index":1005,"title":{},"body":{"controllers/HistoryController.html":{}}}],["get('api/personality",{"_index":1283,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get('api/personality/:id",{"_index":1277,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get('api/personality/:id/reviews",{"_index":1280,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get('api/source/:targetid",{"_index":1593,"title":{},"body":{"controllers/SourceController.html":{}}}],["get('code",{"_index":1799,"title":{},"body":{"controllers/ViewController.html":{}}}],["get('health",{"_index":1460,"title":{},"body":{"controllers/RootController.html":{}}}],["get('home",{"_index":1073,"title":{},"body":{"controllers/HomeController.html":{},"controllers/StatsController.html":{}}}],["get('login",{"_index":1679,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('personality",{"_index":1291,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get('personality/:personalityslug/claim/:claimslug",{"_index":219,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get('personality/:personalityslug/claim/:claimslug/history",{"_index":222,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get('personality/:personalityslug/claim/:claimslug/sentence/:sentencehash",{"_index":207,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get('personality/:personalityslug/claim/:claimslug/sources",{"_index":225,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get('personality/:slug",{"_index":1294,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get('personality/:slug/claim/create",{"_index":194,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get('personality/:slug/history",{"_index":1288,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get('privacy",{"_index":1817,"title":{},"body":{"controllers/ViewController.html":{}}}],["get('robots.txt",{"_index":1464,"title":{},"body":{"controllers/RootController.html":{}}}],["get('sitemap.xml')@header('content",{"_index":1499,"title":{},"body":{"controllers/SitemapController.html":{}}}],["get(@param",{"_index":467,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["get(@param(\"id",{"_index":1316,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get(`https://www.wikidata.org/w/api.php",{"_index":1971,"title":{},"body":{"injectables/WikidataService.html":{}}}],["get(params",{"_index":457,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["get(personalityid",{"_index":1276,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get,head,put,patch,post,delete",{"_index":3030,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getbyid",{"_index":171,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/UsersService.html":{}}}],["getbyid(@param(\"id",{"_index":318,"title":{},"body":{"controllers/ClaimController.html":{}}}],["getbyid(claimid",{"_index":203,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{}}}],["getbyid(claimreviewid",{"_index":545,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getbyid(personalityid",{"_index":1318,"title":{},"body":{"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["getbyid(userid",{"_index":1734,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbypersonalityidandclaimslug",{"_index":716,"title":{},"body":{"injectables/ClaimService.html":{}}}],["getbypersonalityidandclaimslug(personalityid",{"_index":733,"title":{},"body":{"injectables/ClaimService.html":{}}}],["getbyslug",{"_index":1351,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["getbyslug(personalityslug",{"_index":1366,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["getbytargetid",{"_index":1614,"title":{},"body":{"injectables/SourceService.html":{}}}],["getbytargetid(targetid",{"_index":1601,"title":{},"body":{"controllers/SourceController.html":{},"injectables/SourceService.html":{}}}],["getbytargetidandmodel",{"_index":1030,"title":{},"body":{"injectables/HistoryService.html":{}}}],["getbytargetidandmodel(targetid",{"_index":1013,"title":{},"body":{"controllers/HistoryController.html":{},"injectables/HistoryService.html":{}}}],["getclaimreviewpage",{"_index":172,"title":{},"body":{"controllers/ClaimController.html":{}}}],["getclaimreviewpage(@req",{"_index":357,"title":{},"body":{"controllers/ClaimController.html":{}}}],["getclaimreviewpage(req",{"_index":206,"title":{},"body":{"controllers/ClaimController.html":{}}}],["getclaimsbyhashdto",{"_index":210,"title":{"classes/GetClaimsByHashDTO.html":{}},"body":{"controllers/ClaimController.html":{},"classes/GetClaimsByHashDTO.html":{},"coverage.html":{}}}],["getclaimsdto",{"_index":215,"title":{"classes/GetClaimsDTO.html":{}},"body":{"controllers/ClaimController.html":{},"classes/GetClaimsDTO.html":{},"coverage.html":{}}}],["getcommonsthumburl",{"_index":1885,"title":{},"body":{"injectables/WikidataService.html":{}}}],["getcommonsthumburl(imagetitle",{"_index":1897,"title":{},"body":{"injectables/WikidataService.html":{}}}],["getemailbody",{"_index":900,"title":{},"body":{"injectables/EmailService.html":{}}}],["getemailbody(options",{"_index":905,"title":{},"body":{"injectables/EmailService.html":{}}}],["gethistory",{"_index":1003,"title":{},"body":{"controllers/HistoryController.html":{}}}],["gethistory(@param",{"_index":1010,"title":{},"body":{"controllers/HistoryController.html":{}}}],["gethistory(param",{"_index":1004,"title":{},"body":{"controllers/HistoryController.html":{}}}],["gethistoryparams",{"_index":1031,"title":{},"body":{"injectables/HistoryService.html":{}}}],["gethistoryparams(dataid",{"_index":1046,"title":{},"body":{"injectables/HistoryService.html":{}}}],["gethomestats",{"_index":1631,"title":{},"body":{"controllers/StatsController.html":{},"injectables/StatsService.html":{}}}],["getlanguagemiddleware",{"_index":2019,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getlanguagemiddleware(req",{"_index":2133,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getnextserver",{"_index":370,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{}}}],["getpersonalities",{"_index":973,"title":{"classes/GetPersonalities.html":{}},"body":{"classes/GetPersonalities.html":{},"controllers/PersonalityController.html":{},"coverage.html":{}}}],["getreviewsbyclaimid",{"_index":492,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getreviewsbyclaimid(claimid",{"_index":547,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getreviewsbysentencehash",{"_index":493,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getreviewsbysentencehash(sentencehash",{"_index":550,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getreviewstats",{"_index":1266,"title":{},"body":{"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["getreviewstats(@param(\"id",{"_index":1329,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["getreviewstats(id",{"_index":1368,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["getreviewstats(personalityid",{"_index":1279,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["getreviewstatsbyclaimid",{"_index":494,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getreviewstatsbyclaimid(claimid",{"_index":552,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getreviewstatsbysentencehash",{"_index":495,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getreviewstatsbysentencehash(match",{"_index":554,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getrevision",{"_index":668,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["getrevision(claimid",{"_index":676,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["getsentencereviewsbyhash",{"_index":173,"title":{},"body":{"controllers/ClaimController.html":{}}}],["getsentencereviewsbyhash(@param",{"_index":327,"title":{},"body":{"controllers/ClaimController.html":{}}}],["getsentencereviewsbyhash(params",{"_index":209,"title":{},"body":{"controllers/ClaimController.html":{}}}],["getsitelinkname",{"_index":1886,"title":{},"body":{"injectables/WikidataService.html":{}}}],["getsitelinkname(language",{"_index":1900,"title":{},"body":{"injectables/WikidataService.html":{}}}],["getsitemap",{"_index":1496,"title":{},"body":{"controllers/SitemapController.html":{},"injectables/SitemapService.html":{}}}],["getsitemap(@res",{"_index":1512,"title":{},"body":{"controllers/SitemapController.html":{}}}],["getsitemap(hostname",{"_index":1528,"title":{},"body":{"injectables/SitemapService.html":{}}}],["getsitemap(res",{"_index":1498,"title":{},"body":{"controllers/SitemapController.html":{}}}],["getsources",{"_index":1592,"title":{},"body":{"controllers/SourceController.html":{}}}],["getsourcesclaim",{"_index":1590,"title":{},"body":{"controllers/SourceController.html":{}}}],["getsourcesclaim(@param",{"_index":1598,"title":{},"body":{"controllers/SourceController.html":{}}}],["getsourcesclaim(params",{"_index":1591,"title":{},"body":{"controllers/SourceController.html":{}}}],["getting",{"_index":2135,"title":{"index.html":{},"license.html":{}},"body":{}}],["getuserreviewbysentencehash",{"_index":496,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getuserreviewbysentencehash(sentencehash",{"_index":556,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["give",{"_index":2541,"title":{},"body":{"license.html":{}}}],["given",{"_index":2469,"title":{},"body":{"license.html":{}}}],["gives",{"_index":2557,"title":{},"body":{"license.html":{}}}],["giving",{"_index":2258,"title":{},"body":{"license.html":{}}}],["gnu",{"_index":2175,"title":{},"body":{"license.html":{}}}],["google",{"_index":2104,"title":{},"body":{"dependencies.html":{}}}],["governed",{"_index":2701,"title":{},"body":{"license.html":{}}}],["gpl",{"_index":2253,"title":{},"body":{"license.html":{}}}],["grant",{"_index":2723,"title":{},"body":{"license.html":{}}}],["granted",{"_index":2459,"title":{},"body":{"license.html":{}}}],["grants",{"_index":2779,"title":{},"body":{"license.html":{}}}],["graph",{"_index":3000,"title":{},"body":{"modules.html":{}}}],["gratis",{"_index":2245,"title":{},"body":{"license.html":{}}}],["greatest",{"_index":2955,"title":{},"body":{"license.html":{}}}],["group",{"_index":570,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["guarantee",{"_index":2206,"title":{},"body":{"license.html":{}}}],["guard",{"_index":1478,"title":{"guards/SessionGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":1479,"title":{},"body":{"guards/SessionGuard.html":{}}}],["gui",{"_index":2982,"title":{},"body":{"license.html":{}}}],["handlebars",{"_index":917,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["handlebars.compile(html",{"_index":929,"title":{},"body":{"injectables/EmailService.html":{}}}],["handler",{"_index":1791,"title":{},"body":{"controllers/ViewController.html":{}}}],["handler(req",{"_index":1801,"title":{},"body":{"controllers/ViewController.html":{}}}],["hash",{"_index":337,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{},"injectables/ParserService.html":{}}}],["hash.dto",{"_index":260,"title":{},"body":{"controllers/ClaimController.html":{}}}],["hash.dto.ts",{"_index":952,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{},"coverage.html":{}}}],["hash.dto.ts:11",{"_index":960,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{}}}],["hash.dto.ts:14",{"_index":956,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{}}}],["hash.dto.ts:18",{"_index":955,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{}}}],["hash.dto.ts:22",{"_index":962,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{}}}],["hash.dto.ts:7",{"_index":958,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{}}}],["hasn't",{"_index":748,"title":{},"body":{"injectables/ClaimService.html":{}}}],["having",{"_index":2478,"title":{},"body":{"license.html":{}}}],["header",{"_index":1506,"title":{},"body":{"controllers/SitemapController.html":{}}}],["header(\"content",{"_index":1511,"title":{},"body":{"controllers/SitemapController.html":{}}}],["health",{"_index":1458,"title":{},"body":{"controllers/RootController.html":{}}}],["here",{"_index":1809,"title":{},"body":{"controllers/ViewController.html":{}}}],["hereafter",{"_index":2820,"title":{},"body":{"license.html":{}}}],["history",{"_index":388,"title":{"classes/History.html":{}},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"coverage.html":{}}}],["history.controller",{"_index":1024,"title":{},"body":{"modules/HistoryModule.html":{}}}],["history.length",{"_index":1016,"title":{},"body":{"controllers/HistoryController.html":{}}}],["history.service",{"_index":1007,"title":{},"body":{"controllers/HistoryController.html":{},"modules/HistoryModule.html":{}}}],["history/history.module",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/PersonalityModule.html":{}}}],["history/history.service",{"_index":564,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["history/schema/history.schema",{"_index":566,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["history_model",{"_index":1026,"title":{},"body":{"modules/HistoryModule.html":{},"miscellaneous/variables.html":{}}}],["historycontroller",{"_index":1001,"title":{"controllers/HistoryController.html":{}},"body":{"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"coverage.html":{}}}],["historydocument",{"_index":994,"title":{},"body":{"classes/History.html":{},"injectables/HistoryService.html":{},"miscellaneous/typealiases.html":{}}}],["historymodel",{"_index":1025,"title":{},"body":{"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["historymodule",{"_index":66,"title":{"modules/HistoryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/HistoryModule.html":{},"modules/PersonalityModule.html":{},"modules.html":{},"overview.html":{}}}],["historyschema",{"_index":999,"title":{},"body":{"classes/History.html":{},"modules/HistoryModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["historyservice",{"_index":498,"title":{"injectables/HistoryService.html":{}},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{},"coverage.html":{},"overview.html":{}}}],["historytype",{"_index":565,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"injectables/PersonalityService.html":{},"miscellaneous/enumerations.html":{}}}],["historytype.create",{"_index":788,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["historytype.delete",{"_index":802,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["historytype.update",{"_index":798,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["holder",{"_index":2753,"title":{},"body":{"license.html":{}}}],["holders",{"_index":2706,"title":{},"body":{"license.html":{}}}],["home",{"_index":1085,"title":{},"body":{"controllers/HomeController.html":{},"injectables/SitemapService.html":{}}}],["home.controller",{"_index":1089,"title":{},"body":{"modules/HomeModule.html":{}}}],["home/home.module",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["homecontroller",{"_index":1069,"title":{"controllers/HomeController.html":{}},"body":{"controllers/HomeController.html":{},"modules/HomeModule.html":{},"coverage.html":{}}}],["homemodule",{"_index":48,"title":{"modules/HomeModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HomeModule.html":{},"modules.html":{},"overview.html":{}}}],["hope",{"_index":2967,"title":{},"body":{"license.html":{}}}],["host",{"_index":934,"title":{},"body":{"injectables/EmailService.html":{},"classes/NotFoundFilter.html":{},"controllers/RootController.html":{}}}],["host.switchtohttp",{"_index":1159,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["hostname",{"_index":1530,"title":{},"body":{"injectables/SitemapService.html":{}}}],["hosts",{"_index":2615,"title":{},"body":{"license.html":{}}}],["host}/sitemap.xml",{"_index":1475,"title":{},"body":{"controllers/RootController.html":{}}}],["household",{"_index":2639,"title":{},"body":{"license.html":{}}}],["html",{"_index":923,"title":{},"body":{"injectables/EmailService.html":{},"dependencies.html":{}}}],["http://localhost:3000",{"_index":2164,"title":{},"body":{"index.html":{}}}],["httpcontext",{"_index":1487,"title":{},"body":{"guards/SessionGuard.html":{}}}],["httpcontext.getrequest",{"_index":1489,"title":{},"body":{"guards/SessionGuard.html":{}}}],["httpcontext.getresponse",{"_index":1490,"title":{},"body":{"guards/SessionGuard.html":{}}}],["httpmodule",{"_index":400,"title":{},"body":{"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{}}}],["https://${wikilang.replace",{"_index":1957,"title":{},"body":{"injectables/WikidataService.html":{}}}],["https://commons.wikimedia.org/w/api.php",{"_index":1978,"title":{},"body":{"injectables/WikidataService.html":{}}}],["https://fsf.org",{"_index":2186,"title":{},"body":{"license.html":{}}}],["https://github.com//aletheia",{"_index":2151,"title":{},"body":{"index.html":{}}}],["https://google.com/ping?sitemap=${hostname}/sitemap.xml",{"_index":1565,"title":{},"body":{"injectables/SitemapService.html":{}}}],["https://medium.com/javascript",{"_index":1761,"title":{},"body":{"injectables/UtilService.html":{}}}],["https://mongoosejs.com/docs/populate.html#dynamic",{"_index":1578,"title":{},"body":{"classes/Source.html":{}}}],["https://stackoverflow.com/questions/47669178/mongoose",{"_index":590,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["https://www.gnu.org/licenses",{"_index":2988,"title":{},"body":{"license.html":{}}}],["https://www.gnu.org/licenses/why",{"_index":2998,"title":{},"body":{"license.html":{}}}],["https://www.google.com/recaptcha/api",{"_index":268,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["httpservice",{"_index":244,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["hypothetical",{"_index":2980,"title":{},"body":{"license.html":{}}}],["i18n",{"_index":1811,"title":{},"body":{"controllers/ViewController.html":{}}}],["i18next",{"_index":2084,"title":{},"body":{"dependencies.html":{}}}],["icons",{"_index":2112,"title":{},"body":{"dependencies.html":{}}}],["id",{"_index":543,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["identifiable",{"_index":2847,"title":{},"body":{"license.html":{}}}],["identifier",{"_index":1990,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":1921,"title":{},"body":{"injectables/WikidataService.html":{}}}],["if(newpersonalitybody.name",{"_index":1433,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["ignore",{"_index":278,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/HomeController.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/ViewController.html":{}}}],["iiprop",{"_index":1982,"title":{},"body":{"injectables/WikidataService.html":{}}}],["iiurlwidth",{"_index":1983,"title":{},"body":{"injectables/WikidataService.html":{}}}],["image",{"_index":875,"title":{},"body":{"classes/CreatePersonality.html":{},"injectables/WikidataService.html":{}}}],["imageinfo",{"_index":1981,"title":{},"body":{"injectables/WikidataService.html":{}}}],["imagetitle",{"_index":1899,"title":{},"body":{"injectables/WikidataService.html":{}}}],["implement",{"_index":2421,"title":{},"body":{"license.html":{}}}],["implementation",{"_index":2422,"title":{},"body":{"license.html":{}}}],["implements",{"_index":1116,"title":{},"body":{"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"guards/SessionGuard.html":{},"injectables/ViewService.html":{}}}],["implied",{"_index":2874,"title":{},"body":{"license.html":{}}}],["import",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"dependencies.html":{},"license.html":{}}}],["importing",{"_index":2813,"title":{},"body":{"license.html":{}}}],["imports",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/HomeModule.html":{},"modules/PersonalityModule.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{}}}],["impose",{"_index":2733,"title":{},"body":{"license.html":{}}}],["imposed",{"_index":2876,"title":{},"body":{"license.html":{}}}],["improve",{"_index":1549,"title":{},"body":{"injectables/SitemapService.html":{}}}],["inability",{"_index":2930,"title":{},"body":{"license.html":{}}}],["inaccurate",{"_index":2933,"title":{},"body":{"license.html":{}}}],["inc",{"_index":2185,"title":{},"body":{"license.html":{}}}],["incidental",{"_index":2927,"title":{},"body":{"license.html":{}}}],["include",{"_index":2411,"title":{},"body":{"license.html":{}}}],["included",{"_index":2413,"title":{},"body":{"license.html":{}}}],["includes",{"_index":2361,"title":{},"body":{"license.html":{}}}],["including",{"_index":2434,"title":{},"body":{"license.html":{}}}],["inclusion",{"_index":2574,"title":{},"body":{"license.html":{}}}],["incompatible",{"_index":2280,"title":{},"body":{"license.html":{}}}],["incorporating",{"_index":2989,"title":{},"body":{"license.html":{}}}],["incorporation",{"_index":2642,"title":{},"body":{"license.html":{}}}],["increment",{"_index":640,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["inc|ltd|jr|sr|co",{"_index":1207,"title":{},"body":{"injectables/ParserService.html":{}}}],["indemnification",{"_index":2729,"title":{},"body":{"license.html":{}}}],["independent",{"_index":2563,"title":{},"body":{"license.html":{}}}],["index",{"_index":114,"title":{"index.html":{}},"body":{"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexof(v",{"_index":437,"title":{},"body":{"classes/ClaimReview.html":{}}}],["indicate",{"_index":2783,"title":{},"body":{"license.html":{}}}],["indicating",{"_index":2744,"title":{},"body":{"license.html":{}}}],["individual",{"_index":2572,"title":{},"body":{"license.html":{}}}],["individuals",{"_index":2289,"title":{},"body":{"license.html":{}}}],["industrial",{"_index":2657,"title":{},"body":{"license.html":{}}}],["info",{"_index":3,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["inform",{"_index":2624,"title":{},"body":{"license.html":{}}}],["information",{"_index":2663,"title":{},"body":{"license.html":{}}}],["infringe",{"_index":2781,"title":{},"body":{"license.html":{}}}],["infringed",{"_index":2810,"title":{},"body":{"license.html":{}}}],["infringement",{"_index":2354,"title":{},"body":{"license.html":{}}}],["init",{"_index":505,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["initapp",{"_index":2014,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["initiate",{"_index":2804,"title":{},"body":{"license.html":{}}}],["inject",{"_index":753,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["inject(request",{"_index":758,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["injectable",{"_index":484,"title":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"injectables/HistoryService.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/SourceService.html":{},"injectables/StatsService.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{}},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"injectables/HistoryService.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/SourceService.html":{},"injectables/StatsService.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{},"coverage.html":{}}}],["injectables",{"_index":485,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"injectables/HistoryService.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/SourceService.html":{},"injectables/StatsService.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{},"overview.html":{}}}],["injectmodel",{"_index":562,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"injectables/PersonalityService.html":{},"injectables/SourceService.html":{},"injectables/UsersService.html":{},"injectables/WikidataService.html":{}}}],["injectmodel('history_model",{"_index":1061,"title":{},"body":{"injectables/HistoryService.html":{}}}],["injectmodel(claim.name",{"_index":759,"title":{},"body":{"injectables/ClaimService.html":{}}}],["injectmodel(claimreview.name",{"_index":568,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["injectmodel(claimrevision.name",{"_index":684,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["injectmodel(personality.name",{"_index":1382,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["injectmodel(source.name",{"_index":1620,"title":{},"body":{"injectables/SourceService.html":{}}}],["injectmodel(user.name",{"_index":1102,"title":{},"body":{"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["injectmodel(wikidatacache.name",{"_index":1908,"title":{},"body":{"injectables/WikidataService.html":{}}}],["inside",{"_index":2276,"title":{},"body":{"license.html":{}}}],["instalação",{"_index":2146,"title":{},"body":{"index.html":{}}}],["install",{"_index":2159,"title":{},"body":{"index.html":{},"license.html":{}}}],["installation",{"_index":2662,"title":{},"body":{"license.html":{}}}],["installed",{"_index":2682,"title":{},"body":{"license.html":{}}}],["instead",{"_index":2995,"title":{},"body":{"license.html":{}}}],["intact",{"_index":2534,"title":{},"body":{"license.html":{}}}],["intended",{"_index":2205,"title":{},"body":{"license.html":{}}}],["intention",{"_index":2523,"title":{},"body":{"license.html":{}}}],["interaction",{"_index":2371,"title":{},"body":{"license.html":{}}}],["interactive",{"_index":2375,"title":{},"body":{"license.html":{}}}],["interchange",{"_index":2587,"title":{},"body":{"license.html":{}}}],["interest",{"_index":2798,"title":{},"body":{"license.html":{}}}],["interface",{"_index":71,"title":{"interfaces/UserDocument.html":{}},"body":{"modules/AppModule.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"coverage.html":{},"license.html":{},"overview.html":{}}}],["interfaces",{"_index":1664,"title":{},"body":{"interfaces/UserDocument.html":{},"license.html":{}}}],["interfered",{"_index":2672,"title":{},"body":{"license.html":{}}}],["interpretation",{"_index":2941,"title":{},"body":{"license.html":{}}}],["interpreter",{"_index":2431,"title":{},"body":{"license.html":{}}}],["intimate",{"_index":2450,"title":{},"body":{"license.html":{}}}],["invalidate",{"_index":2558,"title":{},"body":{"license.html":{}}}],["irrevocable",{"_index":2461,"title":{},"body":{"license.html":{}}}],["isallowedprop",{"_index":876,"title":{},"body":{"classes/CreatePersonality.html":{},"injectables/WikidataService.html":{}}}],["isalpha",{"_index":851,"title":{},"body":{"classes/CreateClaimDTO.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{}}}],["isalphanumeric",{"_index":862,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["isarray",{"_index":852,"title":{},"body":{"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/GetClaimsByHashDTO.html":{}}}],["isarray()@arraynotempty",{"_index":845,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["isboolean",{"_index":888,"title":{},"body":{"classes/CreatePersonality.html":{},"classes/GetPersonalities.html":{}}}],["isboolean()@isoptional",{"_index":882,"title":{},"body":{"classes/CreatePersonality.html":{},"classes/GetPersonalities.html":{}}}],["isdatestring",{"_index":853,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["isdeleted",{"_index":341,"title":{},"body":{"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["isenum",{"_index":870,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["isenum(classificationenum",{"_index":871,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["isint",{"_index":963,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{}}}],["isnotempty",{"_index":854,"title":{},"body":{"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{}}}],["isnotempty()@isarray",{"_index":868,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["isnotempty()@isstring",{"_index":839,"title":{},"body":{"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{}}}],["isnotempty()@isstring()@isalpha",{"_index":848,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["isnotempty()@isstring()@isdatestring",{"_index":841,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["isnotempty()@isstring()@isenum(classificationenum",{"_index":860,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["isnotempty()@isstring()@minlength(3",{"_index":884,"title":{},"body":{"classes/CreatePersonality.html":{}}}],["isnumber",{"_index":964,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{}}}],["isnumber()@isint()@min(0",{"_index":957,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{}}}],["isnumber()@min(0",{"_index":959,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{}}}],["isoftdeletedmodel",{"_index":567,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["isoptional",{"_index":889,"title":{},"body":{"classes/CreatePersonality.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetPersonalities.html":{}}}],["isoptional()@isarray",{"_index":961,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{}}}],["isstring",{"_index":855,"title":{},"body":{"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{}}}],["isstring()@isalpha",{"_index":954,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{}}}],["isstring()@isalphanumeric",{"_index":858,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["isstring()@isoptional",{"_index":880,"title":{},"body":{"classes/CreatePersonality.html":{},"classes/GetPersonalities.html":{}}}],["istestuser",{"_index":3086,"title":{},"body":{"miscellaneous/variables.html":{}}}],["it's",{"_index":997,"title":{},"body":{"classes/History.html":{}}}],["item",{"_index":1784,"title":{},"body":{"injectables/UtilService.html":{},"injectables/WikidataService.html":{},"license.html":{}}}],["item[property",{"_index":1781,"title":{},"body":{"injectables/UtilService.html":{}}}],["iterate",{"_index":770,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{}}}],["itself",{"_index":2687,"title":{},"body":{"license.html":{}}}],["js",{"_index":603,"title":{},"body":{"injectables/ClaimReviewService.html":{},"dependencies.html":{}}}],["json",{"_index":1152,"title":{},"body":{"classes/NotFoundFilter.html":{},"injectables/WikidataService.html":{}}}],["june",{"_index":2178,"title":{},"body":{"license.html":{}}}],["keep",{"_index":2533,"title":{},"body":{"license.html":{}}}],["keeping",{"_index":747,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["kernel",{"_index":2424,"title":{},"body":{"license.html":{}}}],["key",{"_index":2695,"title":{},"body":{"license.html":{}}}],["keys",{"_index":2666,"title":{},"body":{"license.html":{}}}],["kind",{"_index":2367,"title":{},"body":{"license.html":{}}}],["kinds",{"_index":2196,"title":{},"body":{"license.html":{}}}],["know",{"_index":2227,"title":{},"body":{"license.html":{}}}],["knowingly",{"_index":2835,"title":{},"body":{"license.html":{}}}],["knowledge",{"_index":2844,"title":{},"body":{"license.html":{}}}],["label",{"_index":1931,"title":{},"body":{"injectables/WikidataService.html":{}}}],["labels",{"_index":1934,"title":{},"body":{"injectables/WikidataService.html":{}}}],["landing",{"_index":1823,"title":{},"body":{"controllers/ViewController.html":{}}}],["lang",{"_index":513,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["language",{"_index":953,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"dependencies.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["languagefallback",{"_index":1963,"title":{},"body":{"injectables/WikidataService.html":{}}}],["languagevariantmap",{"_index":1906,"title":{},"body":{"injectables/WikidataService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["languagevariantmap[language",{"_index":1960,"title":{},"body":{"injectables/WikidataService.html":{}}}],["language}wiki",{"_index":1961,"title":{},"body":{"injectables/WikidataService.html":{}}}],["larger",{"_index":2567,"title":{},"body":{"license.html":{}}}],["later",{"_index":2901,"title":{},"body":{"license.html":{}}}],["latest",{"_index":1055,"title":{},"body":{"injectables/HistoryService.html":{}}}],["latestchange",{"_index":1047,"title":{},"body":{"injectables/HistoryService.html":{}}}],["latestrevision",{"_index":116,"title":{},"body":{"classes/Claim.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["law",{"_index":2356,"title":{},"body":{"license.html":{}}}],["laws",{"_index":2326,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":2808,"title":{},"body":{"license.html":{}}}],["lean",{"_index":763,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["legal",{"_index":2259,"title":{},"body":{"license.html":{}}}],["less",{"_index":2091,"title":{},"body":{"dependencies.html":{}}}],["lesser",{"_index":2994,"title":{},"body":{"license.html":{}}}],["let's",{"_index":637,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["lgpl.html",{"_index":2999,"title":{},"body":{"license.html":{}}}],["liability",{"_index":2709,"title":{},"body":{"license.html":{}}}],["liable",{"_index":2353,"title":{},"body":{"license.html":{}}}],["libraries",{"_index":2409,"title":{},"body":{"license.html":{}}}],["library",{"_index":2633,"title":{},"body":{"license.html":{}}}],["license",{"_index":2174,"title":{"license.html":{}},"body":{"license.html":{}}}],["licensed",{"_index":2330,"title":{},"body":{"license.html":{}}}],["licensee",{"_index":2333,"title":{},"body":{"license.html":{}}}],["licensees",{"_index":2335,"title":{},"body":{"license.html":{}}}],["licenses",{"_index":2198,"title":{},"body":{"license.html":{}}}],["licensing",{"_index":2785,"title":{},"body":{"license.html":{}}}],["licensors",{"_index":2721,"title":{},"body":{"license.html":{}}}],["likewise",{"_index":2777,"title":{},"body":{"license.html":{}}}],["limit",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"license.html":{}}}],["limit(pagesize",{"_index":585,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{},"injectables/SourceService.html":{}}}],["limitation",{"_index":2923,"title":{},"body":{"license.html":{}}}],["limited",{"_index":2912,"title":{},"body":{"license.html":{}}}],["limiting",{"_index":2708,"title":{},"body":{"license.html":{}}}],["line",{"_index":765,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"license.html":{}}}],["link",{"_index":708,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/Source.html":{},"dependencies.html":{},"license.html":{}}}],["linked",{"_index":2446,"title":{},"body":{"license.html":{}}}],["linking",{"_index":2992,"title":{},"body":{"license.html":{}}}],["list",{"_index":1337,"title":{},"body":{"controllers/PersonalityController.html":{},"license.html":{}}}],["listall",{"_index":174,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["listall(@query",{"_index":282,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{}}}],["listall(getclaimsdto",{"_index":214,"title":{},"body":{"controllers/ClaimController.html":{}}}],["listall(getpersonalities",{"_index":1282,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["listall(page",{"_index":736,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["listening",{"_index":3068,"title":{},"body":{"miscellaneous/variables.html":{}}}],["literal",{"_index":679,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{}}}],["litigation",{"_index":2805,"title":{},"body":{"license.html":{}}}],["load",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"injectables/ViewService.html":{}}}],["loaded",{"_index":3077,"title":{},"body":{"miscellaneous/variables.html":{}}}],["loading",{"_index":3076,"title":{},"body":{"miscellaneous/variables.html":{}}}],["local",{"_index":1108,"title":{},"body":{"injectables/LocalStrategy.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["local.serializer",{"_index":108,"title":{},"body":{"modules/AuthModule.html":{}}}],["local.strategy",{"_index":107,"title":{},"body":{"modules/AuthModule.html":{}}}],["localauthguard",{"_index":1090,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"injectables/LocalAuthGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["localfield",{"_index":152,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"classes/Personality.html":{}}}],["localhost",{"_index":3072,"title":{},"body":{"miscellaneous/variables.html":{}}}],["locally:git",{"_index":2150,"title":{},"body":{"index.html":{}}}],["localserializer",{"_index":99,"title":{"injectables/LocalSerializer.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalSerializer.html":{},"coverage.html":{},"overview.html":{}}}],["localstrategy",{"_index":100,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["log",{"_index":1119,"title":{},"body":{"classes/Logger.html":{}}}],["log(message",{"_index":1131,"title":{},"body":{"classes/Logger.html":{}}}],["logger",{"_index":232,"title":{"classes/Logger.html":{}},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"classes/Logger.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ViewService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger(\"claimcontroller",{"_index":265,"title":{},"body":{"controllers/ClaimController.html":{}}}],["logger(\"claimreviewservice",{"_index":559,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["logger(\"claimservice",{"_index":678,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{}}}],["logger(\"emailservice",{"_index":914,"title":{},"body":{"injectables/EmailService.html":{}}}],["logger(\"historycontroller",{"_index":1008,"title":{},"body":{"controllers/HistoryController.html":{}}}],["logger(\"historyservice",{"_index":1059,"title":{},"body":{"injectables/HistoryService.html":{}}}],["logger(\"personalitycontroller",{"_index":1302,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["logger(\"personalityservice",{"_index":1378,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["logger(\"sitemapservice",{"_index":1533,"title":{},"body":{"injectables/SitemapService.html":{}}}],["logger(\"sourcecontroller",{"_index":1596,"title":{},"body":{"controllers/SourceController.html":{}}}],["logger(\"usercontroller",{"_index":1688,"title":{},"body":{"controllers/UsersController.html":{}}}],["logger(\"userservice",{"_index":1738,"title":{},"body":{"injectables/UsersService.html":{}}}],["logger(\"viewservice",{"_index":1847,"title":{},"body":{"injectables/ViewService.html":{}}}],["logger(options.logger",{"_index":3041,"title":{},"body":{"miscellaneous/variables.html":{}}}],["loggerservice",{"_index":1117,"title":{},"body":{"classes/Logger.html":{}}}],["logic",{"_index":663,"title":{},"body":{"modules/ClaimRevisionModule.html":{}}}],["login",{"_index":1545,"title":{},"body":{"injectables/SitemapService.html":{},"controllers/UsersController.html":{}}}],["login(@req",{"_index":1693,"title":{},"body":{"controllers/UsersController.html":{}}}],["login(req",{"_index":1676,"title":{},"body":{"controllers/UsersController.html":{}}}],["long",{"_index":2474,"title":{},"body":{"license.html":{}}}],["lookup",{"_index":593,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["loop",{"_index":1547,"title":{},"body":{"injectables/SitemapService.html":{},"miscellaneous/variables.html":{}}}],["loss",{"_index":2931,"title":{},"body":{"license.html":{}}}],["losses",{"_index":2934,"title":{},"body":{"license.html":{}}}],["lower",{"_index":693,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{}}}],["machine",{"_index":2577,"title":{},"body":{"license.html":{}}}],["made",{"_index":1052,"title":{},"body":{"injectables/HistoryService.html":{},"license.html":{}}}],["mail",{"_index":947,"title":{},"body":{"injectables/EmailService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["maintain",{"_index":2611,"title":{},"body":{"license.html":{}}}],["major",{"_index":2416,"title":{},"body":{"license.html":{}}}],["make",{"_index":2209,"title":{},"body":{"license.html":{}}}],["makes",{"_index":2494,"title":{},"body":{"license.html":{}}}],["making",{"_index":2341,"title":{},"body":{"license.html":{}}}],["manner",{"_index":2821,"title":{},"body":{"license.html":{}}}],["manufacturer",{"_index":2278,"title":{},"body":{"license.html":{}}}],["many",{"_index":1043,"title":{},"body":{"injectables/HistoryService.html":{}}}],["map",{"_index":1778,"title":{},"body":{"injectables/UtilService.html":{}}}],["march",{"_index":2871,"title":{},"body":{"license.html":{}}}],["markdown",{"_index":2106,"title":{},"body":{"dependencies.html":{}}}],["marked",{"_index":2270,"title":{},"body":{"license.html":{}}}],["marks",{"_index":2727,"title":{},"body":{"license.html":{}}}],["masks",{"_index":2328,"title":{},"body":{"license.html":{}}}],["match",{"_index":516,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"controllers/UsersController.html":{}}}],["matches",{"_index":808,"title":{},"body":{"injectables/ClaimService.html":{}}}],["matching",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":2482,"title":{},"body":{"license.html":{}}}],["materially",{"_index":2688,"title":{},"body":{"license.html":{}}}],["math.ceil",{"_index":1455,"title":{},"body":{"injectables/PersonalityService.html":{},"controllers/SourceController.html":{}}}],["math.ceil(totalchanges",{"_index":1017,"title":{},"body":{"controllers/HistoryController.html":{}}}],["math.ceil(totalclaims",{"_index":296,"title":{},"body":{"controllers/ClaimController.html":{}}}],["math.ceil(totalreviews",{"_index":334,"title":{},"body":{"controllers/ClaimController.html":{}}}],["matters",{"_index":816,"title":{},"body":{"injectables/ClaimService.html":{}}}],["md5",{"_index":1190,"title":{},"body":{"injectables/ParserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["meaning",{"_index":2737,"title":{},"body":{"license.html":{}}}],["means",{"_index":2325,"title":{},"body":{"license.html":{}}}],["measure",{"_index":2502,"title":{},"body":{"license.html":{}}}],["measures",{"_index":2516,"title":{},"body":{"license.html":{}}}],["medium",{"_index":2529,"title":{},"body":{"license.html":{}}}],["meet",{"_index":2545,"title":{},"body":{"license.html":{}}}],["meets",{"_index":2393,"title":{},"body":{"license.html":{}}}],["menu",{"_index":2391,"title":{},"body":{"license.html":{}}}],["merchantability",{"_index":2913,"title":{},"body":{"license.html":{}}}],["mere",{"_index":2370,"title":{},"body":{"license.html":{}}}],["merge",{"_index":509,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/UtilService.html":{}}}],["mergeobjectsinunique",{"_index":1753,"title":{},"body":{"injectables/UtilService.html":{}}}],["mergeobjectsinunique(array",{"_index":1758,"title":{},"body":{"injectables/UtilService.html":{}}}],["merging",{"_index":2794,"title":{},"body":{"license.html":{}}}],["message",{"_index":414,"title":{},"body":{"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"controllers/PersonalityController.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/UsersController.html":{}}}],["met",{"_index":2463,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":2115,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":1808,"title":{},"body":{"controllers/ViewController.html":{}}}],["methods",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["metrics",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["migrated",{"_index":665,"title":{},"body":{"modules/ClaimRevisionModule.html":{}}}],["min",{"_index":965,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{}}}],["min(0",{"_index":966,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{}}}],["minlength",{"_index":890,"title":{},"body":{"classes/CreatePersonality.html":{}}}],["minlength(3",{"_index":891,"title":{},"body":{"classes/CreatePersonality.html":{}}}],["miscellaneous",{"_index":2127,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["misleading",{"_index":431,"title":{},"body":{"classes/ClaimReview.html":{},"miscellaneous/enumerations.html":{}}}],["misrepresentation",{"_index":2717,"title":{},"body":{"license.html":{}}}],["mode",{"_index":2661,"title":{},"body":{"license.html":{}}}],["model",{"_index":560,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"injectables/PersonalityService.html":{},"injectables/SourceService.html":{},"injectables/UsersService.html":{},"injectables/WikidataService.html":{},"license.html":{}}}],["modeyarn",{"_index":2162,"title":{},"body":{"index.html":{}}}],["modification",{"_index":2322,"title":{},"body":{"license.html":{}}}],["modifications",{"_index":2397,"title":{},"body":{"license.html":{}}}],["modified",{"_index":2269,"title":{},"body":{"license.html":{}}}],["modifies",{"_index":2549,"title":{},"body":{"license.html":{}}}],["modify",{"_index":2240,"title":{},"body":{"license.html":{}}}],["modifying",{"_index":2359,"title":{},"body":{"license.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/HomeModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimService.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/HomeModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/HomeModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{},"modules.html":{},"overview.html":{}}}],["mongo",{"_index":2072,"title":{},"body":{"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["mongodb",{"_index":641,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["mongodb://${mongodb_host}/${mongodb_name",{"_index":3036,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongodb_host",{"_index":2015,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mongodb_name",{"_index":2016,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mongoerror",{"_index":1308,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["mongooptions",{"_index":3058,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongoose",{"_index":134,"title":{},"body":{"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Personality.html":{},"injectables/PersonalityService.html":{},"classes/Source.html":{},"injectables/SourceService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["mongoose.date",{"_index":985,"title":{},"body":{"classes/History.html":{}}}],["mongoose.document",{"_index":142,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Personality.html":{},"classes/Source.html":{}}}],["mongoose.types.objectid",{"_index":147,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Source.html":{}}}],["mongoose.types.objectid(query.personality",{"_index":280,"title":{},"body":{"controllers/ClaimController.html":{}}}],["mongoose.types.objectid(req.params.id",{"_index":1709,"title":{},"body":{"controllers/UsersController.html":{}}}],["mongoosemodule",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/HistoryModule.html":{},"modules/PersonalityModule.html":{},"modules/SourceModule.html":{},"modules/UsersModule.html":{},"modules/WikidataModule.html":{}}}],["mongoosemodule.forfeature",{"_index":402,"title":{},"body":{"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/HistoryModule.html":{},"modules/PersonalityModule.html":{},"modules/SourceModule.html":{},"miscellaneous/variables.html":{}}}],["mongoosemodule.forfeatureasync",{"_index":1725,"title":{},"body":{"modules/UsersModule.html":{},"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["mongoosemodule.forroot",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["mongostore",{"_index":2017,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mongostore.create",{"_index":3056,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongourl",{"_index":3057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["more",{"_index":2594,"title":{},"body":{"license.html":{}}}],["moreover",{"_index":2765,"title":{},"body":{"license.html":{}}}],["mr|mrs|ms|dr|he\\s|she\\s|it\\s|they\\s|their\\s|our\\s|we\\s|but\\s|however\\s|that\\s|this\\s|wherever)/g",{"_index":1209,"title":{},"body":{"injectables/ParserService.html":{}}}],["mr|st|mrs|ms|dr)[.]/g",{"_index":1203,"title":{},"body":{"injectables/ParserService.html":{},"miscellaneous/variables.html":{}}}],["name",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreatePersonality.html":{},"injectables/EmailService.html":{},"classes/GetPersonalities.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"injectables/StatsService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["names",{"_index":2720,"title":{},"body":{"license.html":{}}}],["nature",{"_index":2564,"title":{},"body":{"license.html":{}}}],["ndisallow",{"_index":1473,"title":{},"body":{"controllers/RootController.html":{}}}],["necessary",{"_index":1058,"title":{},"body":{"injectables/HistoryService.html":{},"license.html":{}}}],["need",{"_index":2231,"title":{},"body":{"license.html":{}}}],["needed",{"_index":2302,"title":{},"body":{"license.html":{}}}],["nestfactory.create",{"_index":3039,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nestjs/axios",{"_index":245,"title":{},"body":{"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"modules/HistoryModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1654,"title":{},"body":{"classes/UpdateClaimDTO.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"classes/Claim.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Personality.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"classes/Source.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":106,"title":{},"body":{"modules/AuthModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":2051,"title":{},"body":{"dependencies.html":{}}}],["nestjs/throttler",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["network",{"_index":2372,"title":{},"body":{"license.html":{}}}],["new",{"_index":264,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["newarray",{"_index":1777,"title":{},"body":{"injectables/UtilService.html":{}}}],["newarray.get(propertyvalue",{"_index":1785,"title":{},"body":{"injectables/UtilService.html":{}}}],["newarray.has(propertyvalue",{"_index":1782,"title":{},"body":{"injectables/UtilService.html":{}}}],["newarray.set(propertyvalue",{"_index":1783,"title":{},"body":{"injectables/UtilService.html":{}}}],["newclaim",{"_index":777,"title":{},"body":{"injectables/ClaimService.html":{}}}],["newclaim._id",{"_index":786,"title":{},"body":{"injectables/ClaimService.html":{}}}],["newclaim.latestrevision",{"_index":780,"title":{},"body":{"injectables/ClaimService.html":{}}}],["newclaim.save",{"_index":790,"title":{},"body":{"injectables/ClaimService.html":{}}}],["newclaim.slug",{"_index":782,"title":{},"body":{"injectables/ClaimService.html":{}}}],["newclaim.toobject",{"_index":791,"title":{},"body":{"injectables/ClaimService.html":{}}}],["newclaimreview",{"_index":619,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["newclaimrevision",{"_index":703,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{}}}],["newclaimrevision._id",{"_index":781,"title":{},"body":{"injectables/ClaimService.html":{}}}],["newclaimrevision.save",{"_index":712,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["newclaimrevision.slug",{"_index":783,"title":{},"body":{"injectables/ClaimService.html":{}}}],["newclaimrevision.toobject",{"_index":792,"title":{},"body":{"injectables/ClaimService.html":{}}}],["newhistory",{"_index":1063,"title":{},"body":{"injectables/HistoryService.html":{}}}],["newhistory.save",{"_index":1065,"title":{},"body":{"injectables/HistoryService.html":{}}}],["newpassword",{"_index":1699,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["newpassword).then",{"_index":1747,"title":{},"body":{"injectables/UsersService.html":{}}}],["newpersonality",{"_index":1395,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["newpersonality._id",{"_index":1399,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["newpersonality.save",{"_index":1402,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["newpersonalitybody",{"_index":1373,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["newpersonalitybody.slug",{"_index":1434,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["news",{"_index":2145,"title":{},"body":{"index.html":{}}}],["newsentences",{"_index":1232,"title":{},"body":{"injectables/ParserService.html":{}}}],["newsentences.concat(semicolonsentences",{"_index":1246,"title":{},"body":{"injectables/ParserService.html":{}}}],["newwikidatacache",{"_index":1914,"title":{},"body":{"injectables/WikidataService.html":{}}}],["newwikidatacache.save",{"_index":1916,"title":{},"body":{"injectables/WikidataService.html":{}}}],["next",{"_index":311,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/PersonalityService.html":{},"injectables/ViewService.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["next/dist/server/next",{"_index":1850,"title":{},"body":{"injectables/ViewService.html":{}}}],["nextfunction",{"_index":2134,"title":{},"body":{"miscellaneous/functions.html":{}}}],["nextserver",{"_index":1845,"title":{},"body":{"injectables/ViewService.html":{}}}],["nlp",{"_index":1192,"title":{},"body":{"injectables/ParserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["nlp(content",{"_index":1220,"title":{},"body":{"injectables/ParserService.html":{}}}],["nlp.extend(require('compromise",{"_index":1194,"title":{},"body":{"injectables/ParserService.html":{}}}],["nlpcontent",{"_index":1219,"title":{},"body":{"injectables/ParserService.html":{}}}],["nlpcontent.paragraphs",{"_index":1221,"title":{},"body":{"injectables/ParserService.html":{}}}],["nlpcontent.text(this.nlpoptions",{"_index":1231,"title":{},"body":{"injectables/ParserService.html":{}}}],["nlpoptions",{"_index":1168,"title":{},"body":{"injectables/ParserService.html":{}}}],["nodemailer",{"_index":915,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["nodemailer.createtransport",{"_index":933,"title":{},"body":{"injectables/EmailService.html":{}}}],["non",{"_index":2317,"title":{},"body":{"license.html":{}}}],["noncommercially",{"_index":2600,"title":{},"body":{"license.html":{}}}],["normal",{"_index":2414,"title":{},"body":{"license.html":{}}}],["normally",{"_index":2637,"title":{},"body":{"license.html":{}}}],["notfoundexception",{"_index":755,"title":{},"body":{"injectables/ClaimService.html":{},"classes/NotFoundFilter.html":{},"injectables/PersonalityService.html":{}}}],["notfoundfilter",{"_index":55,"title":{"classes/NotFoundFilter.html":{}},"body":{"modules/AppModule.html":{},"classes/NotFoundFilter.html":{},"coverage.html":{}}}],["nothing",{"_index":2778,"title":{},"body":{"license.html":{}}}],["notice",{"_index":2384,"title":{},"body":{"license.html":{}}}],["notices",{"_index":2378,"title":{},"body":{"license.html":{}}}],["notifies",{"_index":2766,"title":{},"body":{"license.html":{}}}],["notify",{"_index":2760,"title":{},"body":{"license.html":{}}}],["notwithstanding",{"_index":2704,"title":{},"body":{"license.html":{}}}],["null",{"_index":803,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":646,"title":{},"body":{"classes/ClaimRevision.html":{},"injectables/ClaimService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"injectables/ParserService.html":{},"license.html":{}}}],["numbered",{"_index":2900,"title":{},"body":{"license.html":{}}}],["não",{"_index":610,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["o",{"_index":3106,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object",{"_index":533,"title":{},"body":{"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"classes/WikidataCache.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["object.assign",{"_index":1424,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["object.assign(claim",{"_index":825,"title":{},"body":{"injectables/ClaimService.html":{}}}],["object.assign(parsedurl.query",{"_index":373,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["object.assign(personality",{"_index":1438,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["object.assign(sentence.props",{"_index":835,"title":{},"body":{"injectables/ClaimService.html":{}}}],["object.keys(state).reduce",{"_index":598,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["objectid",{"_index":605,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["objects",{"_index":1765,"title":{},"body":{"injectables/UtilService.html":{}}}],["obligate",{"_index":2883,"title":{},"body":{"license.html":{}}}],["obligated",{"_index":2617,"title":{},"body":{"license.html":{}}}],["obligations",{"_index":2504,"title":{},"body":{"license.html":{}}}],["occasionally",{"_index":2599,"title":{},"body":{"license.html":{}}}],["occurring",{"_index":2775,"title":{},"body":{"license.html":{}}}],["occurs",{"_index":2286,"title":{},"body":{"license.html":{}}}],["offer",{"_index":2257,"title":{},"body":{"license.html":{}}}],["offered",{"_index":2627,"title":{},"body":{"license.html":{}}}],["offering",{"_index":2603,"title":{},"body":{"license.html":{}}}],["official",{"_index":2399,"title":{},"body":{"license.html":{}}}],["ok",{"_index":1477,"title":{},"body":{"controllers/RootController.html":{}}}],["old",{"_index":745,"title":{},"body":{"injectables/ClaimService.html":{}}}],["omit",{"_index":540,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["one",{"_index":2405,"title":{},"body":{"license.html":{}}}],["onmodel",{"_index":989,"title":{},"body":{"classes/History.html":{},"classes/Source.html":{}}}],["onmoduleinit",{"_index":1842,"title":{},"body":{"injectables/ViewService.html":{}}}],["operate",{"_index":2937,"title":{},"body":{"license.html":{}}}],["operated",{"_index":2608,"title":{},"body":{"license.html":{}}}],["operating",{"_index":2427,"title":{},"body":{"license.html":{}}}],["operation",{"_index":2524,"title":{},"body":{"license.html":{}}}],["option",{"_index":577,"title":{},"body":{"injectables/ClaimReviewService.html":{},"license.html":{}}}],["optional",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreatePersonality.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"injectables/StatsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"injectables/WikidataService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailService.html":{},"injectables/PersonalityService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["options.config",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["options.config.interface",{"_index":3069,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.config.port",{"_index":3070,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.config.throttle.limit",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["options.config.throttle.ttl",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["options.db",{"_index":3034,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.db.connection_uri",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["options.db.options",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["options.logger.log",{"_index":3064,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.logger.log(\"error",{"_index":3114,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.logger.log(\"info",{"_index":3075,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.name",{"_index":3065,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options?.config?.cors",{"_index":3028,"title":{},"body":{"miscellaneous/variables.html":{}}}],["optionstoupdate",{"_index":667,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{}}}],["order",{"_index":287,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"injectables/PersonalityService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"license.html":{}}}],["organization",{"_index":2792,"title":{},"body":{"license.html":{}}}],["organizations",{"_index":2336,"title":{},"body":{"license.html":{}}}],["origin",{"_index":1970,"title":{},"body":{"injectables/WikidataService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["original",{"_index":2718,"title":{},"body":{"license.html":{}}}],["others",{"_index":2233,"title":{},"body":{"license.html":{}}}],["otherwise",{"_index":2475,"title":{},"body":{"license.html":{}}}],["out",{"_index":103,"title":{},"body":{"modules/AuthModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/HomeModule.html":{},"classes/NotFoundFilter.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{},"license.html":{},"overview.html":{}}}],["output",{"_index":2467,"title":{},"body":{"license.html":{}}}],["outside",{"_index":2487,"title":{},"body":{"license.html":{}}}],["overallstats",{"_index":823,"title":{},"body":{"injectables/ClaimService.html":{}}}],["overview",{"_index":3002,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":746,"title":{},"body":{"injectables/ClaimService.html":{}}}],["overwrites",{"_index":1375,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["owned",{"_index":2817,"title":{},"body":{"license.html":{}}}],["p.content.foreach((sentence",{"_index":350,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{}}}],["p.content.length",{"_index":827,"title":{},"body":{"injectables/ClaimService.html":{}}}],["package",{"_index":2033,"title":{"dependencies.html":{}},"body":{}}],["packaged",{"_index":2556,"title":{},"body":{"license.html":{}}}],["packages:yarn",{"_index":2160,"title":{},"body":{"index.html":{}}}],["packaging",{"_index":2415,"title":{},"body":{"license.html":{}}}],["page",{"_index":283,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"classes/NotFoundFilter.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["pages",{"_index":1985,"title":{},"body":{"injectables/WikidataService.html":{}}}],["pages.length",{"_index":1987,"title":{},"body":{"injectables/WikidataService.html":{}}}],["pagesize",{"_index":285,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"injectables/PersonalityService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{}}}],["paginate",{"_index":1042,"title":{},"body":{"injectables/HistoryService.html":{}}}],["paginated",{"_index":1045,"title":{},"body":{"injectables/HistoryService.html":{}}}],["paginates",{"_index":1548,"title":{},"body":{"injectables/SitemapService.html":{}}}],["paper",{"_index":2972,"title":{},"body":{"license.html":{}}}],["paragraph",{"_index":1228,"title":{},"body":{"injectables/ParserService.html":{},"license.html":{}}}],["paragraph.content.foreach((sentence",{"_index":830,"title":{},"body":{"injectables/ClaimService.html":{}}}],["paragraphid",{"_index":1223,"title":{},"body":{"injectables/ParserService.html":{}}}],["paragraphs",{"_index":1195,"title":{},"body":{"injectables/ParserService.html":{},"dependencies.html":{},"license.html":{}}}],["paragraphs.foreach((paragraph",{"_index":1222,"title":{},"body":{"injectables/ParserService.html":{}}}],["paragraphsequence",{"_index":1169,"title":{},"body":{"injectables/ParserService.html":{}}}],["param",{"_index":233,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/SourceController.html":{},"injectables/UtilService.html":{}}}],["parameters",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"injectables/StatsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"injectables/WikidataService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":213,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/HistoryService.html":{},"controllers/SourceController.html":{},"injectables/WikidataService.html":{}}}],["params.language",{"_index":1911,"title":{},"body":{"injectables/WikidataService.html":{}}}],["params.wikidataid",{"_index":1910,"title":{},"body":{"injectables/WikidataService.html":{}}}],["parse",{"_index":249,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["parse(content",{"_index":1177,"title":{},"body":{"injectables/ParserService.html":{}}}],["parse(req.url",{"_index":362,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["parsedurl",{"_index":361,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["parsedurl.pathname",{"_index":1821,"title":{},"body":{"controllers/ViewController.html":{}}}],["parsedurl.query",{"_index":1822,"title":{},"body":{"controllers/ViewController.html":{}}}],["parseint(gethistory.pagesize",{"_index":1011,"title":{},"body":{"controllers/HistoryController.html":{}}}],["parseint(getsources.pagesize",{"_index":1599,"title":{},"body":{"controllers/SourceController.html":{}}}],["parseint(page",{"_index":582,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["parseint(pagesize",{"_index":335,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/PersonalityService.html":{}}}],["parser",{"_index":2059,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["parser.service",{"_index":1166,"title":{},"body":{"modules/ParserModule.html":{}}}],["parser/parser.module",{"_index":399,"title":{},"body":{"modules/ClaimModule.html":{},"modules/ClaimRevisionModule.html":{}}}],["parser/parser.service",{"_index":682,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["parsermodule",{"_index":394,"title":{"modules/ParserModule.html":{}},"body":{"modules/ClaimModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/ParserModule.html":{},"modules.html":{},"overview.html":{}}}],["parserservice",{"_index":670,"title":{"injectables/ParserService.html":{}},"body":{"injectables/ClaimRevisionService.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"coverage.html":{},"overview.html":{}}}],["parsesentence",{"_index":1173,"title":{},"body":{"injectables/ParserService.html":{}}}],["parsesentence(sentencecontent",{"_index":1179,"title":{},"body":{"injectables/ParserService.html":{}}}],["part",{"_index":2338,"title":{},"body":{"license.html":{}}}],["partialtype",{"_index":1653,"title":{},"body":{"classes/UpdateClaimDTO.html":{}}}],["partialtype(createclaimdto",{"_index":1655,"title":{},"body":{"classes/UpdateClaimDTO.html":{}}}],["particular",{"_index":2403,"title":{},"body":{"license.html":{}}}],["parties",{"_index":2369,"title":{},"body":{"license.html":{}}}],["parts",{"_index":2454,"title":{},"body":{"license.html":{}}}],["party",{"_index":2609,"title":{},"body":{"license.html":{}}}],["party's",{"_index":2796,"title":{},"body":{"license.html":{}}}],["pass",{"_index":942,"title":{},"body":{"injectables/EmailService.html":{},"license.html":{}}}],["passport",{"_index":1100,"title":{},"body":{"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passport.deserializeuser(this.usermodel.deserializeuser",{"_index":1104,"title":{},"body":{"injectables/LocalSerializer.html":{}}}],["passport.serializeuser(this.usermodel.serializeuser",{"_index":1103,"title":{},"body":{"injectables/LocalSerializer.html":{}}}],["passportmodule",{"_index":105,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":109,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1109,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1110,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["password",{"_index":1705,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["patent",{"_index":2750,"title":{},"body":{"license.html":{}}}],["patents",{"_index":2306,"title":{},"body":{"license.html":{}}}],["path",{"_index":921,"title":{},"body":{"injectables/EmailService.html":{},"injectables/PersonalityService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["pattern",{"_index":2284,"title":{},"body":{"license.html":{}}}],["payment",{"_index":2864,"title":{},"body":{"license.html":{}}}],["peer",{"_index":2622,"title":{},"body":{"license.html":{}}}],["peers",{"_index":2625,"title":{},"body":{"license.html":{}}}],["per",{"_index":1044,"title":{},"body":{"injectables/HistoryService.html":{}}}],["percentage",{"_index":1772,"title":{},"body":{"injectables/UtilService.html":{}}}],["percentage.tofixed(0",{"_index":1774,"title":{},"body":{"injectables/UtilService.html":{}}}],["performance",{"_index":1550,"title":{},"body":{"injectables/SitemapService.html":{},"license.html":{}}}],["performing",{"_index":2440,"title":{},"body":{"license.html":{}}}],["permanently",{"_index":2758,"title":{},"body":{"license.html":{}}}],["permission",{"_index":2260,"title":{},"body":{"license.html":{}}}],["permissions",{"_index":2458,"title":{},"body":{"license.html":{}}}],["permissive",{"_index":2536,"title":{},"body":{"license.html":{}}}],["permit",{"_index":2573,"title":{},"body":{"license.html":{}}}],["permits",{"_index":2740,"title":{},"body":{"license.html":{}}}],["permitted",{"_index":2188,"title":{},"body":{"license.html":{}}}],["perpetuity",{"_index":2677,"title":{},"body":{"license.html":{}}}],["personal",{"_index":2636,"title":{},"body":{"license.html":{}}}],["personalidades",{"_index":2141,"title":{},"body":{"index.html":{}}}],["personalities",{"_index":1079,"title":{},"body":{"controllers/HomeController.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/StatsService.html":{}}}],["personalities.dto",{"_index":1300,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["personalities.dto.ts",{"_index":975,"title":{},"body":{"classes/GetPersonalities.html":{},"coverage.html":{}}}],["personalities.dto.ts:10",{"_index":981,"title":{},"body":{"classes/GetPersonalities.html":{}}}],["personalities.dto.ts:13",{"_index":979,"title":{},"body":{"classes/GetPersonalities.html":{}}}],["personalities.dto.ts:17",{"_index":977,"title":{},"body":{"classes/GetPersonalities.html":{}}}],["personalities.dto.ts:21",{"_index":982,"title":{},"body":{"classes/GetPersonalities.html":{}}}],["personalities.dto.ts:25",{"_index":978,"title":{},"body":{"classes/GetPersonalities.html":{}}}],["personalities.dto.ts:6",{"_index":980,"title":{},"body":{"classes/GetPersonalities.html":{}}}],["personalities.map(async",{"_index":1391,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["personality",{"_index":117,"title":{"classes/Personality.html":{}},"body":{"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/GetClaimsDTO.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["personality._id",{"_index":366,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{}}}],["personality.claims",{"_index":1409,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["personality.controller",{"_index":1345,"title":{},"body":{"modules/PersonalityModule.html":{}}}],["personality.dto",{"_index":1301,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["personality.dto.ts",{"_index":874,"title":{},"body":{"classes/CreatePersonality.html":{},"coverage.html":{}}}],["personality.dto.ts:12",{"_index":886,"title":{},"body":{"classes/CreatePersonality.html":{}}}],["personality.dto.ts:16",{"_index":883,"title":{},"body":{"classes/CreatePersonality.html":{}}}],["personality.dto.ts:20",{"_index":881,"title":{},"body":{"classes/CreatePersonality.html":{}}}],["personality.dto.ts:24",{"_index":887,"title":{},"body":{"classes/CreatePersonality.html":{}}}],["personality.dto.ts:6",{"_index":885,"title":{},"body":{"classes/CreatePersonality.html":{}}}],["personality.dto.ts:9",{"_index":879,"title":{},"body":{"classes/CreatePersonality.html":{}}}],["personality.name",{"_index":1347,"title":{},"body":{"modules/PersonalityModule.html":{},"miscellaneous/variables.html":{}}}],["personality.service",{"_index":1299,"title":{},"body":{"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{}}}],["personality.slug",{"_index":1393,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["personality.wikidata",{"_index":1419,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["personality/${personality.slug",{"_index":1554,"title":{},"body":{"injectables/SitemapService.html":{}}}],["personality/${personality.slug}/claim/${claim.slug",{"_index":1556,"title":{},"body":{"injectables/SitemapService.html":{}}}],["personality/${personality.slug}/claim/${claim.slug}/sentence/${review._id",{"_index":1557,"title":{},"body":{"injectables/SitemapService.html":{}}}],["personality/personality.module",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/HomeModule.html":{},"modules/SitemapModule.html":{},"modules/StatsModule.html":{}}}],["personality/personality.service",{"_index":252,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"injectables/SitemapService.html":{},"injectables/StatsService.html":{}}}],["personality/schemas/personality.schema",{"_index":135,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{}}}],["personalitybody",{"_index":1360,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["personalityclaimpage",{"_index":175,"title":{},"body":{"controllers/ClaimController.html":{}}}],["personalityclaimpage(@req",{"_index":380,"title":{},"body":{"controllers/ClaimController.html":{}}}],["personalityclaimpage(req",{"_index":218,"title":{},"body":{"controllers/ClaimController.html":{}}}],["personalitycontroller",{"_index":1264,"title":{"controllers/PersonalityController.html":{}},"body":{"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"coverage.html":{}}}],["personalitycreatesearch",{"_index":1267,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["personalitycreatesearch(@req",{"_index":1331,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["personalitycreatesearch(req",{"_index":1285,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["personalitydocument",{"_index":1258,"title":{},"body":{"classes/Personality.html":{},"injectables/PersonalityService.html":{},"miscellaneous/typealiases.html":{}}}],["personalityhistorypage",{"_index":176,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{}}}],["personalityhistorypage(@req",{"_index":387,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{}}}],["personalityhistorypage(req",{"_index":221,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{}}}],["personalityid",{"_index":735,"title":{},"body":{"injectables/ClaimService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["personalitylist",{"_index":1268,"title":{},"body":{"controllers/PersonalityController.html":{},"controllers/UsersController.html":{}}}],["personalitylist(@req",{"_index":1336,"title":{},"body":{"controllers/PersonalityController.html":{},"controllers/UsersController.html":{}}}],["personalitylist(req",{"_index":1290,"title":{},"body":{"controllers/PersonalityController.html":{},"controllers/UsersController.html":{}}}],["personalitymodel",{"_index":1346,"title":{},"body":{"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["personalitymodule",{"_index":30,"title":{"modules/PersonalityModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/HomeModule.html":{},"modules/PersonalityModule.html":{},"modules/SitemapModule.html":{},"modules/StatsModule.html":{},"modules.html":{},"overview.html":{}}}],["personalitypage",{"_index":1269,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["personalitypage(@req",{"_index":1334,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["personalitypage(req",{"_index":1293,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["personalityschema",{"_index":1263,"title":{},"body":{"classes/Personality.html":{},"modules/PersonalityModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["personalityschemaraw",{"_index":1259,"title":{},"body":{"classes/Personality.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["personalityschemaraw.plugin(softdeleteplugin",{"_index":1262,"title":{},"body":{"classes/Personality.html":{}}}],["personalityschemaraw.virtual('claims",{"_index":1261,"title":{},"body":{"classes/Personality.html":{}}}],["personalityservice",{"_index":251,"title":{"injectables/PersonalityService.html":{}},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/StatsService.html":{},"coverage.html":{},"overview.html":{}}}],["personalityslug",{"_index":358,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/PersonalityService.html":{}}}],["personalityupdate",{"_index":1439,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["pertinent",{"_index":2881,"title":{},"body":{"license.html":{}}}],["ph\\.d\\./g",{"_index":1205,"title":{},"body":{"injectables/ParserService.html":{},"miscellaneous/variables.html":{}}}],["phdregex",{"_index":1204,"title":{},"body":{"injectables/ParserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["physical",{"_index":2581,"title":{},"body":{"license.html":{}}}],["physically",{"_index":2597,"title":{},"body":{"license.html":{}}}],["pid",{"_index":3066,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pieces",{"_index":2226,"title":{},"body":{"license.html":{}}}],["place",{"_index":2605,"title":{},"body":{"license.html":{}}}],["plain",{"_index":1762,"title":{},"body":{"injectables/UtilService.html":{}}}],["plaintext",{"_index":1969,"title":{},"body":{"injectables/WikidataService.html":{}}}],["plataforma",{"_index":2138,"title":{},"body":{"index.html":{}}}],["please",{"_index":2996,"title":{},"body":{"license.html":{}}}],["plugin",{"_index":2056,"title":{},"body":{"dependencies.html":{}}}],["plus",{"_index":2799,"title":{},"body":{"license.html":{}}}],["poder",{"_index":3104,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pointer",{"_index":2964,"title":{},"body":{"license.html":{}}}],["policy",{"_index":1542,"title":{},"body":{"injectables/SitemapService.html":{},"controllers/ViewController.html":{}}}],["populate",{"_index":591,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/PersonalityService.html":{}}}],["populate(\"latestrevision",{"_index":762,"title":{},"body":{"injectables/ClaimService.html":{}}}],["populate(\"personality",{"_index":812,"title":{},"body":{"injectables/ClaimService.html":{}}}],["populate(\"sources",{"_index":813,"title":{},"body":{"injectables/ClaimService.html":{}}}],["populate(\"user",{"_index":1068,"title":{},"body":{"injectables/HistoryService.html":{}}}],["populates",{"_index":587,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["port",{"_index":936,"title":{},"body":{"injectables/EmailService.html":{}}}],["portion",{"_index":2630,"title":{},"body":{"license.html":{}}}],["positive",{"_index":767,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{}}}],["possesses",{"_index":2593,"title":{},"body":{"license.html":{}}}],["possession",{"_index":2553,"title":{},"body":{"license.html":{}}}],["possibility",{"_index":2940,"title":{},"body":{"license.html":{}}}],["possible",{"_index":2956,"title":{},"body":{"license.html":{}}}],["post",{"_index":234,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{}}}],["post(\"api/claim",{"_index":303,"title":{},"body":{"controllers/ClaimController.html":{}}}],["post(\"api/personality",{"_index":1305,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["post(\"api/user/signin",{"_index":1692,"title":{},"body":{"controllers/UsersController.html":{}}}],["postprocess",{"_index":717,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["postprocess(claim",{"_index":738,"title":{},"body":{"injectables/ClaimService.html":{}}}],["postprocess(personality",{"_index":1371,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["postprocesssentences",{"_index":1174,"title":{},"body":{"injectables/ParserService.html":{}}}],["postprocesssentences(sentences",{"_index":1183,"title":{},"body":{"injectables/ParserService.html":{}}}],["power",{"_index":2518,"title":{},"body":{"license.html":{}}}],["practical",{"_index":2199,"title":{},"body":{"license.html":{}}}],["practice",{"_index":2293,"title":{},"body":{"license.html":{}}}],["preamble",{"_index":2194,"title":{},"body":{"license.html":{}}}],["precise",{"_index":2318,"title":{},"body":{"license.html":{}}}],["precisely",{"_index":2290,"title":{},"body":{"license.html":{}}}],["predecessor",{"_index":2797,"title":{},"body":{"license.html":{}}}],["preferred",{"_index":2395,"title":{},"body":{"license.html":{}}}],["prefix",{"_index":447,"title":{},"body":{"controllers/ClaimReviewController.html":{},"controllers/HomeController.html":{},"controllers/RootController.html":{},"controllers/SitemapController.html":{},"controllers/StatsController.html":{},"controllers/ViewController.html":{}}}],["prefixes",{"_index":1202,"title":{},"body":{"injectables/ParserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["present",{"_index":2893,"title":{},"body":{"license.html":{}}}],["presents",{"_index":2389,"title":{},"body":{"license.html":{}}}],["preservation",{"_index":2712,"title":{},"body":{"license.html":{}}}],["prevent",{"_index":2232,"title":{},"body":{"license.html":{}}}],["prevented",{"_index":2671,"title":{},"body":{"license.html":{}}}],["preview",{"_index":2044,"title":{},"body":{"dependencies.html":{}}}],["previous",{"_index":1056,"title":{},"body":{"injectables/HistoryService.html":{},"license.html":{}}}],["previouschange",{"_index":1048,"title":{},"body":{"injectables/HistoryService.html":{}}}],["previousclaim",{"_index":800,"title":{},"body":{"injectables/ClaimService.html":{}}}],["previouspersonality",{"_index":1437,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["previousrevision",{"_index":794,"title":{},"body":{"injectables/ClaimService.html":{}}}],["previousrevision._id",{"_index":796,"title":{},"body":{"injectables/ClaimService.html":{}}}],["price",{"_index":2221,"title":{},"body":{"license.html":{}}}],["primarily",{"_index":2866,"title":{},"body":{"license.html":{}}}],["prior",{"_index":2761,"title":{},"body":{"license.html":{}}}],["priority",{"_index":1558,"title":{},"body":{"injectables/SitemapService.html":{}}}],["privacy",{"_index":1541,"title":{},"body":{"injectables/SitemapService.html":{},"controllers/ViewController.html":{}}}],["private",{"_index":262,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{},"license.html":{}}}],["problems",{"_index":2271,"title":{},"body":{"license.html":{}}}],["procedures",{"_index":2664,"title":{},"body":{"license.html":{}}}],["process.env.development_password",{"_index":3090,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.environment",{"_index":1853,"title":{},"body":{"injectables/ViewService.html":{}}}],["process.env.mongodb_host",{"_index":3071,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.mongodb_name",{"_index":3073,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.pid",{"_index":3067,"title":{},"body":{"miscellaneous/variables.html":{}}}],["procuring",{"_index":2854,"title":{},"body":{"license.html":{}}}],["produce",{"_index":2430,"title":{},"body":{"license.html":{}}}],["product",{"_index":2582,"title":{},"body":{"license.html":{}}}],["production",{"_index":2170,"title":{},"body":{"index.html":{}}}],["products",{"_index":2288,"title":{},"body":{"license.html":{}}}],["profile",{"_index":1546,"title":{},"body":{"injectables/SitemapService.html":{},"controllers/UsersController.html":{}}}],["profile(@req",{"_index":1717,"title":{},"body":{"controllers/UsersController.html":{}}}],["profile(req",{"_index":1681,"title":{},"body":{"controllers/UsersController.html":{}}}],["program",{"_index":2208,"title":{},"body":{"license.html":{}}}],["program's",{"_index":2528,"title":{},"body":{"license.html":{}}}],["programmer",{"_index":2985,"title":{},"body":{"license.html":{}}}],["programming",{"_index":2404,"title":{},"body":{"license.html":{}}}],["programs",{"_index":2218,"title":{},"body":{"license.html":{}}}],["prohibit",{"_index":2292,"title":{},"body":{"license.html":{}}}],["prohibiting",{"_index":2514,"title":{},"body":{"license.html":{}}}],["prohibits",{"_index":2860,"title":{},"body":{"license.html":{}}}],["project",{"_index":594,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["prominent",{"_index":2392,"title":{},"body":{"license.html":{}}}],["prominently",{"_index":2381,"title":{},"body":{"license.html":{}}}],["promise",{"_index":1485,"title":{},"body":{"guards/SessionGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{}}}],["promise.all",{"_index":290,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/StatsService.html":{},"miscellaneous/variables.html":{}}}],["promise.all(personality.claims.map((claim",{"_index":1410,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["promise.resolve(undefined",{"_index":579,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["prop",{"_index":131,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Personality.html":{},"classes/Source.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{}}}],["prop({default",{"_index":1861,"title":{},"body":{"classes/WikidataCache.html":{}}}],["prop({required",{"_index":129,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Personality.html":{},"classes/Source.html":{},"classes/User.html":{},"classes/WikidataCache.html":{}}}],["prop({type",{"_index":122,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Source.html":{},"classes/WikidataCache.html":{}}}],["prop({unique",{"_index":1255,"title":{},"body":{"classes/Personality.html":{}}}],["prop({validate",{"_index":1572,"title":{},"body":{"classes/Source.html":{}}}],["propagate",{"_index":2348,"title":{},"body":{"license.html":{}}}],["propagating",{"_index":2782,"title":{},"body":{"license.html":{}}}],["propagation",{"_index":2360,"title":{},"body":{"license.html":{}}}],["properties",{"_index":115,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"classes/Logger.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{}}}],["property",{"_index":1421,"title":{},"body":{"injectables/PersonalityService.html":{},"injectables/UtilService.html":{},"injectables/WikidataService.html":{},"license.html":{}}}],["propertyvalue",{"_index":1780,"title":{},"body":{"injectables/UtilService.html":{}}}],["proprietary",{"_index":2315,"title":{},"body":{"license.html":{}}}],["props",{"_index":1182,"title":{},"body":{"injectables/ParserService.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{}}}],["protect",{"_index":2229,"title":{},"body":{"license.html":{}}}],["protecting",{"_index":2282,"title":{},"body":{"license.html":{}}}],["protection",{"_index":2262,"title":{},"body":{"license.html":{}}}],["protocols",{"_index":2692,"title":{},"body":{"license.html":{}}}],["prove",{"_index":2917,"title":{},"body":{"license.html":{}}}],["provide",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"license.html":{}}}],["provided",{"_index":2387,"title":{},"body":{"license.html":{}}}],["providers",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/HomeModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{}}}],["provision",{"_index":2301,"title":{},"body":{"license.html":{}}}],["provisionally",{"_index":2755,"title":{},"body":{"license.html":{}}}],["proxy",{"_index":2905,"title":{},"body":{"license.html":{}}}],["proxy's",{"_index":2907,"title":{},"body":{"license.html":{}}}],["pt",{"_index":1552,"title":{},"body":{"injectables/SitemapService.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["public",{"_index":167,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HistoryController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/SourceController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["publicity",{"_index":2719,"title":{},"body":{"license.html":{}}}],["publicly",{"_index":2693,"title":{},"body":{"license.html":{}}}],["publish",{"_index":2532,"title":{},"body":{"license.html":{}}}],["published",{"_index":2902,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":2309,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":2640,"title":{},"body":{"license.html":{}}}],["pursuant",{"_index":2850,"title":{},"body":{"license.html":{}}}],["put",{"_index":235,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{}}}],["put(\"api/claim/:id",{"_index":320,"title":{},"body":{"controllers/ClaimController.html":{}}}],["put(\"api/personality/:id",{"_index":1322,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["put(\"api/user/:id/password",{"_index":1696,"title":{},"body":{"controllers/UsersController.html":{}}}],["públicas",{"_index":2142,"title":{},"body":{"index.html":{}}}],["q5",{"_index":1943,"title":{},"body":{"injectables/WikidataService.html":{}}}],["qs",{"_index":241,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["qs.stringify",{"_index":273,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["qualify",{"_index":2772,"title":{},"body":{"license.html":{}}}],["quality",{"_index":2916,"title":{},"body":{"license.html":{}}}],["queries",{"_index":1038,"title":{},"body":{"injectables/HistoryService.html":{}}}],["query",{"_index":190,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"controllers/HistoryController.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/SourceController.html":{},"injectables/WikidataService.html":{}}}],["query.language",{"_index":1319,"title":{},"body":{"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["query.name",{"_index":1447,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["query.name.$regex",{"_index":1389,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["query.personality",{"_index":276,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{}}}],["query.withsuggestions",{"_index":1451,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["queryinputs",{"_index":275,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/PersonalityService.html":{}}}],["queryinputs.name",{"_index":1448,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["queryinputs.personality",{"_index":279,"title":{},"body":{"controllers/ClaimController.html":{}}}],["querystring",{"_index":242,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["querywikibaseentities",{"_index":1887,"title":{},"body":{"injectables/WikidataService.html":{}}}],["querywikibaseentities(query",{"_index":1902,"title":{},"body":{"injectables/WikidataService.html":{}}}],["random",{"_index":1081,"title":{},"body":{"controllers/HomeController.html":{},"injectables/PersonalityService.html":{}}}],["randombytes(8",{"_index":3089,"title":{},"body":{"miscellaneous/variables.html":{}}}],["raw",{"_index":2118,"title":{},"body":{"dependencies.html":{}}}],["react",{"_index":2097,"title":{},"body":{"dependencies.html":{}}}],["read",{"_index":2997,"title":{},"body":{"license.html":{}}}],["readable",{"_index":2578,"title":{},"body":{"license.html":{}}}],["readily",{"_index":2837,"title":{},"body":{"license.html":{}}}],["reading",{"_index":2697,"title":{},"body":{"license.html":{}}}],["readonly",{"_index":263,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ViewService.html":{}}}],["ready",{"_index":2299,"title":{},"body":{"license.html":{}}}],["reason",{"_index":2848,"title":{},"body":{"license.html":{}}}],["reasonable",{"_index":2595,"title":{},"body":{"license.html":{}}}],["recaptcha",{"_index":314,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"dependencies.html":{}}}],["recaptcha_api_url",{"_index":267,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["recaptcha_api_url}/siteverify",{"_index":272,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["recaptchacheck",{"_index":306,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["recaptchacheck.success",{"_index":309,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["receipt",{"_index":2770,"title":{},"body":{"license.html":{}}}],["receive",{"_index":2224,"title":{},"body":{"license.html":{}}}],["received",{"_index":531,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"license.html":{}}}],["receives",{"_index":2787,"title":{},"body":{"license.html":{}}}],["receiving",{"_index":2856,"title":{},"body":{"license.html":{}}}],["recipient",{"_index":2676,"title":{},"body":{"license.html":{}}}],["recipient's",{"_index":2846,"title":{},"body":{"license.html":{}}}],["recipients",{"_index":2247,"title":{},"body":{"license.html":{}}}],["recognized",{"_index":2400,"title":{},"body":{"license.html":{}}}],["redirect",{"_index":1148,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["redirects",{"_index":1806,"title":{},"body":{"controllers/ViewController.html":{}}}],["redistribute",{"_index":2959,"title":{},"body":{"license.html":{}}}],["redux",{"_index":2107,"title":{},"body":{"dependencies.html":{}}}],["ref",{"_index":125,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Personality.html":{},"classes/Source.html":{}}}],["referenciando",{"_index":609,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["referring",{"_index":2220,"title":{},"body":{"license.html":{}}}],["refers",{"_index":2324,"title":{},"body":{"license.html":{}}}],["reflect",{"_index":2114,"title":{},"body":{"dependencies.html":{}}}],["refpath",{"_index":988,"title":{},"body":{"classes/History.html":{},"classes/Source.html":{}}}],["refrain",{"_index":2885,"title":{},"body":{"license.html":{}}}],["regard",{"_index":2702,"title":{},"body":{"license.html":{}}}],["regardless",{"_index":2555,"title":{},"body":{"license.html":{}}}],["regenerate",{"_index":2455,"title":{},"body":{"license.html":{}}}],["regex",{"_index":1196,"title":{},"body":{"injectables/ParserService.html":{},"injectables/PersonalityService.html":{}}}],["register",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"injectables/UsersService.html":{}}}],["register(options",{"_index":10,"title":{},"body":{"modules/AppModule.html":{}}}],["register(user",{"_index":1736,"title":{},"body":{"injectables/UsersService.html":{}}}],["rehype",{"_index":2117,"title":{},"body":{"dependencies.html":{}}}],["reinstated",{"_index":2754,"title":{},"body":{"license.html":{}}}],["relationship",{"_index":2488,"title":{},"body":{"license.html":{}}}],["released",{"_index":2214,"title":{},"body":{"license.html":{}}}],["relevant",{"_index":2547,"title":{},"body":{"license.html":{}}}],["reliable",{"_index":1583,"title":{},"body":{"classes/Source.html":{}}}],["relicensing",{"_index":2741,"title":{},"body":{"license.html":{}}}],["relying",{"_index":2836,"title":{},"body":{"license.html":{}}}],["remain",{"_index":2616,"title":{},"body":{"license.html":{}}}],["remains",{"_index":2211,"title":{},"body":{"license.html":{}}}],["removal",{"_index":2703,"title":{},"body":{"license.html":{}}}],["remove",{"_index":769,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"license.html":{}}}],["render",{"_index":371,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"license.html":{}}}],["render(req",{"_index":1820,"title":{},"body":{"controllers/ViewController.html":{}}}],["render(req,res",{"_index":1834,"title":{},"body":{"controllers/ViewController.html":{}}}],["render404",{"_index":1807,"title":{},"body":{"controllers/ViewController.html":{}}}],["rendered",{"_index":2932,"title":{},"body":{"license.html":{}}}],["repair",{"_index":2921,"title":{},"body":{"license.html":{}}}],["repeatednewpassword",{"_index":1700,"title":{},"body":{"controllers/UsersController.html":{}}}],["replace_me",{"_index":3052,"title":{},"body":{"miscellaneous/variables.html":{}}}],["replacement",{"_index":702,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{}}}],["repo",{"_index":2148,"title":{},"body":{"index.html":{}}}],["report",{"_index":409,"title":{},"body":{"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/CreateClaimReview.html":{}}}],["represent",{"_index":2659,"title":{},"body":{"license.html":{}}}],["req",{"_index":185,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimService.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"controllers/SitemapController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"miscellaneous/functions.html":{}}}],["req.body",{"_index":1701,"title":{},"body":{"controllers/UsersController.html":{}}}],["req.get(\"host",{"_index":1470,"title":{},"body":{"controllers/RootController.html":{},"controllers/SitemapController.html":{}}}],["req.language",{"_index":364,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{}}}],["req.login(req.user",{"_index":1694,"title":{},"body":{"controllers/UsersController.html":{}}}],["req.params",{"_index":360,"title":{},"body":{"controllers/ClaimController.html":{}}}],["req.params.claimslug",{"_index":382,"title":{},"body":{"controllers/ClaimController.html":{}}}],["req.params.id",{"_index":1702,"title":{},"body":{"controllers/UsersController.html":{}}}],["req.params.personalityslug",{"_index":381,"title":{},"body":{"controllers/ClaimController.html":{}}}],["req.params.slug",{"_index":378,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{}}}],["req.protocol",{"_index":1469,"title":{},"body":{"controllers/RootController.html":{},"controllers/SitemapController.html":{}}}],["req.user",{"_index":339,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/UsersController.html":{}}}],["req.user._id.tostring",{"_index":1703,"title":{},"body":{"controllers/UsersController.html":{}}}],["req?.user?._id",{"_index":465,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["request",{"_index":192,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["request.isauthenticated",{"_index":1491,"title":{},"body":{"guards/SessionGuard.html":{}}}],["request.url.startswith(\"/api",{"_index":1492,"title":{},"body":{"guards/SessionGuard.html":{}}}],["requested",{"_index":3033,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requester.internalerror(res",{"_index":312,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["requestproperties",{"_index":1888,"title":{},"body":{"injectables/WikidataService.html":{}}}],["requestproperties(params",{"_index":1904,"title":{},"body":{"injectables/WikidataService.html":{}}}],["require",{"_index":2449,"title":{},"body":{"license.html":{}}}],["require(\"axios",{"_index":1539,"title":{},"body":{"injectables/SitemapService.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["require(\"connect",{"_index":3074,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require(\"cookie",{"_index":3026,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require(\"fs",{"_index":920,"title":{},"body":{"injectables/EmailService.html":{},"miscellaneous/variables.html":{}}}],["require(\"handlebars",{"_index":918,"title":{},"body":{"injectables/EmailService.html":{},"miscellaneous/variables.html":{}}}],["require(\"md5",{"_index":1191,"title":{},"body":{"injectables/ParserService.html":{},"miscellaneous/variables.html":{}}}],["require(\"nodemailer",{"_index":916,"title":{},"body":{"injectables/EmailService.html":{},"miscellaneous/variables.html":{}}}],["require(\"path",{"_index":922,"title":{},"body":{"injectables/EmailService.html":{},"miscellaneous/variables.html":{}}}],["require(\"service",{"_index":3125,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('compromise",{"_index":1193,"title":{},"body":{"injectables/ParserService.html":{},"miscellaneous/variables.html":{}}}],["required",{"_index":124,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Personality.html":{},"classes/Source.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"classes/WikidataCache.html":{},"license.html":{}}}],["requirement",{"_index":2548,"title":{},"body":{"license.html":{}}}],["requirements",{"_index":2620,"title":{},"body":{"license.html":{}}}],["requires",{"_index":2268,"title":{},"body":{"license.html":{}}}],["requiring",{"_index":2340,"title":{},"body":{"license.html":{}}}],["res",{"_index":193,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/RootController.html":{},"controllers/SitemapController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"miscellaneous/functions.html":{}}}],["res.send",{"_index":1695,"title":{},"body":{"controllers/UsersController.html":{}}}],["res.send(sitemapxml",{"_index":1515,"title":{},"body":{"controllers/SitemapController.html":{}}}],["res.status(200).json",{"_index":1710,"title":{},"body":{"controllers/UsersController.html":{}}}],["res.status(500).json",{"_index":1714,"title":{},"body":{"controllers/UsersController.html":{}}}],["res.type(\"text/plain\").end",{"_index":1471,"title":{},"body":{"controllers/RootController.html":{}}}],["resave",{"_index":3053,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reset",{"_index":102,"title":{},"body":{"modules/AuthModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/HomeModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{},"overview.html":{}}}],["resolved",{"_index":2647,"title":{},"body":{"license.html":{}}}],["resolver",{"_index":1414,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["respect",{"_index":2241,"title":{},"body":{"license.html":{}}}],["response",{"_index":180,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/HomeController.html":{},"classes/NotFoundFilter.html":{},"controllers/PersonalityController.html":{},"guards/SessionGuard.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"injectables/WikidataService.html":{},"miscellaneous/functions.html":{}}}],["response.data",{"_index":1973,"title":{},"body":{"injectables/WikidataService.html":{}}}],["response.redirect(\"/login",{"_index":1493,"title":{},"body":{"guards/SessionGuard.html":{}}}],["response.redirect('/404",{"_index":1161,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["responsibilities",{"_index":2239,"title":{},"body":{"license.html":{}}}],["responsible",{"_index":2788,"title":{},"body":{"license.html":{}}}],["restrict",{"_index":2308,"title":{},"body":{"license.html":{}}}],["restricting",{"_index":2515,"title":{},"body":{"license.html":{}}}],["restriction",{"_index":2739,"title":{},"body":{"license.html":{}}}],["restrictions",{"_index":2735,"title":{},"body":{"license.html":{}}}],["result",{"_index":1218,"title":{},"body":{"injectables/ParserService.html":{},"injectables/UtilService.html":{},"license.html":{}}}],["result.push",{"_index":1227,"title":{},"body":{"injectables/ParserService.html":{}}}],["result.slice(0",{"_index":1775,"title":{},"body":{"injectables/UtilService.html":{}}}],["resulting",{"_index":2343,"title":{},"body":{"license.html":{}}}],["results",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retains",{"_index":2680,"title":{},"body":{"license.html":{}}}],["return",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/ViewService.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{}}}],["review",{"_index":372,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"classes/History.html":{},"injectables/SitemapService.html":{},"injectables/UtilService.html":{},"miscellaneous/enumerations.html":{}}}],["review._id",{"_index":833,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/UtilService.html":{}}}],["review.controller",{"_index":480,"title":{},"body":{"modules/ClaimReviewModule.html":{}}}],["review.controller.ts",{"_index":446,"title":{},"body":{"controllers/ClaimReviewController.html":{},"coverage.html":{}}}],["review.controller.ts:17",{"_index":449,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["review.controller.ts:32",{"_index":453,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["review.controller.ts:55",{"_index":459,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["review.controller.ts:61",{"_index":456,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["review.count",{"_index":1770,"title":{},"body":{"injectables/UtilService.html":{}}}],["review.dto",{"_index":460,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["review.dto.ts",{"_index":857,"title":{},"body":{"classes/CreateClaimReview.html":{},"coverage.html":{}}}],["review.dto.ts:13",{"_index":859,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["review.dto.ts:16",{"_index":863,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["review.dto.ts:20",{"_index":867,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["review.dto.ts:23",{"_index":866,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["review.dto.ts:27",{"_index":865,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["review.dto.ts:30",{"_index":864,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["review.dto.ts:34",{"_index":869,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["review.dto.ts:9",{"_index":861,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["review.module",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/PersonalityModule.html":{},"modules/SitemapModule.html":{},"modules/StatsModule.html":{}}}],["review.module.ts",{"_index":477,"title":{},"body":{"modules/ClaimReviewModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["review.schema",{"_index":479,"title":{},"body":{"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/CreateClaimReview.html":{}}}],["review.schema.ts",{"_index":407,"title":{},"body":{"classes/ClaimReview.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["review.schema.ts:44",{"_index":416,"title":{},"body":{"classes/ClaimReview.html":{}}}],["review.schema.ts:51",{"_index":412,"title":{},"body":{"classes/ClaimReview.html":{}}}],["review.schema.ts:58",{"_index":419,"title":{},"body":{"classes/ClaimReview.html":{}}}],["review.schema.ts:61",{"_index":422,"title":{},"body":{"classes/ClaimReview.html":{}}}],["review.schema.ts:64",{"_index":421,"title":{},"body":{"classes/ClaimReview.html":{}}}],["review.schema.ts:67",{"_index":420,"title":{},"body":{"classes/ClaimReview.html":{}}}],["review.schema.ts:74",{"_index":423,"title":{},"body":{"classes/ClaimReview.html":{}}}],["review.schema.ts:77",{"_index":418,"title":{},"body":{"classes/ClaimReview.html":{}}}],["review.service",{"_index":238,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/StatsService.html":{}}}],["review.service.ts",{"_index":486,"title":{},"body":{"injectables/ClaimReviewService.html":{},"coverage.html":{}}}],["review.service.ts:100",{"_index":502,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:125",{"_index":503,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:13",{"_index":500,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:175",{"_index":524,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:212",{"_index":546,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:22",{"_index":515,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:225",{"_index":535,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:30",{"_index":518,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:34",{"_index":555,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:43",{"_index":553,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:57",{"_index":548,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:69",{"_index":558,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:84",{"_index":522,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:90",{"_index":551,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review/claim",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["review/dto/create",{"_index":856,"title":{},"body":{"classes/CreateClaimReview.html":{},"coverage.html":{}}}],["review/schemas/claim",{"_index":406,"title":{},"body":{"classes/ClaimReview.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["reviewing",{"_index":2944,"title":{},"body":{"license.html":{}}}],["reviews",{"_index":259,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"classes/GetClaimsByHashDTO.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/StatsService.html":{},"injectables/UtilService.html":{},"coverage.html":{}}}],["reviews.find((review",{"_index":832,"title":{},"body":{"injectables/ClaimService.html":{}}}],["reviews.length",{"_index":829,"title":{},"body":{"injectables/ClaimService.html":{}}}],["reviews.map((review",{"_index":1771,"title":{},"body":{"injectables/UtilService.html":{}}}],["reviews.reduce((agg",{"_index":1768,"title":{},"body":{"injectables/UtilService.html":{}}}],["reviewstats",{"_index":821,"title":{},"body":{"injectables/ClaimService.html":{}}}],["revised",{"_index":2891,"title":{},"body":{"license.html":{}}}],["revision",{"_index":611,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{}}}],["revision.module",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/PersonalityModule.html":{}}}],["revision.module.ts",{"_index":656,"title":{},"body":{"modules/ClaimRevisionModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["revision.schema",{"_index":137,"title":{},"body":{"classes/Claim.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{}}}],["revision.schema.ts",{"_index":624,"title":{},"body":{"classes/ClaimRevision.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["revision.schema.ts:11",{"_index":632,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["revision.schema.ts:14",{"_index":631,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["revision.schema.ts:17",{"_index":628,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["revision.schema.ts:20",{"_index":629,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["revision.schema.ts:27",{"_index":627,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["revision.schema.ts:38",{"_index":633,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["revision.schema.ts:45",{"_index":630,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["revision.service",{"_index":658,"title":{},"body":{"modules/ClaimRevisionModule.html":{},"injectables/ClaimService.html":{}}}],["revision.service.ts",{"_index":666,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"coverage.html":{}}}],["revision.service.ts:11",{"_index":680,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["revision.service.ts:12",{"_index":671,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["revision.service.ts:27",{"_index":677,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["revision.service.ts:36",{"_index":673,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["revision/claim",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"modules/PersonalityModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["revision/schema/claim",{"_index":136,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimRevision.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["revisionid",{"_index":645,"title":{},"body":{"classes/ClaimRevision.html":{},"injectables/ClaimService.html":{}}}],["revisions",{"_index":143,"title":{},"body":{"classes/Claim.html":{}}}],["right",{"_index":2674,"title":{},"body":{"license.html":{}}}],["rights",{"_index":2230,"title":{},"body":{"license.html":{}}}],["risk",{"_index":2915,"title":{},"body":{"license.html":{}}}],["robots",{"_index":1459,"title":{},"body":{"controllers/RootController.html":{}}}],["robots(@res",{"_index":1468,"title":{},"body":{"controllers/RootController.html":{}}}],["robots(res",{"_index":1463,"title":{},"body":{"controllers/RootController.html":{}}}],["rom",{"_index":2683,"title":{},"body":{"license.html":{}}}],["root/root.controller",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["rootcontroller",{"_index":42,"title":{"controllers/RootController.html":{}},"body":{"modules/AppModule.html":{},"controllers/RootController.html":{},"coverage.html":{}}}],["royalty",{"_index":2803,"title":{},"body":{"license.html":{}}}],["rules",{"_index":1198,"title":{},"body":{"injectables/ParserService.html":{},"license.html":{}}}],["run",{"_index":2161,"title":{},"body":{"index.html":{},"license.html":{}}}],["runner",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["running",{"_index":2468,"title":{},"body":{"license.html":{}}}],["runs",{"_index":2428,"title":{},"body":{"license.html":{}}}],["rxjs",{"_index":2120,"title":{},"body":{"dependencies.html":{}}}],["safest",{"_index":2961,"title":{},"body":{"license.html":{}}}],["sake",{"_index":2267,"title":{},"body":{"license.html":{}}}],["sale",{"_index":2812,"title":{},"body":{"license.html":{}}}],["same",{"_index":2248,"title":{},"body":{"license.html":{}}}],["sample",{"_index":1384,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["satisfy",{"_index":2619,"title":{},"body":{"license.html":{}}}],["save",{"_index":675,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["saveuninitialized",{"_index":3054,"title":{},"body":{"miscellaneous/variables.html":{}}}],["saying",{"_index":2614,"title":{},"body":{"license.html":{}}}],["schema",{"_index":132,"title":{},"body":{"classes/Claim.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"modules/ClaimReviewModule.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"classes/History.html":{},"modules/HistoryModule.html":{},"classes/Personality.html":{},"modules/PersonalityModule.html":{},"classes/Source.html":{},"modules/SourceModule.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"modules/UsersModule.html":{},"classes/WikidataCache.html":{},"miscellaneous/variables.html":{}}}],["schema.plugin(require(\"passport",{"_index":1728,"title":{},"body":{"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["schema/claim",{"_index":657,"title":{},"body":{"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{}}}],["schema/history.schema",{"_index":1023,"title":{},"body":{"modules/HistoryModule.html":{},"injectables/HistoryService.html":{}}}],["schemafactory",{"_index":133,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Personality.html":{},"classes/Source.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"classes/WikidataCache.html":{}}}],["schemafactory.createforclass(claim",{"_index":150,"title":{},"body":{"classes/Claim.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(claimreview",{"_index":441,"title":{},"body":{"classes/ClaimReview.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(claimrevision",{"_index":648,"title":{},"body":{"classes/ClaimRevision.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(history",{"_index":1000,"title":{},"body":{"classes/History.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(personality",{"_index":1260,"title":{},"body":{"classes/Personality.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(source",{"_index":1587,"title":{},"body":{"classes/Source.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":1663,"title":{},"body":{"classes/User.html":{},"interfaces/UserDocument.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(wikidatacache",{"_index":1869,"title":{},"body":{"classes/WikidataCache.html":{},"miscellaneous/variables.html":{}}}],["schemas/claim",{"_index":478,"title":{},"body":{"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/CreateClaimReview.html":{}}}],["schemas/claim.schema",{"_index":397,"title":{},"body":{"modules/ClaimModule.html":{}}}],["schemas/personality.schema",{"_index":1344,"title":{},"body":{"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{}}}],["schemas/source.schema",{"_index":1609,"title":{},"body":{"modules/SourceModule.html":{},"injectables/SourceService.html":{}}}],["schemas/user.schema",{"_index":1723,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["schemas/wikidata.schema",{"_index":1875,"title":{},"body":{"modules/WikidataModule.html":{},"injectables/WikidataService.html":{}}}],["school",{"_index":2986,"title":{},"body":{"license.html":{}}}],["scope",{"_index":754,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"license.html":{}}}],["scope.request",{"_index":757,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["scripts",{"_index":2435,"title":{},"body":{"license.html":{}}}],["search",{"_index":1332,"title":{},"body":{"controllers/PersonalityController.html":{},"injectables/SitemapService.html":{},"injectables/WikidataService.html":{}}}],["search.map((wbentity",{"_index":1974,"title":{},"body":{"injectables/WikidataService.html":{}}}],["secondarily",{"_index":2352,"title":{},"body":{"license.html":{}}}],["secret",{"_index":182,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"miscellaneous/variables.html":{}}}],["section",{"_index":2493,"title":{},"body":{"license.html":{}}}],["sections",{"_index":2576,"title":{},"body":{"license.html":{}}}],["secure",{"_index":938,"title":{},"body":{"injectables/EmailService.html":{}}}],["see",{"_index":2969,"title":{},"body":{"license.html":{}}}],["seed",{"_index":3122,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seedbuild",{"_index":2169,"title":{},"body":{"index.html":{}}}],["seeded",{"_index":3097,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seeder",{"_index":2167,"title":{},"body":{"index.html":{}}}],["seeding",{"_index":3115,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seedsingleuser",{"_index":3092,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seedsingleuser(userdata",{"_index":3121,"title":{},"body":{"miscellaneous/variables.html":{}}}],["select",{"_index":1405,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["sell",{"_index":2826,"title":{},"body":{"license.html":{}}}],["selling",{"_index":2811,"title":{},"body":{"license.html":{}}}],["semicolon",{"_index":1237,"title":{},"body":{"injectables/ParserService.html":{}}}],["semicolonsentence",{"_index":1242,"title":{},"body":{"injectables/ParserService.html":{}}}],["semicolonsentence.trim",{"_index":1245,"title":{},"body":{"injectables/ParserService.html":{}}}],["semicolonsentences",{"_index":1238,"title":{},"body":{"injectables/ParserService.html":{}}}],["semicolonsentences.length",{"_index":1243,"title":{},"body":{"injectables/ParserService.html":{}}}],["semicolonsentences.map",{"_index":1241,"title":{},"body":{"injectables/ParserService.html":{}}}],["semicolonsentence};`.trim",{"_index":1244,"title":{},"body":{"injectables/ParserService.html":{}}}],["semiconductor",{"_index":2327,"title":{},"body":{"license.html":{}}}],["sendemail",{"_index":901,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendemail(to",{"_index":909,"title":{},"body":{"injectables/EmailService.html":{}}}],["sent",{"_index":3112,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sentence",{"_index":336,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ParserService.html":{}}}],["sentence.props.topclassification",{"_index":828,"title":{},"body":{"injectables/ClaimService.html":{}}}],["sentence.props[\"data",{"_index":351,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{}}}],["sentence.text(this.nlpoptions",{"_index":1235,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentence_content",{"_index":410,"title":{},"body":{"classes/ClaimReview.html":{},"classes/CreateClaimReview.html":{}}}],["sentence_hash",{"_index":411,"title":{},"body":{"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/CreateClaimReview.html":{}}}],["sentencecontent",{"_index":1181,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentencedatahash",{"_index":1249,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentencehash",{"_index":187,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{}}}],["sentenceid",{"_index":1247,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentenceindex",{"_index":831,"title":{},"body":{"injectables/ClaimService.html":{}}}],["sentenceobj",{"_index":348,"title":{},"body":{"controllers/ClaimController.html":{}}}],["sentences",{"_index":1185,"title":{},"body":{"injectables/ParserService.html":{},"dependencies.html":{}}}],["sentences.foreach(sentence",{"_index":1233,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentences.length",{"_index":1226,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentences.map((sentence",{"_index":1229,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentencesequence",{"_index":1170,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentencetext",{"_index":1234,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentencetext.includes",{"_index":1240,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentencetext.split",{"_index":1239,"title":{},"body":{"injectables/ParserService.html":{}}}],["separable",{"_index":2629,"title":{},"body":{"license.html":{}}}],["separate",{"_index":2562,"title":{},"body":{"license.html":{}}}],["separately",{"_index":2559,"title":{},"body":{"license.html":{}}}],["serializefunctions",{"_index":578,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["server",{"_index":1841,"title":{},"body":{"injectables/ViewService.html":{},"license.html":{}}}],["server/.../claim",{"_index":2129,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/.../claim.module.ts",{"_index":3014,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../claim.schema.ts",{"_index":3006,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/.../claim.service.ts",{"_index":3007,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["server/.../email.service.ts",{"_index":3016,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../history.module.ts",{"_index":3017,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../history.schema.ts",{"_index":2130,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/.../language.middleware.ts",{"_index":2132,"title":{},"body":{"miscellaneous/functions.html":{}}}],["server/.../main.ts",{"_index":3015,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../parser.service.ts",{"_index":3019,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../personality.module.ts",{"_index":3020,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../personality.schema.ts",{"_index":3008,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/.../seed.ts",{"_index":3018,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../server.ts",{"_index":3021,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../sitemap.service.ts",{"_index":3012,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../source.module.ts",{"_index":3022,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../source.schema.ts",{"_index":3009,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/.../user.schema.ts",{"_index":3024,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../users.module.ts",{"_index":3023,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../wikidata.module.ts",{"_index":3025,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../wikidata.schema.ts",{"_index":3010,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/.../wikidata.service.ts",{"_index":3013,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/app.module.ts",{"_index":6,"title":{},"body":{"modules/AppModule.html":{}}}],["server/app.module.ts:25",{"_index":12,"title":{},"body":{"modules/AppModule.html":{}}}],["server/auth/auth.module.ts",{"_index":104,"title":{},"body":{"modules/AuthModule.html":{}}}],["server/auth/local",{"_index":1091,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["server/auth/local.serializer.ts",{"_index":1096,"title":{},"body":{"injectables/LocalSerializer.html":{},"coverage.html":{}}}],["server/auth/local.serializer.ts:8",{"_index":1098,"title":{},"body":{"injectables/LocalSerializer.html":{}}}],["server/auth/local.strategy.ts",{"_index":1105,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["server/auth/local.strategy.ts:9",{"_index":1106,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["server/auth/session.guard.ts",{"_index":1480,"title":{},"body":{"guards/SessionGuard.html":{},"coverage.html":{}}}],["server/auth/session.guard.ts:8",{"_index":1484,"title":{},"body":{"guards/SessionGuard.html":{}}}],["server/claim",{"_index":405,"title":{},"body":{"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"classes/CreateClaimReview.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/claim/claim.controller.ts",{"_index":162,"title":{},"body":{"controllers/ClaimController.html":{},"coverage.html":{}}}],["server/claim/claim.controller.ts:114",{"_index":205,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:120",{"_index":230,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:126",{"_index":202,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:131",{"_index":212,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:162",{"_index":186,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:192",{"_index":208,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:224",{"_index":195,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:248",{"_index":220,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:273",{"_index":226,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:296",{"_index":223,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:41",{"_index":181,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:53",{"_index":189,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:64",{"_index":217,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:94",{"_index":199,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.module.ts",{"_index":395,"title":{},"body":{"modules/ClaimModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/claim/claim.service.ts",{"_index":713,"title":{},"body":{"injectables/ClaimService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["server/claim/claim.service.ts:101",{"_index":744,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:137",{"_index":731,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:153",{"_index":732,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:157",{"_index":734,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:161",{"_index":723,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:17",{"_index":752,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:18",{"_index":720,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:182",{"_index":739,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:210",{"_index":725,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:229",{"_index":741,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:34",{"_index":737,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:56",{"_index":727,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:66",{"_index":729,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/dto/create",{"_index":837,"title":{},"body":{"classes/CreateClaimDTO.html":{},"coverage.html":{}}}],["server/claim/dto/get",{"_index":951,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"coverage.html":{}}}],["server/claim/dto/update",{"_index":1652,"title":{},"body":{"classes/UpdateClaimDTO.html":{},"coverage.html":{}}}],["server/claim/schemas/claim.schema.ts",{"_index":113,"title":{},"body":{"classes/Claim.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/claim/schemas/claim.schema.ts:16",{"_index":127,"title":{},"body":{"classes/Claim.html":{}}}],["server/claim/schemas/claim.schema.ts:19",{"_index":130,"title":{},"body":{"classes/Claim.html":{}}}],["server/claim/schemas/claim.schema.ts:26",{"_index":126,"title":{},"body":{"classes/Claim.html":{}}}],["server/email/email.module.ts",{"_index":896,"title":{},"body":{"modules/EmailModule.html":{}}}],["server/email/email.service.ts",{"_index":898,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/email/email.service.ts:10",{"_index":903,"title":{},"body":{"injectables/EmailService.html":{}}}],["server/email/email.service.ts:16",{"_index":907,"title":{},"body":{"injectables/EmailService.html":{}}}],["server/email/email.service.ts:27",{"_index":904,"title":{},"body":{"injectables/EmailService.html":{}}}],["server/email/email.service.ts:40",{"_index":913,"title":{},"body":{"injectables/EmailService.html":{}}}],["server/filters/not",{"_index":1144,"title":{},"body":{"classes/NotFoundFilter.html":{},"coverage.html":{}}}],["server/history/history.controller.ts",{"_index":1002,"title":{},"body":{"controllers/HistoryController.html":{},"coverage.html":{}}}],["server/history/history.controller.ts:18",{"_index":1006,"title":{},"body":{"controllers/HistoryController.html":{}}}],["server/history/history.module.ts",{"_index":1022,"title":{},"body":{"modules/HistoryModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/history/history.service.ts",{"_index":1028,"title":{},"body":{"injectables/HistoryService.html":{},"coverage.html":{}}}],["server/history/history.service.ts:31",{"_index":1049,"title":{},"body":{"injectables/HistoryService.html":{}}}],["server/history/history.service.ts:58",{"_index":1035,"title":{},"body":{"injectables/HistoryService.html":{}}}],["server/history/history.service.ts:73",{"_index":1037,"title":{},"body":{"injectables/HistoryService.html":{}}}],["server/history/history.service.ts:8",{"_index":1060,"title":{},"body":{"injectables/HistoryService.html":{}}}],["server/history/history.service.ts:9",{"_index":1033,"title":{},"body":{"injectables/HistoryService.html":{}}}],["server/history/schema/history.schema.ts",{"_index":983,"title":{},"body":{"classes/History.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/history/schema/history.schema.ts:25",{"_index":990,"title":{},"body":{"classes/History.html":{}}}],["server/history/schema/history.schema.ts:30",{"_index":991,"title":{},"body":{"classes/History.html":{}}}],["server/history/schema/history.schema.ts:37",{"_index":993,"title":{},"body":{"classes/History.html":{}}}],["server/history/schema/history.schema.ts:42",{"_index":992,"title":{},"body":{"classes/History.html":{}}}],["server/history/schema/history.schema.ts:48",{"_index":987,"title":{},"body":{"classes/History.html":{}}}],["server/history/schema/history.schema.ts:54",{"_index":986,"title":{},"body":{"classes/History.html":{}}}],["server/home/home.controller.ts",{"_index":1070,"title":{},"body":{"controllers/HomeController.html":{},"coverage.html":{}}}],["server/home/home.controller.ts:17",{"_index":1074,"title":{},"body":{"controllers/HomeController.html":{}}}],["server/home/home.module.ts",{"_index":1088,"title":{},"body":{"modules/HomeModule.html":{}}}],["server/logger.ts",{"_index":1115,"title":{},"body":{"classes/Logger.html":{},"coverage.html":{}}}],["server/logger.ts:13",{"_index":1126,"title":{},"body":{"classes/Logger.html":{}}}],["server/logger.ts:17",{"_index":1130,"title":{},"body":{"classes/Logger.html":{}}}],["server/logger.ts:21",{"_index":1135,"title":{},"body":{"classes/Logger.html":{}}}],["server/logger.ts:25",{"_index":1137,"title":{},"body":{"classes/Logger.html":{}}}],["server/logger.ts:4",{"_index":1123,"title":{},"body":{"classes/Logger.html":{}}}],["server/logger.ts:9",{"_index":1132,"title":{},"body":{"classes/Logger.html":{}}}],["server/main.ts",{"_index":2012,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/middleware/language.middleware.ts",{"_index":2018,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["server/parser/parser.module.ts",{"_index":1165,"title":{},"body":{"modules/ParserModule.html":{}}}],["server/parser/parser.service.ts",{"_index":1167,"title":{},"body":{"injectables/ParserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/parser/parser.service.ts:18",{"_index":1188,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/parser/parser.service.ts:19",{"_index":1189,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/parser/parser.service.ts:20",{"_index":1187,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/parser/parser.service.ts:22",{"_index":1178,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/parser/parser.service.ts:50",{"_index":1184,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/parser/parser.service.ts:70",{"_index":1180,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/parser/parser.service.ts:86",{"_index":1175,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/parser/parser.service.ts:91",{"_index":1176,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/personality/dto/create",{"_index":873,"title":{},"body":{"classes/CreatePersonality.html":{},"coverage.html":{}}}],["server/personality/dto/get",{"_index":974,"title":{},"body":{"classes/GetPersonalities.html":{},"coverage.html":{}}}],["server/personality/personality.controller.ts",{"_index":1265,"title":{},"body":{"controllers/PersonalityController.html":{},"coverage.html":{}}}],["server/personality/personality.controller.ts:105",{"_index":1295,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:125",{"_index":1292,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:139",{"_index":1289,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:32",{"_index":1284,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:38",{"_index":1272,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:54",{"_index":1278,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:64",{"_index":1298,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:70",{"_index":1275,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:80",{"_index":1281,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:90",{"_index":1287,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.module.ts",{"_index":1343,"title":{},"body":{"modules/PersonalityModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/personality/personality.service.ts",{"_index":1348,"title":{},"body":{"injectables/PersonalityService.html":{},"coverage.html":{}}}],["server/personality/personality.service.ts:109",{"_index":1364,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:120",{"_index":1367,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:146",{"_index":1372,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:17",{"_index":1379,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:171",{"_index":1369,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:18",{"_index":1380,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:189",{"_index":1374,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:21",{"_index":1354,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:231",{"_index":1361,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:246",{"_index":1357,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:250",{"_index":1363,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:260",{"_index":1377,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:269",{"_index":1356,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:32",{"_index":1370,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:82",{"_index":1359,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/schemas/personality.schema.ts",{"_index":1251,"title":{},"body":{"classes/Personality.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/personality/schemas/personality.schema.ts:10",{"_index":1253,"title":{},"body":{"classes/Personality.html":{}}}],["server/personality/schemas/personality.schema.ts:13",{"_index":1254,"title":{},"body":{"classes/Personality.html":{}}}],["server/personality/schemas/personality.schema.ts:16",{"_index":1252,"title":{},"body":{"classes/Personality.html":{}}}],["server/personality/schemas/personality.schema.ts:19",{"_index":1257,"title":{},"body":{"classes/Personality.html":{}}}],["server/root/root.controller.ts",{"_index":1456,"title":{},"body":{"controllers/RootController.html":{},"coverage.html":{}}}],["server/root/root.controller.ts:14",{"_index":1461,"title":{},"body":{"controllers/RootController.html":{}}}],["server/root/root.controller.ts:6",{"_index":1465,"title":{},"body":{"controllers/RootController.html":{}}}],["server/seed.ts",{"_index":2022,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/server.ts",{"_index":2023,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/sitemap/sitemap.controller.ts",{"_index":1495,"title":{},"body":{"controllers/SitemapController.html":{},"coverage.html":{}}}],["server/sitemap/sitemap.controller.ts:18",{"_index":1501,"title":{},"body":{"controllers/SitemapController.html":{}}}],["server/sitemap/sitemap.controller.ts:27",{"_index":1505,"title":{},"body":{"controllers/SitemapController.html":{}}}],["server/sitemap/sitemap.module.ts",{"_index":1523,"title":{},"body":{"modules/SitemapModule.html":{}}}],["server/sitemap/sitemap.service.ts",{"_index":1525,"title":{},"body":{"injectables/SitemapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/sitemap/sitemap.service.ts:15",{"_index":1534,"title":{},"body":{"injectables/SitemapService.html":{}}}],["server/sitemap/sitemap.service.ts:17",{"_index":1529,"title":{},"body":{"injectables/SitemapService.html":{}}}],["server/sitemap/sitemap.service.ts:73",{"_index":1532,"title":{},"body":{"injectables/SitemapService.html":{}}}],["server/sitemap/sitemap.service.ts:9",{"_index":1527,"title":{},"body":{"injectables/SitemapService.html":{}}}],["server/source/schemas/source.schema.ts",{"_index":1571,"title":{},"body":{"classes/Source.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/source/schemas/source.schema.ts:10",{"_index":1575,"title":{},"body":{"classes/Source.html":{}}}],["server/source/schemas/source.schema.ts:24",{"_index":1573,"title":{},"body":{"classes/Source.html":{}}}],["server/source/schemas/source.schema.ts:27",{"_index":1574,"title":{},"body":{"classes/Source.html":{}}}],["server/source/schemas/source.schema.ts:37",{"_index":1576,"title":{},"body":{"classes/Source.html":{}}}],["server/source/schemas/source.schema.ts:43",{"_index":1579,"title":{},"body":{"classes/Source.html":{}}}],["server/source/schemas/source.schema.ts:50",{"_index":1580,"title":{},"body":{"classes/Source.html":{}}}],["server/source/source.controller.ts",{"_index":1589,"title":{},"body":{"controllers/SourceController.html":{},"coverage.html":{}}}],["server/source/source.controller.ts:10",{"_index":1594,"title":{},"body":{"controllers/SourceController.html":{}}}],["server/source/source.module.ts",{"_index":1608,"title":{},"body":{"modules/SourceModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/source/source.service.ts",{"_index":1613,"title":{},"body":{"injectables/SourceService.html":{},"coverage.html":{}}}],["server/source/source.service.ts:12",{"_index":1618,"title":{},"body":{"injectables/SourceService.html":{}}}],["server/source/source.service.ts:20",{"_index":1619,"title":{},"body":{"injectables/SourceService.html":{}}}],["server/source/source.service.ts:7",{"_index":1616,"title":{},"body":{"injectables/SourceService.html":{}}}],["server/stats/stats.controller.ts",{"_index":1629,"title":{},"body":{"controllers/StatsController.html":{},"coverage.html":{}}}],["server/stats/stats.controller.ts:10",{"_index":1632,"title":{},"body":{"controllers/StatsController.html":{}}}],["server/stats/stats.module.ts",{"_index":1639,"title":{},"body":{"modules/StatsModule.html":{}}}],["server/stats/stats.service.ts",{"_index":1641,"title":{},"body":{"injectables/StatsService.html":{},"coverage.html":{}}}],["server/stats/stats.service.ts:14",{"_index":1644,"title":{},"body":{"injectables/StatsService.html":{}}}],["server/stats/stats.service.ts:7",{"_index":1643,"title":{},"body":{"injectables/StatsService.html":{}}}],["server/users/schemas/user.schema.ts",{"_index":1656,"title":{},"body":{"classes/User.html":{},"interfaces/UserDocument.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/users/schemas/user.schema.ts:11",{"_index":1660,"title":{},"body":{"classes/User.html":{}}}],["server/users/schemas/user.schema.ts:14",{"_index":1658,"title":{},"body":{"classes/User.html":{}}}],["server/users/schemas/user.schema.ts:17",{"_index":1659,"title":{},"body":{"classes/User.html":{}}}],["server/users/schemas/user.schema.ts:5",{"_index":1665,"title":{},"body":{"interfaces/UserDocument.html":{}}}],["server/users/users.controller.ts",{"_index":1667,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["server/users/users.controller.ts:26",{"_index":1675,"title":{},"body":{"controllers/UsersController.html":{}}}],["server/users/users.controller.ts:32",{"_index":1678,"title":{},"body":{"controllers/UsersController.html":{}}}],["server/users/users.controller.ts:40",{"_index":1672,"title":{},"body":{"controllers/UsersController.html":{}}}],["server/users/users.controller.ts:68",{"_index":1680,"title":{},"body":{"controllers/UsersController.html":{}}}],["server/users/users.controller.ts:84",{"_index":1683,"title":{},"body":{"controllers/UsersController.html":{}}}],["server/users/users.module.ts",{"_index":1722,"title":{},"body":{"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/users/users.service.ts",{"_index":1729,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["server/users/users.service.ts:13",{"_index":1733,"title":{},"body":{"injectables/UsersService.html":{}}}],["server/users/users.service.ts:17",{"_index":1737,"title":{},"body":{"injectables/UsersService.html":{}}}],["server/users/users.service.ts:25",{"_index":1735,"title":{},"body":{"injectables/UsersService.html":{}}}],["server/users/users.service.ts:31",{"_index":1732,"title":{},"body":{"injectables/UsersService.html":{}}}],["server/users/users.service.ts:8",{"_index":1730,"title":{},"body":{"injectables/UsersService.html":{}}}],["server/util.ts",{"_index":1751,"title":{},"body":{"injectables/UtilService.html":{},"coverage.html":{}}}],["server/util.ts:26",{"_index":1760,"title":{},"body":{"injectables/UtilService.html":{}}}],["server/util.ts:5",{"_index":1756,"title":{},"body":{"injectables/UtilService.html":{}}}],["server/view/view.controller.ts",{"_index":1788,"title":{},"body":{"controllers/ViewController.html":{},"coverage.html":{}}}],["server/view/view.controller.ts:10",{"_index":1802,"title":{},"body":{"controllers/ViewController.html":{}}}],["server/view/view.controller.ts:20",{"_index":1815,"title":{},"body":{"controllers/ViewController.html":{}}}],["server/view/view.controller.ts:30",{"_index":1814,"title":{},"body":{"controllers/ViewController.html":{}}}],["server/view/view.controller.ts:40",{"_index":1818,"title":{},"body":{"controllers/ViewController.html":{}}}],["server/view/view.controller.ts:50",{"_index":1800,"title":{},"body":{"controllers/ViewController.html":{}}}],["server/view/view.controller.ts:60",{"_index":1797,"title":{},"body":{"controllers/ViewController.html":{}}}],["server/view/view.controller.ts:74",{"_index":1805,"title":{},"body":{"controllers/ViewController.html":{}}}],["server/view/view.module.ts",{"_index":1838,"title":{},"body":{"modules/ViewModule.html":{}}}],["server/view/view.service.ts",{"_index":1840,"title":{},"body":{"injectables/ViewService.html":{},"coverage.html":{}}}],["server/view/view.service.ts:12",{"_index":1846,"title":{},"body":{"injectables/ViewService.html":{}}}],["server/view/view.service.ts:24",{"_index":1844,"title":{},"body":{"injectables/ViewService.html":{}}}],["server/view/view.service.ts:7",{"_index":1848,"title":{},"body":{"injectables/ViewService.html":{}}}],["server/view/view.service.ts:8",{"_index":1843,"title":{},"body":{"injectables/ViewService.html":{}}}],["server/wikidata/schemas/wikidata.schema.ts",{"_index":1859,"title":{},"body":{"classes/WikidataCache.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/wikidata/schemas/wikidata.schema.ts:12",{"_index":1863,"title":{},"body":{"classes/WikidataCache.html":{}}}],["server/wikidata/schemas/wikidata.schema.ts:15",{"_index":1864,"title":{},"body":{"classes/WikidataCache.html":{}}}],["server/wikidata/schemas/wikidata.schema.ts:18",{"_index":1862,"title":{},"body":{"classes/WikidataCache.html":{}}}],["server/wikidata/schemas/wikidata.schema.ts:9",{"_index":1865,"title":{},"body":{"classes/WikidataCache.html":{}}}],["server/wikidata/wikidata.module.ts",{"_index":1873,"title":{},"body":{"modules/WikidataModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/wikidata/wikidata.service.ts",{"_index":1881,"title":{},"body":{"injectables/WikidataService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/wikidata/wikidata.service.ts:104",{"_index":1901,"title":{},"body":{"injectables/WikidataService.html":{}}}],["server/wikidata/wikidata.service.ts:111",{"_index":1894,"title":{},"body":{"injectables/WikidataService.html":{}}}],["server/wikidata/wikidata.service.ts:125",{"_index":1903,"title":{},"body":{"injectables/WikidataService.html":{}}}],["server/wikidata/wikidata.service.ts:153",{"_index":1898,"title":{},"body":{"injectables/WikidataService.html":{}}}],["server/wikidata/wikidata.service.ts:16",{"_index":1890,"title":{},"body":{"injectables/WikidataService.html":{}}}],["server/wikidata/wikidata.service.ts:22",{"_index":1896,"title":{},"body":{"injectables/WikidataService.html":{}}}],["server/wikidata/wikidata.service.ts:39",{"_index":1905,"title":{},"body":{"injectables/WikidataService.html":{}}}],["server/wikidata/wikidata.service.ts:55",{"_index":1892,"title":{},"body":{"injectables/WikidataService.html":{}}}],["serves",{"_index":2419,"title":{},"body":{"license.html":{}}}],["service",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"license.html":{}}}],["servicerunner",{"_index":2024,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["servicing",{"_index":2920,"title":{},"body":{"license.html":{}}}],["session",{"_index":110,"title":{},"body":{"modules/AuthModule.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["sessionguard",{"_index":246,"title":{"guards/SessionGuard.html":{}},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/PersonalityController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["shall",{"_index":2498,"title":{},"body":{"license.html":{}}}],["share",{"_index":2109,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["shared",{"_index":2444,"title":{},"body":{"license.html":{}}}],["short",{"_index":2974,"title":{},"body":{"license.html":{}}}],["show",{"_index":2250,"title":{},"body":{"license.html":{}}}],["show404",{"_index":1792,"title":{},"body":{"controllers/ViewController.html":{}}}],["show404(@req",{"_index":1833,"title":{},"body":{"controllers/ViewController.html":{}}}],["show404(req",{"_index":1803,"title":{},"body":{"controllers/ViewController.html":{}}}],["showaboutpage",{"_index":1793,"title":{},"body":{"controllers/ViewController.html":{}}}],["showaboutpage(@req",{"_index":1825,"title":{},"body":{"controllers/ViewController.html":{}}}],["showaboutpage(req",{"_index":1812,"title":{},"body":{"controllers/ViewController.html":{}}}],["showhome",{"_index":1071,"title":{},"body":{"controllers/HomeController.html":{},"controllers/ViewController.html":{}}}],["showhome(@req",{"_index":1078,"title":{},"body":{"controllers/HomeController.html":{},"controllers/ViewController.html":{}}}],["showhome(req",{"_index":1072,"title":{},"body":{"controllers/HomeController.html":{},"controllers/ViewController.html":{}}}],["showprivacypolicypage",{"_index":1794,"title":{},"body":{"controllers/ViewController.html":{}}}],["showprivacypolicypage(@req",{"_index":1827,"title":{},"body":{"controllers/ViewController.html":{}}}],["showprivacypolicypage(req",{"_index":1816,"title":{},"body":{"controllers/ViewController.html":{}}}],["sign",{"_index":2987,"title":{},"body":{"license.html":{}}}],["significant",{"_index":2660,"title":{},"body":{"license.html":{}}}],["similar",{"_index":2513,"title":{},"body":{"license.html":{}}}],["simultaneously",{"_index":2880,"title":{},"body":{"license.html":{}}}],["single",{"_index":2852,"title":{},"body":{"license.html":{}}}],["sistema",{"_index":3107,"title":{},"body":{"miscellaneous/variables.html":{}}}],["site",{"_index":1560,"title":{},"body":{"injectables/SitemapService.html":{}}}],["sitekey",{"_index":374,"title":{},"body":{"controllers/ClaimController.html":{}}}],["sitelinkname",{"_index":1949,"title":{},"body":{"injectables/WikidataService.html":{}}}],["sitelinkname.match(/^(.*)wiki$/)[1",{"_index":1953,"title":{},"body":{"injectables/WikidataService.html":{}}}],["sitemap",{"_index":1504,"title":{},"body":{"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"dependencies.html":{}}}],["sitemap.controller",{"_index":1524,"title":{},"body":{"modules/SitemapModule.html":{}}}],["sitemap.service",{"_index":1508,"title":{},"body":{"controllers/SitemapController.html":{},"modules/SitemapModule.html":{}}}],["sitemap/sitemap.module",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["sitemapcontroller",{"_index":1494,"title":{"controllers/SitemapController.html":{}},"body":{"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"coverage.html":{}}}],["sitemapmodule",{"_index":61,"title":{"modules/SitemapModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SitemapModule.html":{},"modules.html":{},"overview.html":{}}}],["sitemapservice",{"_index":1507,"title":{"injectables/SitemapService.html":{}},"body":{"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"coverage.html":{},"overview.html":{}}}],["sitemapstream",{"_index":1535,"title":{},"body":{"injectables/SitemapService.html":{}}}],["sitemapstream.end",{"_index":1562,"title":{},"body":{"injectables/SitemapService.html":{}}}],["sitemapstream.write(site",{"_index":1561,"title":{},"body":{"injectables/SitemapService.html":{}}}],["sitemapxml",{"_index":1513,"title":{},"body":{"controllers/SitemapController.html":{}}}],["sites",{"_index":1540,"title":{},"body":{"injectables/SitemapService.html":{}}}],["sites.push",{"_index":1553,"title":{},"body":{"injectables/SitemapService.html":{}}}],["size",{"_index":1385,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["skip(page",{"_index":584,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{},"injectables/SourceService.html":{}}}],["slice",{"_index":1755,"title":{},"body":{"injectables/UtilService.html":{}}}],["slug",{"_index":118,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimService.html":{},"classes/Personality.html":{},"injectables/PersonalityService.html":{}}}],["slugify",{"_index":681,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{},"dependencies.html":{}}}],["slugify(claim.title",{"_index":692,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["slugify(newpersonalitybody.name",{"_index":1435,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["slugify(personality.name",{"_index":1394,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["social",{"_index":2111,"title":{},"body":{"dependencies.html":{}}}],["soft",{"_index":536,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["softdelete",{"_index":139,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"classes/Personality.html":{},"injectables/PersonalityService.html":{},"dependencies.html":{}}}],["softdeleteplugin",{"_index":138,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/Personality.html":{}}}],["software",{"_index":2183,"title":{},"body":{"license.html":{}}}],["sold",{"_index":2641,"title":{},"body":{"license.html":{}}}],["sole",{"_index":2477,"title":{},"body":{"license.html":{}}}],["solely",{"_index":2490,"title":{},"body":{"license.html":{}}}],["sonarcloud",{"_index":768,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{}}}],["sort",{"_index":572,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{},"injectables/SourceService.html":{}}}],["source",{"_index":4,"title":{"classes/Source.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"license.html":{}}}],["source.controller",{"_index":1610,"title":{},"body":{"modules/SourceModule.html":{}}}],["source.name",{"_index":1612,"title":{},"body":{"modules/SourceModule.html":{},"miscellaneous/variables.html":{}}}],["source.save",{"_index":1626,"title":{},"body":{"injectables/SourceService.html":{}}}],["source.service",{"_index":1595,"title":{},"body":{"controllers/SourceController.html":{},"modules/SourceModule.html":{}}}],["source/source.module",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{}}}],["source/source.service",{"_index":563,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{}}}],["sourcecontroller",{"_index":1588,"title":{"controllers/SourceController.html":{}},"body":{"controllers/SourceController.html":{},"modules/SourceModule.html":{},"coverage.html":{}}}],["sourcedocument",{"_index":1581,"title":{},"body":{"classes/Source.html":{},"injectables/SourceService.html":{},"miscellaneous/typealiases.html":{}}}],["sourcemodel",{"_index":1611,"title":{},"body":{"modules/SourceModule.html":{},"injectables/SourceService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sourcemodule",{"_index":38,"title":{"modules/SourceModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/SourceModule.html":{},"modules.html":{},"overview.html":{}}}],["sources",{"_index":385,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"controllers/SourceController.html":{}}}],["sources.length",{"_index":1604,"title":{},"body":{"controllers/SourceController.html":{}}}],["sourceschema",{"_index":1586,"title":{},"body":{"classes/Source.html":{},"modules/SourceModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sourcesclaimpage",{"_index":177,"title":{},"body":{"controllers/ClaimController.html":{}}}],["sourcesclaimpage(@req",{"_index":384,"title":{},"body":{"controllers/ClaimController.html":{}}}],["sourcesclaimpage(req",{"_index":224,"title":{},"body":{"controllers/ClaimController.html":{}}}],["sourceservice",{"_index":499,"title":{"injectables/SourceService.html":{}},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"coverage.html":{},"overview.html":{}}}],["spare",{"_index":2591,"title":{},"body":{"license.html":{}}}],["sparse",{"_index":1256,"title":{},"body":{"classes/Personality.html":{}}}],["speak",{"_index":2219,"title":{},"body":{"license.html":{}}}],["special",{"_index":699,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{},"license.html":{}}}],["specifc",{"_index":807,"title":{},"body":{"injectables/ClaimService.html":{}}}],["specific",{"_index":2426,"title":{},"body":{"license.html":{}}}],["specifically",{"_index":2448,"title":{},"body":{"license.html":{}}}],["specified",{"_index":2402,"title":{},"body":{"license.html":{}}}],["specifies",{"_index":2899,"title":{},"body":{"license.html":{}}}],["specify",{"_index":2903,"title":{},"body":{"license.html":{}}}],["speech",{"_index":635,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["spirit",{"_index":2892,"title":{},"body":{"license.html":{}}}],["stand",{"_index":2298,"title":{},"body":{"license.html":{}}}],["standard",{"_index":2398,"title":{},"body":{"license.html":{}}}],["standards",{"_index":2401,"title":{},"body":{"license.html":{}}}],["start",{"_index":2962,"title":{},"body":{"license.html":{}}}],["started",{"_index":2136,"title":{"index.html":{},"license.html":{}},"body":{}}],["starters",{"_index":1208,"title":{},"body":{"injectables/ParserService.html":{}}}],["starts",{"_index":2975,"title":{},"body":{"license.html":{}}}],["startup",{"_index":2153,"title":{},"body":{"index.html":{}}}],["state",{"_index":507,"title":{},"body":{"injectables/ClaimReviewService.html":{},"license.html":{}}}],["state1",{"_index":510,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["state2",{"_index":511,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["state[acc",{"_index":600,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["state[classification",{"_index":595,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["state[topclassification",{"_index":602,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["stated",{"_index":2462,"title":{},"body":{"license.html":{}}}],["statement",{"_index":2743,"title":{},"body":{"license.html":{}}}],["statements",{"_index":1991,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":2307,"title":{},"body":{"license.html":{}}}],["static",{"_index":8,"title":{},"body":{"modules/AppModule.html":{}}}],["stating",{"_index":2535,"title":{},"body":{"license.html":{}}}],["stats",{"_index":355,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{},"controllers/HomeController.html":{},"injectables/PersonalityService.html":{}}}],["stats.controller",{"_index":1640,"title":{},"body":{"modules/StatsModule.html":{}}}],["stats.service",{"_index":1633,"title":{},"body":{"controllers/StatsController.html":{},"modules/StatsModule.html":{}}}],["stats/stats.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/HomeModule.html":{}}}],["stats/stats.service",{"_index":1076,"title":{},"body":{"controllers/HomeController.html":{}}}],["statscontroller",{"_index":1628,"title":{"controllers/StatsController.html":{}},"body":{"controllers/StatsController.html":{},"modules/StatsModule.html":{},"coverage.html":{}}}],["statsmodule",{"_index":40,"title":{"modules/StatsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HomeModule.html":{},"modules/StatsModule.html":{},"modules.html":{},"overview.html":{}}}],["statsservice",{"_index":1075,"title":{"injectables/StatsService.html":{}},"body":{"controllers/HomeController.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"coverage.html":{},"overview.html":{}}}],["status",{"_index":1462,"title":{},"body":{"controllers/RootController.html":{},"license.html":{}}}],["step",{"_index":2172,"title":{},"body":{"index.html":{}}}],["steps",{"_index":2255,"title":{},"body":{"license.html":{}}}],["storage",{"_index":2569,"title":{},"body":{"license.html":{}}}],["store",{"_index":3055,"title":{},"body":{"miscellaneous/variables.html":{}}}],["strategy",{"_index":1107,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/SitemapService.html":{},"controllers/ViewController.html":{}}}],["streamtopromise",{"_index":1536,"title":{},"body":{"injectables/SitemapService.html":{}}}],["streamtopromise(sitemapstream",{"_index":1563,"title":{},"body":{"injectables/SitemapService.html":{}}}],["strict",{"_index":697,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{}}}],["string",{"_index":128,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"injectables/HistoryService.html":{},"classes/Logger.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"classes/Source.html":{},"injectables/SourceService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{}}}],["strip",{"_index":698,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{}}}],["styled",{"_index":2124,"title":{},"body":{"dependencies.html":{}}}],["subdividing",{"_index":2793,"title":{},"body":{"license.html":{}}}],["subject",{"_index":910,"title":{},"body":{"injectables/EmailService.html":{},"license.html":{}}}],["sublicenses",{"_index":2822,"title":{},"body":{"license.html":{}}}],["sublicensing",{"_index":2492,"title":{},"body":{"license.html":{}}}],["submitsitemap",{"_index":1497,"title":{},"body":{"controllers/SitemapController.html":{},"injectables/SitemapService.html":{}}}],["submitsitemap(@request",{"_index":1517,"title":{},"body":{"controllers/SitemapController.html":{}}}],["submitsitemap(hostname",{"_index":1531,"title":{},"body":{"injectables/SitemapService.html":{}}}],["submitsitemap(req",{"_index":1502,"title":{},"body":{"controllers/SitemapController.html":{}}}],["submitted",{"_index":1566,"title":{},"body":{"injectables/SitemapService.html":{}}}],["submitting",{"_index":1567,"title":{},"body":{"injectables/SitemapService.html":{}}}],["subprograms",{"_index":2447,"title":{},"body":{"license.html":{}}}],["subroutine",{"_index":2990,"title":{},"body":{"license.html":{}}}],["subsection",{"_index":2601,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":2655,"title":{},"body":{"license.html":{}}}],["substantially",{"_index":2296,"title":{},"body":{"license.html":{}}}],["success",{"_index":1711,"title":{},"body":{"controllers/UsersController.html":{}}}],["successful",{"_index":1712,"title":{},"body":{"controllers/UsersController.html":{}}}],["successfully",{"_index":1326,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["such",{"_index":2243,"title":{},"body":{"license.html":{}}}],["sue",{"_index":2834,"title":{},"body":{"license.html":{}}}],["suffice",{"_index":2668,"title":{},"body":{"license.html":{}}}],["suffixes",{"_index":1206,"title":{},"body":{"injectables/ParserService.html":{}}}],["sum",{"_index":571,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["super",{"_index":1111,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["supplement",{"_index":2698,"title":{},"body":{"license.html":{}}}],["support",{"_index":2543,"title":{},"body":{"license.html":{},"modules.html":{}}}],["supports",{"_index":2610,"title":{},"body":{"license.html":{}}}],["sure",{"_index":2210,"title":{},"body":{"license.html":{}}}],["surrender",{"_index":2236,"title":{},"body":{"license.html":{}}}],["survive",{"_index":2742,"title":{},"body":{"license.html":{}}}],["sustained",{"_index":2935,"title":{},"body":{"license.html":{}}}],["svg",{"_index":2037,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["system",{"_index":2408,"title":{},"body":{"license.html":{}}}],["systematic",{"_index":2283,"title":{},"body":{"license.html":{}}}],["t",{"_index":1759,"title":{},"body":{"injectables/UtilService.html":{}}}],["table",{"_index":2032,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2031,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":415,"title":{},"body":{"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/Source.html":{}}}],["take",{"_index":2201,"title":{},"body":{"license.html":{}}}],["tangible",{"_index":2635,"title":{},"body":{"license.html":{}}}],["target",{"_index":1039,"title":{},"body":{"injectables/HistoryService.html":{}}}],["target(claim",{"_index":1051,"title":{},"body":{"injectables/HistoryService.html":{}}}],["targetid",{"_index":157,"title":{},"body":{"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/PersonalityController.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{}}}],["targetmodel",{"_index":389,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"classes/Source.html":{},"miscellaneous/enumerations.html":{}}}],["targetmodel.claim",{"_index":787,"title":{},"body":{"injectables/ClaimService.html":{}}}],["targetmodel.personality",{"_index":1400,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["technological",{"_index":2501,"title":{},"body":{"license.html":{}}}],["tells",{"_index":2385,"title":{},"body":{"license.html":{}}}],["template",{"_index":928,"title":{},"body":{"injectables/EmailService.html":{}}}],["template/email.html",{"_index":908,"title":{},"body":{"injectables/EmailService.html":{}}}],["templateoptions",{"_index":912,"title":{},"body":{"injectables/EmailService.html":{}}}],["templatepath",{"_index":906,"title":{},"body":{"injectables/EmailService.html":{}}}],["templates/userseed.html",{"_index":3111,"title":{},"body":{"miscellaneous/variables.html":{}}}],["term",{"_index":2460,"title":{},"body":{"license.html":{}}}],["terminal",{"_index":2973,"title":{},"body":{"license.html":{}}}],["terminate",{"_index":2749,"title":{},"body":{"license.html":{}}}],["terminated",{"_index":2771,"title":{},"body":{"license.html":{}}}],["terminates",{"_index":2757,"title":{},"body":{"license.html":{}}}],["termination",{"_index":2746,"title":{},"body":{"license.html":{}}}],["terms",{"_index":2251,"title":{},"body":{"license.html":{}}}],["text",{"_index":911,"title":{},"body":{"injectables/EmailService.html":{},"injectables/ParserService.html":{}}}],["text/xml",{"_index":1500,"title":{},"body":{"controllers/SitemapController.html":{}}}],["then(([claims",{"_index":293,"title":{},"body":{"controllers/ClaimController.html":{}}}],["then(([personalities",{"_index":1453,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["then(([reviews",{"_index":331,"title":{},"body":{"controllers/ClaimController.html":{}}}],["then(([stats",{"_index":345,"title":{},"body":{"controllers/ClaimController.html":{}}}],["then((history",{"_index":1014,"title":{},"body":{"controllers/HistoryController.html":{}}}],["then((response",{"_index":1972,"title":{},"body":{"injectables/WikidataService.html":{}}}],["then((sources",{"_index":1602,"title":{},"body":{"controllers/SourceController.html":{}}}],["then((values",{"_index":1648,"title":{},"body":{"injectables/StatsService.html":{}}}],["then(async",{"_index":3095,"title":{},"body":{"miscellaneous/variables.html":{}}}],["therefore",{"_index":2237,"title":{},"body":{"license.html":{}}}],["things",{"_index":2228,"title":{},"body":{"license.html":{}}}],["third",{"_index":2527,"title":{},"body":{"license.html":{}}}],["this._checkcaptcharesponse",{"_index":307,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["this._getclaim",{"_index":793,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this._getclaim({_id",{"_index":809,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this._getclaim({personality",{"_index":810,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this._getsentencebyhashandclaimid(sentencehash",{"_index":367,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this._reviewsbysentencehashaggregated(sentencehash",{"_index":583,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["this._reviewsbysentencehashaggregated(sentencehash).count",{"_index":581,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["this._topclassificationaccumulator",{"_index":576,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["this._verifyinputsquery(getclaimsdto",{"_index":289,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.calculateoverallstats(claim",{"_index":824,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimmodel(claim",{"_index":778,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimmodel.countdocuments().where(query",{"_index":774,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimmodel.find(query",{"_index":761,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimmodel.findone(match",{"_index":811,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimmodel.softdelete",{"_index":804,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimreview.agreggateclassification",{"_index":1428,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.claimreviewmodel(claimreview",{"_index":620,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["this.claimreviewmodel.aggregate",{"_index":569,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["this.claimreviewmodel.countdocuments().where(query",{"_index":573,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["this.claimreviewmodel.findone",{"_index":580,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["this.claimreviewservice.count",{"_index":1647,"title":{},"body":{"injectables/StatsService.html":{}}}],["this.claimreviewservice.countreviewsbysentencehash(sentencehash",{"_index":330,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimreviewservice.create",{"_index":464,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["this.claimreviewservice.delete(params.id",{"_index":471,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["this.claimreviewservice.getbyid(params.id",{"_index":468,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["this.claimreviewservice.getreviewsbyclaimid",{"_index":817,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/SitemapService.html":{}}}],["this.claimreviewservice.getreviewsbysentencehash",{"_index":328,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimreviewservice.getreviewstatsbyclaimid",{"_index":822,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimreviewservice.getreviewstatsbysentencehash({sentencehash",{"_index":340,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimreviewservice.getuserreviewbysentencehash",{"_index":343,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimrevisionmodel(claim",{"_index":704,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["this.claimrevisionmodel.findone",{"_index":686,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["this.claimrevisionservice.create(claim._id",{"_index":797,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimrevisionservice.create(newclaim._id",{"_index":779,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimservice.count",{"_index":1645,"title":{},"body":{"injectables/StatsService.html":{}}}],["this.claimservice.count(queryinputs",{"_index":292,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimservice.create(createclaimdto",{"_index":316,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimservice.delete(claimid",{"_index":325,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimservice.getbyid(claimid",{"_index":319,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimservice.getbypersonalityidandclaimslug",{"_index":365,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimservice.listall",{"_index":291,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimservice.listall(0",{"_index":1555,"title":{},"body":{"injectables/SitemapService.html":{}}}],["this.claimservice.update(claimid",{"_index":322,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.configservice.get(\"recaptcha_secret",{"_index":305,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["this.configservice.get(\"recaptcha_sitekey",{"_index":375,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.configservice.get(\"smtp_email_pass",{"_index":943,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get(\"smtp_email_user",{"_index":941,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get(\"smtp_host",{"_index":935,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get(\"smtp_port",{"_index":937,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get(\"smtp_secure",{"_index":939,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get(\"web_url",{"_index":931,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.count(queryinputs",{"_index":1452,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.createparagraphid",{"_index":1224,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.createsentenceid",{"_index":1248,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.createtransport",{"_index":944,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.extractclaimwithtextsummary(personality.claims",{"_index":1426,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.extractproperties",{"_index":1928,"title":{},"body":{"injectables/WikidataService.html":{}}}],["this.extractvalue",{"_index":1936,"title":{},"body":{"injectables/WikidataService.html":{}}}],["this.extractvalue(wikidata",{"_index":1933,"title":{},"body":{"injectables/WikidataService.html":{}}}],["this.getbyid(claimid",{"_index":801,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.getbyid(personalityid",{"_index":1436,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.getbyid(userid",{"_index":1745,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getcommonsthumburl(filename",{"_index":1948,"title":{},"body":{"injectables/WikidataService.html":{}}}],["this.getemailbody(templateoptions",{"_index":945,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.getreviewstats(personality._id",{"_index":1425,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.getsitelinkname(language",{"_index":1950,"title":{},"body":{"injectables/WikidataService.html":{}}}],["this.history.createhistory(history",{"_index":1401,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.history.gethistoryparams",{"_index":1398,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.historymodel(data",{"_index":1064,"title":{},"body":{"injectables/HistoryService.html":{}}}],["this.historymodel.find",{"_index":1066,"title":{},"body":{"injectables/HistoryService.html":{}}}],["this.historyservice",{"_index":1012,"title":{},"body":{"controllers/HistoryController.html":{}}}],["this.historyservice.createhistory(history",{"_index":789,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.historyservice.gethistoryparams",{"_index":785,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.httpservice.post",{"_index":271,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["this.listall",{"_index":1450,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.logger",{"_index":1138,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.error(\"failed",{"_index":1857,"title":{},"body":{"injectables/ViewService.html":{}}}],["this.logger.error(`error/recaptcha",{"_index":310,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.logger.error(e",{"_index":711,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"controllers/UsersController.html":{}}}],["this.logger.error(err",{"_index":1321,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["this.logger.error(error",{"_index":301,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["this.logger.error(message",{"_index":1570,"title":{},"body":{"injectables/SitemapService.html":{}}}],["this.logger.log",{"_index":297,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HistoryController.html":{},"injectables/PersonalityService.html":{},"controllers/SourceController.html":{}}}],["this.logger.log(\"debug",{"_index":1140,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.log(\"error",{"_index":1141,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.log(\"info",{"_index":1139,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.log(\"verbose",{"_index":1142,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.log(\"warn",{"_index":1143,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.log(`found",{"_index":1406,"title":{},"body":{"injectables/PersonalityService.html":{},"injectables/UsersService.html":{}}}],["this.logger.log(`got",{"_index":1429,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.logger.log(`sending",{"_index":946,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.logger.log(`updated",{"_index":1441,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.logger.log(`user",{"_index":1749,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.optionstoupdate",{"_index":685,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{}}}],["this.paragraphsequence",{"_index":1216,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.paragraphsequence}${this.sentencesequence}${sentencecontent",{"_index":1250,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.parserservice.parse(claim.content",{"_index":690,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["this.parsesentence(sentence",{"_index":1230,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.personalitymodel(personality",{"_index":1396,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.aggregate",{"_index":1383,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.countdocuments().where(query",{"_index":1443,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.find(query",{"_index":1386,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.findbyid",{"_index":1404,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.findbyid(id",{"_index":1427,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.findbyidandupdate",{"_index":1440,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.findone",{"_index":1408,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.softdelete",{"_index":1442,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalityservice",{"_index":1317,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["this.personalityservice.combinedlistall",{"_index":1080,"title":{},"body":{"controllers/HomeController.html":{}}}],["this.personalityservice.combinedlistall(getpersonalities",{"_index":1304,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["this.personalityservice.count",{"_index":1646,"title":{},"body":{"injectables/StatsService.html":{}}}],["this.personalityservice.create(createpersonality",{"_index":1306,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["this.personalityservice.delete(personalityid",{"_index":1325,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["this.personalityservice.getbyslug",{"_index":363,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{}}}],["this.personalityservice.listall",{"_index":1551,"title":{},"body":{"injectables/SitemapService.html":{}}}],["this.personalityservice.update(personalityid",{"_index":1323,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["this.postprocess",{"_index":772,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.postprocess(claim.toobject",{"_index":814,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.postprocess(personality",{"_index":1392,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.postprocess(personality.toobject",{"_index":1407,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.postprocesssentences(paragraph.sentences",{"_index":1225,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.req.user",{"_index":784,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["this.requestproperties(params",{"_index":1913,"title":{},"body":{"injectables/WikidataService.html":{}}}],["this.sentencesequence",{"_index":1217,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.server",{"_index":1851,"title":{},"body":{"injectables/ViewService.html":{}}}],["this.server.prepare",{"_index":1856,"title":{},"body":{"injectables/ViewService.html":{}}}],["this.sitemapservice.getsitemap",{"_index":1514,"title":{},"body":{"controllers/SitemapController.html":{}}}],["this.sitemapservice.submitsitemap",{"_index":1518,"title":{},"body":{"controllers/SitemapController.html":{}}}],["this.sourcemodel(data",{"_index":1625,"title":{},"body":{"injectables/SourceService.html":{}}}],["this.sourcemodel.find",{"_index":1627,"title":{},"body":{"injectables/SourceService.html":{}}}],["this.sourceservice",{"_index":1600,"title":{},"body":{"controllers/SourceController.html":{}}}],["this.sourceservice.create",{"_index":707,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["this.statsservice.gethomestats",{"_index":1084,"title":{},"body":{"controllers/HomeController.html":{},"controllers/StatsController.html":{}}}],["this.transformcontentobject",{"_index":820,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.usermodel(user",{"_index":1741,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.find().exec",{"_index":1739,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyid(userid",{"_index":1743,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.register",{"_index":1740,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice",{"_index":1707,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.util.formatstats(reviews",{"_index":574,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/PersonalityService.html":{}}}],["this.util.mergeobjectsinunique",{"_index":1390,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.verifyinputsquery(query",{"_index":1449,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.viewservice",{"_index":369,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["this.wikidata.fetchproperties",{"_index":1417,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.wikidata.querywikibaseentities",{"_index":1388,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.wikidatacache",{"_index":1915,"title":{},"body":{"injectables/WikidataService.html":{}}}],["this.wikidatacache.findone",{"_index":1909,"title":{},"body":{"injectables/WikidataService.html":{}}}],["those",{"_index":2294,"title":{},"body":{"license.html":{}}}],["though",{"_index":2700,"title":{},"body":{"license.html":{}}}],["threatened",{"_index":2304,"title":{},"body":{"license.html":{}}}],["three",{"_index":2589,"title":{},"body":{"license.html":{}}}],["throttlerguard",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule.forroot",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["through",{"_index":771,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"license.html":{}}}],["throw",{"_index":315,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"controllers/UsersController.html":{}}}],["thus",{"_index":2483,"title":{},"body":{"license.html":{}}}],["ties",{"_index":601,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["time",{"_index":2767,"title":{},"body":{"license.html":{}}}],["title",{"_index":626,"title":{},"body":{"classes/ClaimRevision.html":{},"classes/CreateClaimDTO.html":{},"injectables/PersonalityService.html":{}}}],["titles",{"_index":1979,"title":{},"body":{"injectables/WikidataService.html":{}}}],["todo",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{}}}],["tojson",{"_index":146,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Personality.html":{}}}],["toobject",{"_index":144,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Personality.html":{}}}],["tools",{"_index":2438,"title":{},"body":{"license.html":{}}}],["topclassification",{"_index":575,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{}}}],["topromise",{"_index":274,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["total",{"_index":1757,"title":{},"body":{"injectables/UtilService.html":{}}}],["totalchanges",{"_index":1015,"title":{},"body":{"controllers/HistoryController.html":{}}}],["totalclaims",{"_index":294,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{}}}],["totalclaimsreviewed",{"_index":726,"title":{},"body":{"injectables/ClaimService.html":{}}}],["totalpages",{"_index":295,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HistoryController.html":{},"injectables/PersonalityService.html":{},"controllers/SourceController.html":{}}}],["totalpersonalities",{"_index":1454,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["totalreviews",{"_index":332,"title":{},"body":{"controllers/ClaimController.html":{}}}],["totalreviews[0]?.count",{"_index":333,"title":{},"body":{"controllers/ClaimController.html":{}}}],["totalsources",{"_index":1603,"title":{},"body":{"controllers/SourceController.html":{}}}],["trace",{"_index":1129,"title":{},"body":{"classes/Logger.html":{}}}],["tracks",{"_index":527,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["trade",{"_index":2725,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":2724,"title":{},"body":{"license.html":{}}}],["trademarks",{"_index":2726,"title":{},"body":{"license.html":{}}}],["transaction",{"_index":2673,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":2373,"title":{},"body":{"license.html":{}}}],["transferred",{"_index":2675,"title":{},"body":{"license.html":{}}}],["transferring",{"_index":2791,"title":{},"body":{"license.html":{}}}],["transform",{"_index":815,"title":{},"body":{"injectables/ClaimService.html":{},"miscellaneous/variables.html":{}}}],["transformcontentobject",{"_index":718,"title":{},"body":{"injectables/ClaimService.html":{}}}],["transformcontentobject(claimcontent",{"_index":740,"title":{},"body":{"injectables/ClaimService.html":{}}}],["transformer",{"_index":2064,"title":{},"body":{"dependencies.html":{}}}],["transformoptions",{"_index":3046,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transmission",{"_index":2623,"title":{},"body":{"license.html":{}}}],["transporter",{"_index":932,"title":{},"body":{"injectables/EmailService.html":{}}}],["transporter.close",{"_index":950,"title":{},"body":{"injectables/EmailService.html":{}}}],["transporter.sendmail",{"_index":949,"title":{},"body":{"injectables/EmailService.html":{}}}],["treated",{"_index":2699,"title":{},"body":{"license.html":{}}}],["treaty",{"_index":2508,"title":{},"body":{"license.html":{}}}],["trim:true",{"_index":1186,"title":{},"body":{"injectables/ParserService.html":{}}}],["true",{"_index":111,"title":{},"body":{"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"classes/Source.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/ViewController.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":623,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"injectables/SitemapService.html":{},"controllers/UsersController.html":{},"injectables/ViewService.html":{}}}],["ts",{"_index":277,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/HomeController.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/ViewController.html":{}}}],["ttl",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["twitter\"].indexof(v",{"_index":636,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["two",{"_index":2254,"title":{},"body":{"license.html":{}}}],["type",{"_index":119,"title":{},"body":{"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"injectables/StatsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"license.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":3004,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":688,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["types",{"_index":561,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/SourceService.html":{},"classes/UpdateClaimDTO.html":{},"dependencies.html":{}}}],["types.objectid(claim.personality",{"_index":776,"title":{},"body":{"injectables/ClaimService.html":{}}}],["types.objectid(claimreview.claim",{"_index":616,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["types.objectid(claimreview.personality",{"_index":614,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["types.objectid(claimreview.user",{"_index":618,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["types.objectid(data.targetid",{"_index":1622,"title":{},"body":{"injectables/SourceService.html":{}}}],["types.objectid(data.user",{"_index":1624,"title":{},"body":{"injectables/SourceService.html":{}}}],["types.objectid(dataid",{"_index":1062,"title":{},"body":{"injectables/HistoryService.html":{}}}],["types.objectid(query.personality",{"_index":760,"title":{},"body":{"injectables/ClaimService.html":{}}}],["types.objectid(targetid",{"_index":1067,"title":{},"body":{"injectables/HistoryService.html":{},"injectables/SourceService.html":{}}}],["types/jest",{"_index":2053,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":140,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"classes/Personality.html":{},"injectables/PersonalityService.html":{},"dependencies.html":{}}}],["typical",{"_index":2649,"title":{},"body":{"license.html":{}}}],["unacceptable",{"_index":2291,"title":{},"body":{"license.html":{}}}],["unauthorizedexception",{"_index":1486,"title":{},"body":{"guards/SessionGuard.html":{}}}],["unclassified",{"_index":1582,"title":{},"body":{"classes/Source.html":{}}}],["undefined",{"_index":123,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"classes/Source.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["under",{"_index":2331,"title":{},"body":{"license.html":{}}}],["unique",{"_index":674,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"classes/Personality.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["unknown",{"_index":183,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WikidataService.html":{}}}],["unless",{"_index":2658,"title":{},"body":{"license.html":{}}}],["unlimited",{"_index":2466,"title":{},"body":{"license.html":{}}}],["unmodified",{"_index":2347,"title":{},"body":{"license.html":{}}}],["unnecessary",{"_index":2495,"title":{},"body":{"license.html":{}}}],["unpacking",{"_index":2696,"title":{},"body":{"license.html":{}}}],["unreliable",{"_index":1584,"title":{},"body":{"classes/Source.html":{}}}],["unsustainable",{"_index":432,"title":{},"body":{"classes/ClaimReview.html":{},"miscellaneous/enumerations.html":{}}}],["until",{"_index":2756,"title":{},"body":{"license.html":{}}}],["unverifiable",{"_index":434,"title":{},"body":{"classes/ClaimReview.html":{},"miscellaneous/enumerations.html":{}}}],["up",{"_index":662,"title":{},"body":{"modules/ClaimRevisionModule.html":{},"index.html":{}}}],["update",{"_index":178,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"miscellaneous/enumerations.html":{}}}],["update(@param(\"id",{"_index":321,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{}}}],["update(claimid",{"_index":227,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{}}}],["update(personalityid",{"_index":1296,"title":{},"body":{"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["updateclaimdto",{"_index":228,"title":{"classes/UpdateClaimDTO.html":{}},"body":{"controllers/ClaimController.html":{},"classes/UpdateClaimDTO.html":{},"coverage.html":{}}}],["updated",{"_index":751,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["updates",{"_index":2685,"title":{},"body":{"license.html":{}}}],["updation",{"_index":750,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["upsert",{"_index":683,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{}}}],["url",{"_index":250,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"injectables/SitemapService.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"injectables/WikidataService.html":{}}}],["usando",{"_index":3108,"title":{},"body":{"miscellaneous/variables.html":{}}}],["use",{"_index":638,"title":{},"body":{"classes/ClaimRevision.html":{},"classes/Source.html":{},"license.html":{}}}],["useclass",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["used",{"_index":1040,"title":{},"body":{"injectables/HistoryService.html":{},"controllers/ViewController.html":{},"license.html":{}}}],["usefactory",{"_index":1727,"title":{},"body":{"modules/UsersModule.html":{},"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["useful",{"_index":2968,"title":{},"body":{"license.html":{}}}],["useguards",{"_index":236,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/PersonalityController.html":{},"controllers/SitemapController.html":{},"controllers/UsersController.html":{}}}],["useguards(localauthguard",{"_index":1691,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(localauthguard)@post('api/user/signin",{"_index":1677,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(sessionguard",{"_index":302,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/PersonalityController.html":{},"controllers/SitemapController.html":{},"controllers/UsersController.html":{}}}],["useguards(sessionguard)@delete(':id",{"_index":455,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["useguards(sessionguard)@delete('api/claim/:id",{"_index":201,"title":{},"body":{"controllers/ClaimController.html":{}}}],["useguards(sessionguard)@delete('api/personality/:id",{"_index":1274,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["useguards(sessionguard)@get('api/user/validate",{"_index":1674,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(sessionguard)@get('personality/search",{"_index":1286,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["useguards(sessionguard)@get('profile",{"_index":1682,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(sessionguard)@get('submit",{"_index":1503,"title":{},"body":{"controllers/SitemapController.html":{}}}],["useguards(sessionguard)@post",{"_index":452,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["useguards(sessionguard)@post('api/claim",{"_index":198,"title":{},"body":{"controllers/ClaimController.html":{}}}],["useguards(sessionguard)@post('api/personality",{"_index":1271,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["useguards(sessionguard)@put('api/claim/:id",{"_index":229,"title":{},"body":{"controllers/ClaimController.html":{}}}],["useguards(sessionguard)@put('api/personality/:id",{"_index":1297,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["useguards(sessionguard)@put('api/user/:id/password",{"_index":1671,"title":{},"body":{"controllers/UsersController.html":{}}}],["useless",{"_index":1432,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["usenewurlparser",{"_index":3038,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user",{"_index":338,"title":{"classes/User.html":{}},"body":{"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"classes/Source.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["user._id",{"_index":1744,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.changepassword(currentpassword",{"_index":1746,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.firstpasswordchanged",{"_index":1748,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.name",{"_index":1726,"title":{},"body":{"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["user.password",{"_index":1742,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.save",{"_index":1750,"title":{},"body":{"injectables/UsersService.html":{}}}],["user?._id",{"_index":344,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/HistoryService.html":{}}}],["userdata",{"_index":3093,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdata.email",{"_index":3096,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdata.password",{"_index":3120,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdata.sendauthdetails",{"_index":3098,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdocument",{"_index":1101,"title":{"interfaces/UserDocument.html":{}},"body":{"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userid",{"_index":557,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/UsersService.html":{}}}],["usermodel",{"_index":1099,"title":{},"body":{"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["usermodel.authenticate",{"_index":1114,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["usernamefield",{"_index":1112,"title":{},"body":{"injectables/LocalStrategy.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["userreview",{"_index":347,"title":{},"body":{"controllers/ClaimController.html":{}}}],["users",{"_index":2212,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["users.controller",{"_index":1724,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.map(async",{"_index":3118,"title":{},"body":{"miscellaneous/variables.html":{}}}],["users.service",{"_index":1685,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/schemas/user.schema",{"_index":424,"title":{},"body":{"classes/ClaimReview.html":{},"classes/History.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Source.html":{}}}],["users/users.module",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["userschema",{"_index":1662,"title":{},"body":{"classes/User.html":{},"interfaces/UserDocument.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":1666,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":3080,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userservice.register",{"_index":3094,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usersmodule",{"_index":24,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":1684,"title":{"injectables/UsersService.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":2652,"title":{},"body":{"license.html":{}}}],["useunifiedtopology",{"_index":3037,"title":{},"body":{"miscellaneous/variables.html":{}}}],["using",{"_index":2621,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["utf",{"_index":926,"title":{},"body":{"injectables/EmailService.html":{}}}],["util",{"_index":481,"title":{},"body":{"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{}}}],["utilservice",{"_index":476,"title":{"injectables/UtilService.html":{}},"body":{"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"injectables/UtilService.html":{},"coverage.html":{},"overview.html":{}}}],["v",{"_index":436,"title":{},"body":{"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/Source.html":{}}}],["valid",{"_index":439,"title":{},"body":{"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/Source.html":{},"license.html":{}}}],["validate",{"_index":413,"title":{},"body":{"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Source.html":{}}}],["validationpipe",{"_index":3045,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validator",{"_index":435,"title":{},"body":{"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/Source.html":{},"dependencies.html":{}}}],["value",{"_index":520,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"injectables/HistoryService.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/SourceService.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values[0",{"_index":1649,"title":{},"body":{"injectables/StatsService.html":{}}}],["values[1",{"_index":1650,"title":{},"body":{"injectables/StatsService.html":{}}}],["values[2",{"_index":1651,"title":{},"body":{"injectables/StatsService.html":{}}}],["variable",{"_index":1995,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":3011,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verbatim",{"_index":2191,"title":{},"body":{"license.html":{}}}],["verbose",{"_index":1120,"title":{},"body":{"classes/Logger.html":{}}}],["verbose(message",{"_index":1134,"title":{},"body":{"classes/Logger.html":{}}}],["verificar",{"_index":606,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["verifyinputsquery",{"_index":1352,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["verifyinputsquery(query",{"_index":1376,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["version",{"_index":644,"title":{},"body":{"classes/ClaimRevision.html":{},"license.html":{}}}],["versions",{"_index":2207,"title":{},"body":{"license.html":{}}}],["via",{"_index":2155,"title":{},"body":{"index.html":{}}}],["view",{"_index":2388,"title":{},"body":{"license.html":{}}}],["view.controller",{"_index":1839,"title":{},"body":{"modules/ViewModule.html":{}}}],["view.service",{"_index":1819,"title":{},"body":{"controllers/ViewController.html":{},"modules/ViewModule.html":{}}}],["view/view.module",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/HomeModule.html":{},"modules/PersonalityModule.html":{},"modules/UsersModule.html":{}}}],["view/view.service",{"_index":254,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{}}}],["viewcontroller",{"_index":1787,"title":{"controllers/ViewController.html":{}},"body":{"controllers/ViewController.html":{},"modules/ViewModule.html":{},"coverage.html":{}}}],["viewmodule",{"_index":46,"title":{"modules/ViewModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/HomeModule.html":{},"modules/PersonalityModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules.html":{},"overview.html":{}}}],["viewservice",{"_index":253,"title":{"injectables/ViewService.html":{}},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"coverage.html":{},"overview.html":{}}}],["vinda(o",{"_index":3102,"title":{},"body":{"miscellaneous/variables.html":{}}}],["violates",{"_index":2691,"title":{},"body":{"license.html":{}}}],["violation",{"_index":2752,"title":{},"body":{"license.html":{}}}],["virtual",{"_index":586,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["virtuals",{"_index":145,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Personality.html":{}}}],["visible",{"_index":2382,"title":{},"body":{"license.html":{}}}],["voc",{"_index":3103,"title":{},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":1133,"title":{},"body":{"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"controllers/RootController.html":{},"license.html":{}}}],["volume",{"_index":2568,"title":{},"body":{"license.html":{}}}],["w",{"_index":2977,"title":{},"body":{"license.html":{}}}],["waive",{"_index":2517,"title":{},"body":{"license.html":{}}}],["waiver",{"_index":2949,"title":{},"body":{"license.html":{}}}],["want",{"_index":2225,"title":{},"body":{"license.html":{}}}],["warn",{"_index":1121,"title":{},"body":{"classes/Logger.html":{}}}],["warn(message",{"_index":1136,"title":{},"body":{"classes/Logger.html":{}}}],["warranties",{"_index":2386,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":2265,"title":{},"body":{"license.html":{}}}],["watch",{"_index":1854,"title":{},"body":{"injectables/ViewService.html":{}}}],["way",{"_index":2215,"title":{},"body":{"license.html":{}}}],["ways",{"_index":2579,"title":{},"body":{"license.html":{}}}],["wbentities",{"_index":1387,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["wbentity.description",{"_index":1976,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wbentity.id",{"_index":1977,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wbentity.label",{"_index":1975,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wbgetentities",{"_index":1920,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wbsearchentities",{"_index":1967,"title":{},"body":{"injectables/WikidataService.html":{}}}],["websites",{"_index":1214,"title":{},"body":{"injectables/ParserService.html":{}}}],["welcome",{"_index":2978,"title":{},"body":{"license.html":{}}}],["well",{"_index":2365,"title":{},"body":{"license.html":{}}}],["whatever",{"_index":2795,"title":{},"body":{"license.html":{}}}],["whether",{"_index":2244,"title":{},"body":{"license.html":{}}}],["whitelist",{"_index":3048,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whole",{"_index":2412,"title":{},"body":{"license.html":{}}}],["whose",{"_index":2631,"title":{},"body":{"license.html":{}}}],["widely",{"_index":2406,"title":{},"body":{"license.html":{}}}],["wikdiata",{"_index":1413,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["wikidata",{"_index":877,"title":{},"body":{"classes/CreatePersonality.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"injectables/WikidataService.html":{}}}],["wikidata.claims.p18",{"_index":1944,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata.claims.p18[0].mainsnak.datavalue.value",{"_index":1946,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata.claims.p31",{"_index":1938,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata.claims.p31[0].mainsnak.datavalue.value",{"_index":1940,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata.service",{"_index":1874,"title":{},"body":{"modules/WikidataModule.html":{}}}],["wikidata.sitelinks[sitelinkname",{"_index":1951,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata.sitelinks[sitelinkname].title",{"_index":1955,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata/wikidata.module",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"modules/PersonalityModule.html":{}}}],["wikidata/wikidata.service",{"_index":1381,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["wikidata[property",{"_index":1962,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata[property][language",{"_index":1964,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata[property][languagefallback",{"_index":1965,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata[property][languagefallback].value",{"_index":1966,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidatacache",{"_index":1858,"title":{"classes/WikidataCache.html":{}},"body":{"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{}}}],["wikidatacache.name",{"_index":1877,"title":{},"body":{"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["wikidatacache.props",{"_index":1917,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidatacachedocument",{"_index":1866,"title":{},"body":{"classes/WikidataCache.html":{},"injectables/WikidataService.html":{},"miscellaneous/typealiases.html":{}}}],["wikidatacachemodel",{"_index":1876,"title":{},"body":{"modules/WikidataModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["wikidatacacheschema",{"_index":1868,"title":{},"body":{"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["wikidatacacheschema.index",{"_index":1878,"title":{},"body":{"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["wikidataextract",{"_index":1416,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["wikidataextract.isallowedprop",{"_index":1423,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["wikidataid",{"_index":1418,"title":{},"body":{"injectables/PersonalityService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["wikidatainstanceof",{"_index":1939,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidatainstanceof.id",{"_index":1942,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidatamodule",{"_index":28,"title":{"modules/WikidataModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PersonalityModule.html":{},"modules/WikidataModule.html":{},"modules.html":{},"overview.html":{}}}],["wikidataprops",{"_index":1930,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidataprops.description",{"_index":1935,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidataprops.image",{"_index":1947,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidataprops.isallowedprop",{"_index":1941,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidataprops.name",{"_index":1932,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidataprops.wikipedia",{"_index":1956,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidataservice",{"_index":1353,"title":{"injectables/WikidataService.html":{}},"body":{"injectables/PersonalityService.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"overview.html":{}}}],["wikilang",{"_index":1952,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikipedia",{"_index":878,"title":{},"body":{"classes/CreatePersonality.html":{},"injectables/WikidataService.html":{}}}],["wikipedia.org/wiki/${encodeuri(wikititle",{"_index":1959,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikititle",{"_index":1954,"title":{},"body":{"injectables/WikidataService.html":{}}}],["window",{"_index":2425,"title":{},"body":{"license.html":{}}}],["wipo",{"_index":2507,"title":{},"body":{"license.html":{}}}],["wish",{"_index":2223,"title":{},"body":{"license.html":{}}}],["within",{"_index":2736,"title":{},"body":{"license.html":{}}}],["without",{"_index":2350,"title":{},"body":{"license.html":{}}}],["withsuggestions",{"_index":976,"title":{},"body":{"classes/GetPersonalities.html":{},"injectables/PersonalityService.html":{}}}],["work",{"_index":588,"title":{},"body":{"injectables/ClaimReviewService.html":{},"license.html":{}}}],["work's",{"_index":2437,"title":{},"body":{"license.html":{}}}],["working",{"_index":2407,"title":{},"body":{"license.html":{}}}],["works",{"_index":2197,"title":{},"body":{"license.html":{}}}],["worldwide",{"_index":2825,"title":{},"body":{"license.html":{}}}],["writing",{"_index":2910,"title":{},"body":{"license.html":{}}}],["written",{"_index":2588,"title":{},"body":{"license.html":{}}}],["x",{"_index":3032,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yarn",{"_index":2168,"title":{},"body":{"index.html":{}}}],["years",{"_index":2590,"title":{},"body":{"license.html":{}}}],["yes",{"_index":1127,"title":{},"body":{"classes/Logger.html":{}}}],["yourself",{"_index":2841,"title":{},"body":{"license.html":{}}}],["z])/g",{"_index":1201,"title":{},"body":{"injectables/ParserService.html":{}}}],["z][.](?:[a",{"_index":1212,"title":{},"body":{"injectables/ParserService.html":{}}}],["z][.])?)/g",{"_index":1213,"title":{},"body":{"injectables/ParserService.html":{}}}],["z][.][a",{"_index":1211,"title":{},"body":{"injectables/ParserService.html":{}}}],["za",{"_index":1200,"title":{},"body":{"injectables/ParserService.html":{}}}],["zoom",{"_index":101,"title":{},"body":{"modules/AuthModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/HomeModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/app.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(options)\n                \n            \n\n\n            \n                \n                    Defined in server/app.module.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { DynamicModule, Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { UsersModule } from \"./users/users.module\";\nimport { AuthModule } from \"./auth/auth.module\";\nimport { WikidataModule } from \"./wikidata/wikidata.module\";\nimport { PersonalityModule } from \"./personality/personality.module\";\nimport { ClaimModule } from \"./claim/claim.module\";\nimport { ClaimReviewModule } from \"./claim-review/claim-review.module\";\nimport { SourceModule } from \"./source/source.module\";\nimport { StatsModule } from \"./stats/stats.module\";\nimport { RootController } from \"./root/root.controller\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { ViewModule } from \"./view/view.module\";\nimport { HomeModule } from \"./home/home.module\";\nimport { EmailModule } from \"./email/email.module\";\nimport { APP_FILTER, APP_GUARD } from \"@nestjs/core\";\nimport { NotFoundFilter } from \"./filters/not-found.filter\";\nimport { ThrottlerModule, ThrottlerGuard } from \"@nestjs/throttler\";\nimport { SitemapModule } from \"./sitemap/sitemap.module\";\nimport { ClaimRevisionModule } from \"./claim-revision/claim-revision.module\";\nimport { HistoryModule } from \"./history/history.module\";\n\n@Module({})\nexport class AppModule {\n    static register(options): DynamicModule {\n        // TODO: interface app with service-runner metrics interface\n        return {\n            module: AppModule,\n            imports: [\n                MongooseModule.forRoot(\n                    options.db.connection_uri,\n                    options.db.options\n                ),\n                ConfigModule.forRoot({\n                    load: [() => options.config || {}],\n                }),\n                ThrottlerModule.forRoot({\n                    ttl: options.config.throttle.ttl,\n                    limit: options.config.throttle.limit,\n                }),\n                UsersModule,\n                AuthModule,\n                WikidataModule,\n                PersonalityModule,\n                ClaimModule,\n                ClaimReviewModule,\n                ClaimRevisionModule,\n                HistoryModule,\n                SourceModule,\n                StatsModule,\n                ViewModule,\n                HomeModule,\n                EmailModule,\n                SitemapModule,\n            ],\n            controllers: [RootController],\n            providers: [\n                {\n                    provide: APP_FILTER,\n                    useClass: NotFoundFilter,\n                },\n                {\n                    provide: APP_GUARD,\n                    useClass: ThrottlerGuard\n                }\n            ],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nLocalSerializer\n\nLocalSerializer\n\nAuthModule -->\n\nLocalSerializer->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            LocalSerializer\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { UsersModule } from \"../users/users.module\";\nimport { PassportModule } from \"@nestjs/passport\";\nimport { LocalStrategy } from \"./local.strategy\";\nimport { LocalSerializer } from \"./local.serializer\";\n\n@Module({\n    imports: [UsersModule, PassportModule.register({ session: true })],\n    providers: [LocalStrategy, LocalSerializer],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Claim.html":{"url":"classes/Claim.html","title":"class - Claim","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Claim\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim/schemas/claim.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                latestRevision\n                            \n                            \n                                personality\n                            \n                            \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        latestRevision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ClaimRevision\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'ClaimRevision'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/schemas/claim.schema.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        personality\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Personality\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'Personality'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/schemas/claim.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/schemas/claim.schema.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport * as mongoose from \"mongoose\";\nimport { Personality } from \"../../personality/schemas/personality.schema\"\nimport { ClaimRevision } from \"../../claim-revision/schema/claim-revision.schema\"\nimport { softDeletePlugin } from 'mongoose-softdelete-typescript';\n\nexport type ClaimDocument = Claim & mongoose.Document & { revisions: any };\n\n@Schema({ toObject: {virtuals: true}, toJSON: {virtuals: true} })\nexport class Claim {\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"Personality\",\n    })\n    personality: Personality;\n    \n    @Prop({ required: true })\n    slug: string;\n\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"ClaimRevision\",\n    })\n    latestRevision: ClaimRevision\n}\nconst ClaimSchemaRaw = SchemaFactory.createForClass(Claim);\n\nClaimSchemaRaw.virtual('revisions', {\n    ref: 'ClaimRevision',\n    localField: '_id',\n    foreignField: 'claimId'\n})\n\nClaimSchemaRaw.virtual('sources', {\n    ref: 'Source',\n    localField: '_id',\n    foreignField: 'targetId'\n})\n\nClaimSchemaRaw.plugin(softDeletePlugin)\n\nexport const ClaimSchema = ClaimSchemaRaw;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ClaimController.html":{"url":"controllers/ClaimController.html","title":"controller - ClaimController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ClaimController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim/claim.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                _checkCaptchaResponse\n                            \n                            \n                                _getSentenceByHashAndClaimId\n                            \n                            \n                                _verifyInputsQuery\n                            \n                            \n                                    Public\n                                    Async\n                                claimCreatePage\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                getById\n                            \n                            \n                                    Public\n                                    Async\n                                getClaimReviewPage\n                            \n                            \n                                getSentenceReviewsByHash\n                            \n                            \n                                listAll\n                            \n                            \n                                    Public\n                                    Async\n                                personalityClaimPage\n                            \n                            \n                                    Public\n                                    Async\n                                personalityHistoryPage\n                            \n                            \n                                    Public\n                                    Async\n                                sourcesClaimPage\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        _checkCaptchaResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    _checkCaptchaResponse(secret, response)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    secret\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _getSentenceByHashAndClaimId\n                        \n                    \n                \n            \n            \n                \n_getSentenceByHashAndClaimId(sentenceHash, claimId, req)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.controller.ts:162\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentenceHash\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _verifyInputsQuery\n                        \n                    \n                \n            \n            \n                \n_verifyInputsQuery(query)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        claimCreatePage\n                        \n                    \n                \n            \n            \n                \n                    \n                    claimCreatePage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('personality/:slug/claim/create/')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:224\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createClaimDTO: CreateClaimDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Post('api/claim')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createClaimDTO\n                                    \n                                                CreateClaimDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(claimId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Delete('api/claim/:id')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getById\n                        \n                    \n                \n            \n            \n                \ngetById(claimId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('api/claim/:id')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getClaimReviewPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    getClaimReviewPage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('personality/:personalitySlug/claim/:claimSlug/sentence/:sentenceHash')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:192\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSentenceReviewsByHash\n                        \n                    \n                \n            \n            \n                \ngetSentenceReviewsByHash(params, getClaimsByHashDTO: GetClaimsByHashDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('api/claim/:claimId/sentence/:sentenceHash/reviews')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    getClaimsByHashDTO\n                                    \n                                                GetClaimsByHashDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        listAll\n                        \n                    \n                \n            \n            \n                \nlistAll(getClaimsDTO: GetClaimsDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('api/claim')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    getClaimsDTO\n                                    \n                                                GetClaimsDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        personalityClaimPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    personalityClaimPage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('personality/:personalitySlug/claim/:claimSlug')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:248\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        personalityHistoryPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    personalityHistoryPage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('personality/:personalitySlug/claim/:claimSlug/history')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:296\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        sourcesClaimPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    sourcesClaimPage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('personality/:personalitySlug/claim/:claimSlug/sources')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:273\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(claimId, updateClaimDTO: UpdateClaimDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Put('api/claim/:id')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateClaimDTO\n                                    \n                                                UpdateClaimDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get, Logger,\n    Param,\n    Post,\n    Put,\n    Query,\n    Req,\n    Res,\n    UseGuards,\n} from \"@nestjs/common\";\nimport { ClaimReviewService } from \"../claim-review/claim-review.service\";\nimport { ClaimService } from \"./claim.service\";\nimport * as qs from \"querystring\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { HttpService } from \"@nestjs/axios\";\nimport { SessionGuard } from \"../auth/session.guard\";\nimport { Request, Response } from \"express\";\nimport { parse } from \"url\";\nimport { PersonalityService } from \"../personality/personality.service\";\nimport { ViewService } from \"../view/view.service\";\nimport * as mongoose from \"mongoose\";\nimport { CreateClaimDTO } from \"./dto/create-claim.dto\";\nimport { GetClaimsDTO } from \"./dto/get-claims.dto\";\nimport { GetClaimsByHashDTO } from \"./dto/get-reviews-by-hash.dto\";\nimport { UpdateClaimDTO } from \"./dto/update-claim.dto\"\n@Controller()\nexport class ClaimController {\n    private readonly logger = new Logger(\"ClaimController\");\n    constructor(\n        private claimReviewService: ClaimReviewService,\n        private personalityService: PersonalityService,\n        private claimService: ClaimService,\n        private configService: ConfigService,\n        private httpService: HttpService,\n        private viewService: ViewService,\n    ) {}\n\n    async _checkCaptchaResponse(secret, response) {\n        const RECAPTCHA_API_URL = \"https://www.google.com/recaptcha/api\";\n        const { data } = await this.httpService.post(\n            `${RECAPTCHA_API_URL}/siteverify`,\n            qs.stringify({\n                secret,\n                response,\n            })\n        ).toPromise();\n\n        return data;\n    }\n    _verifyInputsQuery(query) {\n        const queryInputs = {};\n        if (query.personality) {\n            // @ts-ignore\n            queryInputs.personality = new mongoose.Types.ObjectId(query.personality);\n        }\n\n        return queryInputs;\n    }\n\n    @Get(\"api/claim\")\n    listAll(@Query() getClaimsDTO: GetClaimsDTO) {\n        const { page = 0, pageSize = 10, order = \"asc\" } = getClaimsDTO;\n        const queryInputs = this._verifyInputsQuery(getClaimsDTO);\n        return Promise.all([\n            this.claimService.listAll(\n                page,\n                pageSize,\n                order,\n                queryInputs\n            ),\n            this.claimService.count(queryInputs),\n        ]).then(([claims, totalClaims]) => {\n            const totalPages = Math.ceil(totalClaims / pageSize);\n\n            this.logger.log(\n                `Found ${totalClaims} claims. Page ${page} of ${totalPages}`\n            );\n\n            return {\n                claims,\n                totalClaims,\n                totalPages,\n                page,\n                pageSize,\n            };\n        }).catch((error) => this.logger.error(error));\n    }\n\n    @UseGuards(SessionGuard)\n    @Post(\"api/claim\")\n    async create(@Body() createClaimDTO: CreateClaimDTO) {\n        const secret = this.configService.get(\"recaptcha_secret\");\n        const recaptchaCheck = await this._checkCaptchaResponse(\n            secret,\n            createClaimDTO && createClaimDTO.recaptcha\n        );\n\n        // @ts-ignore\n        if (!recaptchaCheck.success) {\n            this.logger.error(`error/recaptcha ${recaptchaCheck}`);\n            // next(\n            //     Requester.internalError(res, \"Error with your reCaptcha response\")\n            // );\n            throw Error();\n        }\n        return this.claimService.create(createClaimDTO)\n\n    }\n\n    @Get(\"api/claim/:id\")\n    getById(@Param(\"id\") claimId) {\n        return this.claimService.getById(claimId);\n    }\n\n    @UseGuards(SessionGuard)\n    @Put(\"api/claim/:id\")\n    update(@Param(\"id\") claimId, @Body() updateClaimDTO: UpdateClaimDTO) {\n        return this.claimService.update(claimId, updateClaimDTO);\n    }\n\n    @UseGuards(SessionGuard)\n    @Delete(\"api/claim/:id\")\n    delete(@Param(\"id\") claimId) {\n        return this.claimService.delete(claimId);\n    }\n\n    @Get(\"api/claim/:claimId/sentence/:sentenceHash/reviews\")\n    getSentenceReviewsByHash(@Param() params, @Query() getClaimsByHashDTO: GetClaimsByHashDTO) {\n        const { sentenceHash } = params;\n        const { page, pageSize, order } = getClaimsByHashDTO;\n\n        return Promise.all([\n            this.claimReviewService.getReviewsBySentenceHash(\n                sentenceHash,\n                page,\n                pageSize,\n                order || \"desc\"\n            ),\n            this.claimReviewService.countReviewsBySentenceHash(sentenceHash),\n        ]).then(([reviews, totalReviews]) => {\n            totalReviews = totalReviews[0]?.count;\n            // @ts-ignore\n            const totalPages = Math.ceil(totalReviews / parseInt(pageSize, 10));\n\n            this.logger.log(\n                `Found ${totalReviews} reviews for sentence hash ${sentenceHash}. Page ${page} of ${totalPages}`\n            );\n\n            return {\n                reviews,\n                totalReviews,\n                totalPages,\n                page,\n                pageSize,\n            };\n        });\n    }\n\n    _getSentenceByHashAndClaimId(sentenceHash, claimId, req) {\n        const user = req.user;\n        return Promise.all([\n            this.claimReviewService.getReviewStatsBySentenceHash({sentenceHash, isDeleted: false}),\n            this.claimService.getById(claimId),\n            this.claimReviewService.getUserReviewBySentenceHash(\n                sentenceHash,\n                user?._id\n            ),\n        ]).then(([stats, claimObj, userReview]) => {\n            let sentenceObj;\n\n            claimObj.content.object.forEach((p) => {\n                p.content.forEach((sentence) => {\n                    if (sentence.props[\"data-hash\"] === sentenceHash) {\n                        sentenceObj = sentence;\n                    }\n                });\n            });\n            return {\n                userReview,\n                date: claimObj.date,\n                personality: claimObj.personality,\n                stats,\n                ...sentenceObj,\n            };\n        });\n    }\n\n    @Get(\"personality/:personalitySlug/claim/:claimSlug/sentence/:sentenceHash\")\n    public async getClaimReviewPage(@Req() req: Request, @Res() res: Response) {\n        const { sentenceHash, personalitySlug, claimSlug } = req.params;\n        const parsedUrl = parse(req.url, true);\n        const personality = await this.personalityService.getBySlug(\n            personalitySlug,\n            // @ts-ignore\n            req.language\n        );\n\n        const claim = await this.claimService.getByPersonalityIdAndClaimSlug(\n            personality._id,\n            claimSlug\n        );\n\n        const sentence = await this._getSentenceByHashAndClaimId(sentenceHash, claim._id, req);\n\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/claim-review\",\n                Object.assign(parsedUrl.query, {\n                    personality,\n                    claim,\n                    sentence,\n                    sitekey: this.configService.get(\"recaptcha_sitekey\"),\n                })\n            );\n    }\n\n    @Get(\"personality/:slug/claim/create/\")\n    public async claimCreatePage(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n\n        const personality = await this.personalityService.getBySlug(\n            req.params.slug,\n            // @ts-ignore\n            req.language\n        );\n\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/claim-create\",\n                Object.assign(parsedUrl.query, {\n                    personality,\n                    sitekey: this.configService.get(\"recaptcha_sitekey\"),\n                })\n            );\n    }\n\n    @Get(\"personality/:personalitySlug/claim/:claimSlug\")\n    public async personalityClaimPage(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n        const personality = await this.personalityService.getBySlug(\n            req.params.personalitySlug,\n            // @ts-ignore\n            req.language\n        );\n\n        const claim = await this.claimService.getByPersonalityIdAndClaimSlug(\n            personality._id,\n            req.params.claimSlug\n        );\n\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/claim-page\",\n                Object.assign(parsedUrl.query, { personality, claim })\n            );\n    }\n\n    @Get(\"personality/:personalitySlug/claim/:claimSlug/sources\")\n    public async sourcesClaimPage(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n\n        const personality = await this.personalityService.getBySlug(\n            req.params.personalitySlug\n        );\n\n        const claim = await this.claimService.getByPersonalityIdAndClaimSlug(\n            personality._id,\n            req.params.claimSlug\n        );\n\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/claim-sources-page\",\n                Object.assign(parsedUrl.query, { claimId: claim._id })\n            );\n    }\n\n    @Get(\"personality/:personalitySlug/claim/:claimSlug/history\")\n    public async personalityHistoryPage(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n\n        const personality = await this.personalityService.getBySlug(\n            req.params.personalitySlug\n        );\n\n        const claim = await this.claimService.getByPersonalityIdAndClaimSlug(\n            personality._id,\n            req.params.claimSlug\n        );\n\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/history-page\",\n                Object.assign(parsedUrl.query, { targetId: claim._id, targetModel: \"claim\" })\n            );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ClaimModule.html":{"url":"modules/ClaimModule.html","title":"module - ClaimModule","body":"\n                   \n\n\n\n\n    Modules\n    ClaimModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ClaimModule\n\n\n\ncluster_ClaimModule_exports\n\n\n\ncluster_ClaimModule_imports\n\n\n\ncluster_ClaimModule_providers\n\n\n\n\nClaimReviewModule\n\nClaimReviewModule\n\n\n\nClaimModule\n\nClaimModule\n\nClaimModule -->\n\nClaimReviewModule->ClaimModule\n\n\n\n\n\nClaimRevisionModule\n\nClaimRevisionModule\n\nClaimModule -->\n\nClaimRevisionModule->ClaimModule\n\n\n\n\n\nHistoryModule\n\nHistoryModule\n\nClaimModule -->\n\nHistoryModule->ClaimModule\n\n\n\n\n\nParserModule\n\nParserModule\n\nClaimModule -->\n\nParserModule->ClaimModule\n\n\n\n\n\nPersonalityModule\n\nPersonalityModule\n\nClaimModule -->\n\nPersonalityModule->ClaimModule\n\n\n\n\n\nSourceModule\n\nSourceModule\n\nClaimModule -->\n\nSourceModule->ClaimModule\n\n\n\n\n\nViewModule\n\nViewModule\n\nClaimModule -->\n\nViewModule->ClaimModule\n\n\n\n\n\nClaimService \n\nClaimService \n\nClaimService  -->\n\nClaimModule->ClaimService \n\n\n\n\n\nClaimService\n\nClaimService\n\nClaimModule -->\n\nClaimService->ClaimModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/claim/claim.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ClaimService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ClaimController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClaimReviewModule\n                        \n                        \n                            ClaimRevisionModule\n                        \n                        \n                            HistoryModule\n                        \n                        \n                            ParserModule\n                        \n                        \n                            PersonalityModule\n                        \n                        \n                            SourceModule\n                        \n                        \n                            ViewModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ClaimService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { Claim, ClaimSchema } from \"./schemas/claim.schema\";\nimport { ClaimService } from \"./claim.service\";\nimport { ClaimController } from \"./claim.controller\";\nimport { ClaimReviewModule } from \"../claim-review/claim-review.module\";\nimport { ParserModule } from \"../parser/parser.module\";\nimport { PersonalityModule } from \"../personality/personality.module\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { HttpModule } from \"@nestjs/axios\";\nimport { ViewModule } from \"../view/view.module\";\nimport { SourceModule } from \"../source/source.module\";\nimport { ClaimRevisionModule } from \"../claim-revision/claim-revision.module\"\nimport { HistoryModule } from \"../history/history.module\";\n\nconst ClaimModel = MongooseModule.forFeature([\n    {\n        name: Claim.name,\n        schema: ClaimSchema,\n    },\n]);\n\n@Module({\n    imports: [\n        ClaimModel,\n        ClaimReviewModule,\n        ClaimRevisionModule,\n        ParserModule,\n        PersonalityModule,\n        HistoryModule,\n        ConfigModule,\n        HttpModule,\n        ViewModule,\n        SourceModule,\n    ],\n    exports: [ClaimService],\n    providers: [ClaimService],\n    controllers: [ClaimController],\n})\nexport class ClaimModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClaimReview.html":{"url":"classes/ClaimReview.html","title":"class - ClaimReview","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClaimReview\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim-review/schemas/claim-review.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                claim\n                            \n                            \n                                classification\n                            \n                            \n                                isDeleted\n                            \n                            \n                                personality\n                            \n                            \n                                report\n                            \n                            \n                                sentence_content\n                            \n                            \n                                sentence_hash\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        claim\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Claim\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'ClaimRevision'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/schemas/claim-review.schema.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        classification\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, validate: undefined, message: tag => })\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/schemas/claim-review.schema.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDeleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/schemas/claim-review.schema.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        personality\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Personality\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'Personality'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/schemas/claim-review.schema.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        report\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/schemas/claim-review.schema.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sentence_content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/schemas/claim-review.schema.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sentence_hash\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/schemas/claim-review.schema.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/schemas/claim-review.schema.ts:74\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { Personality } from \"../../personality/schemas/personality.schema\";\nimport * as mongoose from \"mongoose\";\nimport { User } from \"../../users/schemas/user.schema\";\nimport { Claim } from \"../../claim/schemas/claim.schema\";\nimport { softDeletePlugin } from 'mongoose-softdelete-typescript';\n\nexport type ClaimReviewDocument = ClaimReview & mongoose.Document;\n\nexport enum ClassificationEnum {\n    \"not-fact\",\n    \"true\",\n    \"true-but\",\n    \"arguable\",\n    \"misleading\",\n    \"false\",\n    \"unsustainable\",\n    \"exaggerated\",\n    \"unverifiable\",\n};\n@Schema({ toObject: {virtuals: true}, toJSON: {virtuals: true} })\nexport class ClaimReview {\n    @Prop({\n        required: true,\n        validate: {\n            validator: (v) => {\n                return (\n                    [\n                        \"not-fact\",\n                        \"true\",\n                        \"true-but\",\n                        \"arguable\",\n                        \"misleading\",\n                        \"false\",\n                        \"unsustainable\",\n                        \"exaggerated\",\n                        \"unverifiable\",\n                    ].indexOf(v) !== -1\n                );\n            },\n        },\n        message: (tag) => `${tag} is not a valid classification.`,\n    })\n    classification: string;\n\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"ClaimRevision\",\n    })\n    claim: Claim;\n\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"Personality\",\n    })\n    personality: Personality;\n\n    @Prop({ required: true })\n    sentence_hash: string;\n\n    @Prop({ required: true })\n    sentence_content: string;\n\n    @Prop({ required: true })\n    report: string;\n\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"User\",\n    })\n    user: User;\n\n    @Prop({ required: false })\n    isDeleted: boolean;\n}\n\nconst ClaimReviewSchemaRaw = SchemaFactory.createForClass(ClaimReview);\n\nClaimReviewSchemaRaw.virtual('sources', {\n    ref: 'Source',\n    localField: '_id',\n    foreignField: 'targetId'\n});\n\nClaimReviewSchemaRaw.plugin(softDeletePlugin)\n\nexport const ClaimReviewSchema = ClaimReviewSchemaRaw;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ClaimReviewController.html":{"url":"controllers/ClaimReviewController.html","title":"controller - ClaimReviewController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ClaimReviewController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim-review/claim-review.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/claimreview\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                _checkCaptchaResponse\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        _checkCaptchaResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    _checkCaptchaResponse(secret, response)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    secret\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createClaimReview: CreateClaimReview, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in server/claim-review/claim-review.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createClaimReview\n                                    \n                                                CreateClaimReview\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(params)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in server/claim-review/claim-review.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(params)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in server/claim-review/claim-review.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {Body, Controller, Delete, Get, Param, Post, Req, UseGuards} from \"@nestjs/common\";\nimport { ClaimReviewService } from \"./claim-review.service\";\nimport * as qs from \"querystring\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { HttpService } from \"@nestjs/axios\";\nimport {SessionGuard} from \"../auth/session.guard\";\nimport { CreateClaimReview } from \"./dto/create-claim-review.dto\";\n\n@Controller(\"api/claimreview\")\nexport class ClaimReviewController {\n    constructor(\n        private claimReviewService: ClaimReviewService,\n        private configService: ConfigService,\n        private httpService: HttpService\n    ) {}\n\n    async _checkCaptchaResponse(secret, response) {\n        const RECAPTCHA_API_URL = \"https://www.google.com/recaptcha/api\";\n        const { data } = await this.httpService.post(\n            `${RECAPTCHA_API_URL}/siteverify`,\n            qs.stringify({\n                secret,\n                response,\n            })\n        ).toPromise();\n\n        return data;\n    }\n\n    @UseGuards(SessionGuard)\n    @Post()\n    async create(@Body() createClaimReview: CreateClaimReview, @Req() req) {\n        const secret = this.configService.get(\"recaptcha_secret\");\n        const recaptchaCheck = await this._checkCaptchaResponse(\n            secret,\n            createClaimReview && createClaimReview.recaptcha\n        );\n\n        // @ts-ignore\n        if (!recaptchaCheck.success) {\n            throw Error();\n            // app.logger.log(\"error/recaptcha\", recaptchaCheck);\n            // next(\n            //     Requester.internalError(res, \"Error with your reCaptcha response\")\n            // );\n        } else {\n            return this.claimReviewService.create({\n                ...createClaimReview,\n                user: req?.user?._id,\n            });\n        }\n    }\n\n    @Get(\":id\")\n    get(@Param() params) {\n        return this.claimReviewService.getById(params.id);\n    }\n\n    @UseGuards(SessionGuard)\n    @Delete(\":id\")\n    delete(@Param() params) {\n        return this.claimReviewService.delete(params.id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ClaimReviewModule.html":{"url":"modules/ClaimReviewModule.html","title":"module - ClaimReviewModule","body":"\n                   \n\n\n\n\n    Modules\n    ClaimReviewModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ClaimReviewModule\n\n\n\ncluster_ClaimReviewModule_imports\n\n\n\ncluster_ClaimReviewModule_exports\n\n\n\ncluster_ClaimReviewModule_providers\n\n\n\n\nHistoryModule\n\nHistoryModule\n\n\n\nClaimReviewModule\n\nClaimReviewModule\n\nClaimReviewModule -->\n\nHistoryModule->ClaimReviewModule\n\n\n\n\n\nSourceModule\n\nSourceModule\n\nClaimReviewModule -->\n\nSourceModule->ClaimReviewModule\n\n\n\n\n\nClaimReviewService \n\nClaimReviewService \n\nClaimReviewService  -->\n\nClaimReviewModule->ClaimReviewService \n\n\n\n\n\nClaimReviewService\n\nClaimReviewService\n\nClaimReviewModule -->\n\nClaimReviewService->ClaimReviewModule\n\n\n\n\n\nUtilService\n\nUtilService\n\nClaimReviewModule -->\n\nUtilService->ClaimReviewModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/claim-review/claim-review.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ClaimReviewService\n                        \n                        \n                            UtilService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ClaimReviewController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            HistoryModule\n                        \n                        \n                            SourceModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ClaimReviewService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ClaimReview, ClaimReviewSchema } from \"./schemas/claim-review.schema\";\nimport { ClaimReviewService } from \"./claim-review.service\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { ClaimReviewController } from \"./claim-review.controller\";\nimport { UtilService } from \"../util\";\nimport { SourceModule } from \"../source/source.module\";\nimport { HttpModule } from \"@nestjs/axios\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { HistoryModule } from \"../history/history.module\";\n\nexport const ClaimReviewModel = MongooseModule.forFeature([\n    {\n        name: ClaimReview.name,\n        schema: ClaimReviewSchema,\n    },\n]);\n\n@Module({\n    imports: [\n        ClaimReviewModel,\n        HistoryModule,\n        SourceModule,\n        HttpModule,\n        ConfigModule\n    ],\n    providers: [UtilService, ClaimReviewService],\n    exports: [ClaimReviewService],\n    controllers: [ClaimReviewController],\n})\nexport class ClaimReviewModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClaimReviewService.html":{"url":"injectables/ClaimReviewService.html","title":"injectable - ClaimReviewService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClaimReviewService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim-review/claim-review.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                _reviewsBySentenceHashAggregated\n                            \n                            \n                                _topClassificationAccumulator\n                            \n                            \n                                agreggateClassification\n                            \n                            \n                                count\n                            \n                            \n                                countReviewsBySentenceHash\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                getById\n                            \n                            \n                                getReviewsByClaimId\n                            \n                            \n                                getReviewsBySentenceHash\n                            \n                            \n                                    Async\n                                getReviewStatsByClaimId\n                            \n                            \n                                    Async\n                                getReviewStatsBySentenceHash\n                            \n                            \n                                getUserReviewBySentenceHash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ClaimReviewModel, historyService: HistoryService, sourceService: SourceService, util: UtilService)\n                    \n                \n                        \n                            \n                                Defined in server/claim-review/claim-review.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ClaimReviewModel\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        historyService\n                                                  \n                                                        \n                                                                        HistoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sourceService\n                                                  \n                                                        \n                                                                        SourceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        util\n                                                  \n                                                        \n                                                                        UtilService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        _reviewsBySentenceHashAggregated\n                        \n                    \n                \n            \n            \n                \n_reviewsBySentenceHashAggregated(sentenceHash)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentenceHash\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _topClassificationAccumulator\n                        \n                    \n                \n            \n            \n                \n_topClassificationAccumulator()\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { $accumulator: { init: () => {}; accumulate: (state: any, classification: any) => any; accumulateArgs: {}; merge: (state1: any, state2: any) => any; finalize: (state: any) => { classification: any; count: any; }; lang: string; }; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        agreggateClassification\n                        \n                    \n                \n            \n            \n                \nagreggateClassification(match: any)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    match\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        count\n                        \n                    \n                \n            \n            \n                \ncount(query: any)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        countReviewsBySentenceHash\n                        \n                    \n                \n            \n            \n                \ncountReviewsBySentenceHash(sentenceHash)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentenceHash\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(claimReview)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:175\n                \n            \n\n\n            \n                \n                    This function creates a new claim review.\nAlso creates a History Module that tracks creation of claim reviews.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    claimReview\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ClaimReviewBody received of the client.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        Return a new claim review object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(claimReviewId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:225\n                \n            \n\n\n            \n                \n                    This function does a soft deletion, doesn't delete claim review in DataBase,\nbut omit its in the front page\nAlso creates a History Module that tracks deletion of claim reviews.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    claimReviewId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        claimId Claim id which wants to delete\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        Returns the claim review with the param isDeleted equal to true\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getById\n                        \n                    \n                \n            \n            \n                \ngetById(claimReviewId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:212\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimReviewId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getReviewsByClaimId\n                        \n                    \n                \n            \n            \n                \ngetReviewsByClaimId(claimId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:57\n                \n            \n\n\n            \n                \n                    get all personality claim claimIDs\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        claim Id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getReviewsBySentenceHash\n                        \n                    \n                \n            \n            \n                \ngetReviewsBySentenceHash(sentenceHash, page, pageSize, order)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentenceHash\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    page\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageSize\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    order\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getReviewStatsByClaimId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getReviewStatsByClaimId(claimId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getReviewStatsBySentenceHash\n                        \n                    \n                \n            \n            \n                \n                    \n                    getReviewStatsBySentenceHash(match: any)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    match\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserReviewBySentenceHash\n                        \n                    \n                \n            \n            \n                \ngetUserReviewBySentenceHash(sentenceHash, userId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentenceHash\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"ClaimReviewService\")\n                    \n                \n                    \n                        \n                                Defined in server/claim-review/claim-review.service.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from \"@nestjs/common\";\nimport { Model, Types } from \"mongoose\";\nimport { ClaimReview, ClaimReviewDocument } from \"./schemas/claim-review.schema\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport { UtilService } from \"../util\";\nimport { SourceService } from \"../source/source.service\";\nimport { HistoryService } from \"../history/history.service\";\nimport { HistoryType, TargetModel } from \"../history/schema/history.schema\";\nimport { ISoftDeletedModel } from 'mongoose-softdelete-typescript';\n\n@Injectable()\nexport class ClaimReviewService {\n    private readonly logger = new Logger(\"ClaimReviewService\");\n    constructor(\n        @InjectModel(ClaimReview.name)\n        private ClaimReviewModel: Model & ISoftDeletedModel,\n        private historyService: HistoryService,\n        private sourceService: SourceService,\n        private util: UtilService\n    ) {}\n\n    agreggateClassification(match: any) {\n        return this.ClaimReviewModel.aggregate([\n            { $match: match },\n            { $group: { _id: \"$classification\", count: { $sum: 1 } } },\n            { $sort: { count: -1 } },\n        ]);\n    }\n\n    count(query: any = {}) {\n        return this.ClaimReviewModel.countDocuments().where(query);\n    }\n\n    async getReviewStatsBySentenceHash(match: any) {\n        const reviews = await this.ClaimReviewModel.aggregate([\n            { $match: match },\n            { $group: { _id: \"$classification\", count: { $sum: 1 } } },\n            { $sort: { count: -1 } },\n        ]);\n        return this.util.formatStats(reviews);\n    }\n\n    async getReviewStatsByClaimId(claimId) {\n        const reviews = await this.ClaimReviewModel.aggregate([\n            { $match: { claim: claimId, isDeleted: false } },\n            { $group: { _id: \"$classification\", count: { $sum: 1 } } },\n            { $sort: { count: -1 } },\n        ]);\n        return this.util.formatStats(reviews);\n    }\n\n    /**\n     * get all personality claim claimIDs\n     * @param claimId claim Id\n     * @returns \n     */\n    getReviewsByClaimId(claimId) {\n        return this.ClaimReviewModel.aggregate([\n            { $match: { claim: claimId, isDeleted: false } },\n            {\n                $group: {\n                    _id: \"$sentence_hash\",\n                    topClassification: this._topClassificationAccumulator(),\n                },\n            },\n        ]).option({ serializeFunctions: true });\n    }\n\n    getUserReviewBySentenceHash(sentenceHash, userId) {\n        if (!userId) {\n            return Promise.resolve(undefined);\n        }\n        return this.ClaimReviewModel.findOne(\n            { sentence_hash: sentenceHash, user: userId, isDeleted: false },\n            {\n                sources: 1,\n                _id: 1,\n                classification: 1,\n                user: 1,\n            }\n        );\n    }\n\n    countReviewsBySentenceHash(sentenceHash) {\n        return this._reviewsBySentenceHashAggregated(sentenceHash).count(\n            \"count\"\n        );\n    }\n\n    getReviewsBySentenceHash(sentenceHash, page, pageSize, order) {\n        pageSize = parseInt(pageSize);\n        page = parseInt(page);\n\n        return this._reviewsBySentenceHashAggregated(sentenceHash)\n            .skip(page * pageSize)\n            .limit(pageSize)\n            .sort({ _id: order });\n    }\n\n    _reviewsBySentenceHashAggregated(sentenceHash) {\n        return this.ClaimReviewModel.aggregate([\n            { $match: { sentence_hash: sentenceHash, isDeleted: false } },\n            // Virtual Populates doesn't work with aggregate\n            // https://stackoverflow.com/questions/47669178/mongoose-virtual-populate-and-aggregates\n            {\n                $lookup: {\n                    from: 'sources',\n                    localField: '_id',\n                    foreignField: 'targetId',\n                    as: 'sources'\n                }\n            },\n            {\n                $project: {\n                    _id: 1,\n                    sources: 1,\n                    report: 1,\n                    classification: 1,\n                    user: 1,\n                },\n            },\n        ]);\n    }\n\n    _topClassificationAccumulator() {\n        return {\n            $accumulator: {\n                init: function () {\n                    return {};\n                },\n                accumulate: function (state, classification) {\n                    if (!state[classification]) {\n                        state[classification] = 1;\n                    } else {\n                        state[classification]++;\n                    }\n\n                    return state;\n                },\n                accumulateArgs: [\"$classification\"],\n                merge: function (state1, state2) {\n                    return { ...state1, ...state2 };\n                },\n                finalize: function (state) {\n                    // Find the classification with bigger count\n                    const topClassification = Object.keys(state).reduce(\n                        (acc, classification) => {\n                            if (!state[acc]) {\n                                return classification;\n                            } else {\n                                return state[acc] >= state[classification]\n                                    ? acc\n                                    : classification;\n                            }\n                        },\n                        \"\"\n                    );\n                    // TODO: what can we do about ties?\n                    return {\n                        classification: topClassification,\n                        count: state[topClassification],\n                    };\n                },\n                lang: \"js\",\n            },\n        };\n    }\n\n    /**\n     * This function creates a new claim review.\n     * Also creates a History Module that tracks creation of claim reviews.\n     * @param claimReview ClaimReviewBody received of the client.\n     * @returns Return a new claim review object.\n     */\n    async create(claimReview) {\n        // Cast ObjectId\n        //verificar id da claim review\n        //a claim review está referenciando a claim, não à claim revision está certo ?\n        claimReview.personality = new Types.ObjectId(claimReview.personality);\n        claimReview.claim = new Types.ObjectId(claimReview.claim);\n        claimReview.user = new Types.ObjectId(claimReview.user);\n        const newClaimReview = new this.ClaimReviewModel(claimReview);\n        if (claimReview.sources && Array.isArray(claimReview.sources)) {\n            try {\n                for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClaimRevision.html":{"url":"classes/ClaimRevision.html","title":"class - ClaimRevision","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClaimRevision\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim-revision/schema/claim-revision.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                claimId\n                            \n                            \n                                content\n                            \n                            \n                                date\n                            \n                            \n                                personality\n                            \n                            \n                                slug\n                            \n                            \n                                title\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        claimId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Claim\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'Claim'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-revision/schema/claim-revision.schema.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-revision/schema/claim-revision.schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-revision/schema/claim-revision.schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        personality\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Personality\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'Personality'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-revision/schema/claim-revision.schema.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-revision/schema/claim-revision.schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-revision/schema/claim-revision.schema.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, validate: undefined, message: tag => })\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-revision/schema/claim-revision.schema.ts:38\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport * as mongoose from \"mongoose\";\nimport { Claim } from \"../../claim/schemas/claim.schema\";\nimport { Personality } from \"../../personality/schemas/personality.schema\"\n\nexport type ClaimRevisionDocument = ClaimRevision & mongoose.Document;\n\n@Schema({ toObject: {virtuals: true}, toJSON: {virtuals: true} })\nexport class ClaimRevision {\n    @Prop({ required: true })\n    title: string;\n\n    @Prop({ required: true })\n    slug: string;\n\n    @Prop({ type: Object, required: true })\n    content: object;\n\n    @Prop({ required: true })\n    date: Date;\n\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"Claim\",\n    })\n    claimId: Claim;\n\n    @Prop({\n        required: true,\n        validate: {\n            validator: (v) => {\n                return [\"speech\", \"twitter\"].indexOf(v) !== -1;\n            },\n        },\n        message: (tag) => `${tag} is not a valid claim type.`,\n    })\n    type: string;\n\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"Personality\",\n    })\n    personality: Personality;\n\n    // TODO: Let's not use the auto-increment yet\n    // mongodb will create a default _id field and we can use it for the first version\n    // @Prop({ required: true })\n    // revisionId: number;\n}\n\nconst ClaimRevisionSchemaRaw = SchemaFactory.createForClass(ClaimRevision);\n\nClaimRevisionSchemaRaw.virtual('reviews', {\n    ref: 'ClaimReview',\n    localField: '_id',\n    foreignField: 'claim'\n});\n\nexport const ClaimRevisionSchema = ClaimRevisionSchemaRaw;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ClaimRevisionModule.html":{"url":"modules/ClaimRevisionModule.html","title":"module - ClaimRevisionModule","body":"\n                   \n\n\n\n\n    Modules\n    ClaimRevisionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ClaimRevisionModule\n\n\n\ncluster_ClaimRevisionModule_imports\n\n\n\ncluster_ClaimRevisionModule_providers\n\n\n\ncluster_ClaimRevisionModule_exports\n\n\n\n\nParserModule\n\nParserModule\n\n\n\nClaimRevisionModule\n\nClaimRevisionModule\n\nClaimRevisionModule -->\n\nParserModule->ClaimRevisionModule\n\n\n\n\n\nSourceModule\n\nSourceModule\n\nClaimRevisionModule -->\n\nSourceModule->ClaimRevisionModule\n\n\n\n\n\nViewModule\n\nViewModule\n\nClaimRevisionModule -->\n\nViewModule->ClaimRevisionModule\n\n\n\n\n\nClaimRevisionService \n\nClaimRevisionService \n\nClaimRevisionService  -->\n\nClaimRevisionModule->ClaimRevisionService \n\n\n\n\n\nClaimRevisionService\n\nClaimRevisionService\n\nClaimRevisionModule -->\n\nClaimRevisionService->ClaimRevisionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/claim-revision/claim-revision.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ClaimRevisionService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ParserModule\n                        \n                        \n                            SourceModule\n                        \n                        \n                            ViewModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ClaimRevisionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { ClaimRevision, ClaimRevisionSchema } from \"./schema/claim-revision.schema\";\nimport { ParserModule } from \"../parser/parser.module\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { HttpModule } from \"@nestjs/axios\";\nimport { ViewModule } from \"../view/view.module\";\nimport { SourceModule } from \"../source/source.module\";\nimport { ClaimRevisionService } from \"./claim-revision.service\";\n\nconst ClaimRevisionModel = MongooseModule.forFeature([\n    {\n        name: ClaimRevision.name,\n        schema: ClaimRevisionSchema,\n    },\n]);\n\n@Module({\n    // TODO: clean-up Claim module after logic is fully migrated to ClaimRevision\n    imports: [\n        ClaimRevisionModel,\n        ParserModule,\n        ConfigModule,\n        HttpModule,\n        ViewModule,\n        SourceModule,\n    ],\n    exports: [ClaimRevisionService],\n    providers: [ClaimRevisionService],\n})\nexport class ClaimRevisionModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClaimRevisionService.html":{"url":"injectables/ClaimRevisionService.html","title":"injectable - ClaimRevisionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClaimRevisionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim-revision/claim-revision.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                optionsToUpdate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                getRevision\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ClaimRevisionModel: Model, sourceService: SourceService, parserService: ParserService)\n                    \n                \n                        \n                            \n                                Defined in server/claim-revision/claim-revision.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ClaimRevisionModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sourceService\n                                                  \n                                                        \n                                                                        SourceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        parserService\n                                                  \n                                                        \n                                                                        ParserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(claimId, claim)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-revision/claim-revision.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        an unique claim id\n\n                                    \n                                \n                                \n                                    claim\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Claim Content\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        Save the claimRevision in database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRevision\n                        \n                    \n                \n            \n            \n                \ngetRevision(claimId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-revision/claim-revision.service.ts:27\n                \n            \n\n\n            \n                \n                    get ClaimRevision by ID\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"ClaimService\")\n                    \n                \n                    \n                        \n                                Defined in server/claim-revision/claim-revision.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        optionsToUpdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in server/claim-revision/claim-revision.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {Injectable, Logger} from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport { Model } from \"mongoose\";\nimport slugify from 'slugify'\nimport { ParserService } from \"../parser/parser.service\";\nimport { SourceService } from \"../source/source.service\";\nimport { ClaimRevision, ClaimRevisionDocument } from \"./schema/claim-revision.schema\";\n\n@Injectable()\nexport class ClaimRevisionService {\n    private optionsToUpdate: { new: boolean; upsert: boolean };\n    private readonly logger = new Logger(\"ClaimService\");\n\n    constructor(\n        @InjectModel(ClaimRevision.name)\n        private ClaimRevisionModel: Model,\n        private sourceService: SourceService,\n        private parserService: ParserService\n    ) {\n        this.optionsToUpdate = {\n            new: true,\n            upsert: true,\n        };\n    }\n\n    /** get ClaimRevision by ID */\n    getRevision(claimId) {\n        return this.ClaimRevisionModel.findOne({ claimId })\n    }\n    /**\n     *\n     * @param claimId an unique claim id\n     * @param claim Claim Content\n     * @returns Save the claimRevision in database\n     */\n    async create(claimId, claim) {\n        claim.claimId = claimId;\n        if (typeof claim.content === \"string\") {\n            claim.content = this.parserService.parse(claim.content);\n        }\n        claim.slug = slugify(claim.title, {\n            lower: true,     // convert to lower case, defaults to `false`\n            strict: true     // strip special characters except replacement, defaults to `false`\n        })\n        const newClaimRevision = new this.ClaimRevisionModel(claim);\n        if (claim.sources && Array.isArray(claim.sources)) {\n            try {\n                for (let source of claim.sources) {\n                    await this.sourceService.create({\n                        link: source,\n                        targetId: claimId,\n                        targetModel: \"Claim\",\n                    });\n                }\n            } catch (e) {\n                this.logger.error(e);\n                throw e;\n            }\n        }\n        return newClaimRevision.save();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClaimService.html":{"url":"injectables/ClaimService.html","title":"injectable - ClaimService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClaimService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim/claim.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                optionsToUpdate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                _getClaim\n                            \n                            \n                                    Private\n                                calculateOverallStats\n                            \n                            \n                                count\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getByPersonalityIdAndClaimSlug\n                            \n                            \n                                    Async\n                                listAll\n                            \n                            \n                                    Private\n                                    Async\n                                postProcess\n                            \n                            \n                                    Private\n                                transformContentObject\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(req: Request, ClaimModel, claimReviewService: ClaimReviewService, historyService: HistoryService, claimRevisionService: ClaimRevisionService)\n                    \n                \n                        \n                            \n                                Defined in server/claim/claim.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        req\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        ClaimModel\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        claimReviewService\n                                                  \n                                                        \n                                                                        ClaimReviewService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        historyService\n                                                  \n                                                        \n                                                                        HistoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        claimRevisionService\n                                                  \n                                                        \n                                                                        ClaimRevisionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        _getClaim\n                        \n                    \n                \n            \n            \n                \n                    \n                    _getClaim(match: ClaimMatchParameters, postprocess)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:161\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    match\n                                    \n                                                ClaimMatchParameters\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    postprocess\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        calculateOverallStats\n                        \n                    \n                \n            \n            \n                \n                    \n                    calculateOverallStats(claim)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:210\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claim\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         { totalClaims: number; totalClaimsReviewed: number; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        count\n                        \n                    \n                \n            \n            \n                \ncount(query: any)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(claim)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:66\n                \n            \n\n\n            \n                \n                    This function will create a new claim and claim Revision and save it to the dataBase.\nAlso creates a History Module that tracks creation of claims.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    claim\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ClaimBody received of the client.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        Return a new claim object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(claimId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:137\n                \n            \n\n\n            \n                \n                    This function does a soft deletion, doesn't delete claim in DataBase,\nbut omit its in the front page\nAlso creates a History Module that tracks deletion of claims.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Claim id which wants to delete\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        Returns the claim with the param isDeleted equal to true\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(claimId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:153\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByPersonalityIdAndClaimSlug\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByPersonalityIdAndClaimSlug(personalityId, claimSlug)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    personalityId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    claimSlug\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAll(page, pageSize, order, query)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    page\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageSize\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    order\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        postProcess\n                        \n                    \n                \n            \n            \n                \n                    \n                    postProcess(claim)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:182\n                \n            \n\n\n            \n                \n                    This function return all personality claims\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    claim\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        all personality claims\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        return all claims\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        transformContentObject\n                        \n                    \n                \n            \n            \n                \n                    \n                    transformContentObject(claimContent, reviews)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:229\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimContent\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    reviews\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(claimId, claimRevisionUpdate)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:101\n                \n            \n\n\n            \n                \n                    This function creates a new claim with the old claim data\nand overwrite with the new data, keeping data that hasn't changed.\nAlso creates a History Module that tracks updation of claims.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Claim id which wants updated.\n\n                                    \n                                \n                                \n                                    claimRevisionUpdate\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ClaimBody received of the client.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        Return a new claim object.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"ClaimService\")\n                    \n                \n                    \n                        \n                                Defined in server/claim/claim.service.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        optionsToUpdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in server/claim/claim.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, Logger, Scope, NotFoundException } from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport { FilterQuery, Model, Types } from \"mongoose\";\nimport { Claim, ClaimDocument } from \"../claim/schemas/claim.schema\";\nimport { ClaimReviewService } from \"../claim-review/claim-review.service\";\nimport { ClaimRevisionService } from \"../claim-revision/claim-revision.service\";\nimport { HistoryService } from \"../history/history.service\"\nimport { HistoryType, TargetModel } from \"../history/schema/history.schema\";\nimport { ISoftDeletedModel } from 'mongoose-softdelete-typescript';\nimport { REQUEST } from '@nestjs/core';\nimport { Request } from 'express';\n\ntype ClaimMatchParameters = ({ _id: string } | { personality: string, slug: string }) & FilterQuery;\n\n@Injectable({ scope: Scope.REQUEST })\nexport class ClaimService {\n    private optionsToUpdate: { new: boolean; upsert: boolean };\n    private readonly logger = new Logger(\"ClaimService\");\n\n    constructor(\n        @Inject(REQUEST) private req: Request,\n        @InjectModel(Claim.name)\n        private ClaimModel: ISoftDeletedModel & Model,\n        private claimReviewService: ClaimReviewService,\n        private historyService: HistoryService,\n        private claimRevisionService: ClaimRevisionService,\n    ) {\n        this.optionsToUpdate = {\n            new: true,\n            upsert: true,\n        };\n    }\n\n    async listAll(page, pageSize, order, query) {\n        if (query.personality) {\n            query.personality = new Types.ObjectId(query.personality)\n        }\n        const claims = await this.ClaimModel.find(query)\n            .populate(\"latestRevision\")\n            .skip(page * pageSize)\n            .limit(pageSize)\n            .sort({ _id: order })\n            .lean();\n\n        return Promise.all(\n            claims.map(async (claim) => {\n                // This line may cause a false positive in sonarCloud because if we remove the await, we cannot iterate through the results\n                return this.postProcess({\n                    ...claim.latestRevision,\n                    ...claim\n                });\n            })\n        );\n    }\n\n    count(query: any = {}) {\n        return this.ClaimModel.countDocuments().where(query);\n    }\n\n    /**\n     * This function will create a new claim and claim Revision and save it to the dataBase.\n     * Also creates a History Module that tracks creation of claims.\n     * @param claim ClaimBody received of the client.\n     * @returns Return a new claim object.\n     */\n    async create(claim) {\n        claim.personality = new Types.ObjectId(claim.personality);\n        const newClaim = new this.ClaimModel(claim);\n        const newClaimRevision = await this.claimRevisionService.create(newClaim._id, claim)\n        newClaim.latestRevision = newClaimRevision._id\n        newClaim.slug = newClaimRevision.slug\n\n        const user = this.req.user\n\n        const history =\n            this.historyService.getHistoryParams(\n                newClaim._id,\n                TargetModel.Claim,\n                user,\n                HistoryType.Create,\n                newClaim.latestRevision\n            )\n        await this.historyService.createHistory(history)\n\n        newClaim.save();\n\n        return {\n            ...newClaim.toObject(),\n            ...newClaimRevision.toObject()\n        }\n    }\n\n    /**\n     * This function creates a new claim with the old claim data\n     * and overwrite with the new data, keeping data that hasn't changed.\n     * Also creates a History Module that tracks updation of claims.\n     * @param claimId Claim id which wants updated.\n     * @param claimRevisionUpdate ClaimBody received of the client.\n     * @returns Return a new claim object.\n     */\n    async update(claimId, claimRevisionUpdate) {\n        const claim = await this._getClaim({ _id: claimId }, false);\n        const previousRevision = claim.toObject().latestRevision\n        delete previousRevision._id\n        const newClaimRevision =\n            await this.claimRevisionService.create(claim._id, {\n                ...previousRevision,\n                ...claimRevisionUpdate\n            })\n        claim.latestRevision = newClaimRevision._id\n        claim.slug = newClaimRevision.slug\n\n        const user = this.req.user\n\n        const history =\n            this.historyService.getHistoryParams(\n                claimId,\n                TargetModel.Claim,\n                user,\n                HistoryType.Update,\n                newClaimRevision,\n                previousRevision\n            )\n        await this.historyService.createHistory(history)\n\n        claim.save()\n        return newClaimRevision;\n    }\n\n    /**\n     * This function does a soft deletion, doesn't delete claim in DataBase,\n     * but omit its in the front page\n     * Also creates a History Module that tracks deletion of claims.\n     * @param claimId Claim id which wants to delete\n     * @returns Returns the claim with the param isDeleted equal to true\n     */\n    async delete(claimId) {\n        const user = this.req.user\n        const previousClaim = await this.getById(claimId)\n        const history = this.historyService.getHistoryParams(\n            claimId,\n            TargetModel.Claim,\n            user,\n            HistoryType.Delete,\n            null,\n            previousClaim\n        )\n        await this.historyService.createHistory(history)\n        return this.ClaimModel.softDelete({ _id: claimId });\n    }\n\n    // TODO: add optional revisionId that will fetch a specifc revision that matches\n    async getById(claimId) {\n        return this._getClaim({_id: claimId})\n    }\n\n    async getByPersonalityIdAndClaimSlug(personalityId, claimSlug) {\n        return this._getClaim({personality: personalityId, slug: claimSlug})\n    }\n\n    private async _getClaim(match: ClaimMatchParameters, postprocess = true) {\n        // This line may cause a false positive in sonarCloud because if we remove the await, we cannot iterate through the results\n        const claim =\n            await this.ClaimModel.findOne(match)\n                .populate(\"personality\", \"_id name\")\n                .populate(\"sources\", \"_id link classification\")\n                .populate(\"latestRevision\")\n\n        if (!claim) {\n            throw new NotFoundException()\n        }\n\n\n        return postprocess === true ? this.postProcess(claim.toObject()) : claim;\n    }\n\n    /**\n     * This function return all personality claims\n     * @param claim all personality claims\n     * @returns return all claims\n     */\n    private async postProcess(claim) {\n        // TODO: we should not transform the object in this function\n        claim = {\n            ...claim.latestRevision, // the order matters\n            ...claim,\n            latestRevision: undefined\n        }\n        const reviews = await this.claimReviewService.getReviewsByClaimId(\n            claim._id\n        );\n        if (claim) {\n            if (claim?.content?.object) {\n                claim.content.object = this.transformContentObject(\n                    claim.content.object,\n                    reviews\n                );\n            }\n            const reviewStats =\n                await this.claimReviewService.getReviewStatsByClaimId(\n                    claim._id\n                );\n            const overallStats = this.calculateOverallStats(claim);\n            const stats = { ...reviewStats, ...overallStats };\n            claim = Object.assign(claim, { stats });\n        }\n        return claim;\n    }\n\n    private calculateOverallStats(claim) {\n        let totalClaims = 0;\n        let totalClaimsReviewed = 0;\n        if (claim?.content?.object) {\n            claim.content.object.forEach((p) => {\n                totalClaims += p.content.length;\n                p.content.forEach((sentence) => {\n                    if (sentence.props.topClassification) {\n                        totalClaimsReviewed++;\n                    }\n                });\n            }, 0);\n        }\n        return {\n            totalClaims,\n            totalClaimsReviewed,\n        };\n    }\n\n    private transformContentObject(claimContent, reviews) {\n        if (!claimContent || reviews.length  {\n            paragraph.content.forEach((sentence, sentenceIndex) => {\n                const claimReview = reviews.find((review) => {\n                    return review._id === sentence.props[\"data-hash\"];\n                });\n                if (claimReview) {\n                    claimContent[paragraphIndex].content[sentenceIndex].props =\n                        Object.assign(sentence.props, {\n                            topClassification: claimReview.topClassification,\n                        });\n                }\n            });\n        });\n        return claimContent;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateClaimDTO.html":{"url":"classes/CreateClaimDTO.html","title":"class - CreateClaimDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateClaimDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim/dto/create-claim.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                date\n                            \n                            \n                                personality\n                            \n                            \n                                recaptcha\n                            \n                            \n                                sources\n                            \n                            \n                                title\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/create-claim.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/create-claim.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        personality\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Personality\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/create-claim.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recaptcha\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/create-claim.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sources\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ArrayNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/create-claim.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/create-claim.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@IsAlpha()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/create-claim.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArrayNotEmpty, IsAlpha, IsArray, IsDateString, IsNotEmpty, IsString } from 'class-validator';\nimport { Personality } from \"../../personality/schemas/personality.schema\";\n\nexport class CreateClaimDTO {\n    @IsNotEmpty()\n    @IsString()\n    title: string;\n\n    @IsNotEmpty()\n    @IsString()\n    content: string;\n\n    @IsNotEmpty()\n    @IsString()\n    @IsDateString()\n    date: string;\n\n    @IsNotEmpty()\n    @IsString()\n    @IsAlpha()\n    type: string;\n\n    @IsArray()\n    @ArrayNotEmpty()\n    sources: string[];\n\n    @IsNotEmpty()\n    @IsString()\n    recaptcha: string;\n\n    @IsNotEmpty()\n    @IsString()\n    personality: Personality;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateClaimReview.html":{"url":"classes/CreateClaimReview.html","title":"class - CreateClaimReview","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateClaimReview\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim-review/dto/create-claim-review.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                claim\n                            \n                            \n                                classification\n                            \n                            \n                                personality\n                            \n                            \n                                recaptcha\n                            \n                            \n                                report\n                            \n                            \n                                sentence_content\n                            \n                            \n                                sentence_hash\n                            \n                            \n                                sources\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        claim\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Claim\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsAlphanumeric()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/dto/create-claim-review.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        classification\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@IsEnum(ClassificationEnum)\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/dto/create-claim-review.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        personality\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Personality\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsAlphanumeric()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/dto/create-claim-review.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recaptcha\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/dto/create-claim-review.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        report\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/dto/create-claim-review.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sentence_content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/dto/create-claim-review.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sentence_hash\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsAlphanumeric()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/dto/create-claim-review.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sources\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/dto/create-claim-review.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsAlphanumeric, IsArray, IsEnum, IsNotEmpty, IsString } from 'class-validator';\nimport { Personality } from \"../../personality/schemas/personality.schema\";\nimport { Claim } from \"../../claim/schemas/claim.schema\";\nimport { ClassificationEnum } from \"../schemas/claim-review.schema\"\nexport class CreateClaimReview {\n    @IsNotEmpty()\n    @IsString()\n    @IsEnum(ClassificationEnum)\n    classification: string;\n\n    @IsString()\n    @IsAlphanumeric()\n    claim: Claim;\n\n    @IsAlphanumeric()\n    personality: Personality;\n\n    @IsString()\n    @IsAlphanumeric()\n    sentence_hash: string;\n\n    @IsString()\n    sentence_content: string;\n\n    @IsNotEmpty()\n    @IsString()\n    report: string;\n\n    @IsString()\n    recaptcha: string\n\n    @IsNotEmpty()\n    @IsArray()\n    sources: string[]\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePersonality.html":{"url":"classes/CreatePersonality.html","title":"class - CreatePersonality","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePersonality\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/personality/dto/create-personality.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                    Optional\n                                image\n                            \n                            \n                                    Optional\n                                isAllowedProp\n                            \n                            \n                                name\n                            \n                            \n                                wikidata\n                            \n                            \n                                    Optional\n                                wikipedia\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/create-personality.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/create-personality.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        isAllowedProp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/create-personality.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MinLength(3)\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/create-personality.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wikidata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/create-personality.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        wikipedia\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/create-personality.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsNotEmpty, IsOptional, IsString, MinLength } from 'class-validator';\nexport class CreatePersonality {\n    @IsNotEmpty()\n    @IsString()\n    @MinLength(3)\n    name: string;\n\n    @IsString()\n    description: string;\n\n    @IsString()\n    wikidata: string;\n\n    @IsBoolean()\n    @IsOptional()\n    isAllowedProp?: boolean\n\n    @IsString()\n    @IsOptional()\n    image?: string\n\n    @IsString()\n    @IsOptional()\n    wikipedia?: string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailModule.html":{"url":"modules/EmailModule.html","title":"module - EmailModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/email/email.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { EmailService } from \"./email.service\";\nimport { ConfigModule } from \"@nestjs/config\";\n\n\n@Module({\n    exports: [EmailService],\n    imports: [ConfigModule],\n    providers: [EmailService],\n})\nexport class EmailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/email/email.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTransport\n                            \n                            \n                                getEmailBody\n                            \n                            \n                                    Async\n                                sendEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in server/email/email.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createTransport\n                        \n                    \n                \n            \n            \n                \n                    \n                    createTransport()\n                \n            \n\n\n            \n                \n                    Defined in server/email/email.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEmailBody\n                        \n                    \n                \n            \n            \n                \ngetEmailBody(options, templatePath: string)\n                \n            \n\n\n            \n                \n                    Defined in server/email/email.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    templatePath\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"./template/email.html\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendEmail(to, subject, text, templateOptions, templatePath)\n                \n            \n\n\n            \n                \n                    Defined in server/email/email.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    to\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    subject\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    text\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    templateOptions\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    templatePath\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"EmailService\")\n                    \n                \n                    \n                        \n                                Defined in server/email/email.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nconst nodemailer = require(\"nodemailer\");\nconst handlebars = require(\"handlebars\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\n@Injectable()\nexport class EmailService {\n    private readonly logger = new Logger(\"EmailService\");\n\n    constructor(\n        private configService: ConfigService,\n    ) {}\n\n    getEmailBody (options, templatePath = \"./template/email.html\") {\n        const html = fs.readFileSync(path.resolve(__dirname, templatePath), {\n            encoding: \"utf-8\",\n        });\n        const template = handlebars.compile(html);\n        return template({\n            ...options,\n            baseUrl: this.configService.get(\"web_url\"),\n        });\n    }\n\n    async createTransport() {\n        const transporter = nodemailer.createTransport({\n            host: this.configService.get(\"smtp_host\"),\n            port: this.configService.get(\"smtp_port\"),\n            secure: this.configService.get(\"smtp_secure\"),\n            auth: {\n                user: this.configService.get(\"smtp_email_user\"),\n                pass: this.configService.get(\"smtp_email_pass\")\n            },\n        });\n        return transporter;\n    }\n\n    async sendEmail(to, subject, text, templateOptions, templatePath) {\n        const transporter = await this.createTransport();\n        const html = this.getEmailBody(templateOptions, templatePath);\n        const from = this.configService.get(\"smtp_email_user\")\n        this.logger.log(`Sending e-mail to ${to} ...`);\n        const emailResult = await transporter.sendMail({ from, to, subject, text, html })//.then(() => transporter.close());\n        return emailResult;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetClaimsByHashDTO.html":{"url":"classes/GetClaimsByHashDTO.html","title":"class - GetClaimsByHashDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetClaimsByHashDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim/dto/get-reviews-by-hash.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                language\n                            \n                            \n                                order\n                            \n                            \n                                page\n                            \n                            \n                                pageSize\n                            \n                            \n                                    Optional\n                                reviews\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsAlpha()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/get-reviews-by-hash.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/get-reviews-by-hash.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsInt()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/get-reviews-by-hash.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pageSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/get-reviews-by-hash.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        reviews\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/get-reviews-by-hash.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsAlpha, IsArray, IsInt, IsNumber, IsOptional, IsString, Min } from 'class-validator';\n\nexport class GetClaimsByHashDTO {\n    @IsNumber()\n    @IsInt()\n    @Min(0)\n    page: number;\n\n    @IsNumber()\n    @Min(0)\n    pageSize: number;\n\n    @IsString()\n    order: string;\n\n    @IsString()\n    @IsAlpha()\n    language: string;\n\n    @IsOptional()\n    @IsArray()\n    reviews?: string[];\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetClaimsDTO.html":{"url":"classes/GetClaimsDTO.html","title":"class - GetClaimsDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetClaimsDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim/dto/get-claims.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                language\n                            \n                            \n                                order\n                            \n                            \n                                page\n                            \n                            \n                                pageSize\n                            \n                            \n                                personality\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsAlpha()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/get-claims.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/get-claims.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsInt()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/get-claims.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pageSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/get-claims.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        personality\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/get-claims.dto.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsAlpha, IsInt, IsNumber, IsString, Min } from 'class-validator';\nexport class GetClaimsDTO {\n    @IsNumber()\n    @IsInt()\n    @Min(0)\n    page: number;\n\n    @IsNumber()\n    @Min(0)\n    pageSize: number;\n\n    @IsString()\n    order: string;\n\n    @IsString()\n    @IsAlpha()\n    language: string;\n\n    @IsString()\n    personality: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPersonalities.html":{"url":"classes/GetPersonalities.html","title":"class - GetPersonalities","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPersonalities\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/personality/dto/get-personalities.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                language\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                order\n                            \n                            \n                                page\n                            \n                            \n                                pageSize\n                            \n                            \n                                    Optional\n                                withSuggestions\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsAlpha()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/get-personalities.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/get-personalities.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/get-personalities.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsInt()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/get-personalities.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pageSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/get-personalities.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        withSuggestions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/get-personalities.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsAlpha, IsBoolean, IsInt, IsNumber, IsOptional, IsString, Min } from 'class-validator';\nexport class GetPersonalities {\n    @IsNumber()\n    @IsInt()\n    @Min(0)\n    page: number;\n\n    @IsNumber()\n    @Min(0)\n    pageSize: number;\n\n    @IsString()\n    order: string;\n\n    @IsString()\n    @IsAlpha()\n    language: string;\n\n    @IsBoolean()\n    @IsOptional()\n    withSuggestions?: boolean;\n\n    @IsString()\n    @IsOptional()\n    name?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/History.html":{"url":"classes/History.html","title":"class - History","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  History\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/history/schema/history.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                date\n                            \n                            \n                                details\n                            \n                            \n                                targetId\n                            \n                            \n                                targetModel\n                            \n                            \n                                type\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Date, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/history/schema/history.schema.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        details\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/history/schema/history.schema.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        targetId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, refPath: 'onModel'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/history/schema/history.schema.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        targetModel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TargetModel\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/history/schema/history.schema.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HistoryType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/history/schema/history.schema.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/history/schema/history.schema.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport * as mongoose from \"mongoose\";\nimport { User } from \"../../users/schemas/user.schema\";\n\nexport type HistoryDocument = History & mongoose.Document;\n\nexport enum TargetModel { \n  Claim = 'claim',\n  Personality = 'personality',\n  ClaimReview = 'claim-review'\n}\n\nexport enum HistoryType { \n  Create = 'create',\n  Update = 'update',\n  Delete = 'delete'\n}\n@Schema({ toObject: {virtuals: true}, toJSON: {virtuals: true} })\nexport class History {\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        refPath: \"onModel\",\n    })\n    targetId: mongoose.Types.ObjectId;\n\n    @Prop({\n        required: true,\n    })\n    targetModel: TargetModel;\n\n    @Prop({\n      type: mongoose.Types.ObjectId,\n      required: true,\n      ref: \"User\",\n    })\n    user: User;\n        \n    @Prop({\n      required: true,\n    })\n    type: HistoryType //TODO: Validate if details field(after, before) it's optional or required based on type\n\n    @Prop({\n      type: Object,\n      required: true,\n    })\n    details: object\n\n    @Prop({\n      type: Date,\n      required: true,\n    })\n    date: mongoose.Date\n}\n\nexport const HistorySchema = SchemaFactory.createForClass(History);\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HistoryController.html":{"url":"controllers/HistoryController.html","title":"controller - HistoryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HistoryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/history/history.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getHistory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getHistory\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHistory(param, getHistory: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('api/history/:targetModel/:targetId')\n                \n            \n\n            \n                \n                    Defined in server/history/history.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    param\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    getHistory\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    Logger,\n    Param,\n    Query,\n} from \"@nestjs/common\";\nimport { HistoryService } from \"./history.service\";\n\n@Controller()\nexport class HistoryController {\n    private readonly logger = new Logger(\"HistoryController\");\n    constructor(\n        private historyService: HistoryService\n    ) {}\n\n    @Get(\"api/history/:targetModel/:targetId\")\n    public async getHistory(@Param() param, @Query() getHistory: any) {\n        const { targetId, targetModel } = param;\n        const { page, order } = getHistory;\n        const pageSize = parseInt(getHistory.pageSize, 10);\n        return this.historyService\n            .getByTargetIdAndModel(targetId, targetModel, page, pageSize, order)\n            .then((history) => {\n                const totalChanges = history.length;\n                const totalPages = Math.ceil(totalChanges / pageSize);\n                this.logger.log(\n                    `Found ${totalChanges} changes for targetId ${targetId}. Page ${page} of ${totalPages}`\n                );\n                return { history, totalChanges, totalPages, page, pageSize };\n            })\n            .catch();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HistoryModule.html":{"url":"modules/HistoryModule.html","title":"module - HistoryModule","body":"\n                   \n\n\n\n\n    Modules\n    HistoryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HistoryModule\n\n\n\ncluster_HistoryModule_providers\n\n\n\ncluster_HistoryModule_exports\n\n\n\n\nHistoryService \n\nHistoryService \n\n\n\nHistoryModule\n\nHistoryModule\n\nHistoryService  -->\n\nHistoryModule->HistoryService \n\n\n\n\n\nHistoryService\n\nHistoryService\n\nHistoryModule -->\n\nHistoryService->HistoryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/history/history.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HistoryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            HistoryController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HistoryService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { HistorySchema } from \"./schema/history.schema\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { HistoryService } from \"./history.service\";\nimport { HistoryController } from \"./history.controller\";\n\nconst HistoryModel = MongooseModule.forFeature([\n    {\n        name: \"HISTORY_MODEL\",\n        schema: HistorySchema,\n    },\n]);\n\n@Module({\n    imports: [\n        HistoryModel,\n        ConfigModule\n    ],\n    exports: [HistoryService],\n    providers: [HistoryService],\n    controllers:[HistoryController]\n})\n\nexport class HistoryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HistoryService.html":{"url":"injectables/HistoryService.html","title":"injectable - HistoryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HistoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/history/history.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                optionsToUpdate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createHistory\n                            \n                            \n                                    Async\n                                getByTargetIdAndModel\n                            \n                            \n                                getHistoryParams\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(HistoryModel: Model)\n                    \n                \n                        \n                            \n                                Defined in server/history/history.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        HistoryModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createHistory\n                        \n                    \n                \n            \n            \n                \n                    \n                    createHistory(data)\n                \n            \n\n\n            \n                \n                    Defined in server/history/history.service.ts:58\n                \n            \n\n\n            \n                \n                    This function create a new history document to database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object with the history data\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        Returns a new history document to database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByTargetIdAndModel\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByTargetIdAndModel(targetId, targetModel, page, pageSize, order: string)\n                \n            \n\n\n            \n                \n                    Defined in server/history/history.service.ts:73\n                \n            \n\n\n            \n                \n                    This function queries the database for the history of changes on a target.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    targetId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The id of the target.\n\n                                    \n                                \n                                \n                                    targetModel\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The model of the target (claim or personality).\n\n                                    \n                                \n                                \n                                    page\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The page of results, used in combination with pageSize to paginate results.\n\n                                    \n                                \n                                \n                                    pageSize\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        How many results per page.\n\n                                    \n                                \n                                \n                                    order\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"asc\"\n                                    \n\n                                    \n                                        asc or desc.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        The paginated history of a target.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHistoryParams\n                        \n                    \n                \n            \n            \n                \ngetHistoryParams(dataId, targetModel, user, type, latestChange, previousChange: null)\n                \n            \n\n\n            \n                \n                    Defined in server/history/history.service.ts:31\n                \n            \n\n\n            \n                \n                    This function return an history object.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Target Id.\n\n                                    \n                                \n                                \n                                    targetModel\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The model of the target(claim or personality ).\n\n                                    \n                                \n                                \n                                    user\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        User who made the change.\n\n                                    \n                                \n                                \n                                    type\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Type of the change(create, personality or delete).\n\n                                    \n                                \n                                \n                                    latestChange\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Model latest change .\n\n                                    \n                                \n                                \n                                    previousChange\n                                    \n                                            null\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        null\n                                    \n\n                                    \n                                        Model previous change.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { targetId: any; targetModel: any; user: any; type: any; details: { after: any; before: any; }; date: any; }\n\n                    \n                    \n                        Returns an object with de params necessary to create an history.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"HistoryService\")\n                    \n                \n                    \n                        \n                                Defined in server/history/history.service.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        optionsToUpdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in server/history/history.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {Injectable, Logger} from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport { Model, Types } from \"mongoose\";\nimport { HistoryDocument } from \"./schema/history.schema\";\n\n@Injectable()\nexport class HistoryService {\n    private optionsToUpdate: { new: boolean; upsert: boolean };\n    private readonly logger = new Logger(\"HistoryService\");\n\n    constructor(\n        @InjectModel('HISTORY_MODEL')\n        private HistoryModel: Model,\n    ) {\n        this.optionsToUpdate = {\n            new: true,\n            upsert: true,\n        };\n    }\n\n    /**\n     * This function return an history object.\n     * @param dataId Target Id.\n     * @param targetModel The model of the target(claim or personality ).\n     * @param user User who made the change.\n     * @param type Type of the change(create, personality or delete).\n     * @param latestChange Model latest change .\n     * @param previousChange Model previous change.\n     * @returns Returns an object with de params necessary to create an history.\n     */\n    getHistoryParams(\n        dataId,\n        targetModel,\n        user,\n        type,\n        latestChange,\n        previousChange = null\n    ) {\n        const date = new Date()\n        return {\n            targetId: new Types.ObjectId(dataId),\n            targetModel,\n            user: user?._id,\n            type,\n            details: {\n                after: latestChange,\n                before: previousChange\n            },\n            date,\n        }\n    }\n\n    /**\n     * This function create a new history document to database\n     * @param data Object with the history data\n     * @returns Returns a new history document to database\n     */\n    async createHistory(data) {\n        const newHistory = new this.HistoryModel(data);\n        return newHistory.save();\n    }\n\n\n    /**\n     * This function queries the database for the history of changes on a target.\n     * @param targetId The id of the target.\n     * @param targetModel The model of the target (claim or personality).\n     * @param page The page of results, used in combination with pageSize to paginate results.\n     * @param pageSize How many results per page.\n     * @param order asc or desc.\n     * @returns The paginated history of a target.\n     */\n    async getByTargetIdAndModel(targetId, targetModel, page, pageSize, order = \"asc\") {\n        return this.HistoryModel.find({\n            targetId: new Types.ObjectId(targetId),\n            targetModel,\n        })\n        .populate(\"user\", \"_id name\")\n        .skip(page * pageSize)\n        .limit(pageSize)\n        .sort({ date: order });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HomeController.html":{"url":"controllers/HomeController.html","title":"controller - HomeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HomeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/home/home.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                showHome\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        showHome\n                        \n                    \n                \n            \n            \n                \n                    \n                    showHome(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('home')\n                \n            \n\n            \n                \n                    Defined in server/home/home.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Req, Res } from \"@nestjs/common\";\nimport { ViewService } from \"../view/view.service\";\nimport { Request, Response } from \"express\";\nimport { parse } from \"url\";\nimport { PersonalityService } from \"../personality/personality.service\";\nimport { StatsService } from \"../stats/stats.service\";\n\n@Controller(\"/\")\nexport class HomeController {\n    constructor(\n        private viewService: ViewService,\n        private personalityService: PersonalityService,\n        private statsService: StatsService\n    ) {}\n\n    @Get(\"home\")\n    public async showHome(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n        const { personalities } = await this.personalityService.combinedListAll({\n            // @ts-ignore\n            language: req.language,\n            order: 'random',\n            pageSize: 5,\n            fetchOnly: true\n        });\n        const stats = await this.statsService.getHomeStats();\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/home-page\",\n                Object.assign(parsedUrl.query, { personalities, stats })\n            );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HomeModule.html":{"url":"modules/HomeModule.html","title":"module - HomeModule","body":"\n                   \n\n\n\n\n    Modules\n    HomeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HomeModule\n\n\n\ncluster_HomeModule_imports\n\n\n\n\nPersonalityModule\n\nPersonalityModule\n\n\n\nHomeModule\n\nHomeModule\n\nHomeModule -->\n\nPersonalityModule->HomeModule\n\n\n\n\n\nStatsModule\n\nStatsModule\n\nHomeModule -->\n\nStatsModule->HomeModule\n\n\n\n\n\nViewModule\n\nViewModule\n\nHomeModule -->\n\nViewModule->HomeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/home/home.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HomeController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PersonalityModule\n                        \n                        \n                            StatsModule\n                        \n                        \n                            ViewModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { HomeController } from \"./home.controller\";\nimport {PersonalityModule} from \"../personality/personality.module\";\nimport {StatsModule} from \"../stats/stats.module\";\nimport {ViewModule} from \"../view/view.module\";\n\n@Module({\n    imports: [PersonalityModule, StatsModule, ViewModule],\n    providers: [],\n    controllers: [HomeController],\n})\nexport class HomeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/auth/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard(\"local\") {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalSerializer.html":{"url":"injectables/LocalSerializer.html","title":"injectable - LocalSerializer","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalSerializer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/auth/local.serializer.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in server/auth/local.serializer.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Model } from \"mongoose\";\nimport * as passport from \"passport\";\nimport { User, UserDocument } from \"../users/schemas/user.schema\";\nimport { InjectModel } from \"@nestjs/mongoose\";\n\n@Injectable()\nexport class LocalSerializer {\n    constructor(\n        @InjectModel(User.name) private userModel: Model\n    ) {\n        // @ts-ignore\n        passport.serializeUser(this.userModel.serializeUser());\n        // @ts-ignore\n        passport.deserializeUser(this.userModel.deserializeUser());\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/auth/local.strategy.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in server/auth/local.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import { Strategy } from \"passport-local\";\nimport { Model } from \"mongoose\";\nimport { Injectable } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { User, UserDocument } from \"../users/schemas/user.schema\";\nimport { InjectModel } from \"@nestjs/mongoose\";\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n    constructor(\n        @InjectModel(User.name) private userModel: Model\n    ) {\n        // @ts-ignore\n        super({ usernameField: \"email\" }, userModel.authenticate());\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Logger.html":{"url":"classes/Logger.html","title":"class - Logger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Logger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/logger.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            LoggerService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                log\n                            \n                            \n                                verbose\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger)\n                    \n                \n                        \n                            \n                                Defined in server/logger.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in server/logger.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(message: any, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in server/logger.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: any, trace?: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in server/logger.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    trace\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(message)\n                \n            \n\n\n            \n                \n                    Defined in server/logger.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verbose\n                        \n                    \n                \n            \n            \n                \nverbose(message: any, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in server/logger.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(message: any, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in server/logger.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { LoggerService } from \"@nestjs/common\";\n\nexport default class Logger implements LoggerService {\n    private logger: any;\n    constructor(logger) {\n        this.logger = logger;\n    }\n\n    log(message) {\n        this.logger.log(\"info\", message);\n    }\n\n    debug(message: any, context?: string): any {\n        this.logger.log(\"debug\", message);\n    }\n\n    error(message: any, trace?: string, context?: string): any {\n        this.logger.log(\"error\", message + trace);\n    }\n\n    verbose(message: any, context?: string): any {\n        this.logger.log(\"verbose\", message);\n    }\n\n    warn(message: any, context?: string): any {\n        this.logger.log(\"warn\", message);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotFoundFilter.html":{"url":"classes/NotFoundFilter.html","title":"class - NotFoundFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotFoundFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/filters/not-found.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                Filters out not found exceptions and redirect to our custom 404 page, avoiding the default json error message\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: NotFoundException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in server/filters/not-found.filter.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            NotFoundException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, ExceptionFilter, NotFoundException } from '@nestjs/common'\nimport { Response } from 'express';\n\n/**\n * Filters out not found exceptions and redirect to our custom 404 page, avoiding the default json error message\n */\n@Catch(NotFoundException)\nexport class NotFoundFilter implements ExceptionFilter {\n  catch(exception: NotFoundException, host: ArgumentsHost) {\n    const context = host.switchToHttp();\n    const response = context.getResponse();\n\n    response.redirect('/404')\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ParserModule.html":{"url":"modules/ParserModule.html","title":"module - ParserModule","body":"\n                   \n\n\n\n\n    Modules\n    ParserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ParserModule\n\n\n\ncluster_ParserModule_exports\n\n\n\ncluster_ParserModule_providers\n\n\n\n\nParserService \n\nParserService \n\n\n\nParserModule\n\nParserModule\n\nParserService  -->\n\nParserModule->ParserService \n\n\n\n\n\nParserService\n\nParserService\n\nParserModule -->\n\nParserService->ParserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/parser/parser.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ParserService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ParserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ParserService } from \"./parser.service\";\nimport { Module } from \"@nestjs/common\";\n\n@Module({\n    exports: [ParserService],\n    providers: [ParserService],\n})\nexport class ParserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParserService.html":{"url":"injectables/ParserService.html","title":"injectable - ParserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/parser/parser.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                nlpOptions\n                            \n                            \n                                paragraphSequence\n                            \n                            \n                                sentenceSequence\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createParagraphId\n                            \n                            \n                                createSentenceId\n                            \n                            \n                                parse\n                            \n                            \n                                parseSentence\n                            \n                            \n                                postProcessSentences\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createParagraphId\n                        \n                    \n                \n            \n            \n                \ncreateParagraphId()\n                \n            \n\n\n            \n                \n                    Defined in server/parser/parser.service.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createSentenceId\n                        \n                    \n                \n            \n            \n                \ncreateSentenceId()\n                \n            \n\n\n            \n                \n                    Defined in server/parser/parser.service.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parse\n                        \n                    \n                \n            \n            \n                \nparse(content: string)\n                \n            \n\n\n            \n                \n                    Defined in server/parser/parser.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { object: {}; text: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parseSentence\n                        \n                    \n                \n            \n            \n                \nparseSentence(sentenceContent)\n                \n            \n\n\n            \n                \n                    Defined in server/parser/parser.service.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentenceContent\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { type: string; props: { id: number; \"data-hash\": any; }; content: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postProcessSentences\n                        \n                    \n                \n            \n            \n                \npostProcessSentences(sentences)\n                \n            \n\n\n            \n                \n                    Defined in server/parser/parser.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentences\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        nlpOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : { trim:true }\n                    \n                \n                    \n                        \n                                Defined in server/parser/parser.service.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        paragraphSequence\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in server/parser/parser.service.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sentenceSequence\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in server/parser/parser.service.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nconst md5 = require(\"md5\");\nconst nlp = require('compromise')\nnlp.extend(require('compromise-sentences'))\nnlp.extend(require('compromise-paragraphs'))\n\n// TODO: regex for future rules\n// const alphabets = /([A-Za-z])/g;\nconst prefixes = /(Mr|St|Mrs|Ms|Dr)[.]/g;\nconst phdRegex = /Ph\\.D\\./g;\n// const suffixes = \"(Inc|Ltd|Jr|Sr|Co)\";\n// const starters = /(Mr|Mrs|Ms|Dr|He\\s|She\\s|It\\s|They\\s|Their\\s|Our\\s|We\\s|But\\s|However\\s|That\\s|This\\s|Wherever)/g;\n// const acronyms = /([A-Z][.][A-Z][.](?:[A-Z][.])?)/g;\n// const websites = /[.](com|net|org|io|gov)/g;\n\n@Injectable()\nexport class ParserService {\n    paragraphSequence: number;\n    sentenceSequence: number;\n    nlpOptions: object = { trim:true };\n\n    parse(content: string) {\n        this.paragraphSequence = 0;\n        this.sentenceSequence = 0;\n        const result = [];\n        const nlpContent = nlp(content);\n        const paragraphs = nlpContent.paragraphs();\n\n        paragraphs.forEach((paragraph) => {\n            const paragraphId = this.createParagraphId();\n            const sentences = this.postProcessSentences(paragraph.sentences());\n\n            if (sentences && sentences.length) {\n                result.push({\n                    type: \"paragraph\",\n                    props: {\n                        id: paragraphId,\n                    },\n                    content: sentences.map((sentence) => this.parseSentence(sentence)),\n                });\n            }\n        });\n\n        return {\n            object: result,\n            text: nlpContent.text(this.nlpOptions),\n        };\n    }\n\n    postProcessSentences(sentences) {\n        let newSentences = [];\n        sentences.forEach(sentence => {\n            const sentenceText = sentence.text(this.nlpOptions);\n            // Extract semicolon sentences\n            let semicolonSentences = sentenceText.split(\";\");\n            if (sentenceText.includes(\";\")) {\n                semicolonSentences = semicolonSentences.map(\n                    (semicolonSentence, index) => {\n                        return index !== (semicolonSentences.length - 1)\n                            ? `${semicolonSentence};`.trim()\n                            : semicolonSentence.trim();\n                    }\n                );\n            }\n            newSentences = newSentences.concat(semicolonSentences);\n        });\n        return newSentences;\n    }\n\n    parseSentence(sentenceContent) {\n        const sentenceId = this.createSentenceId();\n        const sentenceDataHash = md5(\n            `${this.paragraphSequence}${this.sentenceSequence}${sentenceContent}`\n        );\n\n        return {\n            type: \"sentence\",\n            props: {\n                id: sentenceId,\n                \"data-hash\": sentenceDataHash,\n            },\n            content: sentenceContent,\n        };\n    }\n\n    createParagraphId() {\n        this.paragraphSequence++;\n        return this.paragraphSequence;\n    }\n\n    createSentenceId() {\n        this.sentenceSequence++;\n        return this.sentenceSequence;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Personality.html":{"url":"classes/Personality.html","title":"class - Personality","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Personality\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/personality/schemas/personality.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                name\n                            \n                            \n                                slug\n                            \n                            \n                                wikidata\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/schemas/personality.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/schemas/personality.schema.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/schemas/personality.schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wikidata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true, sparse: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/schemas/personality.schema.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { softDeletePlugin } from 'mongoose-softdelete-typescript';\nimport * as mongoose from \"mongoose\";\n\nexport type PersonalityDocument = Personality & mongoose.Document;\n\n@Schema({ toJSON: { virtuals: true }, toObject: { virtuals: true } })\nexport class Personality {\n    @Prop({ required: true })\n    name: string;\n\n    @Prop({ required: true })\n    slug: string;\n\n    @Prop({ required: true })\n    description: string;\n\n    @Prop({ unique: true, sparse: true })\n    wikidata: string;\n}\n\n\nconst PersonalitySchemaRaw = SchemaFactory.createForClass(Personality);\n\nPersonalitySchemaRaw.virtual('claims', {\n    ref: 'Claim',\n    localField: '_id',\n    foreignField: 'personality'\n});\n\nPersonalitySchemaRaw.plugin(softDeletePlugin)\n\nexport const PersonalitySchema = PersonalitySchemaRaw;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PersonalityController.html":{"url":"controllers/PersonalityController.html","title":"controller - PersonalityController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PersonalityController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/personality/personality.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                getReviewStats\n                            \n                            \n                                    Async\n                                listAll\n                            \n                            \n                                    Public\n                                    Async\n                                personalityCreateSearch\n                            \n                            \n                                    Public\n                                    Async\n                                personalityHistoryPage\n                            \n                            \n                                    Public\n                                    Async\n                                personalityList\n                            \n                            \n                                    Public\n                                    Async\n                                personalityPage\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createPersonality: CreatePersonality)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Post('api/personality')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createPersonality\n                                    \n                                                CreatePersonality\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(personalityId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Delete('api/personality/:id')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    personalityId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { message: string; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(personalityId, query)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('api/personality/:id')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    personalityId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getReviewStats\n                        \n                    \n                \n            \n            \n                \ngetReviewStats(personalityId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('api/personality/:id/reviews')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    personalityId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAll(getPersonalities: GetPersonalities)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('api/personality')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    getPersonalities\n                                    \n                                                GetPersonalities\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        personalityCreateSearch\n                        \n                    \n                \n            \n            \n                \n                    \n                    personalityCreateSearch(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Get('personality/search')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        personalityHistoryPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    personalityHistoryPage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('personality/:slug/history')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        personalityList\n                        \n                    \n                \n            \n            \n                \n                    \n                    personalityList(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('personality')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        personalityPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    personalityPage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('personality/:slug')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(personalityId, body)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Put('api/personality/:id')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    personalityId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Logger,\n    Param,\n    Post,\n    Put,\n    Query,\n    UseGuards,\n    Req,\n    Res\n} from \"@nestjs/common\";\nimport { parse } from \"url\";\nimport { Request, Response } from \"express\";\nimport { ViewService } from \"../view/view.service\";\nimport { PersonalityService } from \"./personality.service\";\nimport { SessionGuard } from \"../auth/session.guard\";\nimport { GetPersonalities } from \"./dto/get-personalities.dto\";\nimport { CreatePersonality } from \"./dto/create-personality.dto\";\n\n@Controller()\nexport class PersonalityController {\n    private readonly logger = new Logger(\"PersonalityController\");\n    constructor(\n        private personalityService: PersonalityService,\n        private viewService: ViewService\n    ) {}\n\n    @Get(\"api/personality\")\n    async listAll(@Query() getPersonalities: GetPersonalities) {\n        return this.personalityService.combinedListAll(getPersonalities);\n    }\n\n    @UseGuards(SessionGuard)\n    @Post(\"api/personality\")\n    async create(@Body() createPersonality: CreatePersonality) {\n        try {\n            return this.personalityService.create(createPersonality);\n        } catch (error) {\n            if (\n                error.name === \"MongoError\" &&\n                error.keyPattern &&\n                error.keyPattern.wikidata\n            ) {\n                error.message = `Personality with wikidata id ${error.keyValue.wikidata} already exists`;\n            }\n            this.logger.error(error);\n        }\n    }\n\n    @Get(\"api/personality/:id\")\n    async get(@Param(\"id\") personalityId, @Query() query) {\n        return this.personalityService\n            .getById(personalityId, query.language) // TODO: get language from request object in the future\n            .catch((err) => {\n                this.logger.error(err);\n            });\n    }\n\n    @UseGuards(SessionGuard)\n    @Put(\"api/personality/:id\")\n    async update(@Param(\"id\") personalityId, @Body() body) {\n        return this.personalityService.update(personalityId, body)\n    }\n\n    @UseGuards(SessionGuard)\n    @Delete(\"api/personality/:id\")\n    delete(@Param(\"id\") personalityId) {\n        try {\n            this.personalityService.delete(personalityId);\n            return { message: \"Personality successfully deleted\" };\n        } catch (error) {\n            this.logger.error(error);\n        }\n    }\n\n    @Get(\"api/personality/:id/reviews\")\n    getReviewStats(@Param(\"id\") personalityId) {\n        return this.personalityService\n            .getReviewStats(personalityId)\n            .catch((err) => {\n                this.logger.error(err);\n            });\n    }\n\n    @UseGuards(SessionGuard)\n    @Get(\"personality/search\")\n    public async personalityCreateSearch(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/personality-create-search\",\n                Object.assign(parsedUrl.query)\n            );\n    }\n\n    @Get(\"personality/:slug\")\n    public async personalityPage(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n\n        const personality = await this.personalityService.getBySlug(\n            req.params.slug,\n            // @ts-ignore\n            req.language\n        );\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/personality-page\",\n                Object.assign(parsedUrl.query, { personality })\n            );\n    }\n\n    @Get(\"personality\")\n    public async personalityList(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/personality-list\",\n                Object.assign(parsedUrl.query, {})\n            );\n    }\n\n    @Get(\"personality/:slug/history\")\n    public async personalityHistoryPage(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n\n        const personality = await this.personalityService.getBySlug(\n            req.params.slug\n        );\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/history-page\",\n                Object.assign(parsedUrl.query, { targetId: personality._id, targetModel: \"personality\" })\n            );\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PersonalityModule.html":{"url":"modules/PersonalityModule.html","title":"module - PersonalityModule","body":"\n                   \n\n\n\n\n    Modules\n    PersonalityModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PersonalityModule\n\n\n\ncluster_PersonalityModule_providers\n\n\n\ncluster_PersonalityModule_imports\n\n\n\ncluster_PersonalityModule_exports\n\n\n\n\nClaimReviewModule\n\nClaimReviewModule\n\n\n\nPersonalityModule\n\nPersonalityModule\n\nPersonalityModule -->\n\nClaimReviewModule->PersonalityModule\n\n\n\n\n\nClaimRevisionModule\n\nClaimRevisionModule\n\nPersonalityModule -->\n\nClaimRevisionModule->PersonalityModule\n\n\n\n\n\nHistoryModule\n\nHistoryModule\n\nPersonalityModule -->\n\nHistoryModule->PersonalityModule\n\n\n\n\n\nViewModule\n\nViewModule\n\nPersonalityModule -->\n\nViewModule->PersonalityModule\n\n\n\n\n\nWikidataModule\n\nWikidataModule\n\nPersonalityModule -->\n\nWikidataModule->PersonalityModule\n\n\n\n\n\nPersonalityService \n\nPersonalityService \n\nPersonalityService  -->\n\nPersonalityModule->PersonalityService \n\n\n\n\n\nPersonalityService\n\nPersonalityService\n\nPersonalityModule -->\n\nPersonalityService->PersonalityModule\n\n\n\n\n\nUtilService\n\nUtilService\n\nPersonalityModule -->\n\nUtilService->PersonalityModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/personality/personality.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PersonalityService\n                        \n                        \n                            UtilService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PersonalityController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClaimReviewModule\n                        \n                        \n                            ClaimRevisionModule\n                        \n                        \n                            HistoryModule\n                        \n                        \n                            ViewModule\n                        \n                        \n                            WikidataModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PersonalityService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PersonalityService } from \"./personality.service\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { Personality, PersonalitySchema } from \"./schemas/personality.schema\";\nimport { UtilService } from \"../util\";\nimport { WikidataModule } from \"../wikidata/wikidata.module\";\nimport { ClaimReviewModule } from \"../claim-review/claim-review.module\";\nimport { ClaimRevisionModule } from \"../claim-revision/claim-revision.module\";\nimport { HistoryModule } from \"../history/history.module\";\nimport { PersonalityController } from \"./personality.controller\";\nimport Logger from \"../logger\";\nimport { ViewModule } from \"../view/view.module\";\n\nconst PersonalityModel = MongooseModule.forFeature([\n    {\n        name: Personality.name,\n        schema: PersonalitySchema,\n    },\n]);\n\n@Module({\n    imports: [\n        PersonalityModel,\n        WikidataModule,\n        ClaimReviewModule,\n        ClaimRevisionModule,\n        HistoryModule,\n        ViewModule\n    ],\n    exports: [PersonalityService],\n    providers: [UtilService, PersonalityService, Logger],\n    controllers: [PersonalityController],\n})\nexport class PersonalityModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PersonalityService.html":{"url":"injectables/PersonalityService.html","title":"injectable - PersonalityService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PersonalityService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/personality/personality.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                    Readonly\n                                optionsToUpdate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                combinedListAll\n                            \n                            \n                                count\n                            \n                            \n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                extractClaimWithTextSummary\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getBySlug\n                            \n                            \n                                    Async\n                                getReviewStats\n                            \n                            \n                                    Async\n                                listAll\n                            \n                            \n                                    Async\n                                postProcess\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                verifyInputsQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(req: Request, PersonalityModel, claimReview: ClaimReviewService, history: HistoryService, wikidata: WikidataService, util: UtilService)\n                    \n                \n                        \n                            \n                                Defined in server/personality/personality.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        req\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        PersonalityModel\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        claimReview\n                                                  \n                                                        \n                                                                        ClaimReviewService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        history\n                                                  \n                                                        \n                                                                        HistoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        wikidata\n                                                  \n                                                        \n                                                                        WikidataService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        util\n                                                  \n                                                        \n                                                                        UtilService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        combinedListAll\n                        \n                    \n                \n            \n            \n                \ncombinedListAll(query)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:269\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        count\n                        \n                    \n                \n            \n            \n                \ncount(query: any)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:246\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(personality)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:82\n                \n            \n\n\n            \n                \n                    This function will create a new personality and save it to the dataBase.\nAlso creates a History Module that tracks creation of personalities.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    personality\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        PersonalityBody received of the client.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Return a new personality.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(personalityId)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:231\n                \n            \n\n\n            \n                \n                    This function does a soft deletion, doesn't delete claim in DataBase,\nbut omit its in the front page\nAlso creates a History Module that tracks deletion of personalities.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    personalityId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Personality Id which wants to delete\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        Returns the personality with the param isDeleted equal to true\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        extractClaimWithTextSummary\n                        \n                    \n                \n            \n            \n                \nextractClaimWithTextSummary(claims: any)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:250\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claims\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(personalityId, language: string)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    personalityId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"en\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getBySlug\n                        \n                    \n                \n            \n            \n                \n                    \n                    getBySlug(personalitySlug, language: string)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    personalitySlug\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"en\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getReviewStats\n                        \n                    \n                \n            \n            \n                \n                    \n                    getReviewStats(id)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:171\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAll(page, pageSize, order, query, language, withSuggestions)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    page\n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    pageSize\n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    order\n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    language\n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    withSuggestions\n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postProcess\n                        \n                    \n                \n            \n            \n                \n                    \n                    postProcess(personality, language: string)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:146\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    personality\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"en\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(personalityId, newPersonalityBody)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:189\n                \n            \n\n\n            \n                \n                    This function overwrites personality data with the new data,\nkeeping data that has not changed.\nAlso creates a History Module that tracks updation of personalities.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    personalityId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Personality id which wants updated.\n\n                                    \n                                \n                                \n                                    newPersonalityBody\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        PersonalityBody received of the client.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        Return changed personality.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifyInputsQuery\n                        \n                    \n                \n            \n            \n                \nverifyInputsQuery(query)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:260\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"PersonalityService\")\n                    \n                \n                    \n                        \n                                Defined in server/personality/personality.service.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        optionsToUpdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n        new: true,\n        upsert: true,\n    }\n                    \n                \n                    \n                        \n                                Defined in server/personality/personality.service.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, Logger, Scope, NotFoundException } from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport { Model } from \"mongoose\";\nimport slugify from 'slugify'\nimport { Personality, PersonalityDocument } from \"./schemas/personality.schema\";\nimport { WikidataService } from \"../wikidata/wikidata.service\";\nimport { UtilService } from \"../util\";\nimport { ClaimReviewService } from \"../claim-review/claim-review.service\";\nimport { HistoryService } from \"../history/history.service\";\nimport { HistoryType, TargetModel } from \"../history/schema/history.schema\";\nimport { ISoftDeletedModel } from 'mongoose-softdelete-typescript';\nimport { REQUEST } from '@nestjs/core';\nimport { Request } from 'express';\n\n@Injectable({ scope: Scope.REQUEST })\nexport class PersonalityService {\n    private readonly logger = new Logger(\"PersonalityService\");\n    private readonly optionsToUpdate = {\n        new: true,\n        upsert: true,\n    };\n\n    constructor(\n        @Inject(REQUEST) private req: Request,\n        @InjectModel(Personality.name)\n        private PersonalityModel: ISoftDeletedModel & Model,\n        private claimReview: ClaimReviewService,\n        private history: HistoryService,\n        private wikidata: WikidataService,\n        private util: UtilService\n    ) {}\n    async listAll(\n        page,\n        pageSize,\n        order,\n        query,\n        language,\n        withSuggestions = false\n    ) {\n        let personalities;\n\n        if (order === 'random') {\n            // This line may cause a false positive in sonarCloud because if we remove the await, we cannot iterate through the results\n            personalities = await this.PersonalityModel.aggregate([\n                { $match: query },\n                { $sample: { size: pageSize } },\n            ])\n\n            \n        } else {\n            // This line may cause a false positive in sonarCloud because if we remove the await, we cannot iterate through the results\n            personalities = await this.PersonalityModel.find(query)\n                .skip(page * pageSize)\n                .limit(pageSize)\n                .sort({ _id: order })\n                .lean()\n        }\n\n        if (withSuggestions) {\n            const wbentities = await this.wikidata.queryWikibaseEntities(\n                query.name.$regex,\n                language\n            );\n            personalities = this.util.mergeObjectsInUnique(\n                [...wbentities, ...personalities],\n                \"wikidata\"\n            );\n        }\n        return Promise.all(\n            personalities.map(async (personality) => {\n                return await this.postProcess(personality, language);\n            })\n        );\n    }\n\n    /**\n     * This function will create a new personality and save it to the dataBase.\n     * Also creates a History Module that tracks creation of personalities.\n     * @param personality PersonalityBody received of the client.\n     * @returns Return a new personality.\n     */\n    create(personality) {\n        try {\n            personality.slug = slugify(personality.name, {\n                lower: true,     // convert to lower case, defaults to `false`\n                strict: true     // strip special characters except replacement, defaults to `false`\n            })\n            const newPersonality = new this.PersonalityModel(personality);\n            this.logger.log(\n                `Attempting to create new personality with data ${personality}`\n            );\n\n            const user = this.req.user\n\n            const history = this.history.getHistoryParams(\n                newPersonality._id,\n                TargetModel.Personality,\n                user,\n                HistoryType.Create,\n                personality\n            )\n\n            this.history.createHistory(history)\n\n            return newPersonality.save();\n        } catch (err) {}\n    }\n\n    async getById(personalityId, language = \"en\") {\n        const personality = await this.PersonalityModel.findById(\n            personalityId\n        ).populate({\n            path: \"claims\",\n            select: \"_id title content\",\n        });\n        this.logger.log(`Found personality ${personality._id}`);\n        return await this.postProcess(personality.toObject(), language);\n    }\n\n    async getBySlug(personalitySlug, language = \"en\") {\n        try {\n             // This line may cause a false positive in sonarCloud because if we remove the await, we cannot iterate through the results\n            const personality: any = await this.PersonalityModel.findOne({\n                slug: personalitySlug\n            }).populate({\n                path: \"claims\",\n                populate: {\n                    path: \"latestRevision\",\n                    select: \"_id title content\"\n                },\n                select: \"_id\",\n            });\n            personality.claims = await Promise.all(personality.claims.map((claim) => {\n                return {\n                    ...claim.lastestRevision,\n                    ...claim\n                }\n            })) \n            this.logger.log(`Found personality ${personality._id}`);\n            return await this.postProcess(personality.toObject(), language);\n        } catch {\n            throw new NotFoundException()\n        }\n    }\n\n    async postProcess(personality, language: string = \"en\") {\n        if (personality) {\n            // TODO: allow wikdiata resolver to fetch in batches\n            const wikidataExtract = await this.wikidata.fetchProperties({\n                wikidataId: personality.wikidata,\n                language,\n            });\n            // bail out if wikidata property is not allowed\n            if (wikidataExtract.isAllowedProp === false) {\n                return;\n            }\n            return Object.assign(\n                wikidataExtract,\n                personality, {\n                stats:\n                    personality._id &&\n                    (await this.getReviewStats(personality._id)),\n                claims:\n                    personality.claims &&\n                    this.extractClaimWithTextSummary(personality.claims),\n            });\n        }\n        return personality;\n    }\n\n    async getReviewStats(id) {\n        const personality = await this.PersonalityModel.findById(id);\n        const reviews = await this.claimReview.agreggateClassification({\n            personality: personality._id,\n            isDeleted: false,\n        });\n        this.logger.log(`Got stats ${reviews}`);\n        return this.util.formatStats(reviews, true);\n    }\n\n    /**\n     * This function overwrites personality data with the new data,\n     * keeping data that has not changed.\n     * Also creates a History Module that tracks updation of personalities.\n     * @param personalityId Personality id which wants updated.\n     * @param newPersonalityBody PersonalityBody received of the client.\n     * @returns Return changed personality.\n     */\n    async update(personalityId, newPersonalityBody) {\n        // eslint-disable-next-line no-useless-catch\n        if(newPersonalityBody.name) {\n            newPersonalityBody.slug = slugify(newPersonalityBody.name, {\n                lower: true,\n                strict: true\n            })\n        }\n        const personality = await this.getById(personalityId);\n        const previousPersonality = {...personality}\n        const newPersonality = Object.assign(personality, newPersonalityBody);\n        const personalityUpdate =\n            await this.PersonalityModel.findByIdAndUpdate(\n                personalityId,\n                newPersonality,\n                this.optionsToUpdate\n            );\n        this.logger.log(`Updated personality with data ${newPersonality}`);\n\n        const user = this.req.user;\n\n        const history =\n            this.history.getHistoryParams(\n                personalityId,\n                TargetModel.Personality,\n                user,\n                HistoryType.Update,\n                personalityUpdate,\n                previousPersonality\n            )\n        await this.history.createHistory(history)\n        \n        return personalityUpdate;\n    }\n\n    /**\n     * This function does a soft deletion, doesn't delete claim in DataBase,\n     * but omit its in the front page\n     * Also creates a History Module that tracks deletion of personalities.\n     * @param personalityId Personality Id which wants to delete\n     * @returns Returns the personality with the param isDeleted equal to true\n     */\n    async delete(personalityId) {\n        const user = this.req.user\n        const previousPersonality = await this.getById(personalityId)\n        const history = this.history.getHistoryParams(\n            personalityId,\n            TargetModel.Personality,\n            user,\n            HistoryType.Delete,\n            null,\n            previousPersonality\n        )\n        await this.history.createHistory(history)\n        return this.PersonalityModel.softDelete({ _id: personalityId });\n    }\n\n    count(query: any = {}) {\n        return this.PersonalityModel.countDocuments().where(query);\n    }\n\n    extractClaimWithTextSummary(claims: any) {\n        claims = Array.isArray(claims) ? claims : [claims];\n        return claims.map((claim) => {\n            if (!claim.content) {\n                return claim;\n            }\n            return { ...claim, content: claim.content.text };\n        });\n    }\n\n    verifyInputsQuery(query) {\n        const queryInputs = {};\n        if (query.name) {\n            // @ts-ignore\n            queryInputs.name = { $regex: query.name, $options: \"i\" };\n        }\n        return queryInputs;\n    }\n\n    combinedListAll(query) : any {\n        const { page = 0, pageSize = 10, order = \"asc\" } = query;\n        const queryInputs = this.verifyInputsQuery(query);\n\n        return Promise.all([\n            this.listAll(\n                page,\n                parseInt(pageSize, 10),\n                order,\n                queryInputs,\n                query.language,\n                query.withSuggestions\n            ),\n            this.count(queryInputs),\n        ])\n            .then(([personalities, totalPersonalities]) => {\n                const totalPages = Math.ceil(\n                    totalPersonalities / parseInt(pageSize, 10)\n                );\n\n                this.logger.log(\n                    `Found ${totalPersonalities} personalities. Page ${page} of ${totalPages}`\n                );\n\n                return {\n                    personalities,\n                    totalPersonalities,\n                    totalPages,\n                    page,\n                    pageSize,\n                };\n            })\n            .catch((error) => this.logger.error(error));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RootController.html":{"url":"controllers/RootController.html","title":"controller - RootController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RootController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/root/root.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                health\n                            \n                            \n                                robots\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        health\n                        \n                    \n                \n            \n            \n                \nhealth()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('health')\n                \n            \n\n            \n                \n                    Defined in server/root/root.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { status: string; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        robots\n                        \n                    \n                \n            \n            \n                \nrobots(res, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('robots.txt')\n                \n            \n\n            \n                \n                    Defined in server/root/root.controller.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Req, Res } from \"@nestjs/common\";\n\n@Controller(\"api\")\nexport class RootController {\n    @Get(\"robots.txt\")\n    robots(@Res() res, @Req() req) {\n        const host = req.protocol + \"://\" + req.get(\"host\");\n        res.type(\"text/plain\").end(\n            `User-agent: *\\nDisallow: /api\\nSitemap: ${host}/sitemap.xml`\n        );\n    }\n\n    @Get(\"health\")\n    health() {\n        return { status: \"ok\" };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/SessionGuard.html":{"url":"guards/SessionGuard.html","title":"guard - SessionGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    SessionGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                server/auth/session.guard.ts\n            \n\n\n\n\n                \n                Implements\n                \n                \n                                CanActivate\n                \n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in server/auth/session.guard.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n    CanActivate,\n    ExecutionContext,\n    UnauthorizedException,\n} from \"@nestjs/common\";\n\nexport class SessionGuard implements CanActivate {\n    canActivate(context: ExecutionContext): boolean | Promise {\n        const httpContext = context.switchToHttp();\n        const request = httpContext.getRequest();\n        const response = httpContext.getResponse();\n        try {\n            if (request.isAuthenticated && request.isAuthenticated()) {\n                return true;\n            } else {\n                if (request.url.startsWith(\"/api\")) {\n                    return false;\n                } else {\n                    response.redirect(\"/login\");\n                }\n            }\n        } catch (e) {\n            throw new UnauthorizedException();\n        }\n    }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SitemapController.html":{"url":"controllers/SitemapController.html","title":"controller - SitemapController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SitemapController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/sitemap/sitemap.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getSitemap\n                            \n                            \n                                    Async\n                                submitSitemap\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSitemap\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSitemap(res, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('sitemap.xml')@Header('Content-Type', 'text/xml')\n                \n            \n\n            \n                \n                    Defined in server/sitemap/sitemap.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitSitemap\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitSitemap(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Get('submit-sitemap')\n                \n            \n\n            \n                \n                    Defined in server/sitemap/sitemap.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    Header,\n    Request,\n    Res,\n    UseGuards,\n} from \"@nestjs/common\";\nimport { SessionGuard } from \"../auth/session.guard\";\nimport { SitemapService } from \"./sitemap.service\";\n\n@Controller(\"/\")\nexport class SitemapController {\n    constructor(private sitemapService: SitemapService) {}\n\n    @Get(\"sitemap.xml\")\n    @Header(\"Content-Type\", \"text/xml\")\n    async getSitemap(@Res() res, @Request() req) {\n        const sitemapXml = await this.sitemapService.getSitemap(\n            req.protocol + \"://\" + req.get(\"host\")\n        );\n        res.send(sitemapXml);\n    }\n\n    @UseGuards(SessionGuard)\n    @Get(\"submit-sitemap\")\n    async submitSitemap(@Request() req) {\n        return this.sitemapService.submitSitemap(\n            req.protocol + \"://\" + req.get(\"host\")\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SitemapModule.html":{"url":"modules/SitemapModule.html","title":"module - SitemapModule","body":"\n                   \n\n\n\n\n    Modules\n    SitemapModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SitemapModule\n\n\n\ncluster_SitemapModule_exports\n\n\n\ncluster_SitemapModule_providers\n\n\n\ncluster_SitemapModule_imports\n\n\n\n\nClaimModule\n\nClaimModule\n\n\n\nSitemapModule\n\nSitemapModule\n\nSitemapModule -->\n\nClaimModule->SitemapModule\n\n\n\n\n\nClaimReviewModule\n\nClaimReviewModule\n\nSitemapModule -->\n\nClaimReviewModule->SitemapModule\n\n\n\n\n\nPersonalityModule\n\nPersonalityModule\n\nSitemapModule -->\n\nPersonalityModule->SitemapModule\n\n\n\n\n\nSitemapService \n\nSitemapService \n\nSitemapService  -->\n\nSitemapModule->SitemapService \n\n\n\n\n\nSitemapService\n\nSitemapService\n\nSitemapModule -->\n\nSitemapService->SitemapModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/sitemap/sitemap.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SitemapService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SitemapController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClaimModule\n                        \n                        \n                            ClaimReviewModule\n                        \n                        \n                            PersonalityModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SitemapService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { SitemapController } from \"./sitemap.controller\";\nimport { PersonalityModule } from \"../personality/personality.module\";\nimport { ClaimModule } from \"../claim/claim.module\";\nimport { ClaimReviewModule } from \"../claim-review/claim-review.module\";\nimport { SitemapService } from \"./sitemap.service\";\n\n@Module({\n    imports: [PersonalityModule, ClaimModule, ClaimReviewModule],\n    controllers: [SitemapController],\n    providers: [SitemapService],\n    exports: [SitemapService],\n})\nexport class SitemapModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SitemapService.html":{"url":"injectables/SitemapService.html","title":"injectable - SitemapService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SitemapService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/sitemap/sitemap.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getSitemap\n                            \n                            \n                                    Async\n                                submitSitemap\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(personalityService: PersonalityService, claimService: ClaimService, claimReviewService: ClaimReviewService)\n                    \n                \n                        \n                            \n                                Defined in server/sitemap/sitemap.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        personalityService\n                                                  \n                                                        \n                                                                        PersonalityService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        claimService\n                                                  \n                                                        \n                                                                        ClaimService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        claimReviewService\n                                                  \n                                                        \n                                                                        ClaimReviewService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSitemap\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSitemap(hostname)\n                \n            \n\n\n            \n                \n                    Defined in server/sitemap/sitemap.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    hostname\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitSitemap\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitSitemap(hostname)\n                \n            \n\n\n            \n                \n                    Defined in server/sitemap/sitemap.service.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    hostname\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"SitemapService\")\n                    \n                \n                    \n                        \n                                Defined in server/sitemap/sitemap.service.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from \"@nestjs/common\";\nimport { SitemapStream, streamToPromise } from \"sitemap\";\nimport { PersonalityService } from \"../personality/personality.service\";\nimport { ClaimService } from \"../claim/claim.service\";\nimport { ClaimReviewService } from \"../claim-review/claim-review.service\";\nconst axios = require(\"axios\");\n\n@Injectable()\nexport class SitemapService {\n    constructor(\n        private personalityService: PersonalityService,\n        private claimService: ClaimService,\n        private claimReviewService: ClaimReviewService\n    ) {}\n    private readonly logger = new Logger(\"SitemapService\");\n\n    async getSitemap(hostname) {\n        const sites: any[] = [\n            { url: \"/\" },\n            { url: \"/home\" },\n            { url: \"/about\" },\n            { url: \"/privacy-policy\" },\n            { url: \"/code-of-conduct\" },\n            { url: \"/login\" },\n            { url: \"/profile\" },\n            { url: \"/personality\" },\n        ];\n\n        // TODO: Add a loop strategy that paginates the results to improve performance\n        const personalities: any[] = await this.personalityService.listAll(\n            0,\n            0,\n            \"asc\",\n            {},\n            \"pt\",\n            false\n        );\n\n        for (const personality of personalities) {\n            sites.push({ url: `/personality/${personality.slug}` });\n            const claims = await this.claimService.listAll(0, 0, \"asc\", {\n                personality: personality._id,\n            });\n\n            for (const claim of claims) {\n                sites.push({\n                    url: `/personality/${personality.slug}/claim/${claim.slug}`,\n                });\n                // This line may cause a false positive in sonarCloud because if we remove the await, we cannot iterate through the results\n                const reviews =\n                    await this.claimReviewService.getReviewsByClaimId(\n                        claim._id\n                    );\n                for (const review of reviews) {\n                    sites.push({\n                        url: `/personality/${personality.slug}/claim/${claim.slug}/sentence/${review._id}`,\n                        priority: 0.9,\n                    });\n                }\n            }\n        }\n        const sitemapStream = new SitemapStream({\n            hostname,\n        });\n        for (const site of sites) {\n            sitemapStream.write(site);\n        }\n        sitemapStream.end();\n\n        return streamToPromise(sitemapStream);\n    }\n\n    async submitSitemap(hostname) {\n        try {\n            await axios.get(\n                `https://google.com/ping?sitemap=${hostname}/sitemap.xml`\n            );\n            return \"Sitemap submitted\";\n        } catch (e) {\n            const message =\n                \"Error while submitting sitemap to search engine: \" + e.message;\n            this.logger.error(message);\n            return message;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Source.html":{"url":"classes/Source.html","title":"class - Source","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Source\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/source/schemas/source.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                classification\n                            \n                            \n                                description\n                            \n                            \n                                link\n                            \n                            \n                                targetId\n                            \n                            \n                                targetModel\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        classification\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({validate: undefined, message: tag => })\n                        \n                    \n                \n                    \n                        \n                                Defined in server/source/schemas/source.schema.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/source/schemas/source.schema.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        link\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/source/schemas/source.schema.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        targetId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, refPath: 'onModel'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/source/schemas/source.schema.ts:37\n                        \n                    \n\n            \n                \n                    Use Dynamic ref https://mongoosejs.com/docs/populate.html#dynamic-ref\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        targetModel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, enum: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/source/schemas/source.schema.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/source/schemas/source.schema.ts:50\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport * as mongoose from \"mongoose\";\nimport { User } from \"../../users/schemas/user.schema\";\n\nexport type SourceDocument = Source & mongoose.Document;\n\n@Schema()\nexport class Source {\n    @Prop({ required: true })\n    link: string;\n\n    @Prop({\n        validate: {\n            validator: (v) => {\n                return (\n                    [\"unclassified\", \"reliable\", \"unreliable\", \"fake\"].indexOf(\n                        v\n                    ) !== -1\n                );\n            },\n        },\n        message: (tag) => `${tag} is not a valid classification.`,\n    })\n    classification: string;\n\n    @Prop()\n    description: string;\n\n    /**\n     * Use Dynamic ref https://mongoosejs.com/docs/populate.html#dynamic-ref\n     */\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        refPath: \"onModel\",\n    })\n    targetId: mongoose.Types.ObjectId;\n\n    @Prop({\n        required: true,\n        enum: [\"Claim\", \"ClaimReview\"],\n    })\n    targetModel: string;\n\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"User\",\n    })\n    user: User;\n}\n\nexport const SourceSchema = SchemaFactory.createForClass(Source);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SourceController.html":{"url":"controllers/SourceController.html","title":"controller - SourceController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SourceController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/source/source.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getSourcesClaim\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getSourcesClaim\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSourcesClaim(params, getSources: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('api/source/:targetId')\n                \n            \n\n            \n                \n                    Defined in server/source/source.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    getSources\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Logger, Param, Query } from \"@nestjs/common\";\nimport { SourceService } from \"./source.service\";\n\n@Controller()\nexport class SourceController {\n    private readonly logger = new Logger(\"SourceController\");\n    constructor(private sourceService: SourceService) {}\n\n    @Get(\"api/source/:targetId\")\n    public async getSourcesClaim(@Param() params, @Query() getSources: any) {\n        const { targetId } = params;\n        const { page, order } = getSources;\n        const pageSize = parseInt(getSources.pageSize, 10)\n        return this.sourceService\n            .getByTargetId(targetId, page, pageSize, order)\n            .then((sources) => {\n                const totalSources = sources.length;\n                const totalPages = Math.ceil(\n                    totalSources / pageSize\n                );\n                this.logger.log(\n                    `Found ${totalSources} sources for targetId ${targetId}. Page ${page} of ${totalPages}`\n                );\n                return { sources, totalSources, totalPages, page, pageSize };\n            })\n            .catch();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SourceModule.html":{"url":"modules/SourceModule.html","title":"module - SourceModule","body":"\n                   \n\n\n\n\n    Modules\n    SourceModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SourceModule\n\n\n\ncluster_SourceModule_providers\n\n\n\ncluster_SourceModule_exports\n\n\n\n\nSourceService \n\nSourceService \n\n\n\nSourceModule\n\nSourceModule\n\nSourceService  -->\n\nSourceModule->SourceService \n\n\n\n\n\nSourceService\n\nSourceService\n\nSourceModule -->\n\nSourceService->SourceModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/source/source.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SourceService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SourceController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SourceService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { Source, SourceSchema } from \"./schemas/source.schema\";\nimport { SourceController } from \"./source.controller\";\nimport { SourceService } from \"./source.service\";\n\nconst SourceModel = MongooseModule.forFeature([\n    {\n        name: Source.name,\n        schema: SourceSchema,\n    },\n]);\n\n@Module({\n    imports: [SourceModel],\n    providers: [SourceService],\n    exports: [SourceService],\n    controllers: [SourceController],\n})\nexport class SourceModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SourceService.html":{"url":"injectables/SourceService.html","title":"injectable - SourceService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SourceService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/source/source.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                getByTargetId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(SourceModel: Model)\n                    \n                \n                        \n                            \n                                Defined in server/source/source.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        SourceModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data)\n                \n            \n\n\n            \n                \n                    Defined in server/source/source.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByTargetId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByTargetId(targetId, page, pageSize, order: string)\n                \n            \n\n\n            \n                \n                    Defined in server/source/source.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    targetId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    page\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    pageSize\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    order\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"asc\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Model, Types } from \"mongoose\";\nimport { SourceDocument, Source } from \"./schemas/source.schema\";\nimport { InjectModel } from \"@nestjs/mongoose\";\n\n@Injectable()\nexport class SourceService {\n    constructor(\n        @InjectModel(Source.name)\n        private SourceModel: Model\n    ) {}\n    async create(data) {\n        data.targetId = new Types.ObjectId(data.targetId);\n        data.user = new Types.ObjectId(data.user);\n        const source = new this.SourceModel(data);\n        await source.save();\n        return source;\n    }\n\n    async getByTargetId(targetId, page, pageSize, order = \"asc\") {\n        targetId = new Types.ObjectId(targetId);\n\n        return this.SourceModel.find({ targetId })\n        .skip(page * pageSize)\n        .limit(pageSize)\n        .sort({ _id: order });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StatsController.html":{"url":"controllers/StatsController.html","title":"controller - StatsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StatsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/stats/stats.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/stats\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHomeStats\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHomeStats\n                        \n                    \n                \n            \n            \n                \ngetHomeStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('home')\n                \n            \n\n            \n                \n                    Defined in server/stats/stats.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport {StatsService} from \"./stats.service\";\n\n@Controller(\"api/stats\")\nexport class StatsController {\n    constructor(\n        private statsService: StatsService,\n    ) {}\n    @Get(\"home\")\n    getHomeStats() {\n        return this.statsService.getHomeStats();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StatsModule.html":{"url":"modules/StatsModule.html","title":"module - StatsModule","body":"\n                   \n\n\n\n\n    Modules\n    StatsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StatsModule\n\n\n\ncluster_StatsModule_exports\n\n\n\ncluster_StatsModule_imports\n\n\n\ncluster_StatsModule_providers\n\n\n\n\nClaimModule\n\nClaimModule\n\n\n\nStatsModule\n\nStatsModule\n\nStatsModule -->\n\nClaimModule->StatsModule\n\n\n\n\n\nClaimReviewModule\n\nClaimReviewModule\n\nStatsModule -->\n\nClaimReviewModule->StatsModule\n\n\n\n\n\nPersonalityModule\n\nPersonalityModule\n\nStatsModule -->\n\nPersonalityModule->StatsModule\n\n\n\n\n\nStatsService \n\nStatsService \n\nStatsService  -->\n\nStatsModule->StatsService \n\n\n\n\n\nStatsService\n\nStatsService\n\nStatsModule -->\n\nStatsService->StatsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/stats/stats.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StatsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StatsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClaimModule\n                        \n                        \n                            ClaimReviewModule\n                        \n                        \n                            PersonalityModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StatsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { StatsController } from \"./stats.controller\";\nimport { PersonalityModule } from \"../personality/personality.module\";\nimport { ClaimModule } from \"../claim/claim.module\";\nimport { ClaimReviewModule } from \"../claim-review/claim-review.module\";\nimport {StatsService} from \"./stats.service\";\n\n@Module({\n    imports: [PersonalityModule, ClaimModule, ClaimReviewModule],\n    controllers: [StatsController],\n    providers: [StatsService],\n    exports: [StatsService]\n})\nexport class StatsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StatsService.html":{"url":"injectables/StatsService.html","title":"injectable - StatsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StatsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/stats/stats.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHomeStats\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(claimReviewService: ClaimReviewService, personalityService: PersonalityService, claimService: ClaimService)\n                    \n                \n                        \n                            \n                                Defined in server/stats/stats.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        claimReviewService\n                                                  \n                                                        \n                                                                        ClaimReviewService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        personalityService\n                                                  \n                                                        \n                                                                        PersonalityService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        claimService\n                                                  \n                                                        \n                                                                        ClaimService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHomeStats\n                        \n                    \n                \n            \n            \n                \ngetHomeStats()\n                \n            \n\n\n            \n                \n                    Defined in server/stats/stats.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Injectable} from \"@nestjs/common\";\nimport {ClaimReviewService} from \"../claim-review/claim-review.service\";\nimport {PersonalityService} from \"../personality/personality.service\";\nimport {ClaimService} from \"../claim/claim.service\";\n\n@Injectable()\nexport class StatsService {\n    constructor(\n        private claimReviewService: ClaimReviewService,\n        private personalityService: PersonalityService,\n        private claimService: ClaimService\n    ) {}\n\n    getHomeStats() {\n        return Promise.all([\n            this.claimService.count(),\n            this.personalityService.count(),\n            this.claimReviewService.count(),\n        ]).then((values) => {\n            return {\n                claims: values[0],\n                personalities: values[1],\n                reviews: values[2],\n            };\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateClaimDTO.html":{"url":"classes/UpdateClaimDTO.html","title":"class - UpdateClaimDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateClaimDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim/dto/update-claim.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/mapped-types\"\nimport { CreateClaimDTO } from \"./create-claim.dto\";\n\nexport class UpdateClaimDTO extends PartialType(CreateClaimDTO){}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/users/schemas/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstPasswordChanged\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/users/schemas/user.schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstPasswordChanged\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/users/schemas/user.schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/users/schemas/user.schema.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { Document } from \"mongoose\";\n\nexport interface UserDocument extends User, Document {\n    authenticate(): any;\n}\n\n@Schema()\nexport class User {\n    @Prop({ required: true })\n    name: string;\n\n    @Prop({ required: true, unique: true })\n    email: string;\n\n    @Prop({ required: true, default: false })\n    firstPasswordChanged: boolean;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserDocument.html":{"url":"interfaces/UserDocument.html","title":"interface - UserDocument","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserDocument\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/users/schemas/user.schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        User\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        authenticate\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate()\n                \n            \n\n\n            \n                \n                    Defined in server/users/schemas/user.schema.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { Document } from \"mongoose\";\n\nexport interface UserDocument extends User, Document {\n    authenticate(): any;\n}\n\n@Schema()\nexport class User {\n    @Prop({ required: true })\n    name: string;\n\n    @Prop({ required: true, unique: true })\n    email: string;\n\n    @Prop({ required: true, default: false })\n    firstPasswordChanged: boolean;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/users/users.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Public\n                                    Async\n                                personalityList\n                            \n                            \n                                    Public\n                                    Async\n                                profile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    changePassword(req, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Put('api/user/:id/password')\n                \n            \n\n            \n                \n                    Defined in server/users/users.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Get('api/user/validate')\n                \n            \n\n            \n                \n                    Defined in server/users/users.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Post('api/user/signin')\n                \n            \n\n            \n                \n                    Defined in server/users/users.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        personalityList\n                        \n                    \n                \n            \n            \n                \n                    \n                    personalityList(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('login')\n                \n            \n\n            \n                \n                    Defined in server/users/users.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        profile\n                        \n                    \n                \n            \n            \n                \n                    \n                    profile(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Get('profile')\n                \n            \n\n            \n                \n                    Defined in server/users/users.controller.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get, Logger,\n    Post, Put, Req,\n    Res,\n    UseGuards,\n} from \"@nestjs/common\";\nimport {Request, Response} from \"express\";\nimport { UsersService } from \"./users.service\";\nimport { LocalAuthGuard } from \"../auth/local-auth.guard\";\nimport { SessionGuard } from \"../auth/session.guard\";\nimport { parse } from \"url\";\nimport { ViewService } from \"../view/view.service\";\nimport * as mongoose from \"mongoose\";\n\n@Controller()\nexport class UsersController {\n    private readonly logger = new Logger(\"UserController\");\n    constructor(\n        private readonly usersService: UsersService,\n        private viewService: ViewService\n    ) {}\n\n    @UseGuards(SessionGuard)\n    @Get(\"api/user/validate\")\n    async findAll(@Req() req): Promise {\n        return { login: true, user: req.user };\n    }\n\n    @UseGuards(LocalAuthGuard)\n    @Post(\"api/user/signin\")\n    async login(@Req() req, @Res() res) {\n        return req.logIn(req.user, (err) => {\n            return res.send({ login: true });\n        });\n    }\n\n    @UseGuards(SessionGuard)\n    @Put(\"api/user/:id/password\")\n    async changePassword(@Req() req, @Res() res) {\n        const { currentPassword, newPassword, repeatedNewPassword } = req.body;\n\n        try {\n            if (req.params.id !== req.user._id.toString()) {\n                throw Error(\"Invalid user attempting to change password\");\n            }\n            if (newPassword !== repeatedNewPassword) {\n                throw Error(\"Repeated password doesn't match\");\n            }\n            this.usersService\n                .changePassword(new mongoose.Types.ObjectId(req.params.id), currentPassword, newPassword)\n                .then(() => {\n                    res.status(200).json({\n                        success: true,\n                        message: \"Password reset successful\"\n                    });\n                }).catch(e => {\n                    this.logger.error(e);\n                    res.status(500).json({ message: e.message });\n                });\n        } catch (e) {\n            this.logger.error(e);\n            res.status(500).json({ message: e.message });\n        }\n    }\n\n    @Get(\"login\")\n    public async personalityList(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/login\",\n                Object.assign(parsedUrl.query, {})\n            );\n    }\n\n    @UseGuards(SessionGuard)\n    @Get(\"profile\")\n    public async profile(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/profile-page\",\n                Object.assign(parsedUrl.query, {})\n            );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nViewModule\n\nViewModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nViewModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ViewModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { User, UserSchema } from \"./schemas/user.schema\";\nimport { UsersService } from \"./users.service\";\nimport { UsersController } from \"./users.controller\";\nimport { ViewModule } from \"../view/view.module\";\n\nconst UserModel = MongooseModule.forFeatureAsync([\n    {\n        name: User.name,\n        useFactory: () => {\n            const schema = UserSchema;\n            schema.plugin(require(\"passport-local-mongoose\"), {\n                usernameField: \"email\",\n            });\n            return schema;\n        },\n    },\n]);\n\n@Module({\n    imports: [UserModel, ViewModule],\n    exports: [UsersService, UserModel],\n    controllers: [UsersController],\n    providers: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(UserModel: Model)\n                    \n                \n                        \n                            \n                                Defined in server/users/users.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        UserModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    changePassword(userId, currentPassword, newPassword)\n                \n            \n\n\n            \n                \n                    Defined in server/users/users.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentPassword\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newPassword\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in server/users/users.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(userId)\n                \n            \n\n\n            \n                \n                    Defined in server/users/users.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(user)\n                \n            \n\n\n            \n                \n                    Defined in server/users/users.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"UserService\")\n                    \n                \n                    \n                        \n                                Defined in server/users/users.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Model } from \"mongoose\";\nimport {Injectable, Logger} from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport { User, UserDocument } from \"./schemas/user.schema\";\n\n@Injectable()\nexport class UsersService {\n    private readonly logger = new Logger(\"UserService\");\n    constructor(\n        @InjectModel(User.name) private UserModel: Model\n    ) {}\n\n    async findAll(): Promise {\n        return this.UserModel.find().exec();\n    }\n\n    register(user) {\n        // @ts-ignore\n        return this.UserModel.register(\n            new this.UserModel(user),\n            user.password\n        );\n    }\n\n    async getById(userId) {\n        const user = await this.UserModel.findById(userId);\n        this.logger.log(`Found user ${user._id}`);\n        return user;\n    }\n\n    async changePassword(userId, currentPassword, newPassword) {\n        const user = await this.getById(userId);\n        // @ts-ignore\n        return user.changePassword(currentPassword, newPassword).then(() => {\n            if (user.firstPasswordChanged === false) {\n                this.logger.log(`User ${user._id} changed first password`);\n                user.firstPasswordChanged = true;\n            }\n            this.logger.log(`User ${user._id} changed password`);\n            user.save();\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UtilService.html":{"url":"injectables/UtilService.html","title":"injectable - UtilService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UtilService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/util.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                formatStats\n                            \n                            \n                                mergeObjectsInUnique\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        formatStats\n                        \n                    \n                \n            \n            \n                \nformatStats(reviews, slice)\n                \n            \n\n\n            \n                \n                    Defined in server/util.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    reviews\n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    slice\n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { total: any; reviews: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mergeObjectsInUnique\n                        \n                    \n                \n            \n            \n                \nmergeObjectsInUnique(array: T[], property: any)\n                \n            \n\n\n            \n                \n                    Defined in server/util.ts:26\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    https://medium.com/javascript-in-plain-english/javascript-merge-duplicate-objects-in-array-of-objects-9a76c3a1c35c\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    array\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    property\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\n@Injectable()\nexport class UtilService {\n    formatStats(reviews, slice = false) {\n        const total = reviews.reduce((agg, review) => {\n            agg += review.count;\n            return agg;\n        }, 0);\n        const result = reviews.map((review) => {\n            const percentage = (review.count / total) * 100;\n            return {\n                _id: review._id,\n                percentage: percentage.toFixed(0),\n                count: review.count,\n            };\n        });\n        return { total, reviews: slice ? result.slice(0, 3) : result };\n    }\n\n    /**\n     * https://medium.com/javascript-in-plain-english/javascript-merge-duplicate-objects-in-array-of-objects-9a76c3a1c35c\n     * @param array\n     * @param property\n     */\n    mergeObjectsInUnique(array: T[], property: any): T[] {\n        const newArray = new Map();\n\n        array.forEach((item: T) => {\n            const propertyValue = item[property];\n            newArray.has(propertyValue)\n                ? newArray.set(propertyValue, {\n                      ...item,\n                      ...newArray.get(propertyValue),\n                  })\n                : newArray.set(propertyValue, item);\n        });\n\n        return Array.from(newArray.values());\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ViewController.html":{"url":"controllers/ViewController.html","title":"controller - ViewController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ViewController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/view/view.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                assets\n                            \n                            \n                                    Public\n                                    Async\n                                codeOfConductPage\n                            \n                            \n                                    Async\n                                handler\n                            \n                            \n                                    Public\n                                    Async\n                                show404\n                            \n                            \n                                    Public\n                                    Async\n                                showAboutPage\n                            \n                            \n                                    Public\n                                    Async\n                                showHome\n                            \n                            \n                                    Public\n                                    Async\n                                showPrivacyPolicyPage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        assets\n                        \n                    \n                \n            \n            \n                \n                    \n                    assets(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('_next*')\n                \n            \n\n            \n                \n                    Defined in server/view/view.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        codeOfConductPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    codeOfConductPage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('code-of-conduct')\n                \n            \n\n            \n                \n                    Defined in server/view/view.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handler\n                        \n                    \n                \n            \n            \n                \n                    \n                    handler(req: Request, res: Response)\n                \n            \n\n\n            \n                \n                    Defined in server/view/view.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        show404\n                        \n                    \n                \n            \n            \n                \n                    \n                    show404(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('404')\n                \n            \n\n            \n                \n                    Defined in server/view/view.controller.ts:74\n                \n            \n\n\n            \n                \n                    Redirects to our custom 404 page.\nThe render404() method was not used here as it conflicts with our i18n strategy.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        showAboutPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    showAboutPage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('about')\n                \n            \n\n            \n                \n                    Defined in server/view/view.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        showHome\n                        \n                    \n                \n            \n            \n                \n                    \n                    showHome(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in server/view/view.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        showPrivacyPolicyPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    showPrivacyPolicyPage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('privacy-policy')\n                \n            \n\n            \n                \n                    Defined in server/view/view.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Res, Req } from \"@nestjs/common\";\nimport { Request, Response } from \"express\";\nimport { parse } from \"url\";\nimport { ViewService } from \"./view.service\";\n\n@Controller(\"/\")\nexport class ViewController {\n    constructor(private viewService: ViewService) {}\n\n    async handler(req: Request, res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n\n        await this.viewService\n            .getNextServer()\n            .render(req, res, parsedUrl.pathname, parsedUrl.query);\n    }\n\n    @Get()\n    public async showHome(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n\n        await this.viewService\n            .getNextServer()\n            .render(req, res, \"/landing-page\", Object.assign(parsedUrl.query));\n    }\n\n    @Get(\"about\")\n    public async showAboutPage(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n\n        await this.viewService\n            .getNextServer()\n            .render(req, res, \"/about-page\", Object.assign(parsedUrl.query));\n    }\n\n    @Get(\"privacy-policy\")\n    public async showPrivacyPolicyPage(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n\n        await this.viewService\n            .getNextServer()\n            .render(req, res, \"/privacy-policy-page\", Object.assign(parsedUrl.query));\n    }\n\n    @Get(\"code-of-conduct\")\n    public async codeOfConductPage(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n\n        await this.viewService\n            .getNextServer()\n            .render(req, res, \"/code-of-conduct-page\", Object.assign(parsedUrl.query));\n    }\n\n    @Get(\"_next*\")\n    public async assets(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n\n        await this.viewService\n            .getNextServer()\n            .render(req, res, parsedUrl.pathname, parsedUrl.query);\n    }\n\n    /**\n     * Redirects to our custom 404 page.\n     * The render404() method was not used here as it conflicts with our i18n strategy.\n     */\n    @Get(\"404\")\n    public async show404(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n\n        await this.viewService\n            .getNextServer()\n            .render(req,res, '/404-page', Object.assign(parsedUrl.query))\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ViewModule.html":{"url":"modules/ViewModule.html","title":"module - ViewModule","body":"\n                   \n\n\n\n\n    Modules\n    ViewModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ViewModule\n\n\n\ncluster_ViewModule_exports\n\n\n\ncluster_ViewModule_providers\n\n\n\n\nViewService \n\nViewService \n\n\n\nViewModule\n\nViewModule\n\nViewService  -->\n\nViewModule->ViewService \n\n\n\n\n\nViewService\n\nViewService\n\nViewModule -->\n\nViewService->ViewModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/view/view.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ViewService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ViewController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ViewService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ViewController } from \"./view.controller\";\nimport { ViewService } from \"./view.service\";\n\n@Module({\n    imports: [],\n    providers: [ViewService],\n    controllers: [ViewController],\n    exports: [ViewService]\n})\nexport class ViewModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ViewService.html":{"url":"injectables/ViewService.html","title":"injectable - ViewService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ViewService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/view/view.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getNextServer\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in server/view/view.service.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getNextServer\n                        \n                    \n                \n            \n            \n                \ngetNextServer()\n                \n            \n\n\n            \n                \n                    Defined in server/view/view.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     NextServer\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in server/view/view.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"ViewService\")\n                    \n                \n                    \n                        \n                                Defined in server/view/view.service.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     NextServer\n\n                    \n                \n                    \n                        \n                                Defined in server/view/view.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {Injectable, Logger, OnModuleInit} from \"@nestjs/common\";\nimport createServer from \"next\";\nimport { NextServer } from \"next/dist/server/next\";\n\n@Injectable()\nexport class ViewService implements OnModuleInit {\n    private server: NextServer;\n    private readonly logger = new Logger(\"ViewService\");\n\n    constructor() {}\n\n    async onModuleInit(): Promise {\n        try {\n            this.server = await createServer({\n                dev: process.env.ENVIRONMENT === \"watch-dev\",\n                dir: \"./\",\n            });\n            await this.server.prepare();\n        } catch (error) {\n            this.logger.error(\"Failed to load NextServer\", error);\n        }\n    }\n\n    getNextServer(): NextServer {\n        return this.server;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WikidataCache.html":{"url":"classes/WikidataCache.html","title":"class - WikidataCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WikidataCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/wikidata/schemas/wikidata.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                language\n                            \n                            \n                                props\n                            \n                            \n                                wikidataId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/wikidata/schemas/wikidata.schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/wikidata/schemas/wikidata.schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        props\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/wikidata/schemas/wikidata.schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wikidataId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/wikidata/schemas/wikidata.schema.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { Document } from \"mongoose\";\n\nexport type WikidataCacheDocument = WikidataCache & Document;\n\n@Schema()\nexport class WikidataCache {\n    @Prop({ required: true })\n    wikidataId: string;\n\n    @Prop({ required: true })\n    language: string;\n\n    @Prop({ type: Object, required: true })\n    props: object;\n\n    @Prop({ default: Date.now })\n    createdAt: Date;\n}\n\nexport const WikidataCacheSchema = SchemaFactory.createForClass(WikidataCache);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WikidataModule.html":{"url":"modules/WikidataModule.html","title":"module - WikidataModule","body":"\n                   \n\n\n\n\n    Modules\n    WikidataModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_WikidataModule\n\n\n\ncluster_WikidataModule_providers\n\n\n\ncluster_WikidataModule_exports\n\n\n\n\nWikidataService \n\nWikidataService \n\n\n\nWikidataModule\n\nWikidataModule\n\nWikidataService  -->\n\nWikidataModule->WikidataService \n\n\n\n\n\nWikidataService\n\nWikidataService\n\nWikidataModule -->\n\nWikidataService->WikidataModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/wikidata/wikidata.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            WikidataService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            WikidataService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { WikidataService } from \"./wikidata.service\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { WikidataCache, WikidataCacheSchema } from \"./schemas/wikidata.schema\";\n\nconst WikidataCacheModel = MongooseModule.forFeatureAsync([\n    {\n        name: WikidataCache.name,\n        useFactory: () => {\n            const wikidataCacheSchema = WikidataCacheSchema;\n            wikidataCacheSchema.index(\n                { wikidataId: 1, language: 1 },\n                { unique: true }\n            );\n            wikidataCacheSchema.index(\n                { createdAt: 1 },\n                { expireAfterSeconds: 86400 }\n            );\n            return wikidataCacheSchema;\n        },\n    },\n]);\n\n@Module({\n    imports: [WikidataCacheModel],\n    exports: [WikidataService],\n    providers: [WikidataService],\n})\nexport class WikidataModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WikidataService.html":{"url":"injectables/WikidataService.html","title":"injectable - WikidataService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WikidataService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/wikidata/wikidata.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                extractProperties\n                            \n                            \n                                extractValue\n                            \n                            \n                                    Async\n                                fetchProperties\n                            \n                            \n                                    Async\n                                getCommonsThumbURL\n                            \n                            \n                                getSiteLinkName\n                            \n                            \n                                queryWikibaseEntities\n                            \n                            \n                                    Async\n                                requestProperties\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(WikidataCache: Model)\n                    \n                \n                        \n                            \n                                Defined in server/wikidata/wikidata.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        WikidataCache\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        extractProperties\n                        \n                    \n                \n            \n            \n                \n                    \n                    extractProperties(wikidata, language: string)\n                \n            \n\n\n            \n                \n                    Defined in server/wikidata/wikidata.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    wikidata\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"en\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        extractValue\n                        \n                    \n                \n            \n            \n                \nextractValue(wikidata, property, language)\n                \n            \n\n\n            \n                \n                    Defined in server/wikidata/wikidata.service.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    wikidata\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    property\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    language\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        fetchProperties\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchProperties(params)\n                \n            \n\n\n            \n                \n                    Defined in server/wikidata/wikidata.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCommonsThumbURL\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCommonsThumbURL(imageTitle)\n                \n            \n\n\n            \n                \n                    Defined in server/wikidata/wikidata.service.ts:153\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imageTitle\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSiteLinkName\n                        \n                    \n                \n            \n            \n                \ngetSiteLinkName(language)\n                \n            \n\n\n            \n                \n                    Defined in server/wikidata/wikidata.service.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    language\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        queryWikibaseEntities\n                        \n                    \n                \n            \n            \n                \nqueryWikibaseEntities(query, language: string)\n                \n            \n\n\n            \n                \n                    Defined in server/wikidata/wikidata.service.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"en\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        requestProperties\n                        \n                    \n                \n            \n            \n                \n                    \n                    requestProperties(params)\n                \n            \n\n\n            \n                \n                    Defined in server/wikidata/wikidata.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Model } from \"mongoose\";\nimport { Injectable } from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport {\n    WikidataCache,\n    WikidataCacheDocument,\n} from \"./schemas/wikidata.schema\";\n\nconst axios = require(\"axios\");\n\nconst languageVariantMap = {\n    \"pt-br\": \"pt\",\n};\n\n@Injectable()\nexport class WikidataService {\n    constructor(\n        @InjectModel(WikidataCache.name)\n        private WikidataCache: Model\n    ) {}\n\n    async fetchProperties(params) {\n        const wikidataCache = await this.WikidataCache.findOne({\n            wikidataId: params.wikidataId,\n            language: params.language,\n        }).exec();\n        if (!wikidataCache) {\n            const props = await this.requestProperties(params);\n            const newWikidataCache = new this.WikidataCache({\n                ...params,\n                props,\n            });\n            newWikidataCache.save();\n            return props;\n        }\n        return wikidataCache.props;\n    }\n\n    async requestProperties(params) {\n        const { data } = await axios.get(\"https://www.wikidata.org/w/api.php\", {\n            params: {\n                action: \"wbgetentities\",\n                ids: encodeURIComponent(params.wikidataId),\n                format: \"json\",\n                formatversion: \"2\",\n            },\n        });\n        const entities = data && data.entities;\n        return this.extractProperties(\n            entities && entities[params.wikidataId],\n            params.language\n        );\n    }\n\n    async extractProperties(wikidata, language = \"en\"): Promise {\n        const wikidataProps = {\n            name: undefined,\n            description: undefined,\n            isAllowedProp: undefined,\n            image: undefined,\n            wikipedia: undefined,\n        };\n        if (!wikidata) {\n            return {};\n        }\n\n        // Get label for the personality name\n        wikidataProps.name = this.extractValue(wikidata, \"labels\", language);\n\n        // Get description for the personality description\n        wikidataProps.description = this.extractValue(\n            wikidata,\n            \"descriptions\",\n            language\n        );\n\n        if (wikidata.claims.P31) {\n            const wikidataInstanceof =\n                wikidata.claims.P31[0].mainsnak.datavalue.value;\n            wikidataProps.isAllowedProp = wikidataInstanceof.id === \"Q5\";\n        } else {\n            wikidataProps.isAllowedProp = false;\n        }\n\n        // Extract image if it exists\n        if (wikidata.claims.P18) {\n            const fileName = wikidata.claims.P18[0].mainsnak.datavalue.value;\n            wikidataProps.image = await this.getCommonsThumbURL(fileName);\n        }\n        const siteLinkName = this.getSiteLinkName(language);\n        if (wikidata.sitelinks[siteLinkName]) {\n            const wikiLang = siteLinkName.match(/^(.*)wiki$/)[1];\n            const wikiTitle = wikidata.sitelinks[siteLinkName].title;\n            if (wikiLang && wikiTitle) {\n                wikidataProps.wikipedia = `https://${wikiLang.replace(\n                    \"_\",\n                    \"-\"\n                )}.wikipedia.org/wiki/${encodeURI(wikiTitle)}`;\n            }\n        }\n        return wikidataProps;\n    }\n\n    getSiteLinkName(language) {\n        if (languageVariantMap[language]) {\n            language = languageVariantMap[language];\n        }\n        return `${language}wiki`;\n    }\n\n    extractValue(wikidata, property, language) {\n        if (!wikidata[property]) {\n            return;\n        }\n        const languageFallback =\n            wikidata[property] && wikidata[property][language]\n                ? language\n                : \"en\";\n        return (\n            wikidata[property][languageFallback] &&\n            wikidata[property][languageFallback].value\n        );\n    }\n\n    queryWikibaseEntities(query, language = \"en\") {\n        const params = {\n            action: \"wbsearchentities\",\n            search: query,\n            format: \"json\",\n            errorformat: \"plaintext\",\n            language,\n            type: \"item\",\n            origin: \"*\",\n        };\n\n        return axios\n            .get(`https://www.wikidata.org/w/api.php`, { params })\n            .then((response) => {\n                const { search } = response && response.data;\n                return search.map((wbentity) => {\n                    if (!wbentity.label) {\n                        return;\n                    }\n                    return {\n                        name: wbentity.label,\n                        description: wbentity.description,\n                        wikidata: wbentity.id,\n                    };\n                });\n            });\n    }\n\n    async getCommonsThumbURL(imageTitle) {\n        const { data } = await axios.get(\n            \"https://commons.wikimedia.org/w/api.php\",\n            {\n                params: {\n                    action: \"query\",\n                    titles: `File:${imageTitle}`,\n                    prop: \"imageinfo\",\n                    iiprop: \"url\",\n                    iiurlwidth: 400,\n                    format: \"json\",\n                    formatversion: \"2\",\n                },\n            }\n        );\n        const { pages } = data && data.query;\n        if (pages.length \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                server/auth/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/auth/local.serializer.ts\n            \n            injectable\n            LocalSerializer\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/auth/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/auth/session.guard.ts\n            \n            guard\n            SessionGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/claim-review/claim-review.controller.ts\n            \n            controller\n            ClaimReviewController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                server/claim-review/claim-review.module.ts\n            \n            variable\n            ClaimReviewModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim-review/claim-review.service.ts\n            \n            injectable\n            ClaimReviewService\n            \n                18 %\n                (3/16)\n            \n        \n        \n            \n                \n                server/claim-review/dto/create-claim-review.dto.ts\n            \n            class\n            CreateClaimReview\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                server/claim-review/schemas/claim-review.schema.ts\n            \n            class\n            ClaimReview\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                server/claim-review/schemas/claim-review.schema.ts\n            \n            variable\n            ClaimReviewSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim-review/schemas/claim-review.schema.ts\n            \n            variable\n            ClaimReviewSchemaRaw\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim-revision/claim-revision.module.ts\n            \n            variable\n            ClaimRevisionModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim-revision/claim-revision.service.ts\n            \n            injectable\n            ClaimRevisionService\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                server/claim-revision/schema/claim-revision.schema.ts\n            \n            class\n            ClaimRevision\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                server/claim-revision/schema/claim-revision.schema.ts\n            \n            variable\n            ClaimRevisionSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim-revision/schema/claim-revision.schema.ts\n            \n            variable\n            ClaimRevisionSchemaRaw\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim/claim.controller.ts\n            \n            controller\n            ClaimController\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                server/claim/claim.module.ts\n            \n            variable\n            ClaimModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim/claim.service.ts\n            \n            injectable\n            ClaimService\n            \n                26 %\n                (4/15)\n            \n        \n        \n            \n                \n                server/claim/dto/create-claim.dto.ts\n            \n            class\n            CreateClaimDTO\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                server/claim/dto/get-claims.dto.ts\n            \n            class\n            GetClaimsDTO\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                server/claim/dto/get-reviews-by-hash.dto.ts\n            \n            class\n            GetClaimsByHashDTO\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                server/claim/dto/update-claim.dto.ts\n            \n            class\n            UpdateClaimDTO\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim/schemas/claim.schema.ts\n            \n            class\n            Claim\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                server/claim/schemas/claim.schema.ts\n            \n            variable\n            ClaimSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim/schemas/claim.schema.ts\n            \n            variable\n            ClaimSchemaRaw\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/email/email.service.ts\n            \n            injectable\n            EmailService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                server/email/email.service.ts\n            \n            variable\n            fs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/email/email.service.ts\n            \n            variable\n            handlebars\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/email/email.service.ts\n            \n            variable\n            nodemailer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/email/email.service.ts\n            \n            variable\n            path\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/filters/not-found.filter.ts\n            \n            class\n            NotFoundFilter\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                server/history/history.controller.ts\n            \n            controller\n            HistoryController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/history/history.module.ts\n            \n            variable\n            HistoryModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/history/history.service.ts\n            \n            injectable\n            HistoryService\n            \n                42 %\n                (3/7)\n            \n        \n        \n            \n                \n                server/history/schema/history.schema.ts\n            \n            class\n            History\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                server/history/schema/history.schema.ts\n            \n            variable\n            HistorySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/home/home.controller.ts\n            \n            controller\n            HomeController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/logger.ts\n            \n            class\n            Logger\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                server/main.ts\n            \n            variable\n            cookieParser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/main.ts\n            \n            variable\n            initApp\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/main.ts\n            \n            variable\n            mongodb_host\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/main.ts\n            \n            variable\n            mongodb_name\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/main.ts\n            \n            variable\n            MongoStore\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/middleware/language.middleware.ts\n            \n            function\n            GetLanguageMiddleware\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/parser/parser.service.ts\n            \n            injectable\n            ParserService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                server/parser/parser.service.ts\n            \n            variable\n            md5\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/parser/parser.service.ts\n            \n            variable\n            nlp\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/parser/parser.service.ts\n            \n            variable\n            phdRegex\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/parser/parser.service.ts\n            \n            variable\n            prefixes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/personality/dto/create-personality.dto.ts\n            \n            class\n            CreatePersonality\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                server/personality/dto/get-personalities.dto.ts\n            \n            class\n            GetPersonalities\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                server/personality/personality.controller.ts\n            \n            controller\n            PersonalityController\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                server/personality/personality.module.ts\n            \n            variable\n            PersonalityModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/personality/personality.service.ts\n            \n            injectable\n            PersonalityService\n            \n                18 %\n                (3/16)\n            \n        \n        \n            \n                \n                server/personality/schemas/personality.schema.ts\n            \n            class\n            Personality\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                server/personality/schemas/personality.schema.ts\n            \n            variable\n            PersonalitySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/personality/schemas/personality.schema.ts\n            \n            variable\n            PersonalitySchemaRaw\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/root/root.controller.ts\n            \n            controller\n            RootController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                server/seed.ts\n            \n            variable\n            initApp\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/seed.ts\n            \n            variable\n            mongodb_host\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/seed.ts\n            \n            variable\n            mongodb_name\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/server.ts\n            \n            variable\n            ServiceRunner\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/sitemap/sitemap.controller.ts\n            \n            controller\n            SitemapController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                server/sitemap/sitemap.service.ts\n            \n            injectable\n            SitemapService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                server/sitemap/sitemap.service.ts\n            \n            variable\n            axios\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/source/schemas/source.schema.ts\n            \n            class\n            Source\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                server/source/schemas/source.schema.ts\n            \n            variable\n            SourceSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/source/source.controller.ts\n            \n            controller\n            SourceController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/source/source.module.ts\n            \n            variable\n            SourceModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/source/source.service.ts\n            \n            injectable\n            SourceService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                server/stats/stats.controller.ts\n            \n            controller\n            StatsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/stats/stats.service.ts\n            \n            injectable\n            StatsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                server/users/schemas/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                server/users/schemas/user.schema.ts\n            \n            interface\n            UserDocument\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/users/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                server/users/users.module.ts\n            \n            variable\n            UserModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                server/util.ts\n            \n            injectable\n            UtilService\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                server/view/view.controller.ts\n            \n            controller\n            ViewController\n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                server/view/view.service.ts\n            \n            injectable\n            ViewService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                server/wikidata/schemas/wikidata.schema.ts\n            \n            class\n            WikidataCache\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                server/wikidata/schemas/wikidata.schema.ts\n            \n            variable\n            WikidataCacheSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/wikidata/wikidata.module.ts\n            \n            variable\n            WikidataCacheModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/wikidata/wikidata.service.ts\n            \n            injectable\n            WikidataService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                server/wikidata/wikidata.service.ts\n            \n            variable\n            axios\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/wikidata/wikidata.service.ts\n            \n            variable\n            languageVariantMap\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @ant-design/icons : ^4.6.2\n        \n            @ant-design/icons-svg : ^4.1.0\n        \n            @babel/polyfill : ^7.12.1\n        \n            @compodoc/compodoc : ^1.1.18\n        \n            @dhaiwat10/react-link-preview : ^1.9.1\n        \n            @nestjs/axios : ^0.0.1\n        \n            @nestjs/common : ^8.0.6\n        \n            @nestjs/config : ^1.0.1\n        \n            @nestjs/core : ^8.0.6\n        \n            @nestjs/mapped-types : ^1.0.1\n        \n            @nestjs/mongoose : ^8.0.0\n        \n            @nestjs/passport : ^8.0.1\n        \n            @nestjs/platform-express : ^8.0.6\n        \n            @nestjs/throttler : ^2.0.0\n        \n            @types/jest : ^27.4.0\n        \n            @typescript-eslint/eslint-plugin : ^4.29.0\n        \n            accept-language-parser : ^1.5.0\n        \n            antd : ^4.18.5\n        \n            axios : ^0.21.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            compromise : ^13.11.4\n        \n            compromise-paragraphs : ^0.0.5\n        \n            compromise-sentences : ^0.3.0\n        \n            connect-mongo : ^4.6.0\n        \n            cookie-parser : ^1.4.5\n        \n            domino : ^2.1.6\n        \n            draft-js : ^0.11.7\n        \n            draft-js-export-html : ^1.4.1\n        \n            draft-js-import-html : ^1.4.1\n        \n            express : ^4.17.1\n        \n            express-session : ^1.17.2\n        \n            handlebars : ^4.7.7\n        \n            i18next : ^21.6.10\n        \n            md5 : ^2.3.0\n        \n            mongoose : ^  5.13.5\n        \n            mongoose-softdelete-typescript : ^0.0.3\n        \n            next : ^12.1.0\n        \n            next-i18next : ^10.2.0\n        \n            next-plugin-antd-less : ^1.8.0\n        \n            nodemailer : ^6.7.0\n        \n            passport : ^0.4.1\n        \n            passport-local : ^1.0.0\n        \n            passport-local-mongoose : ^6.1.0\n        \n            react : ^17.0.2\n        \n            react-cookie-consent : ^6.4.1\n        \n            react-countdown : ^2.3.2\n        \n            react-dom : ^17.0.2\n        \n            react-google-recaptcha : ^2.1.0\n        \n            react-is : ^17.0.2\n        \n            react-markdown : ^8.0.0\n        \n            react-redux : ^7.2.4\n        \n            react-share : ^4.4.0\n        \n            react-social-icons : ^5.5.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rehype-raw : ^6.1.1\n        \n            rxjs : ^7.3.0\n        \n            service-runner : ^2.8.4\n        \n            sitemap : 5\n        \n            slugify : ^1.6.1\n        \n            styled-components : ^5.3.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ClassificationEnum   (server/.../claim-review.schema.ts)\n                        \n                        \n                            HistoryType   (server/.../history.schema.ts)\n                        \n                        \n                            TargetModel   (server/.../history.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    server/claim-review/schemas/claim-review.schema.ts\n    \n        \n            \n                \n                    \n                        \n                        ClassificationEnum\n                    \n                \n                        \n                            \n                                 not-fact\n                            \n                        \n                        \n                            \n                                 true\n                            \n                        \n                        \n                            \n                                 true-but\n                            \n                        \n                        \n                            \n                                 arguable\n                            \n                        \n                        \n                            \n                                 misleading\n                            \n                        \n                        \n                            \n                                 false\n                            \n                        \n                        \n                            \n                                 unsustainable\n                            \n                        \n                        \n                            \n                                 exaggerated\n                            \n                        \n                        \n                            \n                                 unverifiable\n                            \n                        \n            \n        \n\n    server/history/schema/history.schema.ts\n    \n        \n            \n                \n                    \n                        \n                        HistoryType\n                    \n                \n                        \n                            \n                                 Create\n                            \n                        \n                        \n                            \n                                Value : create\n                            \n                        \n                        \n                            \n                                 Update\n                            \n                        \n                        \n                            \n                                Value : update\n                            \n                        \n                        \n                            \n                                 Delete\n                            \n                        \n                        \n                            \n                                Value : delete\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        TargetModel\n                    \n                \n                        \n                            \n                                 Claim\n                            \n                        \n                        \n                            \n                                Value : claim\n                            \n                        \n                        \n                            \n                                 Personality\n                            \n                        \n                        \n                            \n                                Value : personality\n                            \n                        \n                        \n                            \n                                 ClaimReview\n                            \n                        \n                        \n                            \n                                Value : claim-review\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GetLanguageMiddleware   (server/.../language.middleware.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    server/middleware/language.middleware.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetLanguageMiddleware\n                        \n                    \n                \n            \n            \n                \nGetLanguageMiddleware(req, res: Response, next: NextFunction)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nAletheia\n\nPlataforma de análise de discursos de personalidades públicas e combate a Fake News.\n\nInstalação\n\nFork this repo and clone it locally:git clone https://github.com//aletheia\ncd aletheia\nStartup Mongo DB via Docker:docker-compose up -d\nInstall packages:yarn install\nTo run in dev modeyarn dev\nAccess http://localhost:3000 in your browser.\n\nDevelopment DB\n\nRun seeder:\nyarn seedBuild to production\n\nThe build step should be run as follow:\nyarn build\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\n                GNU GENERAL PUBLIC LICENSE\n                   Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n                        Preamble  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n                   TERMS AND CONDITIONS\nDefinitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\nSource Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n  The Corresponding Source for a work in source code form is that\nsame work.\n\nBasic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\nProtecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\nConveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\nConveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\na) The work must carry prominent notices stating that you modified\nit, and giving a relevant date.\n\nb) The work must carry prominent notices stating that it is\nreleased under this License and any conditions added under section\n7.  This requirement modifies the requirement in section 4 to\n\"keep intact all notices\".\n\nc) You must license the entire work, as a whole, under this\nLicense to anyone who comes into possession of a copy.  This\nLicense will therefore apply, along with any applicable section 7\nadditional terms, to the whole of the work, and all its parts,\nregardless of how they are packaged.  This License gives no\npermission to license the work in any other way, but it does not\ninvalidate such permission if you have separately received it.\n\nd) If the work has interactive user interfaces, each must display\nAppropriate Legal Notices; however, if the Program has interactive\ninterfaces that do not display Appropriate Legal Notices, your\nwork need not make them do so.  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\nConveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\na) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by the\nCorresponding Source fixed on a durable physical medium\ncustomarily used for software interchange.\n\nb) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by a\nwritten offer, valid for at least three years and valid for as\nlong as you offer spare parts or customer support for that product\nmodel, to give anyone who possesses the object code either (1) a\ncopy of the Corresponding Source for all the software in the\nproduct that is covered by this License, on a durable physical\nmedium customarily used for software interchange, for a price no\nmore than your reasonable cost of physically performing this\nconveying of source, or (2) access to copy the\nCorresponding Source from a network server at no charge.\n\nc) Convey individual copies of the object code with a copy of the\nwritten offer to provide the Corresponding Source.  This\nalternative is allowed only occasionally and noncommercially, and\nonly if you received the object code with such an offer, in accord\nwith subsection 6b.\n\nd) Convey the object code by offering access from a designated\nplace (gratis or for a charge), and offer equivalent access to the\nCorresponding Source in the same way through the same place at no\nfurther charge.  You need not require recipients to copy the\nCorresponding Source along with the object code.  If the place to\ncopy the object code is a network server, the Corresponding Source\nmay be on a different server (operated by you or a third party)\nthat supports equivalent copying facilities, provided you maintain\nclear directions next to the object code saying where to find the\nCorresponding Source.  Regardless of what server hosts the\nCorresponding Source, you remain obligated to ensure that it is\navailable for as long as needed to satisfy these requirements.\n\ne) Convey the object code using peer-to-peer transmission, provided\nyou inform other peers where the object code and Corresponding\nSource of the work are being offered to the general public at no\ncharge under subsection 6d.  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\nAdditional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\na) Disclaiming warranty or limiting liability differently from the\nterms of sections 15 and 16 of this License; or\n\nb) Requiring preservation of specified reasonable legal notices or\nauthor attributions in that material or in the Appropriate Legal\nNotices displayed by works containing it; or\n\nc) Prohibiting misrepresentation of the origin of that material, or\nrequiring that modified versions of such material be marked in\nreasonable ways as different from the original version; or\n\nd) Limiting the use for publicity purposes of names of licensors or\nauthors of the material; or\n\ne) Declining to grant rights under trademark law for use of some\ntrade names, trademarks, or service marks; or\n\nf) Requiring indemnification of licensors and authors of that\nmaterial by anyone who conveys the material (or modified versions of\nit) with contractual assumptions of liability to the recipient, for\nany liability that these contractual assumptions directly impose on\nthose licensors and authors.  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\nTermination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\nAcceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\nAutomatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\nPatents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\nNo Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\nUse with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\nRevised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\nDisclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\nLimitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\nInterpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n                 END OF TERMS AND CONDITIONS\n\n        How to Apply These Terms to Your New Programs  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\nCopyright (C)   \n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see .Also add information on how to contact you by electronic and paper mail.\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n  Copyright (C)   \nThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.The hypothetical commands show w' and show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\nhttps://www.gnu.org/licenses/.\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\nhttps://www.gnu.org/licenses/why-not-lgpl.html.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ClaimModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ClaimReviewModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ClaimRevisionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HistoryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HomeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ParserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PersonalityModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SitemapModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SourceModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StatsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ViewModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        WikidataModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ClaimModule\n\n\n\ncluster_ClaimModule_imports\n\n\n\ncluster_ClaimModule_exports\n\n\n\ncluster_ClaimModule_providers\n\n\n\ncluster_ClaimReviewModule\n\n\n\ncluster_ClaimReviewModule_exports\n\n\n\ncluster_ClaimReviewModule_providers\n\n\n\ncluster_ClaimRevisionModule\n\n\n\ncluster_ClaimRevisionModule_exports\n\n\n\ncluster_ClaimRevisionModule_providers\n\n\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_HistoryModule\n\n\n\ncluster_HistoryModule_exports\n\n\n\ncluster_HistoryModule_providers\n\n\n\ncluster_HomeModule\n\n\n\ncluster_HomeModule_imports\n\n\n\ncluster_ParserModule\n\n\n\ncluster_ParserModule_exports\n\n\n\ncluster_ParserModule_providers\n\n\n\ncluster_PersonalityModule\n\n\n\ncluster_PersonalityModule_imports\n\n\n\ncluster_PersonalityModule_exports\n\n\n\ncluster_PersonalityModule_providers\n\n\n\ncluster_SitemapModule\n\n\n\ncluster_SitemapModule_exports\n\n\n\ncluster_SitemapModule_providers\n\n\n\ncluster_SourceModule\n\n\n\ncluster_SourceModule_exports\n\n\n\ncluster_SourceModule_providers\n\n\n\ncluster_StatsModule\n\n\n\ncluster_StatsModule_exports\n\n\n\ncluster_StatsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_ViewModule\n\n\n\ncluster_ViewModule_exports\n\n\n\ncluster_ViewModule_providers\n\n\n\ncluster_WikidataModule\n\n\n\ncluster_WikidataModule_exports\n\n\n\ncluster_WikidataModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nLocalSerializer\n\nLocalSerializer\n\nAuthModule -->\n\nLocalSerializer->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nClaimReviewModule\n\nClaimReviewModule\n\n\n\nPersonalityModule\n\nPersonalityModule\n\nPersonalityModule -->\n\nClaimReviewModule->PersonalityModule\n\n\n\n\n\nClaimModule\n\nClaimModule\n\nClaimModule -->\n\nClaimReviewModule->ClaimModule\n\n\n\n\n\nClaimReviewService \n\nClaimReviewService \n\nClaimReviewService  -->\n\nClaimReviewModule->ClaimReviewService \n\n\n\n\n\nStatsModule\n\nStatsModule\n\nStatsModule -->\n\nClaimReviewModule->StatsModule\n\n\n\n\n\nSitemapModule\n\nSitemapModule\n\nSitemapModule -->\n\nClaimReviewModule->SitemapModule\n\n\n\n\n\nClaimRevisionModule\n\nClaimRevisionModule\n\nPersonalityModule -->\n\nClaimRevisionModule->PersonalityModule\n\n\n\nClaimModule -->\n\nClaimRevisionModule->ClaimModule\n\n\n\n\n\nClaimRevisionService \n\nClaimRevisionService \n\nClaimRevisionService  -->\n\nClaimRevisionModule->ClaimRevisionService \n\n\n\n\n\nHistoryModule\n\nHistoryModule\n\nClaimReviewModule -->\n\nHistoryModule->ClaimReviewModule\n\n\n\nPersonalityModule -->\n\nHistoryModule->PersonalityModule\n\n\n\nClaimModule -->\n\nHistoryModule->ClaimModule\n\n\n\n\n\nHistoryService \n\nHistoryService \n\nHistoryService  -->\n\nHistoryModule->HistoryService \n\n\n\n\n\nParserModule\n\nParserModule\n\nClaimRevisionModule -->\n\nParserModule->ClaimRevisionModule\n\n\n\nClaimModule -->\n\nParserModule->ClaimModule\n\n\n\n\n\nParserService \n\nParserService \n\nParserService  -->\n\nParserModule->ParserService \n\n\n\nClaimModule -->\n\nPersonalityModule->ClaimModule\n\n\n\nStatsModule -->\n\nPersonalityModule->StatsModule\n\n\n\n\n\nHomeModule\n\nHomeModule\n\nHomeModule -->\n\nPersonalityModule->HomeModule\n\n\n\n\n\nPersonalityService \n\nPersonalityService \n\nPersonalityService  -->\n\nPersonalityModule->PersonalityService \n\n\n\nSitemapModule -->\n\nPersonalityModule->SitemapModule\n\n\n\n\n\nSourceModule\n\nSourceModule\n\nClaimReviewModule -->\n\nSourceModule->ClaimReviewModule\n\n\n\nClaimRevisionModule -->\n\nSourceModule->ClaimRevisionModule\n\n\n\nClaimModule -->\n\nSourceModule->ClaimModule\n\n\n\n\n\nSourceService \n\nSourceService \n\nSourceService  -->\n\nSourceModule->SourceService \n\n\n\n\n\nViewModule\n\nViewModule\n\nUsersModule -->\n\nViewModule->UsersModule\n\n\n\nClaimRevisionModule -->\n\nViewModule->ClaimRevisionModule\n\n\n\nPersonalityModule -->\n\nViewModule->PersonalityModule\n\n\n\nClaimModule -->\n\nViewModule->ClaimModule\n\n\n\nHomeModule -->\n\nViewModule->HomeModule\n\n\n\n\n\nViewService \n\nViewService \n\nViewService  -->\n\nViewModule->ViewService \n\n\n\n\n\nClaimService \n\nClaimService \n\nClaimService  -->\n\nClaimModule->ClaimService \n\n\n\nStatsModule -->\n\nClaimModule->StatsModule\n\n\n\nSitemapModule -->\n\nClaimModule->SitemapModule\n\n\n\n\n\nClaimService\n\nClaimService\n\nClaimModule -->\n\nClaimService->ClaimModule\n\n\n\n\n\nClaimReviewService\n\nClaimReviewService\n\nClaimReviewModule -->\n\nClaimReviewService->ClaimReviewModule\n\n\n\n\n\nUtilService\n\nUtilService\n\nClaimReviewModule -->\n\nUtilService->ClaimReviewModule\n\n\n\nPersonalityModule -->\n\nUtilService->PersonalityModule\n\n\n\n\n\nClaimRevisionService\n\nClaimRevisionService\n\nClaimRevisionModule -->\n\nClaimRevisionService->ClaimRevisionModule\n\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\nHistoryService\n\nHistoryService\n\nHistoryModule -->\n\nHistoryService->HistoryModule\n\n\n\nHomeModule -->\n\nStatsModule->HomeModule\n\n\n\n\n\nStatsService \n\nStatsService \n\nStatsService  -->\n\nStatsModule->StatsService \n\n\n\n\n\nParserService\n\nParserService\n\nParserModule -->\n\nParserService->ParserModule\n\n\n\n\n\nWikidataModule\n\nWikidataModule\n\nPersonalityModule -->\n\nWikidataModule->PersonalityModule\n\n\n\n\n\nWikidataService \n\nWikidataService \n\nWikidataService  -->\n\nWikidataModule->WikidataService \n\n\n\n\n\nPersonalityService\n\nPersonalityService\n\nPersonalityModule -->\n\nPersonalityService->PersonalityModule\n\n\n\n\n\nSitemapService \n\nSitemapService \n\nSitemapService  -->\n\nSitemapModule->SitemapService \n\n\n\n\n\nSitemapService\n\nSitemapService\n\nSitemapModule -->\n\nSitemapService->SitemapModule\n\n\n\n\n\nSourceService\n\nSourceService\n\nSourceModule -->\n\nSourceService->SourceModule\n\n\n\n\n\nStatsService\n\nStatsService\n\nStatsModule -->\n\nStatsService->StatsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nViewService\n\nViewService\n\nViewModule -->\n\nViewService->ViewModule\n\n\n\n\n\nWikidataService\n\nWikidataService\n\nWikidataModule -->\n\nWikidataService->WikidataModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        16 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    11 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    17 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    17 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ClaimDocument   (server/.../claim.schema.ts)\n                        \n                        \n                            ClaimMatchParameters   (server/.../claim.service.ts)\n                        \n                        \n                            ClaimReviewDocument   (server/.../claim-review.schema.ts)\n                        \n                        \n                            ClaimRevisionDocument   (server/.../claim-revision.schema.ts)\n                        \n                        \n                            HistoryDocument   (server/.../history.schema.ts)\n                        \n                        \n                            PersonalityDocument   (server/.../personality.schema.ts)\n                        \n                        \n                            SourceDocument   (server/.../source.schema.ts)\n                        \n                        \n                            WikidataCacheDocument   (server/.../wikidata.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    server/claim/schemas/claim.schema.ts\n    \n    \n        \n            \n                \n                    \n                    ClaimDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    server/claim/claim.service.ts\n    \n    \n        \n            \n                \n                    \n                    ClaimMatchParameters\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    server/claim-review/schemas/claim-review.schema.ts\n    \n    \n        \n            \n                \n                    \n                    ClaimReviewDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    server/claim-revision/schema/claim-revision.schema.ts\n    \n    \n        \n            \n                \n                    \n                    ClaimRevisionDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    server/history/schema/history.schema.ts\n    \n    \n        \n            \n                \n                    \n                    HistoryDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    server/personality/schemas/personality.schema.ts\n    \n    \n        \n            \n                \n                    \n                    PersonalityDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    server/source/schemas/source.schema.ts\n    \n    \n        \n            \n                \n                    \n                    SourceDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    server/wikidata/schemas/wikidata.schema.ts\n    \n    \n        \n            \n                \n                    \n                    WikidataCacheDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            axios   (server/.../sitemap.service.ts)\n                        \n                        \n                            axios   (server/.../wikidata.service.ts)\n                        \n                        \n                            ClaimModel   (server/.../claim.module.ts)\n                        \n                        \n                            ClaimReviewModel   (server/.../claim-review.module.ts)\n                        \n                        \n                            ClaimReviewSchema   (server/.../claim-review.schema.ts)\n                        \n                        \n                            ClaimReviewSchemaRaw   (server/.../claim-review.schema.ts)\n                        \n                        \n                            ClaimRevisionModel   (server/.../claim-revision.module.ts)\n                        \n                        \n                            ClaimRevisionSchema   (server/.../claim-revision.schema.ts)\n                        \n                        \n                            ClaimRevisionSchemaRaw   (server/.../claim-revision.schema.ts)\n                        \n                        \n                            ClaimSchema   (server/.../claim.schema.ts)\n                        \n                        \n                            ClaimSchemaRaw   (server/.../claim.schema.ts)\n                        \n                        \n                            cookieParser   (server/.../main.ts)\n                        \n                        \n                            fs   (server/.../email.service.ts)\n                        \n                        \n                            handlebars   (server/.../email.service.ts)\n                        \n                        \n                            HistoryModel   (server/.../history.module.ts)\n                        \n                        \n                            HistorySchema   (server/.../history.schema.ts)\n                        \n                        \n                            initApp   (server/.../main.ts)\n                        \n                        \n                            initApp   (server/.../seed.ts)\n                        \n                        \n                            languageVariantMap   (server/.../wikidata.service.ts)\n                        \n                        \n                            md5   (server/.../parser.service.ts)\n                        \n                        \n                            mongodb_host   (server/.../main.ts)\n                        \n                        \n                            mongodb_host   (server/.../seed.ts)\n                        \n                        \n                            mongodb_name   (server/.../main.ts)\n                        \n                        \n                            mongodb_name   (server/.../seed.ts)\n                        \n                        \n                            MongoStore   (server/.../main.ts)\n                        \n                        \n                            nlp   (server/.../parser.service.ts)\n                        \n                        \n                            nodemailer   (server/.../email.service.ts)\n                        \n                        \n                            path   (server/.../email.service.ts)\n                        \n                        \n                            PersonalityModel   (server/.../personality.module.ts)\n                        \n                        \n                            PersonalitySchema   (server/.../personality.schema.ts)\n                        \n                        \n                            PersonalitySchemaRaw   (server/.../personality.schema.ts)\n                        \n                        \n                            phdRegex   (server/.../parser.service.ts)\n                        \n                        \n                            prefixes   (server/.../parser.service.ts)\n                        \n                        \n                            ServiceRunner   (server/.../server.ts)\n                        \n                        \n                            SourceModel   (server/.../source.module.ts)\n                        \n                        \n                            SourceSchema   (server/.../source.schema.ts)\n                        \n                        \n                            UserModel   (server/.../users.module.ts)\n                        \n                        \n                            UserSchema   (server/.../user.schema.ts)\n                        \n                        \n                            WikidataCacheModel   (server/.../wikidata.module.ts)\n                        \n                        \n                            WikidataCacheSchema   (server/.../wikidata.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    server/sitemap/sitemap.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        axios\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"axios\")\n                    \n                \n\n\n        \n    \n\n    server/wikidata/wikidata.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        axios\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"axios\")\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        languageVariantMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    \"pt-br\": \"pt\",\n}\n                    \n                \n\n\n        \n    \n\n    server/claim/claim.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ClaimModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeature([\n    {\n        name: Claim.name,\n        schema: ClaimSchema,\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/claim-review/claim-review.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ClaimReviewModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeature([\n    {\n        name: ClaimReview.name,\n        schema: ClaimReviewSchema,\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/claim-review/schemas/claim-review.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ClaimReviewSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ClaimReviewSchemaRaw\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ClaimReviewSchemaRaw\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(ClaimReview)\n                    \n                \n\n\n        \n    \n\n    server/claim-revision/claim-revision.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ClaimRevisionModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeature([\n    {\n        name: ClaimRevision.name,\n        schema: ClaimRevisionSchema,\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/claim-revision/schema/claim-revision.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ClaimRevisionSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ClaimRevisionSchemaRaw\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ClaimRevisionSchemaRaw\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(ClaimRevision)\n                    \n                \n\n\n        \n    \n\n    server/claim/schemas/claim.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ClaimSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ClaimSchemaRaw\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ClaimSchemaRaw\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Claim)\n                    \n                \n\n\n        \n    \n\n    server/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cookieParser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"cookie-parser\")\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initApp\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (options) => {\n    const corsOptions = {\n        origin: options?.config?.cors || \"*\",\n        credentials: true,\n        methods: \"GET,HEAD,PUT,PATCH,POST,DELETE, OPTIONS\",\n        allowedHeaders: [\"accept\", \"x-requested-with\", \"content-type\"],\n    };\n\n    options.db = {\n        connection_uri: `mongodb://${mongodb_host}/${mongodb_name}`,\n        options: {\n            useUnifiedTopology: true,\n            useNewUrlParser: true,\n        }\n    }\n    const app = await NestFactory.create(\n        AppModule.register(options),\n        {\n            logger: new Logger(options.logger) || undefined,\n            cors: corsOptions,\n        }\n    );\n\n    app.use(GetLanguageMiddleware);\n    app.useGlobalPipes(\n        new ValidationPipe({\n            transform: true,\n            transformOptions: {enableImplicitConversion: true},\n            whitelist: true,\n            forbidNonWhitelisted: true,\n        }),\n    )\n\n    app.use(cookieParser());\n    app.use(\n        session({\n            secret: \"replace_me\",\n            resave: false,\n            saveUninitialized: false,\n            store: MongoStore.create({\n                mongoUrl: options.db.connection_uri,\n                mongoOptions: options.db.options\n            })\n        })\n    );\n    app.use(passport.initialize());\n    app.use(passport.session());\n    app.useStaticAssets(join(__dirname, \"..\", \"public\"));\n    // app.setGlobalPrefix(\"api\");\n    await app.listen(options.config.port);\n    options.logger.log(\n        \"info\",\n        `${options.name} with PID ${process.pid} listening on ${\n            options.config.interface || \"*\"\n        }:${options.config.port}`\n    );\n    return app;\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mongodb_host\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.MONGODB_HOST || \"localhost\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mongodb_name\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.MONGODB_NAME || \"Aletheia\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MongoStore\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"connect-mongo\")\n                    \n                \n\n\n        \n    \n\n    server/email/email.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        fs\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"fs\")\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handlebars\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"handlebars\")\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nodemailer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"nodemailer\")\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"path\")\n                    \n                \n\n\n        \n    \n\n    server/history/history.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        HistoryModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeature([\n    {\n        name: \"HISTORY_MODEL\",\n        schema: HistorySchema,\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/history/schema/history.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        HistorySchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(History)\n                    \n                \n\n\n        \n    \n\n    server/seed.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        initApp\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (options) => {\n    options.db = {\n        connection_uri: `mongodb://${mongodb_host}/${mongodb_name}`,\n        options: {\n            useUnifiedTopology: true,\n            useNewUrlParser: true,\n        }\n    }\n    options.logger.log(\"info\", `Loading AppModule`);\n    const app = await NestFactory.create(\n        AppModule.register(options),\n        {\n            logger: new Logger(options.logger) || undefined\n        }\n    );\n    options.logger.log(\"info\", `AppModule loaded`);\n    const emailService = app.get(EmailService);\n    const configService = app.get(ConfigService);\n    const userService = app.get(UsersService);\n    const users = configService.get(\"users\");\n    const disableSMTP = configService.get(\"disable_smtp\");\n\n    const generatePassword = (isTestUser = false, forcePassword = null) => {\n        const buf = randomBytes(8);\n\n        if (isTestUser) {\n            return forcePassword ? `${forcePassword}` : process.env.DEVELOPMENT_PASSWORD;\n        }\n\n        return buf.toString(\"hex\");\n    };\n\n    const seedSingleUser = async (userData, password) => {\n        return userService.register({ ...userData, password})\n            .then(async (user) => {\n                options.logger.log(\"info\", `${userData.email} seeded`);\n                if (userData.sendAuthDetails && !disableSMTP) {\n                    const emailResponse = await emailService.sendEmail(\n                        userData.email,\n                        \"Bem-vinda(o) a Aletheia\",\n                        \"Você poderá acessar o sistema usando as credenciais abaixo\",\n                        { ...userData, password },\n                        \"./templates/userSeed.html\"\n                    );\n                    options.logger.log(\"info\", emailResponse);\n                    options.logger.log(\"info\", `E-mail sent to ${userData.email}`);\n                }\n                return user;\n            })\n            .catch((e) => {\n                options.logger.log(\"error\", e);\n                options.logger.log(\"info\", `Error while seeding ${userData.email}`);\n                return null;\n            });\n    };\n    // Using await Promise.all to force loop to finish before continuing\n    await Promise.all(\n        users.map(async (userData) => {\n            const password = generatePassword(userData.isTestUser, userData.password);\n            return seedSingleUser(userData, password);\n        })\n    );\n\n    options.logger.log(\n        \"info\",\n        \"Seed is finished\"\n    );\n    await app.close();\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mongodb_host\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.MONGODB_HOST || \"localhost\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mongodb_name\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.MONGODB_NAME || \"Aletheia\"\n                    \n                \n\n\n        \n    \n\n    server/parser/parser.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        md5\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"md5\")\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nlp\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('compromise')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phdRegex\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /Ph\\.D\\./g\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prefixes\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /(Mr|St|Mrs|Ms|Dr)[.]/g\n                    \n                \n\n\n        \n    \n\n    server/personality/personality.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PersonalityModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeature([\n    {\n        name: Personality.name,\n        schema: PersonalitySchema,\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/personality/schemas/personality.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PersonalitySchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : PersonalitySchemaRaw\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PersonalitySchemaRaw\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Personality)\n                    \n                \n\n\n        \n    \n\n    server/server.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ServiceRunner\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"service-runner\")\n                    \n                \n\n\n        \n    \n\n    server/source/source.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SourceModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeature([\n    {\n        name: Source.name,\n        schema: SourceSchema,\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/source/schemas/source.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SourceSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Source)\n                    \n                \n\n\n        \n    \n\n    server/users/users.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeatureAsync([\n    {\n        name: User.name,\n        useFactory: () => {\n            const schema = UserSchema;\n            schema.plugin(require(\"passport-local-mongoose\"), {\n                usernameField: \"email\",\n            });\n            return schema;\n        },\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/users/schemas/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n    server/wikidata/wikidata.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        WikidataCacheModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeatureAsync([\n    {\n        name: WikidataCache.name,\n        useFactory: () => {\n            const wikidataCacheSchema = WikidataCacheSchema;\n            wikidataCacheSchema.index(\n                { wikidataId: 1, language: 1 },\n                { unique: true }\n            );\n            wikidataCacheSchema.index(\n                { createdAt: 1 },\n                { expireAfterSeconds: 86400 }\n            );\n            return wikidataCacheSchema;\n        },\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/wikidata/schemas/wikidata.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        WikidataCacheSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(WikidataCache)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}

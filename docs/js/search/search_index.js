var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,0.764,1,2.84]],["body/modules/AppModule.html",[0,1.224,1,4.549,2,1.422,3,0.15,4,0.117,5,0.133,6,4.184,7,0.905,8,5.618,9,3.634,10,5.618,11,0.486,12,4.184,13,0.976,14,0.015,15,0.558,16,0.839,17,2.785,18,0.976,19,6.342,20,0.259,21,0.463,22,2.196,23,0.976,24,3.497,25,3.634,26,3.739,27,4.184,28,3.497,29,3.634,30,2.949,31,2.785,32,3.29,33,3.271,34,2.949,35,1.465,36,1.669,37,2.785,38,3.11,39,3.001,40,3.497,41,3.634,42,4.029,43,4.184,44,2.605,45,2.088,46,2.804,47,2.605,48,3.739,49,4.184,50,3.739,51,4.184,52,5.618,53,5.618,54,3.001,55,4.029,56,4.184,57,4.184,58,4.184,59,5.618,60,3.634,61,3.739,62,4.184,63,3.29,64,2.316,65,3.271,66,3.29,67,3.271,68,0.15,69,0.117,70,2.088,71,3.29,72,3.634,73,3.271,74,3.271,75,4.184,76,0.905,77,1.669,78,4.184,79,3.634,80,3.634,81,4.184,82,3.634,83,4.184,84,4.184,85,4.184,86,4.184,87,3.634,88,4.184,89,1.316,90,1.602,91,4.879,92,5.618,93,0.01,94,0.01]],["title/modules/AuthModule.html",[0,0.764,26,2.636]],["body/modules/AuthModule.html",[0,1.27,2,1.818,3,0.192,4,0.149,5,0.171,14,0.015,20,0.243,21,0.592,24,4.839,25,4.648,26,5.368,68,0.192,69,0.15,77,2.625,90,2.519,93,0.012,94,0.012,95,2.326,96,4.648,97,4.648,98,4.648,99,5.174,100,5.174,101,2.519,102,1.967,103,1.818,104,5.351,105,5.351,106,3.838,107,5.351,108,5.351,109,5.351,110,4.184,111,1.449]],["title/classes/Claim.html",[35,1.033,69,0.111]],["body/classes/Claim.html",[3,0.164,4,0.166,5,0.146,11,0.77,14,0.015,20,0.232,23,1.068,35,1.832,68,0.238,69,0.128,93,0.011,94,0.011,111,2.088,112,1.618,113,3.284,114,0.506,115,1.614,116,5.185,117,2.521,118,4.414,119,0.867,120,4.374,121,1.864,122,3.712,123,3.13,124,3.636,125,4.649,126,4.579,127,4.579,128,1.74,129,2.534,130,4.579,131,3.506,132,2.192,133,2.403,134,1.864,135,3.048,136,3.048,137,3.58,138,3.977,139,3.048,140,3.048,141,3.58,142,2.851,143,4.579,144,3.048,145,3.969,146,3.048,147,3.969,148,0.867,149,4.663,150,3.977,151,4.579,152,3.969,153,3.13,154,3.969,155,2.851,156,4.579,157,2.403,158,4.579,159,3.284]],["title/controllers/ClaimController.html",[160,1.246,161,2.84]],["body/controllers/ClaimController.html",[3,0.068,4,0.053,5,0.061,7,0.675,11,0.783,13,1.572,14,0.015,15,0.898,16,1.352,18,1.572,20,0.224,21,0.211,35,1.654,36,0.761,45,0.952,68,0.068,69,0.053,76,1.433,89,0.6,93,0.006,94,0.006,111,1.237,114,0.211,117,1.947,119,0.691,121,1.782,134,0.876,148,1.091,155,3.947,160,0.981,161,2.236,162,1.656,163,2.341,164,2.708,165,3.118,166,3.118,167,3.667,168,3.118,169,1.718,170,2.076,171,2.075,172,3.118,173,3.118,174,2.236,175,3.118,176,3.118,177,1.941,178,2.708,179,3.574,180,1.907,181,3.573,182,1.194,183,3.118,184,3.375,185,1.907,186,4.957,187,3.118,188,1.907,189,2.317,190,1.907,191,3.538,192,4.058,193,1.907,194,1.907,195,1.907,196,3.799,197,1.907,198,1.907,199,1.656,200,1.907,201,1.907,202,1.656,203,1.907,204,1.907,205,1.907,206,1.907,207,1.907,208,1.907,209,4.271,210,1.907,211,1.907,212,2.633,213,1.907,214,4.094,215,1.907,216,1.907,217,1.907,218,1.907,219,1.907,220,1.907,221,1.907,222,1.907,223,1.656,224,4.271,225,1.907,226,1.907,227,2.236,228,1.102,229,0.952,230,1.368,231,1.491,232,1.269,233,1.882,234,1.117,235,2.189,236,1.656,237,1.656,238,1.656,239,2.837,240,3.436,241,1.187,242,1.055,243,1.269,244,0.952,245,1.187,246,1.117,247,1.974,248,1.368,249,1.974,250,1.368,251,1.491,252,2.708,253,2.708,254,1.907,255,2.076,256,1.907,257,1.907,258,1.665,259,0.828,260,1.019,261,1.907,262,0.6,263,1.656,264,1.656,265,1.637,266,2.451,267,1.656,268,1.656,269,1.656,270,1.656,271,3.968,272,1.656,273,2.972,274,2.972,275,1.907,276,1.907,277,1.907,278,1.656,279,2.805,280,1.055,281,2.849,282,2.075,283,2.174,284,1.368,285,1.907,286,2.633,287,1.907,288,1.907,289,1.907,290,3.436,291,4.229,292,1.907,293,2.438,294,2.075,295,1.941,296,1.656,297,1.491,298,2.633,299,1.907,300,1.491,301,1.656,302,2.708,303,1.656,304,1.907,305,1.656,306,1.907,307,1.117,308,1.656,309,1.726,310,1.269,311,1.269,312,1.907,313,1.907,314,1.907,315,3.118,316,1.907,317,1.656,318,1.907,319,1.907,320,1.656,321,1.907,322,1.907,323,1.907,324,1.907,325,1.907,326,1.907,327,1.907,328,4.569,329,1.907,330,1.907,331,1.491,332,3.968,333,2.438,334,0.578,335,1.656,336,1.907,337,1.907,338,1.907,339,1.907,340,1.907,341,3.118,342,3.956,343,1.907,344,1.656,345,1.656,346,1.117,347,1.907,348,1.907,349,1.368,350,1.907,351,1.907,352,2.708,353,2.708,354,1.907,355,3.041,356,3.041,357,3.968,358,3.093,359,3.956,360,3.093,361,1.907,362,2.438,363,3.353,364,3.137,365,3.041,366,1.491,367,3.353,368,3.118,369,3.118,370,1.907,371,1.907,372,1.656,373,1.907,374,1.907,375,1.001,376,3.118,377,3.118,378,0.952,379,1.491,380,1.368,381,1.907,382,1.907,383,1.269]],["title/modules/ClaimModule.html",[0,0.764,32,2.32]],["body/modules/ClaimModule.html",[0,1.099,2,1.451,3,0.153,4,0.119,5,0.136,14,0.015,15,0.569,20,0.254,21,0.472,22,2.242,23,0.996,30,3.845,31,2.842,32,4.778,34,3.845,35,1.671,36,1.703,37,2.842,38,4.054,39,3.063,44,3.546,45,2.132,46,3.656,47,2.659,63,4.29,64,2.364,65,3.339,66,4.29,67,3.339,68,0.153,69,0.12,77,2.272,89,1.792,90,2.18,93,0.01,94,0.01,95,2.012,101,2.18,102,1.57,103,1.451,132,1.57,148,0.621,159,4.085,161,4.596,235,4.366,236,3.709,241,2.659,384,3.709,385,3.709,386,3.709,387,3.709,388,4.56,389,3.339,390,2.474,391,4.271,392,4.271,393,3.709,394,4.453,395,4.085,396,2.501,397,3.709]],["title/classes/ClaimReview.html",[69,0.111,398,2.079]],["body/classes/ClaimReview.html",[3,0.134,4,0.145,5,0.119,11,0.837,14,0.015,20,0.216,23,0.869,35,1.834,68,0.232,69,0.104,76,0.806,93,0.009,94,0.009,111,2.173,112,1.316,114,0.412,115,1.404,117,2.405,119,0.888,120,3.039,121,2.027,122,3.717,123,3.389,124,3.777,125,4.49,128,2.146,129,3.574,131,3.672,132,1.907,133,1.955,134,1.458,135,2.479,142,2.318,144,2.479,145,3.453,146,2.479,147,3.973,148,0.754,152,2.479,153,1.955,154,2.479,157,1.955,334,2.229,398,3.133,399,3.341,400,4.896,401,2.479,402,4.297,403,4.668,404,5.185,405,4.668,406,3.724,407,3.721,408,2.871,409,4.668,410,3.724,411,3.724,412,3.724,413,3.724,414,3.724,415,3.724,416,2.479,417,2.671,418,2.912,419,2.912,420,2.912,421,4.506,422,4.506,423,4.506,424,2.254,425,4.506,426,4.506,427,4.506,428,1.859,429,2.912,430,3.724,431,1.955,432,2.671,433,4.056,434,3.234,435,3.724,436,2.671]],["title/controllers/ClaimReviewController.html",[160,1.246,437,2.84]],["body/controllers/ClaimReviewController.html",[3,0.143,4,0.111,5,0.127,7,1.178,11,0.772,13,1.551,14,0.015,15,0.886,16,1.334,18,1.551,20,0.234,21,0.442,35,1.42,36,2.776,45,1.994,68,0.143,69,0.112,76,1.439,89,1.257,93,0.01,94,0.01,114,0.442,119,0.464,121,1.741,148,0.967,160,1.257,163,2.348,164,4.729,169,2.365,170,3.251,178,4.729,179,3.474,181,5.201,182,2.084,184,3.311,212,4.427,227,2.865,229,1.994,230,3.905,232,2.659,233,2.947,234,2.34,237,3.469,238,3.469,239,4.443,240,5.38,241,2.487,242,2.211,243,2.659,251,3.123,258,1.807,262,1.257,263,3.469,264,3.469,265,2.858,266,1.924,267,3.469,268,3.469,269,3.469,270,3.469,273,1.994,274,1.994,298,3.624,300,3.123,301,3.469,302,4.729,303,3.469,305,3.469,307,2.34,308,3.469,309,3.014,310,2.659,311,2.659,334,1.21,399,3.162,437,3.905,438,3.469,439,2.487,440,3.995,441,3.995,442,3.995,443,5.366,444,3.995,445,3.995,446,3.995,447,3.995,448,3.995,449,3.995,450,3.995,451,3.995,452,3.995,453,3.995,454,3.995,455,3.995,456,3.995,457,3.995,458,3.995,459,3.995,460,3.995,461,3.995,462,3.995,463,3.995]],["title/modules/ClaimReviewModule.html",[0,0.764,34,2.079]],["body/modules/ClaimReviewModule.html",[0,1.188,2,1.634,3,0.173,4,0.134,5,0.153,14,0.015,15,0.641,20,0.251,21,0.532,22,2.525,23,1.122,34,4.19,35,1.606,36,1.919,38,4.189,39,3.45,44,3.833,45,2.401,68,0.221,69,0.135,77,2.455,89,1.937,90,2.356,93,0.011,94,0.011,95,2.175,101,2.356,102,1.768,103,1.634,132,1.768,148,0.699,233,3.819,234,2.818,241,2.995,390,2.674,394,4.813,396,2.818,398,2.525,399,2.185,436,4.415,437,4.869,464,4.178,465,4.178,466,4.81,467,4.178,468,4.189,469,3.761,470,3.761,471,3.761,472,4.81,473,3.45,474,4.415,475,4.178]],["title/injectables/ClaimReviewService.html",[233,1.884,476,0.735]],["body/injectables/ClaimReviewService.html",[3,0.08,4,0.063,5,0.071,7,0.769,11,0.836,13,1.639,14,0.015,15,0.936,16,1.409,18,1.66,20,0.185,21,0.248,23,0.523,35,1.518,36,2.9,68,0.08,69,0.063,70,1.119,76,1.587,93,0.006,94,0.006,111,0.607,114,0.248,115,0.962,117,1.161,119,0.512,128,0.654,134,0.63,148,0.73,152,1.492,153,3.319,154,1.492,155,3.406,157,1.177,163,2.129,169,1.543,170,1.865,171,2.364,182,1.689,186,5.493,189,1.313,228,1.773,229,1.119,233,1.69,255,1.865,258,1.698,259,1.917,260,1.902,262,1.118,266,1.255,279,2.088,280,1.241,281,2.73,283,2.388,331,1.753,334,1.337,375,1.177,383,3.34,398,1.865,399,3.302,402,4.737,403,1.753,405,3.924,418,1.753,431,3.816,468,2.778,470,1.753,471,1.753,473,3.6,474,2.548,476,0.659,477,0.792,478,1.947,479,3.552,480,5.019,481,3.552,482,4.966,483,3.552,484,3.552,485,3.552,486,3.552,487,3.552,488,3.552,489,2.242,490,2.388,491,3.375,492,3.552,493,3.552,494,2.242,495,2.242,496,3.552,497,3.552,498,3.552,499,4.751,500,3.552,501,3.085,502,4.412,503,4.412,504,3.552,505,3.552,506,3.552,507,2.242,508,4.373,509,2.778,510,2.242,511,1.161,512,1.417,513,3.552,514,2.242,515,3.552,516,2.242,517,2.242,518,2.242,519,3.552,520,2.242,521,2.242,522,3.552,523,2.242,524,3.552,525,1.119,526,2.081,527,3.552,528,2.242,529,3.552,530,2.242,531,3.552,532,2.242,533,3.552,534,4.751,535,2.242,536,3.552,537,1.396,538,1.119,539,1.947,540,2.242,541,5.471,542,5.019,543,4.412,544,3.6,545,2.242,546,3.085,547,3.832,548,2.242,549,1.947,550,2.242,551,2.242,552,2.242,553,2.242,554,2.242,555,2.242,556,1.608,557,1.608,558,3.552,559,2.242,560,1.608,561,1.947,562,1.947,563,2.242,564,1.947,565,2.242,566,2.242,567,2.242,568,3.34,569,5.019,570,1.947,571,2.242,572,2.242,573,3.552,574,3.552,575,2.242,576,2.242,577,1.947,578,2.242,579,2.242,580,2.242,581,2.242,582,2.242,583,2.242,584,2.242,585,2.242,586,2.242,587,2.242,588,2.242,589,2.242]],["title/classes/ClaimRevision.html",[69,0.111,120,2.32]],["body/classes/ClaimRevision.html",[3,0.136,4,0.106,5,0.12,11,0.841,14,0.015,20,0.207,23,0.882,35,1.889,68,0.216,69,0.106,70,1.887,76,0.818,93,0.009,94,0.009,111,2.154,112,1.336,114,0.418,115,1.419,117,2.414,118,4.006,119,0.915,120,3.525,121,2.035,122,3.747,123,3.159,124,3.827,125,4.25,128,2.061,129,3.597,131,3.742,132,1.927,133,1.985,134,1.473,135,2.516,136,4.914,142,2.354,144,2.516,145,3.489,146,2.516,147,3.489,148,0.762,152,2.516,153,2.752,154,2.516,155,3.747,169,1.643,346,3.998,398,1.985,399,3.354,407,3.76,408,2.902,409,4.706,417,2.712,428,1.887,429,2.956,431,1.985,432,2.712,511,1.236,590,2.712,591,3.525,592,4.706,593,3.781,594,3.244,595,3.781,596,3.781,597,3.781,598,3.781,599,3.781,600,3.781,601,2.956,602,3.781,603,3.781,604,3.781,605,4.099,606,3.781,607,3.781,608,3.781,609,3.781,610,2.956,611,3.284,612,3.284,613,2.215,614,4.099,615,3.284,616,3.781,617,2.712]],["title/modules/ClaimRevisionModule.html",[0,0.764,63,2.32]],["body/modules/ClaimRevisionModule.html",[0,1.293,2,1.591,3,0.168,4,0.131,5,0.149,14,0.015,15,0.624,20,0.249,21,0.518,22,2.458,23,1.092,35,1.578,38,4.159,39,3.359,44,3.767,45,2.337,46,3.75,47,2.915,63,4.707,64,2.592,68,0.168,69,0.131,70,2.337,77,2.413,90,2.316,93,0.011,94,0.011,95,2.138,101,2.316,102,1.722,103,1.591,120,3.544,132,1.722,137,3.662,148,0.681,241,2.915,388,4.678,390,2.629,393,4.067,394,4.731,396,2.743,399,2.127,617,4.34,618,4.067,619,4.067,620,4.067,621,4.683,622,4.979,623,3.662,624,4.067,625,4.067,626,4.34,627,4.067,628,4.683,629,4.067,630,4.683,631,4.683,632,4.683]],["title/injectables/ClaimRevisionService.html",[476,0.735,622,2.465]],["body/injectables/ClaimRevisionService.html",[3,0.134,4,0.167,5,0.119,7,1.123,11,0.789,13,1.393,14,0.015,15,0.796,16,1.198,18,1.393,20,0.23,21,0.413,23,0.87,35,1.95,64,3.893,68,0.134,69,0.105,76,1.123,93,0.009,94,0.009,111,1.749,114,0.413,115,1.406,119,0.694,120,3.978,134,1.048,137,2.916,148,0.542,155,4.378,157,1.958,163,1.953,169,2.256,182,1.428,228,2.283,229,2.592,258,2.181,259,2.596,260,2.22,262,1.634,266,1.318,311,2.482,375,1.958,378,1.862,399,3.195,424,2.256,476,0.964,477,1.318,490,3.073,491,3.994,511,1.219,512,1.488,525,1.862,526,3.784,538,1.862,539,3.239,591,3.042,601,2.916,622,3.233,624,3.239,626,3.725,633,3.239,634,4.285,635,5.193,636,3.73,637,4.492,638,5.193,639,5.193,640,3.73,641,3.233,642,4.061,643,3.725,644,5.193,645,3.73,646,4.51,647,2.916,648,3.73,649,4.061,650,3.73,651,2.875,652,3.725,653,3.73,654,2.675,655,3.73,656,3.73,657,3.239,658,3.73,659,3.239,660,3.73,661,4.51,662,3.239,663,2.916,664,4.51,665,3.239,666,3.239,667,2.916,668,3.239,669,2.916,670,3.239,671,3.239,672,3.73,673,5.193,674,3.73,675,3.73,676,2.482,677,2.185,678,2.875,679,3.239,680,3.73]],["title/injectables/ClaimService.html",[235,2.192,476,0.735]],["body/injectables/ClaimService.html",[0,1.009,3,0.064,4,0.05,5,0.057,7,0.637,11,0.78,13,1.514,14,0.015,15,0.881,16,1.326,18,1.629,20,0.202,21,0.197,23,0.415,35,2.036,36,0.71,54,1.276,64,0.985,68,0.064,69,0.05,70,1.47,76,1.576,93,0.008,94,0.005,111,1.499,114,0.197,115,0.797,116,1.391,117,1.587,118,1.96,119,0.607,123,0.934,128,1.1,134,0.828,139,1.184,140,1.184,141,1.391,148,1.035,153,2.746,155,3.855,163,2.412,169,1.903,170,2.907,171,1.96,174,2.113,177,1.834,182,2.217,184,1.401,189,2.566,191,2.548,199,2.558,202,2.558,223,2.558,228,1.548,229,2.764,233,2.634,234,1.042,235,1.63,244,0.888,255,2.548,258,2.14,259,1.637,260,2.283,262,0.927,265,2.746,266,2.336,272,2.558,279,1.568,280,2.086,281,2.187,283,2.309,286,1.184,290,3.805,295,4.117,333,1.391,334,1.585,344,1.545,345,1.545,349,2.113,353,3.805,362,2.303,395,2.703,398,1.546,402,1.184,417,1.276,424,1.637,476,0.547,477,0.629,482,2.113,490,1.401,508,1.276,509,2.303,511,1.232,512,1.503,525,2.187,526,2.566,537,1.108,538,0.888,544,1.276,547,1.545,556,1.276,557,1.276,560,2.113,568,3.999,594,2.423,612,1.545,613,1.725,622,3.448,625,1.545,634,2.703,642,2.303,643,3.142,646,2.558,647,1.391,651,1.63,652,2.113,654,1.276,659,1.545,671,3.805,676,1.184,677,1.042,681,1.391,682,2.945,683,2.945,684,2.945,685,4.543,686,2.945,687,1.545,688,3.244,689,2.945,690,2.945,691,3.805,692,1.779,693,2.945,694,1.779,695,4.381,696,1.779,697,2.945,698,1.779,699,3.769,700,5.031,701,3.74,702,4.543,703,2.558,704,4.381,705,3.426,706,3.805,707,1.779,708,2.558,709,3.805,710,2.558,711,2.558,712,2.558,713,2.558,714,1.779,715,2.945,716,1.779,717,2.303,718,2.558,719,1.779,720,2.945,721,1.779,722,2.945,723,1.779,724,3.769,725,4.854,726,1.779,727,2.945,728,2.945,729,2.558,730,2.945,731,2.113,732,2.558,733,2.558,734,1.779,735,1.545,736,2.303,737,2.945,738,1.545,739,1.276,740,1.545,741,2.558,742,1.545,743,1.545,744,1.779,745,1.779,746,1.779,747,2.945,748,1.545,749,1.779,750,2.113,751,2.113,752,2.303,753,2.303,754,2.113,755,2.303,756,2.113,757,1.779,758,3.769,759,1.779,760,1.779,761,1.779,762,1.779,763,1.779,764,1.779,765,2.945,766,2.945,767,1.779,768,2.945,769,3.273,770,3.769,771,1.779,772,3.769,773,1.545,774,3.769,775,1.779,776,1.779,777,1.779,778,1.779,779,3.769,780,1.779,781,1.779,782,1.779,783,1.545,784,1.779,785,2.945,786,1.779,787,1.545,788,1.276,789,1.779,790,1.391,791,1.545,792,1.779,793,1.779,794,1.779,795,1.779,796,1.779,797,1.779,798,1.779,799,1.779,800,1.545,801,1.779,802,1.545,803,2.945,804,2.945,805,1.779,806,2.945,807,1.779,808,2.945,809,1.779,810,1.779,811,1.779,812,1.779,813,1.779,814,1.779,815,1.779,816,1.779,817,1.779,818,1.545,819,1.779,820,1.779,821,1.779]],["title/classes/CreateClaimDTO.html",[69,0.111,196,2.636]],["body/classes/CreateClaimDTO.html",[3,0.171,4,0.133,5,0.152,11,0.891,14,0.015,20,0.195,68,0.171,69,0.171,93,0.011,94,0.011,112,1.68,114,0.526,115,1.654,117,2.466,119,0.919,121,2.156,128,2.338,135,3.165,196,4.067,310,4.494,346,3.955,383,4.494,428,2.373,591,3.955,592,5.279,822,6.75,823,3.718,824,6.189,825,4.755,826,4.755,827,4.755,828,4.755,829,4.755,830,4.755,831,4.755,832,4.755,833,4.755,834,4.755,835,6.11,836,4.382,837,4.778,838,6.11,839,5.999,840,4.777]],["title/classes/CreateClaimReview.html",[69,0.111,443,2.84]],["body/classes/CreateClaimReview.html",[3,0.159,4,0.123,5,0.141,11,0.889,14,0.015,20,0.221,35,2.099,68,0.159,69,0.164,93,0.01,94,0.01,112,1.563,114,0.489,115,1.578,117,2.418,119,0.889,121,2.151,128,2.314,135,2.944,310,4.34,383,4.34,399,3.518,402,4.34,403,5.099,404,5.663,405,5.099,417,3.172,420,3.459,428,2.208,443,4.181,470,3.459,471,3.459,824,3.842,837,4.558,839,5.42,840,4.822,841,6.726,842,3.842,843,5.83,844,4.423,845,4.423,846,4.423,847,7.204,848,4.423,849,4.423,850,4.423,851,4.423,852,4.423,853,4.423,854,4.423,855,4.423,856,4.423]],["title/classes/CreatePersonality.html",[69,0.111,857,2.84]],["body/classes/CreatePersonality.html",[3,0.177,4,0.137,5,0.157,11,0.884,14,0.015,15,0.915,16,1.527,20,0.157,68,0.177,69,0.175,93,0.011,94,0.011,112,1.74,114,0.545,115,1.692,119,0.884,121,2.14,128,2.323,428,2.458,525,3.426,651,3.459,839,4.886,840,4.873,857,4.482,858,6.718,859,4.278,860,5.962,861,5.962,862,4.569,863,5.962,864,4.925,865,5.428,866,4.925,867,4.278,868,4.925,869,4.925,870,4.925,871,4.925,872,4.925,873,5.428,874,5.645,875,4.925,876,4.925]],["title/modules/EmailModule.html",[0,0.764,50,2.636]],["body/modules/EmailModule.html",[0,1.304,2,1.901,3,0.201,4,0.156,5,0.178,14,0.014,20,0.232,21,0.619,44,4.21,45,2.792,50,5.29,68,0.201,69,0.157,77,2.231,90,2.588,93,0.012,94,0.012,95,2.389,101,2.588,102,2.056,103,1.901,390,2.938,877,4.858,878,4.858,879,4.858,880,5.097,881,5.593,882,5.593]],["title/injectables/EmailService.html",[476,0.735,880,2.465]],["body/injectables/EmailService.html",[3,0.147,4,0.114,5,0.131,7,1.199,11,0.815,13,1.464,14,0.015,15,0.837,16,1.259,17,4.178,18,1.464,20,0.177,21,0.454,45,2.047,68,0.147,69,0.115,76,1.358,93,0.01,94,0.01,114,0.454,115,1.5,119,0.643,128,1.617,148,1.131,163,2.366,182,2.121,228,2.376,239,5.192,258,1.962,259,2.727,260,1.812,262,1.744,266,1.958,334,1.242,476,1.028,477,1.449,511,1.812,512,2.211,678,2.27,880,3.45,883,3.206,884,6.724,885,6.278,886,5.542,887,4.101,888,5.542,889,4.101,890,4.101,891,7.527,892,4.101,893,5.542,894,5.542,895,5.84,896,5.84,897,6.278,898,4.101,899,5.542,900,2.941,901,3.561,902,2.941,903,3.561,904,3.206,905,3.561,906,2.941,907,3.561,908,5.452,909,4.101,910,4.101,911,4.101,912,4.101,913,5.542,914,4.101,915,4.101,916,4.101,917,6.278,918,4.101,919,3.206,920,4.101,921,4.101,922,4.101,923,4.101,924,4.101,925,4.101,926,5.542,927,3.561,928,4.101,929,4.101,930,4.101,931,4.101,932,3.206,933,5.542,934,4.101,935,4.101]],["title/classes/GetClaimsByHashDTO.html",[69,0.111,209,2.84]],["body/classes/GetClaimsByHashDTO.html",[3,0.18,4,0.14,5,0.16,11,0.87,14,0.014,16,1.269,20,0.16,68,0.18,69,0.178,93,0.011,94,0.011,112,1.776,114,0.556,115,1.714,119,0.87,121,2.107,128,2.233,209,4.539,255,4.162,279,2.883,281,3.458,283,3.296,428,2.508,613,4.26,836,4.539,837,4.949,840,4.528,874,4.949,936,5.984,937,4.365,938,3.147,939,3.929,940,5.025,941,5.025,942,3.929,943,5.025,944,3.929,945,5.025,946,5.025,947,5.025,948,4.949,949,5.417,950,3.929,951,4.949]],["title/classes/GetClaimsDTO.html",[69,0.111,214,2.84]],["body/classes/GetClaimsDTO.html",[3,0.184,4,0.143,5,0.164,11,0.876,14,0.015,20,0.164,68,0.184,69,0.18,93,0.011,94,0.011,112,1.816,114,0.569,115,1.738,117,2.288,119,0.876,121,2.121,128,2.246,214,4.604,279,2.912,281,3.494,283,3.33,428,2.566,613,4.295,836,4.604,840,4.792,936,6.018,938,3.18,939,4.019,942,4.019,944,4.019,948,5.02,949,5.474,950,4.019,951,5.02,952,4.464,953,5.14,954,5.14,955,5.14,956,5.14,957,5.14]],["title/classes/GetPersonalities.html",[69,0.111,958,2.84]],["body/classes/GetPersonalities.html",[3,0.176,4,0.137,5,0.157,11,0.883,14,0.015,15,0.914,16,1.446,20,0.157,68,0.176,69,0.175,93,0.011,94,0.011,112,1.737,114,0.544,115,1.69,119,0.883,121,2.139,128,2.22,279,2.853,281,3.423,283,3.262,428,2.453,613,4.226,651,3.455,836,4.476,840,4.636,865,4.269,867,4.269,873,5.421,874,5.362,938,3.115,939,3.843,942,3.843,944,3.843,948,4.88,949,5.362,950,3.843,951,4.88,958,4.476,959,6.715,960,4.269,961,5.956,962,4.915,963,4.915,964,4.915,965,4.915,966,4.915,967,4.915]],["title/classes/History.html",[69,0.111,701,2.465]],["body/classes/History.html",[3,0.15,4,0.116,5,0.133,11,0.844,14,0.015,16,0.836,20,0.202,23,0.972,35,1.462,68,0.254,69,0.117,70,2.081,93,0.01,94,0.01,111,2.153,112,1.473,114,0.461,115,1.517,117,1.832,119,0.927,121,2.044,122,4.215,123,2.942,124,3.894,125,3.489,129,3.102,131,3.71,132,2.061,133,2.189,134,1.575,142,2.596,144,2.775,145,3.731,146,2.775,147,4.506,148,0.606,157,3.323,169,2.435,170,2.942,177,3.489,334,2.289,346,4.138,407,2.991,416,2.775,419,4.383,594,3.379,677,4.261,701,3.942,739,4.541,968,2.775,969,5.294,970,5.605,971,4.17,972,4.17,973,4.868,974,4.868,975,4.17,976,4.17,977,4.17,978,4.17,979,3.26,980,4.17,981,3.26,982,4.17,983,3.621,984,2.991,985,3.621]],["title/modules/HistoryModule.html",[0,0.764,66,2.32]],["body/modules/HistoryModule.html",[0,1.263,2,1.803,3,0.19,4,0.148,5,0.169,14,0.015,15,0.707,20,0.243,21,0.587,22,2.785,23,1.237,44,4.076,45,2.648,66,4.604,68,0.19,69,0.149,77,2.116,90,2.506,93,0.012,94,0.012,95,2.313,101,2.506,102,1.95,103,1.803,132,1.95,148,0.771,390,2.844,396,3.108,688,4.764,984,4.696,986,4.608,987,4.608,988,4.608,989,4.148,990,4.608,991,5.306,992,4.696,993,4.608]],["title/injectables/HistoryService.html",[476,0.735,688,2.32]],["body/injectables/HistoryService.html",[3,0.126,4,0.098,5,0.112,7,1.075,11,0.77,13,1.347,14,0.015,15,0.77,16,1.158,18,1.689,20,0.2,21,0.387,23,0.817,68,0.126,69,0.098,76,1.36,93,0.009,94,0.009,111,1.345,114,0.387,115,1.345,117,2.054,119,0.886,134,0.984,148,0.722,157,2.608,163,1.888,169,2.73,170,2.608,182,1.341,212,3.307,228,2.22,229,3.538,258,2.068,259,2.509,260,2.471,262,1.563,265,3.299,334,2.194,346,3.681,476,0.922,477,1.238,490,3.554,511,1.624,512,1.982,525,2.48,526,2.91,537,2.181,538,1.748,568,4.183,594,3.44,634,4.142,643,4.507,647,2.739,651,2.75,652,3.564,654,2.512,677,4.037,688,2.91,701,4.651,788,4.507,969,3.885,979,2.739,981,3.885,990,3.042,992,3.564,994,3.042,995,4.969,996,5.775,997,3.503,998,4.969,999,4.969,1000,3.503,1001,4.183,1002,3.503,1003,6.636,1004,6.636,1005,3.503,1006,5.775,1007,4.969,1008,4.969,1009,4.316,1010,5.389,1011,4.969,1012,4.969,1013,4.316,1014,4.316,1015,4.316,1016,4.969,1017,3.503,1018,3.503,1019,3.503,1020,3.042,1021,3.503,1022,3.503,1023,3.503]],["title/controllers/HomeController.html",[160,1.246,1024,2.84]],["body/controllers/HomeController.html",[3,0.168,4,0.131,5,0.15,7,1.311,11,0.545,13,1.094,14,0.015,15,0.625,16,0.941,18,1.094,20,0.24,21,0.519,68,0.168,69,0.132,89,1.476,93,0.011,94,0.011,111,1.64,114,0.519,119,0.545,121,1.318,148,0.975,160,1.906,163,2.193,167,3.714,179,3.539,184,3.373,191,3.722,192,4.161,244,2.342,245,2.921,246,2.748,247,3.349,248,3.365,249,3.349,250,3.365,258,1.957,262,1.476,266,2.371,273,3.024,274,3.024,279,1.952,281,2.342,283,2.232,349,4.345,355,3.123,356,3.123,358,3.668,363,3.123,364,2.921,365,3.123,367,3.123,439,2.921,938,2.131,1024,4.345,1025,4.075,1026,5.261,1027,4.075,1028,4.075,1029,4.692,1030,3.93,1031,4.692,1032,4.075,1033,4.075,1034,4.345,1035,4.692,1036,4.075,1037,3.668,1038,4.692,1039,4.075,1040,4.075]],["title/modules/HomeModule.html",[0,0.764,48,2.636]],["body/modules/HomeModule.html",[0,1.282,2,1.846,3,0.195,4,0.152,5,0.173,14,0.014,20,0.244,21,0.601,30,4.095,31,3.616,40,4.857,41,4.719,46,3.894,47,3.383,48,5.38,68,0.195,69,0.152,77,2.65,89,2.09,90,2.08,93,0.012,94,0.012,95,2.347,101,2.543,102,1.998,103,1.846,1024,5.147,1041,4.719,1042,4.719,1043,5.434,1044,5.434]],["title/injectables/LocalAuthGuard.html",[476,0.735,1045,2.84]],["body/injectables/LocalAuthGuard.html",[3,0.219,4,0.17,5,0.194,14,0.014,20,0.227,21,0.674,68,0.219,69,0.171,93,0.013,94,0.013,106,4.367,476,1.32,477,2.151,1045,5.101,1046,5.288,1047,5.288,1048,6.089,1049,4.053,1050,6.089]],["title/injectables/LocalSerializer.html",[99,2.636,476,0.735]],["body/injectables/LocalSerializer.html",[3,0.198,4,0.154,5,0.176,11,0.642,13,1.29,14,0.015,15,0.737,16,1.109,20,0.246,21,0.612,23,1.29,68,0.198,69,0.155,93,0.012,94,0.012,99,4.47,119,0.642,134,1.554,258,1.614,262,2.113,273,3.352,274,3.352,334,1.676,416,3.681,476,1.246,477,1.954,490,3.578,538,2.761,1051,4.804,1052,4.325,1053,5.531,1054,4.181,1055,5.251,1056,3.24,1057,4.325,1058,5.531,1059,5.531]],["title/injectables/LocalStrategy.html",[100,2.636,476,0.735]],["body/injectables/LocalStrategy.html",[3,0.195,4,0.151,5,0.173,11,0.629,13,1.264,14,0.015,15,0.722,16,1.087,20,0.248,21,0.6,23,1.264,68,0.195,69,0.152,93,0.012,94,0.012,100,4.416,106,3.889,119,0.629,134,1.524,258,1.582,262,2.088,273,2.706,274,2.706,334,1.643,416,3.609,476,1.231,477,1.916,490,3.554,538,2.706,1049,3.609,1052,4.239,1054,4.131,1055,4.239,1056,3.176,1057,4.239,1060,4.709,1061,5.422,1062,4.239,1063,3.609,1064,5.422,1065,5.422,1066,5.422,1067,4.239,1068,3.609,1069,5.422]],["title/classes/Logger.html",[69,0.111,228,1.399]],["body/classes/Logger.html",[3,0.158,4,0.123,5,0.141,7,1.26,11,0.875,13,1.724,14,0.015,15,0.985,16,1.482,18,1.679,20,0.141,21,0.488,68,0.158,69,0.124,93,0.01,94,0.01,112,1.56,114,0.488,115,1.576,119,0.836,128,2.347,228,2.664,258,1.901,262,1.389,309,3.223,408,4.326,511,1.443,1070,3.835,1071,4.176,1072,6.515,1073,5.823,1074,5.823,1075,5.823,1076,5.823,1077,5.823,1078,5.823,1079,5.823,1080,5.687,1081,4.415,1082,7.2,1083,5.823,1084,6.927,1085,4.415,1086,5.823,1087,4.415,1088,3.167,1089,5.823,1090,4.415,1091,5.823,1092,4.415,1093,4.415,1094,4.415,1095,4.415,1096,4.415,1097,4.415,1098,4.415]],["title/classes/NotFoundFilter.html",[55,2.84,69,0.111]],["body/classes/NotFoundFilter.html",[3,0.184,4,0.143,5,0.164,7,1.389,11,0.597,13,1.199,14,0.015,15,0.685,16,1.031,18,1.199,20,0.205,21,0.569,55,4.604,68,0.184,69,0.144,93,0.011,94,0.011,103,2.181,112,1.816,114,0.569,119,0.597,148,0.933,179,3.204,244,2.566,279,2.671,294,4.273,309,3.553,378,3.494,380,4.604,408,3.553,511,2.099,525,2.566,919,5.474,1071,4.604,1080,3.687,1088,3.687,1099,5.575,1100,4.464,1101,6.42,1102,5.575,1103,6.42,1104,5.575,1105,6.42,1106,5.575,1107,7,1108,6.42,1109,7.332,1110,7.332,1111,5.14,1112,5.14,1113,5.14,1114,5.14,1115,5.14,1116,5.14]],["title/modules/ParserModule.html",[0,0.764,388,2.465]],["body/modules/ParserModule.html",[0,1.317,2,1.931,3,0.204,4,0.159,5,0.181,14,0.014,20,0.218,21,0.629,68,0.204,69,0.159,90,2.613,93,0.012,94,0.012,95,2.412,101,2.613,102,2.089,103,1.931,388,4.964,390,2.966,637,5.107,1117,4.936,1118,4.936,1119,4.936,1120,5.683,1121,5.683]],["title/injectables/ParserService.html",[476,0.735,637,2.465]],["body/injectables/ParserService.html",[3,0.124,4,0.097,5,0.111,7,1.067,11,0.839,13,1.34,14,0.015,15,0.765,16,1.152,18,1.542,20,0.111,21,0.384,68,0.124,69,0.097,70,1.731,76,1.486,93,0.009,94,0.009,114,0.635,115,1.336,119,0.821,128,1.825,148,1.144,245,3.072,265,2.59,280,2.731,332,3.012,333,3.858,431,1.82,476,0.916,477,1.225,511,1.134,512,1.383,526,3.364,591,3.665,594,3.123,613,4.14,637,3.072,896,4.285,1122,2.712,1123,5.743,1124,5.743,1125,5.743,1126,6.257,1127,6.257,1128,4.934,1129,4.934,1130,3.468,1131,3.468,1132,4.934,1133,3.468,1134,4.934,1135,3.468,1136,4.934,1137,4.491,1138,4.934,1139,3.468,1140,5.742,1141,4.934,1142,3.468,1143,3.468,1144,3.468,1145,3.539,1146,3.012,1147,2.712,1148,3.012,1149,4.934,1150,3.858,1151,3.012,1152,2.712,1153,3.012,1154,3.468,1155,3.468,1156,3.468,1157,2.712,1158,3.012,1159,2.712,1160,3.012,1161,3.468,1162,3.468,1163,3.468,1164,3.468,1165,3.468,1166,3.468,1167,3.468,1168,3.468,1169,3.468,1170,3.468,1171,5.743,1172,5.743,1173,3.858,1174,3.468,1175,3.468,1176,3.468,1177,3.468,1178,4.934,1179,3.468,1180,3.468,1181,3.468,1182,3.468,1183,3.012,1184,3.468,1185,3.468,1186,3.468,1187,5.743,1188,3.468,1189,3.468,1190,3.468,1191,3.012,1192,3.468,1193,4.934,1194,3.468,1195,3.468,1196,3.468,1197,3.468,1198,3.468,1199,3.468,1200,3.468,1201,3.468,1202,4.934,1203,3.468,1204,4.934,1205,3.468]],["title/classes/Personality.html",[69,0.111,117,1.295]],["body/classes/Personality.html",[3,0.169,4,0.132,5,0.15,11,0.825,14,0.015,15,0.896,20,0.214,23,1.1,35,1.231,68,0.241,69,0.132,93,0.011,94,0.011,111,2.167,112,1.667,114,0.522,115,1.646,117,2.323,118,4.478,119,0.854,121,1.997,124,3.358,125,2.938,128,2.264,129,3.724,131,3.67,132,2.235,133,2.477,134,1.891,138,4.098,139,3.141,140,3.141,142,2.938,144,3.141,145,4.047,146,3.141,148,0.884,152,3.141,153,2.477,154,3.141,525,3.358,641,2.938,862,4.478,1206,3.384,1207,4.719,1208,4.719,1209,4.719,1210,4.719,1211,6.08,1212,4.719,1213,3.689,1214,4.754,1215,4.098,1216,4.719,1217,4.719,1218,3.384]],["title/controllers/PersonalityController.html",[160,1.246,1219,2.84]],["body/controllers/PersonalityController.html",[3,0.1,4,0.077,5,0.088,7,0.907,11,0.806,13,1.619,14,0.015,15,0.925,16,1.392,18,1.619,20,0.216,21,0.307,68,0.1,69,0.078,70,1.385,76,1.373,89,0.873,93,0.007,94,0.007,111,1.367,114,0.307,117,2.154,119,0.701,121,1.951,148,0.818,160,1.318,163,2.571,167,3.843,169,2.193,170,2.65,174,3.005,177,2.609,179,3.532,182,2.311,184,3.366,189,3.536,191,3.773,192,4.187,227,4.552,228,1.481,229,1.385,230,1.991,231,2.17,232,1.847,242,1.536,243,1.847,244,1.385,245,1.728,246,1.626,247,2.52,249,2.52,250,1.991,251,2.17,253,2.411,258,1.473,259,1.206,260,0.907,262,0.873,266,2.243,273,2.807,274,2.807,278,2.411,279,1.743,297,3.276,298,3.743,300,2.17,309,2.319,317,2.411,320,2.411,355,3.36,356,3.36,357,2.411,358,2.17,363,3.743,364,3.501,365,3.36,367,3.743,372,2.411,375,2.65,378,2.52,379,2.17,380,1.991,408,1.536,526,1.626,594,1.385,717,5.304,857,4.552,862,1.847,938,1.261,958,4.552,1152,2.17,1219,3.005,1220,2.411,1221,3.639,1222,4.19,1223,3.639,1224,4.19,1225,2.776,1226,2.776,1227,2.776,1228,2.411,1229,2.776,1230,2.776,1231,2.776,1232,2.776,1233,2.776,1234,4.19,1235,2.776,1236,2.776,1237,2.776,1238,2.776,1239,2.776,1240,2.776,1241,2.776,1242,2.776,1243,2.411,1244,2.776,1245,2.776,1246,2.776,1247,2.776,1248,2.776,1249,2.411,1250,2.776,1251,2.776,1252,2.411,1253,2.776,1254,2.776,1255,2.776,1256,2.776,1257,2.776,1258,2.776,1259,2.776,1260,2.776,1261,2.776,1262,2.776,1263,2.776,1264,2.776,1265,2.776,1266,2.411,1267,2.411,1268,2.776,1269,2.776,1270,4.19,1271,2.411,1272,2.411,1273,4.19,1274,4.19,1275,2.776,1276,2.776,1277,2.776,1278,2.776,1279,2.776,1280,2.776,1281,2.776,1282,2.776,1283,2.776,1284,2.776,1285,2.17,1286,2.776,1287,2.776,1288,2.776,1289,2.411,1290,2.411]],["title/modules/PersonalityModule.html",[0,0.764,30,2.079]],["body/modules/PersonalityModule.html",[0,1.126,2,1.506,3,0.159,4,0.124,5,0.141,14,0.015,15,0.59,20,0.253,21,0.49,22,2.326,23,1.033,28,4.608,29,3.849,30,4.277,34,3.885,35,1.522,36,1.767,37,2.949,46,3.694,47,2.759,63,4.335,64,2.453,65,3.465,66,4.335,67,3.465,68,0.159,69,0.124,77,2.328,89,1.836,90,2.234,93,0.01,94,0.01,95,2.062,101,2.234,102,1.629,103,1.506,117,1.449,132,1.629,148,0.644,228,2.306,247,3.96,390,2.536,396,2.595,468,4.097,473,3.178,1218,4.186,1219,4.681,1252,3.849,1291,3.849,1292,3.849,1293,3.849,1294,3.849,1295,3.465,1296,3.849,1297,4.431,1298,4.186,1299,3.849]],["title/injectables/PersonalityService.html",[247,1.977,476,0.735]],["body/injectables/PersonalityService.html",[0,0.968,3,0.059,4,0.046,5,0.052,7,0.594,11,0.774,13,1.505,14,0.015,15,0.86,16,1.294,17,1.089,18,1.597,20,0.206,21,0.181,23,0.382,35,1.309,36,0.653,54,1.174,68,0.059,69,0.046,70,0.817,76,1.562,93,0.008,94,0.005,103,0.556,111,1.672,114,0.181,115,0.744,116,1.28,117,2.485,118,1.089,119,0.619,128,1.556,134,0.772,139,1.089,140,1.089,148,1.042,153,2.432,163,2.326,169,2.013,170,2.633,171,1.829,174,2.547,177,1.711,182,2.041,184,1.307,189,3.277,191,2.432,228,1.469,229,2.504,233,1.978,234,0.959,244,0.817,247,1.371,255,1.442,258,1.845,259,2.18,260,2.067,262,0.865,265,2.937,266,2.514,271,3.612,273,0.817,274,0.817,279,2.421,280,0.906,281,2.661,282,2.363,283,2.536,284,1.174,286,1.829,291,2.776,293,2.148,294,1.089,295,3.319,296,1.422,297,1.28,307,0.959,331,2.148,334,1.52,349,1.971,352,2.386,360,3.251,375,0.859,378,1.371,398,1.864,424,2.431,468,2.302,473,2.982,476,0.51,477,0.578,482,1.971,490,1.307,508,1.174,509,2.148,511,1.743,512,2.127,525,1.772,526,2.714,538,0.817,544,1.174,546,1.422,556,1.174,557,1.174,560,1.971,564,3.084,568,3.339,591,2.08,592,2.148,594,0.817,634,2.547,642,2.148,643,2.982,649,2.148,652,1.971,654,1.174,657,1.422,661,3.084,662,1.422,663,1.28,664,2.386,665,2.386,666,1.422,667,1.28,668,1.422,669,1.28,670,1.422,677,0.959,685,2.386,687,1.422,688,2.436,700,4.357,701,3.936,702,4.357,703,2.386,705,3.251,706,3.612,708,2.386,709,3.612,710,2.386,711,2.386,712,2.386,713,2.386,717,4.699,718,1.422,729,2.386,731,2.982,732,2.386,733,2.386,735,1.422,736,2.148,738,1.422,739,1.174,740,1.422,741,2.386,742,1.422,743,1.422,748,1.422,750,2.982,751,2.547,752,2.776,753,2.776,754,2.547,755,2.776,756,2.547,769,3.084,773,1.422,783,1.422,787,1.422,788,1.174,791,1.422,862,3.084,906,2.547,938,3.11,961,3.612,1034,4.627,1036,1.422,1151,1.422,1213,1.28,1221,2.386,1228,2.386,1249,2.386,1271,2.386,1272,1.422,1296,1.422,1298,2.547,1300,1.422,1301,2.748,1302,2.748,1303,2.748,1304,2.748,1305,2.589,1306,1.637,1307,2.748,1308,1.637,1309,1.637,1310,2.748,1311,1.637,1312,4.158,1313,1.637,1314,2.748,1315,1.637,1316,1.637,1317,4.357,1318,2.748,1319,1.637,1320,2.748,1321,1.637,1322,1.637,1323,2.748,1324,1.637,1325,4.634,1326,1.637,1327,2.748,1328,2.748,1329,1.637,1330,2.748,1331,1.637,1332,1.637,1333,1.637,1334,1.637,1335,1.637,1336,1.637,1337,1.637,1338,1.637,1339,2.748,1340,1.637,1341,1.637,1342,1.637,1343,1.637,1344,1.637,1345,1.637,1346,1.637,1347,4.158,1348,1.637,1349,1.422,1350,3.551,1351,1.637,1352,3.551,1353,3.551,1354,1.637,1355,1.422,1356,1.637,1357,3.551,1358,2.386,1359,2.748,1360,1.637,1361,2.748,1362,1.637,1363,1.637,1364,1.422,1365,1.637,1366,1.637,1367,1.637,1368,2.748,1369,1.637,1370,1.089,1371,1.637,1372,1.637,1373,1.174,1374,1.422,1375,1.637,1376,1.637,1377,1.637,1378,1.637,1379,1.637,1380,1.637,1381,1.637,1382,1.637,1383,1.637,1384,1.637,1385,1.637,1386,1.637,1387,1.637,1388,2.748,1389,4.158,1390,1.637,1391,3.551,1392,1.637,1393,1.637,1394,1.637,1395,1.637,1396,1.637,1397,1.637,1398,1.637,1399,2.748,1400,1.637,1401,1.637,1402,1.637,1403,1.637,1404,1.637,1405,1.637,1406,4.158,1407,1.422]],["title/controllers/RootController.html",[42,2.84,160,1.246]],["body/controllers/RootController.html",[3,0.189,4,0.147,5,0.168,7,1.411,11,0.757,13,1.229,14,0.015,15,0.702,16,1.057,18,1.521,20,0.168,21,0.583,42,4.677,68,0.189,69,0.148,76,1.14,89,1.659,93,0.012,94,0.012,114,0.583,121,1.833,128,1.538,148,0.766,160,1.659,184,3.616,192,3.919,334,1.597,439,3.282,919,4.122,1088,3.781,1408,4.578,1409,5.272,1410,7.398,1411,6.521,1412,5.272,1413,5.272,1414,5.664,1415,5.272,1416,5.272,1417,5.272,1418,5.272,1419,5.272,1420,5.272,1421,4.578,1422,4.578,1423,5.272,1424,5.272,1425,5.272,1426,5.272,1427,5.272,1428,5.272,1429,5.272]],["title/guards/SessionGuard.html",[242,2.192,1430,3.096]],["body/guards/SessionGuard.html",[3,0.188,4,0.146,5,0.167,7,1.407,11,0.609,13,1.224,14,0.015,15,0.699,16,1.052,18,1.224,20,0.167,21,0.581,68,0.188,69,0.147,76,1.407,93,0.012,94,0.012,111,1.421,114,0.581,119,0.609,148,1.027,179,2.62,191,2.755,242,3.6,260,1.716,311,3.494,375,2.755,378,2.62,424,2.28,651,3.6,678,2.906,1071,4.665,1080,3.765,1431,5.249,1432,4.559,1433,7.593,1434,6.504,1435,7.387,1436,5.249,1437,4.329,1438,6.504,1439,5.249,1440,5.249,1441,5.249,1442,5.249,1443,6.504,1444,5.249,1445,5.249]],["title/controllers/SitemapController.html",[160,1.246,1446,2.84]],["body/controllers/SitemapController.html",[3,0.177,4,0.138,5,0.157,7,1.354,11,0.726,13,1.459,14,0.015,15,0.834,16,1.255,18,1.459,20,0.219,21,0.546,68,0.177,69,0.138,76,1.068,89,1.553,93,0.011,94,0.011,114,0.546,119,0.726,121,1.758,148,0.717,160,1.969,163,2.49,182,1.889,184,3.547,191,3.284,192,3.803,232,3.285,242,2.732,243,3.285,266,1.744,298,3.285,439,3.072,1421,5.434,1422,5.434,1446,4.488,1447,4.286,1448,5.434,1449,5.434,1450,4.935,1451,4.935,1452,6.257,1453,4.935,1454,4.935,1455,4.935,1456,4.893,1457,4.935,1458,4.935,1459,4.278,1460,4.286,1461,3.859,1462,4.935,1463,4.935,1464,4.935,1465,4.935,1466,4.935,1467,4.935,1468,4.935,1469,4.935,1470,4.935]],["title/modules/SitemapModule.html",[0,0.764,61,2.636]],["body/modules/SitemapModule.html",[0,1.227,2,1.721,3,0.182,4,0.141,5,0.161,14,0.015,20,0.244,21,0.56,30,4.025,31,3.372,32,4.492,33,3.962,34,4.025,35,1.321,36,2.021,37,3.372,61,5.403,68,0.182,69,0.142,77,2.538,89,2.002,90,2.435,93,0.011,94,0.011,95,2.248,101,2.435,102,1.863,103,1.721,390,2.764,1446,4.988,1459,5.033,1460,4.4,1471,4.4,1472,5.066,1473,4.4,1474,4.4,1475,5.066,1476,5.066]],["title/injectables/SitemapService.html",[476,0.735,1459,2.465]],["body/injectables/SitemapService.html",[3,0.13,4,0.101,5,0.116,7,1.102,11,0.741,13,1.372,14,0.015,15,0.784,16,1.18,18,1.187,20,0.214,21,0.401,35,1.328,36,1.446,68,0.13,69,0.102,70,1.81,76,1.273,93,0.011,94,0.009,114,0.401,115,1.378,117,1.924,119,0.421,148,1.106,163,2.279,182,1.949,228,2.255,233,3.406,234,2.124,235,3.963,246,4.456,247,3.479,248,2.601,255,2.673,258,2.034,259,2.556,260,1.924,262,1.602,266,2.375,280,3.257,284,3.652,295,3.17,309,2.007,360,2.835,362,2.835,366,2.835,375,1.903,378,1.81,408,2.818,424,2.212,476,0.945,477,1.281,511,1.185,512,1.446,678,2.007,750,2.601,751,2.601,752,2.835,753,2.835,754,2.601,755,2.835,756,2.601,790,2.835,802,3.149,1034,3.652,1040,3.149,1062,2.835,1285,2.835,1448,4.422,1449,4.422,1456,4.601,1459,3.17,1477,2.835,1478,3.626,1479,3.626,1480,5.092,1481,3.626,1482,5.885,1483,5.092,1484,3.626,1485,5.092,1486,3.626,1487,5.885,1488,3.626,1489,3.149,1490,2.413,1491,2.835,1492,5.092,1493,3.149,1494,3.149,1495,2.835,1496,3.149,1497,3.149,1498,3.149,1499,3.149,1500,3.626,1501,3.626,1502,3.149,1503,3.626,1504,2.835,1505,5.885,1506,3.626,1507,3.626,1508,3.626,1509,3.626,1510,3.626,1511,3.626,1512,3.626,1513,3.626,1514,3.626,1515,3.626,1516,3.149,1517,3.626,1518,3.626,1519,3.626,1520,3.626,1521,3.149,1522,3.626]],["title/classes/Source.html",[4,0.111,69,0.111]],["body/classes/Source.html",[3,0.152,4,0.19,5,0.135,11,0.848,14,0.015,20,0.203,23,0.987,35,1.104,68,0.229,69,0.119,76,0.916,93,0.01,94,0.01,111,2.053,112,1.496,114,0.468,115,1.533,119,0.891,121,2.053,122,3.525,123,3.576,124,3.647,125,4.549,128,2.212,129,3.134,131,3.784,132,2.082,133,2.222,134,1.591,142,2.636,147,4.534,148,0.616,157,3.349,334,2.297,398,2.222,402,4.534,407,3.037,408,3.134,409,4.989,416,2.818,419,4.428,428,2.113,429,4.428,431,2.222,432,3.037,525,3.185,605,4.428,676,4.247,677,3.737,973,4.918,974,4.918,1523,3.037,1524,4.234,1525,4.234,1526,4.234,1527,4.234,1528,4.234,1529,5.663,1530,5.663,1531,4.234,1532,4.234,1533,3.311,1534,4.234,1535,4.234,1536,4.234,1537,4.234,1538,3.037,1539,3.677]],["title/controllers/SourceController.html",[160,1.246,1540,2.84]],["body/controllers/SourceController.html",[3,0.174,4,0.135,5,0.154,7,1.337,11,0.562,13,1.128,14,0.015,15,0.645,16,0.97,18,1.128,20,0.197,21,0.535,68,0.174,69,0.136,76,1.337,89,1.522,93,0.011,94,0.011,114,0.535,119,0.562,121,1.36,148,1.077,157,3.573,160,1.944,163,2.226,167,3.768,182,1.852,189,3.619,212,4.531,228,2.183,229,2.415,258,1.412,259,2.102,260,1.582,279,3.083,281,3.58,282,3.22,283,2.939,291,5.323,293,3.783,294,3.22,378,2.415,383,4.113,491,3.768,1407,4.202,1461,3.783,1540,4.432,1541,4.202,1542,6.179,1543,4.839,1544,7.173,1545,4.839,1546,4.839,1547,4.202,1548,4.839,1549,4.839,1550,4.839,1551,4.839,1552,4.839,1553,4.202,1554,4.839,1555,7.173,1556,4.839]],["title/modules/SourceModule.html",[0,0.764,38,2.192]],["body/modules/SourceModule.html",[0,1.26,2,1.795,3,0.19,4,0.182,5,0.168,14,0.015,15,0.704,20,0.242,21,0.584,22,2.773,23,1.232,38,4.347,68,0.19,69,0.148,77,2.107,89,2.055,90,2.499,93,0.012,94,0.012,95,2.307,101,2.499,102,1.942,103,1.795,132,1.942,148,0.768,390,2.837,396,3.094,491,4.499,1538,4.683,1540,5.083,1547,4.588,1557,4.588,1558,4.588,1559,4.588,1560,4.131,1561,4.588,1562,5.283,1563,4.683,1564,4.588]],["title/injectables/SourceService.html",[476,0.735,491,2.192]],["body/injectables/SourceService.html",[3,0.169,4,0.198,5,0.15,7,1.312,11,0.78,13,1.566,14,0.015,15,0.895,16,1.346,18,1.415,20,0.226,21,0.52,23,1.096,68,0.169,69,0.132,76,1.312,93,0.011,94,0.011,114,0.52,119,0.704,128,1.77,134,1.321,148,0.683,153,2.467,157,3.525,163,2.459,169,2.635,182,2.322,258,1.371,260,2.32,262,1.908,265,2.467,266,1.661,279,2.794,281,3.542,283,3.375,284,4.35,476,1.126,477,1.661,490,3.375,491,3.357,511,1.537,512,1.875,537,2.926,538,2.346,544,3.371,556,3.371,557,3.371,1533,3.675,1553,5.268,1561,4.083,1563,4.35,1565,4.083,1566,6.065,1567,4.701,1568,4.701,1569,6.065,1570,4.701,1571,4.701,1572,4.701,1573,4.701,1574,4.701,1575,4.701,1576,4.701,1577,4.701,1578,4.701,1579,4.701,1580,4.701]],["title/controllers/StatsController.html",[160,1.246,1581,2.84]],["body/controllers/StatsController.html",[3,0.207,4,0.161,5,0.184,7,1.489,11,0.669,14,0.015,18,1.344,20,0.219,21,0.637,68,0.207,69,0.162,76,1.247,89,1.813,93,0.012,94,0.012,114,0.637,121,1.62,160,1.813,258,1.681,262,1.813,439,3.588,1028,5.005,1030,4.312,1032,5.005,1039,5.005,1581,4.937,1582,5.005,1583,5.763,1584,6.623,1585,5.763,1586,5.005,1587,5.763]],["title/modules/StatsModule.html",[0,0.764,40,2.465]],["body/modules/StatsModule.html",[0,1.23,2,1.729,3,0.183,4,0.142,5,0.162,14,0.015,20,0.245,21,0.563,30,4.029,31,3.386,32,4.497,33,3.978,34,4.029,35,1.327,36,2.029,37,3.386,40,5.057,68,0.183,69,0.143,77,2.544,89,2.007,90,2.441,93,0.011,94,0.011,95,2.254,101,2.441,102,1.87,103,1.729,390,2.771,1030,4.738,1581,4.997,1586,4.418,1588,4.418,1589,4.418,1590,5.087,1591,4.418,1592,5.087,1593,5.087]],["title/injectables/StatsService.html",[476,0.735,1030,2.32]],["body/injectables/StatsService.html",[3,0.188,4,0.146,5,0.167,7,1.407,11,0.755,13,1.224,14,0.015,15,0.699,16,1.052,18,1.224,20,0.235,21,0.581,35,1.369,36,2.094,68,0.188,69,0.147,76,1.407,93,0.012,94,0.012,114,0.581,119,0.609,233,3.68,234,3.075,235,4.341,247,3.915,248,3.765,255,2.755,258,2.062,262,2.046,286,3.494,295,3.268,476,1.207,477,1.855,1030,3.81,1034,3.765,1489,4.559,1584,6.416,1594,4.559,1595,5.249,1596,5.249,1597,5.249,1598,5.249,1599,5.249,1600,5.249,1601,5.249,1602,5.249,1603,5.249,1604,5.249]],["title/classes/UpdateClaimDTO.html",[69,0.111,224,2.84]],["body/classes/UpdateClaimDTO.html",[3,0.219,4,0.17,5,0.194,14,0.014,20,0.227,68,0.219,69,0.171,93,0.013,94,0.013,112,2.151,169,2.645,196,4.053,224,5.101,252,5.288,537,3.791,823,4.761,1049,4.053,1605,5.288,1606,6.089,1607,5.288,1608,6.089]],["title/classes/User.html",[69,0.111,334,1.2]],["body/classes/User.html",[3,0.184,4,0.143,5,0.163,11,0.812,14,0.015,15,0.932,20,0.204,23,1.196,68,0.251,69,0.144,71,3.005,93,0.011,94,0.011,111,2.136,112,1.812,114,0.567,115,1.736,119,0.812,121,1.965,124,3.491,128,2.138,129,3.871,131,3.657,132,2.357,133,2.692,134,1.442,148,0.746,334,2.119,424,2.785,511,2.096,641,3.991,651,3.549,1001,4.267,1049,3.414,1056,3.005,1068,4.655,1609,3.679,1610,6.074,1611,5.13,1612,5.13,1613,5.13,1614,4.455,1615,3.414,1616,4.011]],["title/interfaces/UserDocument.html",[71,2.32,1056,2.32]],["body/interfaces/UserDocument.html",[3,0.195,4,0.152,5,0.174,7,1.439,11,0.632,14,0.015,15,0.726,18,1.27,20,0.212,23,1.27,68,0.258,69,0.153,71,3.19,93,0.012,94,0.012,111,2.026,114,0.602,124,3.585,128,1.941,131,3.734,132,2.446,133,2.858,134,1.53,148,0.792,334,2.176,424,2.366,511,1.78,641,3.39,651,3.014,1001,4.428,1049,4.428,1056,3.897,1068,3.624,1609,3.906,1610,4.73,1614,6.498,1615,3.624,1616,4.258,1617,4.73,1618,5.446]],["title/controllers/UsersController.html",[160,1.246,1619,2.84]],["body/controllers/UsersController.html",[3,0.121,4,0.094,5,0.107,7,1.044,11,0.758,13,1.523,14,0.015,15,0.87,16,1.309,18,1.523,20,0.228,21,0.372,68,0.121,69,0.094,76,1.221,89,1.057,93,0.009,94,0.009,102,1.235,111,1.768,114,0.372,119,0.56,121,1.835,134,1.356,148,0.82,160,1.518,163,2.533,167,3.763,179,3.495,182,1.286,184,3.634,191,3.676,192,4.375,228,1.704,230,2.41,231,2.627,232,2.236,242,1.86,243,2.236,244,1.677,245,2.092,246,1.968,249,2.817,250,2.41,258,1.646,259,2.096,260,1.098,262,1.057,266,1.704,273,2.408,274,2.408,279,1.398,298,3.756,311,3.21,334,1.461,335,2.918,355,3.21,356,3.21,363,3.21,364,3.003,365,3.21,367,3.21,375,1.764,378,1.677,408,3.123,508,2.41,560,2.41,678,1.86,679,4.189,1010,2.627,1045,2.41,1223,4.189,1243,2.918,1289,2.918,1349,2.918,1355,2.918,1437,3.21,1497,5.672,1498,4.901,1521,4.189,1619,3.46,1620,2.918,1621,4.189,1622,4.189,1623,3.36,1624,3.36,1625,3.36,1626,3.36,1627,3.36,1628,3.36,1629,3.36,1630,3.36,1631,3.36,1632,3.36,1633,3.36,1634,3.36,1635,3.36,1636,3.36,1637,3.513,1638,2.918,1639,3.36,1640,3.36,1641,3.36,1642,3.36,1643,3.36,1644,3.36,1645,3.36,1646,3.36,1647,3.36,1648,3.36,1649,3.36,1650,3.36,1651,4.189,1652,4.901,1653,4.824,1654,3.36,1655,3.36,1656,3.36,1657,3.36,1658,4.047,1659,3.36,1660,3.36,1661,3.36,1662,3.36,1663,3.36,1664,3.36,1665,3.36,1666,3.36,1667,4.824,1668,3.36,1669,3.36,1670,3.36]],["title/modules/UsersModule.html",[0,0.764,24,2.465]],["body/modules/UsersModule.html",[0,1.209,2,1.68,3,0.177,4,0.138,5,0.158,14,0.015,15,0.659,20,0.243,21,0.547,22,2.596,23,1.153,24,4.923,46,3.804,47,3.079,68,0.177,69,0.139,76,1.07,77,2.499,89,1.971,90,2.398,93,0.011,94,0.011,95,2.214,101,2.398,102,1.818,103,1.68,132,2.303,134,1.39,148,0.911,334,1.498,390,2.722,1054,4.281,1063,3.291,1067,3.866,1068,3.291,1615,4.17,1619,4.932,1637,5.017,1638,4.295,1671,4.295,1672,4.945,1673,4.295,1674,4.295,1675,3.866,1676,4.295,1677,4.945,1678,3.866,1679,4.295,1680,3.866,1681,4.295]],["title/injectables/UsersService.html",[476,0.735,1637,2.465]],["body/injectables/UsersService.html",[3,0.152,4,0.118,5,0.135,7,1.225,9,4.918,11,0.848,13,1.589,14,0.015,15,0.908,16,1.366,18,1.589,20,0.217,21,0.468,23,0.987,68,0.152,69,0.119,76,1.474,93,0.01,94,0.01,111,1.146,114,0.468,115,1.533,119,0.492,134,1.19,148,0.823,163,2.51,171,3.769,182,2.168,228,2.407,258,1.987,259,2.772,260,2.086,262,1.782,266,2.001,273,2.826,274,2.826,334,2.213,424,1.839,476,1.051,477,1.496,490,3.241,511,1.384,512,1.689,534,4.918,538,2.113,610,3.311,731,4.061,1020,5.542,1052,3.311,1054,3.525,1056,2.48,1057,3.311,1358,3.677,1437,3.769,1621,4.918,1622,5.916,1637,3.525,1651,5.542,1652,5.542,1658,4.061,1676,3.677,1682,3.677,1683,5.663,1684,5.663,1685,4.234,1686,4.234,1687,5.663,1688,4.234,1689,5.663,1690,4.234,1691,5.663,1692,4.234,1693,4.234,1694,4.234,1695,4.234,1696,4.234,1697,4.234,1698,4.234,1699,4.234,1700,5.663,1701,5.663,1702,4.234]],["title/injectables/UtilService.html",[468,2.192,476,0.735]],["body/injectables/UtilService.html",[3,0.159,4,0.123,5,0.141,7,1.261,11,0.677,13,1.521,14,0.015,15,0.777,16,1.169,18,1.36,20,0.141,21,0.489,68,0.159,69,0.124,76,1.5,93,0.01,94,0.01,114,0.489,119,0.677,148,1.047,153,2.322,229,2.91,255,3.423,260,1.446,280,2.448,366,3.459,424,2.533,468,3.227,476,1.082,477,1.563,482,3.172,501,5.063,511,1.446,512,1.764,818,3.842,1173,4.558,1373,4.971,1703,3.842,1704,5.83,1705,5.83,1706,5.83,1707,6.931,1708,4.423,1709,6.931,1710,5.83,1711,7.542,1712,4.423,1713,5.83,1714,5.83,1715,5.83,1716,5.83,1717,6.931,1718,6.931,1719,5.83,1720,4.423,1721,5.83,1722,6.521,1723,4.423,1724,5.83,1725,4.423,1726,4.423,1727,4.423,1728,3.842,1729,4.423,1730,4.423,1731,4.423,1732,4.423,1733,4.423,1734,4.423,1735,5.83,1736,4.558,1737,4.423,1738,4.423]],["title/controllers/ViewController.html",[160,1.246,1739,2.84]],["body/controllers/ViewController.html",[3,0.109,4,0.085,5,0.097,7,0.97,11,0.788,13,1.583,14,0.015,15,0.905,16,1.361,18,1.583,20,0.187,21,0.336,68,0.109,69,0.085,89,0.956,93,0.008,94,0.008,111,1.838,114,0.336,119,0.788,121,1.844,148,0.987,160,1.41,163,2.572,167,4.298,179,3.941,184,3.6,191,4.145,192,4.491,244,1.516,245,1.891,246,1.779,249,2.659,266,2.399,273,3.388,274,3.388,279,2.824,355,4.518,356,4.518,363,4.518,364,4.226,367,4.175,379,2.375,380,3.821,439,1.891,1026,3.893,1027,2.639,1033,2.639,1062,3.505,1104,3.893,1461,2.375,1493,2.639,1494,4.627,1495,2.375,1496,4.627,1739,3.215,1740,2.639,1741,3.893,1742,4.483,1743,4.483,1744,4.483,1745,4.483,1746,4.483,1747,3.038,1748,3.038,1749,3.038,1750,3.038,1751,3.038,1752,3.038,1753,4.483,1754,3.038,1755,3.038,1756,3.038,1757,3.038,1758,4.483,1759,4.483,1760,4.483,1761,3.893,1762,4.483,1763,4.483,1764,4.483,1765,3.038,1766,3.038,1767,3.038,1768,3.038,1769,3.038,1770,3.038,1771,3.038,1772,2.639,1773,6.563,1774,4.483,1775,4.483,1776,3.038,1777,3.038,1778,3.038,1779,3.038,1780,3.038,1781,3.038,1782,3.038,1783,3.038,1784,3.038,1785,3.038,1786,3.038]],["title/modules/ViewModule.html",[0,0.764,46,1.977]],["body/modules/ViewModule.html",[0,1.297,2,1.884,3,0.199,4,0.155,5,0.177,14,0.015,20,0.231,21,0.613,46,3.959,68,0.199,69,0.156,77,2.211,89,2.116,90,2.574,93,0.012,94,0.012,95,2.376,101,2.574,102,2.038,103,1.884,249,4.082,390,2.922,1739,5.192,1772,4.814,1787,4.814,1788,4.814,1789,4.814,1790,5.543,1791,5.543]],["title/injectables/ViewService.html",[249,1.977,476,0.735]],["body/injectables/ViewService.html",[3,0.176,4,0.137,5,0.156,7,1.347,11,0.863,14,0.015,18,1.452,20,0.218,21,0.542,68,0.176,69,0.137,76,1.059,82,4.252,93,0.011,94,0.011,114,0.542,115,1.685,119,0.568,163,2.238,228,2.545,249,3.107,258,2.218,259,2.974,260,2.035,262,2.154,266,2.2,307,2.868,309,3.446,364,4.485,375,2.57,378,2.444,476,1.155,477,1.73,511,1.601,512,1.953,1071,3.511,1437,4.144,1792,4.252,1793,5.945,1794,7.602,1795,6.226,1796,4.896,1797,7.602,1798,4.896,1799,6.226,1800,4.896,1801,6.226,1802,4.896,1803,6.226,1804,5.407,1805,4.896,1806,4.896,1807,4.896,1808,4.896,1809,4.896]],["title/classes/WikidataCache.html",[69,0.111,1810,2.636]],["body/classes/WikidataCache.html",[3,0.18,4,0.14,5,0.16,11,0.844,14,0.015,20,0.201,23,1.17,68,0.248,69,0.141,93,0.011,94,0.011,111,2.071,112,1.772,114,0.555,115,1.711,119,0.888,121,2.042,122,3.122,123,2.632,124,3.627,128,2.12,129,3.499,131,3.739,132,2.324,133,2.632,134,1.409,148,0.729,346,3.702,511,1.639,594,3.627,938,3.144,1001,4.207,1137,5.412,1370,4.607,1810,4.607,1811,3.597,1812,5.412,1813,5.015,1814,5.015,1815,5.015,1816,5.015,1817,5.015,1818,3.921,1819,5.015,1820,3.597,1821,4.356]],["title/modules/WikidataModule.html",[0,0.764,28,2.465]],["body/modules/WikidataModule.html",[0,1.224,2,1.714,3,0.181,4,0.141,5,0.161,14,0.015,15,0.672,20,0.232,21,0.558,22,2.648,23,1.177,28,4.841,68,0.181,69,0.142,76,1.092,77,2.013,90,2.429,93,0.011,94,0.011,95,2.242,101,2.429,102,1.855,103,1.714,111,1.366,148,0.922,390,2.757,431,3.643,641,3.141,938,2.292,1305,5.03,1370,3.358,1678,3.945,1680,3.945,1810,3.358,1812,3.945,1820,5.224,1822,4.382,1823,4.382,1824,4.382,1825,3.945,1826,5.046,1827,4.382,1828,4.962,1829,4.382,1830,5.511,1831,4.382,1832,4.382]],["title/injectables/WikidataService.html",[476,0.735,1305,2.465]],["body/injectables/WikidataService.html",[3,0.101,4,0.078,5,0.089,7,0.913,11,0.79,13,1.587,14,0.015,15,0.96,16,1.364,18,1.542,20,0.18,21,0.31,23,0.654,68,0.101,69,0.079,76,1.579,93,0.007,94,0.007,114,0.31,117,1.38,119,0.656,123,3.182,128,1.769,131,1.399,134,0.788,148,1.116,163,2.387,179,1.399,182,1.944,189,2.975,212,4.401,246,1.642,258,0.818,260,0.917,262,1.329,265,2.967,266,2.142,424,1.218,476,0.784,477,0.991,490,2.689,511,1.38,512,1.684,525,2.821,538,1.399,860,3.667,861,2.435,862,4.035,863,2.435,938,3.442,1106,4.411,1137,3.971,1191,2.435,1267,2.435,1285,3.302,1305,2.629,1317,5.266,1370,1.866,1373,3.643,1437,2.81,1490,2.81,1491,2.192,1504,3.302,1516,2.435,1736,2.192,1810,4.035,1818,2.192,1827,2.435,1833,2.192,1834,4.223,1835,4.223,1836,4.223,1837,4.223,1838,4.223,1839,4.223,1840,4.223,1841,2.804,1842,2.804,1843,4.223,1844,2.804,1845,4.223,1846,2.804,1847,4.223,1848,2.804,1849,4.223,1850,2.804,1851,2.804,1852,4.223,1853,2.804,1854,4.223,1855,2.804,1856,4.223,1857,2.804,1858,2.192,1859,2.435,1860,2.804,1861,2.804,1862,2.804,1863,4.223,1864,2.804,1865,2.804,1866,2.804,1867,2.804,1868,2.804,1869,2.804,1870,2.804,1871,5.079,1872,2.804,1873,2.804,1874,2.804,1875,4.411,1876,4.223,1877,3.667,1878,4.223,1879,2.804,1880,2.804,1881,2.804,1882,4.223,1883,2.804,1884,2.804,1885,2.804,1886,2.804,1887,2.804,1888,2.804,1889,2.804,1890,2.804,1891,2.804,1892,2.804,1893,4.223,1894,2.804,1895,2.804,1896,2.804,1897,2.804,1898,2.804,1899,2.804,1900,2.804,1901,2.804,1902,2.804,1903,2.804,1904,4.223,1905,2.804,1906,4.223,1907,2.804,1908,2.804,1909,2.804,1910,2.804,1911,2.804,1912,4.223,1913,2.804,1914,4.223,1915,2.804,1916,2.804,1917,2.804,1918,2.804,1919,2.804,1920,2.804,1921,2.804,1922,2.192,1923,2.804,1924,2.804,1925,2.804,1926,2.804,1927,4.223,1928,2.804,1929,2.804,1930,2.804,1931,2.804,1932,2.804,1933,2.804,1934,2.804,1935,2.804,1936,2.804,1937,2.804,1938,2.804,1939,2.804]],["title/coverage.html",[1940,4.232]],["body/coverage.html",[4,0.073,5,0.083,14,0.015,35,1.043,36,1.94,42,1.873,55,1.873,64,2.214,69,0.212,71,1.53,93,0.007,94,0.007,99,1.738,100,1.738,113,3.488,117,0.854,119,0.303,120,1.53,136,3.237,149,2.042,159,1.873,160,2.191,161,1.873,162,2.268,196,1.738,209,1.873,214,1.873,224,1.873,228,0.923,233,1.242,235,1.445,242,1.445,247,1.303,249,1.303,255,1.371,260,0.854,280,4.597,334,0.791,389,2.042,395,1.873,398,1.371,399,3.264,400,3.237,401,3.237,433,2.042,436,1.873,437,1.873,438,2.268,443,1.873,468,1.445,469,2.042,474,1.873,476,1.399,478,2.268,491,1.445,568,1.738,590,3.488,614,2.042,617,1.873,622,1.626,623,2.042,626,1.873,633,2.268,637,1.626,681,2.042,688,1.53,701,1.626,822,2.268,823,3.128,841,2.268,842,2.268,857,1.873,858,2.268,859,2.268,880,1.626,883,4.594,900,1.873,902,1.873,904,2.042,906,1.873,936,3.128,937,2.268,952,2.268,958,1.873,959,2.268,960,2.268,968,2.663,984,1.873,989,2.042,992,1.873,994,2.268,1024,1.873,1025,2.268,1030,1.53,1045,1.873,1046,2.268,1047,2.268,1051,2.268,1054,1.626,1056,1.53,1060,2.268,1070,2.268,1099,2.268,1100,2.268,1122,4.594,1145,1.873,1147,2.042,1157,2.042,1159,2.042,1206,3.488,1214,2.042,1218,1.873,1219,1.873,1220,2.268,1295,2.042,1298,1.873,1300,2.268,1305,1.626,1408,2.268,1430,2.042,1432,2.268,1446,1.873,1447,2.268,1459,1.626,1477,3.128,1490,2.663,1523,2.869,1538,1.873,1540,1.873,1541,2.268,1560,2.042,1563,1.873,1565,2.268,1581,1.873,1582,2.268,1594,2.268,1605,2.268,1609,3.488,1615,1.738,1619,1.873,1620,2.268,1637,1.626,1675,2.042,1682,2.268,1703,2.268,1739,1.873,1740,2.268,1792,2.268,1810,1.738,1811,2.869,1820,1.873,1825,2.042,1828,2.042,1833,3.802,1858,2.042,1940,2.042,1941,2.611,1942,2.611,1943,2.611,1944,8.118,1945,6.452,1946,5.45,1947,8.087,1948,2.611,1949,2.611,1950,4.863,1951,5.45,1952,2.042,1953,2.611,1954,2.611,1955,2.611,1956,2.611,1957,5.876,1958,4.863,1959,2.611,1960,2.611,1961,4.001,1962,2.611,1963,5.45,1964,5.103,1965,2.268,1966,3.475,1967,3.475,1968,3.475,1969,2.268,1970,2.268,1971,2.268,1972,2.611,1973,2.611,1974,2.611,1975,4.863,1976,4.223,1977,2.268,1978,2.268,1979,2.611,1980,2.611,1981,2.611,1982,2.611,1983,2.611,1984,2.611,1985,2.611]],["title/dependencies.html",[95,1.684,1986,3.303]],["body/dependencies.html",[14,0.015,20,0.128,21,0.444,23,0.936,45,2.004,54,2.879,60,3.486,68,0.144,69,0.153,73,3.139,74,3.139,93,0.01,94,0.01,95,1.418,106,2.879,110,3.139,134,1.745,139,2.672,140,3.636,241,2.499,244,3.099,307,3.637,310,2.672,428,2.004,537,2.499,577,5.393,649,3.139,676,2.672,900,2.879,902,2.879,908,4.744,938,1.823,1037,3.139,1055,4.855,1063,3.636,1140,3.486,1145,2.879,1150,3.139,1456,3.139,1490,2.672,1607,3.486,1987,5.463,1988,5.463,1989,4.014,1990,3.486,1991,4.014,1992,4.014,1993,4.014,1994,4.014,1995,4.014,1996,4.014,1997,4.014,1998,4.014,1999,4.014,2000,6.21,2001,5.463,2002,5.463,2003,4.014,2004,4.014,2005,4.014,2006,4.014,2007,4.014,2008,4.014,2009,5.463,2010,4.014,2011,3.139,2012,4.744,2013,4.014,2014,5.463,2015,4.014,2016,4.014,2017,4.014,2018,4.014,2019,4.014,2020,6.21,2021,4.014,2022,4.014,2023,4.014,2024,4.014,2025,3.139,2026,4.014,2027,5.463,2028,4.014,2029,4.014,2030,4.014,2031,6.21,2032,4.014,2033,5.463,2034,4.014,2035,4.014,2036,4.014,2037,5.463,2038,4.014,2039,4.014,2040,4.014,2041,4.014,2042,4.014,2043,4.014,2044,4.014,2045,4.014,2046,4.014,2047,4.014,2048,4.014,2049,4.014,2050,7.68,2051,6.21,2052,4.014,2053,4.014,2054,4.014,2055,4.014,2056,4.014,2057,4.014,2058,4.014,2059,4.014,2060,4.014,2061,4.014,2062,3.486,2063,4.014,2064,4.014,2065,4.014,2066,4.014,2067,4.014,2068,4.014,2069,4.014,2070,4.014,2071,4.014,2072,4.014,2073,4.014,2074,4.014,2075,4.014,2076,4.014,2077,4.014,2078,4.014,2079,4.014]],["title/miscellaneous/enumerations.html",[2080,1.828,2081,4.138]],["body/miscellaneous/enumerations.html",[14,0.014,35,1.798,93,0.012,94,0.012,111,1.866,114,0.639,117,2.254,169,2.995,170,3.618,177,4.292,399,2.624,400,3.844,401,4.588,420,5.39,421,5.017,422,5.017,423,5.017,424,2.509,425,5.017,426,5.017,427,5.017,512,3.111,677,4.038,739,4.944,968,3.844,2080,3.197,2081,5.017,2082,4.517,2083,5.39]],["title/miscellaneous/functions.html",[2080,1.828,2084,4.138]],["body/miscellaneous/functions.html",[13,1.427,14,0.013,15,0.815,16,1.227,93,0.013,94,0.013,114,0.677,119,0.71,179,3.56,184,2.911,192,3.948,307,4.178,1970,5.315,1971,6.194,2080,3.387,2084,5.315,2085,6.119,2086,6.119,2087,7.132]],["title/index.html",[114,0.365,2088,2.869,2089,2.869]],["body/index.html",[14,0.012,93,0.012,94,0.012,629,4.936,678,3.146,1014,6.356,1804,5.929,2025,4.444,2090,5.929,2091,5.683,2092,5.683,2093,5.683,2094,5.683,2095,5.683,2096,5.683,2097,5.683,2098,5.683,2099,5.683,2100,5.683,2101,5.683,2102,6.827,2103,5.683,2104,5.683,2105,5.683,2106,5.683,2107,6.827,2108,5.683,2109,5.683,2110,5.683,2111,4.936,2112,5.929,2113,5.683,2114,6.356,2115,5.683,2116,4.936,2117,5.683,2118,4.936,2119,4.936,2120,5.683,2121,6.827,2122,5.683,2123,5.683,2124,6.827,2125,5.683,2126,4.936]],["title/license.html",[2088,2.869,2089,2.869,2127,2.869]],["body/license.html",[4,0.19,5,0.043,7,0.159,11,0.086,14,0.002,17,0.49,20,0.023,35,0.354,69,0.021,71,1.991,73,1.061,76,0.159,87,1.178,91,2.379,93,0.003,94,0.002,103,0.25,119,0.157,124,1.169,167,3.322,227,0.528,244,0.677,258,0.215,260,1.111,265,0.989,282,1.255,283,0.645,294,0.49,295,1.458,307,0.431,334,1.517,346,0.431,365,0.49,431,1.438,432,1.679,490,0.35,499,0.64,549,1.637,561,6.678,562,1.637,570,1.178,591,0.431,594,2.835,605,4.635,610,1.061,611,5.212,613,0.794,663,1.061,667,1.831,669,1.831,676,0.49,678,0.751,705,2.874,731,0.528,736,0.576,750,0.528,751,0.973,754,0.973,756,1.679,790,1.831,895,0.64,927,0.64,932,0.576,938,0.616,969,1.061,983,2.683,1001,1.255,1009,1.178,1010,2.142,1013,1.178,1015,1.178,1037,0.576,1063,0.903,1080,0.528,1088,0.528,1102,1.178,1150,0.576,1152,1.061,1153,0.64,1173,0.576,1183,1.178,1266,0.64,1290,1.178,1364,0.64,1373,0.528,1374,1.637,1414,0.64,1495,5.094,1502,0.64,1617,1.637,1658,0.528,1728,2.379,1736,0.576,1741,0.64,1761,3.941,1793,2.379,1875,0.64,1877,2.379,1922,0.576,1940,1.061,1952,1.061,2011,1.061,2062,1.178,2111,1.637,2112,2.033,2114,3.192,2116,2.683,2119,0.64,2126,1.637,2127,6.724,2128,5.486,2129,5.85,2130,0.737,2131,0.737,2132,1.885,2133,6.315,2134,3.676,2135,5.586,2136,6.137,2137,3.089,2138,0.737,2139,0.737,2140,1.356,2141,2.739,2142,6.002,2143,2.739,2144,1.885,2145,4.864,2146,0.737,2147,0.737,2148,0.737,2149,1.356,2150,4.538,2151,3.089,2152,0.737,2153,3.089,2154,0.737,2155,0.737,2156,3.676,2157,0.737,2158,0.737,2159,0.737,2160,4.864,2161,7.001,2162,4.864,2163,1.885,2164,1.885,2165,3.408,2166,1.356,2167,1.356,2168,3.399,2169,3.399,2170,4.864,2171,3.089,2172,0.737,2173,0.737,2174,2.341,2175,3.676,2176,1.356,2177,3.676,2178,1.885,2179,0.737,2180,1.356,2181,0.737,2182,1.885,2183,5.486,2184,2.739,2185,1.356,2186,2.341,2187,0.737,2188,0.737,2189,1.356,2190,2.341,2191,2.341,2192,1.356,2193,4.538,2194,1.356,2195,2.739,2196,5.679,2197,2.739,2198,1.356,2199,2.341,2200,3.399,2201,2.739,2202,0.737,2203,3.089,2204,6.42,2205,1.885,2206,3.399,2207,0.737,2208,0.737,2209,0.737,2210,3.676,2211,1.356,2212,4.352,2213,4.148,2214,2.739,2215,1.356,2216,0.737,2217,0.737,2218,5.007,2219,1.356,2220,0.737,2221,0.737,2222,4.707,2223,1.356,2224,1.885,2225,0.737,2226,0.737,2227,0.737,2228,0.737,2229,0.737,2230,0.737,2231,0.737,2232,0.737,2233,0.737,2234,0.737,2235,1.356,2236,0.737,2237,0.737,2238,0.737,2239,1.356,2240,0.737,2241,1.885,2242,1.356,2243,0.737,2244,0.737,2245,1.356,2246,1.356,2247,4.864,2248,0.737,2249,1.356,2250,1.356,2251,0.737,2252,0.737,2253,1.356,2254,1.885,2255,1.885,2256,1.356,2257,0.737,2258,0.737,2259,3.089,2260,0.737,2261,0.737,2262,2.739,2263,0.737,2264,0.737,2265,0.737,2266,0.737,2267,1.356,2268,1.885,2269,0.737,2270,3.924,2271,0.737,2272,4.864,2273,2.341,2274,2.739,2275,3.089,2276,0.737,2277,1.885,2278,5.379,2279,1.356,2280,0.737,2281,0.737,2282,0.737,2283,1.885,2284,6.887,2285,4.148,2286,0.737,2287,0.737,2288,1.356,2289,1.356,2290,0.737,2291,4.148,2292,0.737,2293,2.341,2294,3.676,2295,0.737,2296,1.885,2297,1.885,2298,1.356,2299,6.791,2300,1.885,2301,3.924,2302,2.341,2303,3.399,2304,1.356,2305,0.737,2306,1.356,2307,1.885,2308,3.924,2309,4.148,2310,0.737,2311,1.356,2312,1.356,2313,2.341,2314,2.341,2315,3.408,2316,0.737,2317,1.885,2318,0.737,2319,6.071,2320,1.356,2321,0.737,2322,3.676,2323,0.737,2324,1.885,2325,3.676,2326,0.737,2327,5.007,2328,2.341,2329,1.356,2330,3.676,2331,4.352,2332,3.089,2333,0.737,2334,0.737,2335,0.737,2336,0.737,2337,3.676,2338,0.737,2339,1.356,2340,4.707,2341,0.737,2342,0.737,2343,1.885,2344,0.737,2345,1.885,2346,0.737,2347,0.737,2348,0.737,2349,4.352,2350,1.885,2351,1.885,2352,0.737,2353,0.737,2354,0.737,2355,1.356,2356,4.148,2357,0.737,2358,3.089,2359,0.737,2360,0.737,2361,2.739,2362,1.885,2363,1.885,2364,3.089,2365,1.885,2366,1.885,2367,0.737,2368,0.737,2369,2.739,2370,2.739,2371,3.089,2372,0.737,2373,0.737,2374,0.737,2375,1.356,2376,1.885,2377,0.737,2378,0.737,2379,1.885,2380,0.737,2381,0.737,2382,0.737,2383,1.356,2384,0.737,2385,5.85,2386,0.737,2387,3.676,2388,0.737,2389,3.089,2390,1.356,2391,0.737,2392,0.737,2393,1.356,2394,1.356,2395,2.341,2396,0.737,2397,0.737,2398,0.737,2399,0.737,2400,1.356,2401,1.885,2402,2.739,2403,0.737,2404,1.356,2405,0.737,2406,0.737,2407,3.089,2408,0.737,2409,2.341,2410,0.737,2411,4.148,2412,3.399,2413,2.341,2414,0.737,2415,2.739,2416,0.737,2417,1.356,2418,0.737,2419,0.737,2420,1.885,2421,1.885,2422,1.885,2423,0.737,2424,0.737,2425,0.737,2426,1.885,2427,1.885,2428,3.089,2429,0.64,2430,0.737,2431,1.356,2432,1.356,2433,1.356,2434,0.737,2435,4.707,2436,1.356,2437,0.737,2438,0.737,2439,0.737,2440,0.737,2441,0.737,2442,0.737,2443,1.885,2444,0.737,2445,0.737,2446,5.007,2447,0.737,2448,0.737,2449,0.737,2450,2.739,2451,2.739,2452,0.737,2453,0.737,2454,1.885,2455,0.737,2456,0.737,2457,2.341,2458,0.737,2459,1.356,2460,0.737,2461,0.737,2462,0.737,2463,0.737,2464,0.737,2465,0.737,2466,1.356,2467,1.356,2468,0.737,2469,1.885,2470,0.737,2471,0.737,2472,1.356,2473,0.737,2474,0.737,2475,0.737,2476,0.737,2477,1.356,2478,1.356,2479,1.356,2480,3.924,2481,1.356,2482,3.089,2483,0.737,2484,0.737,2485,1.356,2486,1.885,2487,1.885,2488,2.341,2489,2.341,2490,1.885,2491,2.341,2492,1.885,2493,0.737,2494,2.739,2495,2.739,2496,1.637,2497,1.885,2498,0.737,2499,1.356,2500,1.356,2501,2.739,2502,1.356,2503,2.341,2504,2.341,2505,1.356,2506,1.885,2507,4.864,2508,2.739,2509,0.737,2510,0.737,2511,0.737,2512,1.885,2513,1.356,2514,1.356,2515,0.737,2516,0.737,2517,0.737,2518,0.737,2519,1.356,2520,0.737,2521,0.737,2522,0.737,2523,0.737,2524,0.737,2525,1.356,2526,1.885,2527,0.737,2528,0.737,2529,1.885,2530,0.737,2531,0.737,2532,1.356,2533,1.356,2534,3.089,2535,5.679,2536,1.885,2537,1.356,2538,1.356,2539,1.356,2540,1.356,2541,2.341,2542,1.356,2543,0.737,2544,0.737,2545,0.737,2546,0.737,2547,3.399,2548,3.089,2549,1.356,2550,0.737,2551,0.737,2552,0.737,2553,0.737,2554,1.356,2555,0.737,2556,1.356,2557,0.737,2558,2.739,2559,3.676,2560,2.341,2561,0.737,2562,4.352,2563,0.737,2564,0.737,2565,0.737,2566,0.737,2567,0.737,2568,0.737,2569,0.737,2570,0.737,2571,1.356,2572,1.885,2573,2.739,2574,2.033,2575,2.341,2576,1.356,2577,0.737,2578,0.737,2579,1.356,2580,0.737,2581,0.737,2582,0.737,2583,1.356,2584,0.737,2585,0.737,2586,1.885,2587,2.341,2588,0.737,2589,1.356,2590,1.356,2591,0.737,2592,0.737,2593,1.885,2594,0.737,2595,0.737,2596,0.737,2597,0.737,2598,0.737,2599,1.356,2600,0.737,2601,0.737,2602,0.737,2603,0.737,2604,0.737,2605,1.885,2606,0.737,2607,0.737,2608,0.737,2609,0.737,2610,0.737,2611,2.739,2612,0.737,2613,0.737,2614,1.356,2615,2.341,2616,3.676,2617,0.737,2618,0.737,2619,0.737,2620,0.737,2621,0.737,2622,0.737,2623,0.737,2624,0.737,2625,0.737,2626,3.399,2627,1.885,2628,0.737,2629,2.341,2630,0.737,2631,0.737,2632,1.885,2633,0.737,2634,0.737,2635,1.885,2636,0.737,2637,1.356,2638,0.737,2639,0.737,2640,0.737,2641,0.737,2642,0.737,2643,0.737,2644,0.737,2645,0.737,2646,1.356,2647,0.737,2648,0.737,2649,0.737,2650,0.737,2651,1.356,2652,0.737,2653,0.737,2654,1.885,2655,0.737,2656,0.737,2657,1.356,2658,0.737,2659,1.356,2660,0.737,2661,1.885,2662,3.399,2663,0.737,2664,1.356,2665,0.737,2666,1.356,2667,0.737,2668,0.737,2669,0.737,2670,0.737,2671,1.356,2672,0.737,2673,1.356,2674,2.341,2675,0.737,2676,2.739,2677,0.737,2678,0.737,2679,0.737,2680,0.737,2681,0.737,2682,0.737,2683,1.356,2684,1.356,2685,1.356,2686,1.885,2687,0.737,2688,1.356,2689,1.356,2690,0.737,2691,1.356,2692,1.885,2693,0.737,2694,1.356,2695,0.737,2696,1.356,2697,0.737,2698,1.885,2699,1.356,2700,0.737,2701,0.737,2702,1.356,2703,5.85,2704,0.737,2705,2.739,2706,4.148,2707,1.885,2708,0.737,2709,0.737,2710,0.737,2711,2.341,2712,0.737,2713,0.737,2714,1.885,2715,0.737,2716,1.356,2717,0.737,2718,0.737,2719,0.737,2720,2.341,2721,0.737,2722,0.737,2723,0.737,2724,0.737,2725,0.737,2726,2.341,2727,0.737,2728,0.737,2729,1.885,2730,0.737,2731,1.356,2732,1.885,2733,0.737,2734,1.356,2735,0.737,2736,0.737,2737,0.737,2738,0.737,2739,1.356,2740,1.885,2741,0.737,2742,0.737,2743,1.356,2744,0.737,2745,1.356,2746,0.737,2747,0.737,2748,0.737,2749,0.737,2750,1.885,2751,1.356,2752,0.737,2753,0.737,2754,2.341,2755,0.737,2756,1.885,2757,0.737,2758,0.737,2759,0.737,2760,0.737,2761,0.737,2762,0.737,2763,1.885,2764,1.356,2765,1.356,2766,0.737,2767,3.399,2768,1.356,2769,1.885,2770,0.737,2771,0.737,2772,1.356,2773,0.737,2774,1.885,2775,0.737,2776,1.356,2777,0.737,2778,0.737,2779,0.737,2780,0.737,2781,1.885,2782,1.885,2783,1.356,2784,0.737,2785,1.356,2786,0.737,2787,0.737,2788,1.356,2789,1.356,2790,0.737,2791,0.737,2792,1.356,2793,0.737,2794,0.737,2795,0.737,2796,0.737,2797,0.737,2798,1.885,2799,0.737,2800,0.737,2801,0.737,2802,0.737,2803,0.737,2804,2.341,2805,1.356,2806,1.885,2807,0.737,2808,0.737,2809,0.737,2810,0.737,2811,0.737,2812,1.356,2813,0.737,2814,0.737,2815,0.737,2816,0.737,2817,0.737,2818,0.737,2819,0.737,2820,0.737,2821,0.737,2822,0.737,2823,0.737,2824,0.737,2825,0.737,2826,0.737,2827,2.341,2828,0.737,2829,1.356,2830,0.737,2831,0.737,2832,0.737,2833,0.737,2834,0.737,2835,0.737,2836,0.737,2837,0.737,2838,0.737,2839,0.737,2840,1.885,2841,0.737,2842,0.737,2843,0.737,2844,0.737,2845,1.356,2846,0.737,2847,0.737,2848,0.737,2849,0.737,2850,0.737,2851,0.737,2852,0.737,2853,1.356,2854,1.356,2855,2.739,2856,1.885,2857,0.737,2858,1.356,2859,0.737,2860,0.737,2861,0.737,2862,0.737,2863,1.885,2864,1.356,2865,0.737,2866,1.356,2867,1.356,2868,1.356,2869,0.737,2870,0.737,2871,0.737,2872,0.737,2873,0.737,2874,0.737,2875,0.737,2876,0.737,2877,1.356,2878,0.737,2879,0.737,2880,1.885,2881,0.737,2882,0.737,2883,0.737,2884,0.737,2885,0.737,2886,0.737,2887,0.737,2888,0.737,2889,0.737,2890,0.737,2891,0.737,2892,1.356,2893,0.737,2894,0.737,2895,0.737,2896,0.737,2897,0.737,2898,0.737,2899,0.737,2900,0.737,2901,0.737,2902,0.737,2903,0.737,2904,0.737,2905,0.737,2906,0.737,2907,0.737,2908,0.737,2909,0.737,2910,0.737,2911,0.737,2912,0.737,2913,1.885,2914,1.356,2915,0.737,2916,0.737,2917,0.737,2918,0.737,2919,0.737,2920,0.737,2921,0.737,2922,1.356,2923,1.885,2924,0.737,2925,0.737,2926,0.737,2927,0.737,2928,0.737,2929,0.737,2930,0.737,2931,1.356,2932,0.737,2933,0.737,2934,0.737,2935,0.737,2936,0.737,2937,0.737,2938,0.737,2939,0.737,2940,0.737,2941,0.737,2942,0.737,2943,0.737,2944,0.737,2945,0.737,2946,0.737,2947,0.737,2948,0.737,2949,0.737,2950,0.737,2951,0.737,2952,0.737,2953,0.737]],["title/modules.html",[2,1.839]],["body/modules.html",[1,3.838,2,1.818,14,0.012,24,3.332,26,3.562,28,3.332,30,2.809,32,3.134,34,2.809,38,2.962,40,3.332,46,2.671,48,3.562,50,3.562,61,3.562,63,3.134,66,3.134,93,0.012,94,0.012,388,3.332,1990,7.139,2118,7.139,2315,4.648,2496,7.139,2954,5.351,2955,8.239]],["title/overview.html",[2956,4.701]],["body/overview.html",[2,1.101,14,0.015,24,4.417,26,4.722,28,4.18,30,4.162,32,4.644,34,3.984,38,3.927,40,4.682,46,3.666,48,4.722,50,4.285,61,4.952,63,4.446,66,4.057,71,1.898,89,1.02,93,0.008,94,0.008,95,1.661,96,2.815,97,2.815,98,2.815,99,3.68,100,3.68,101,1.799,102,1.192,103,1.101,112,1.145,233,3.295,235,3.834,247,3.457,249,3.457,282,2.157,384,2.815,385,2.815,386,2.815,387,2.815,388,4.312,431,2.467,464,2.815,465,2.815,467,2.815,468,3.357,477,1.145,491,3.834,618,2.815,619,2.815,620,2.815,622,4.312,637,4.312,688,4.057,877,2.815,878,2.815,879,2.815,880,4.312,986,2.815,987,2.815,988,2.815,1030,4.057,1041,2.815,1042,2.815,1117,2.815,1118,2.815,1119,2.815,1291,2.815,1292,2.815,1293,2.815,1294,2.815,1305,4.312,1430,2.534,1459,4.312,1471,2.815,1473,2.815,1474,2.815,1557,2.815,1558,2.815,1559,2.815,1588,2.815,1589,2.815,1591,2.815,1637,4.312,1671,2.815,1673,2.815,1674,2.815,1787,2.815,1788,2.815,1789,2.815,1822,2.815,1823,2.815,1824,2.815,1952,2.534,2956,2.815,2957,4.7]],["title/miscellaneous/typealiases.html",[2080,1.828,2958,4.765]],["body/miscellaneous/typealiases.html",[14,0.012,93,0.012,94,0.012,113,4.182,114,0.645,119,0.677,136,3.881,141,5.42,399,3.149,400,3.881,401,4.614,418,5.42,590,4.972,601,5.42,681,4.559,691,6.021,968,3.881,979,5.42,1206,4.182,1213,5.42,1523,4.182,1533,5.42,1811,4.182,1818,5.42,2080,3.227,2082,5.42,2083,4.559,2959,5.831,2960,5.064,2961,5.831,2962,5.064,2963,5.064,2964,5.064]],["title/miscellaneous/variables.html",[2080,1.828,2965,4.138]],["body/miscellaneous/variables.html",[1,2.521,3,0.126,7,0.479,14,0.015,15,0.839,17,3.617,36,0.882,64,1.224,72,3.798,74,1.73,76,1.403,79,1.921,80,1.921,93,0.006,94,0.006,110,1.73,111,1.799,113,1.587,114,0.245,119,0.408,123,1.845,132,2.314,134,0.622,136,1.472,148,1.043,149,3.419,150,1.921,159,3.136,163,1.43,167,1.224,181,1.73,228,1.242,239,1.587,260,1.43,266,2.143,286,2.339,309,1.224,334,1.065,389,1.73,395,2.521,396,3.389,397,1.921,399,2.263,400,1.472,401,2.91,424,1.9,431,2.295,433,3.419,434,1.921,436,3.136,469,2.748,474,2.521,475,1.921,511,2.607,512,3.181,590,3.136,591,1.296,594,1.104,614,3.419,615,1.921,617,3.136,623,2.748,626,2.521,627,1.921,641,1.377,678,1.945,788,2.521,800,1.921,880,1.377,883,1.73,900,2.521,901,1.921,902,2.521,903,1.921,904,2.748,905,1.921,906,2.521,907,1.921,932,1.73,938,1.005,968,1.472,981,1.73,984,3.136,985,1.921,989,1.73,992,2.521,993,1.921,1054,2.188,1063,1.472,1067,1.73,1068,1.472,1122,1.73,1145,2.521,1146,1.921,1147,2.748,1148,1.921,1157,2.748,1158,1.921,1159,2.748,1160,1.921,1206,1.587,1214,3.419,1215,1.921,1218,3.136,1295,1.73,1298,2.521,1299,1.921,1370,1.472,1477,1.73,1490,3.315,1491,2.748,1499,1.921,1504,2.748,1523,1.587,1538,3.136,1539,1.921,1560,1.73,1563,2.521,1564,1.921,1609,1.587,1615,2.91,1616,1.73,1658,3.898,1675,1.73,1678,2.748,1679,1.921,1680,2.748,1681,1.921,1811,1.587,1812,1.73,1820,3.898,1821,1.921,1825,1.73,1828,2.748,1829,1.921,1830,3.052,1831,1.921,1832,1.921,1833,1.73,1858,2.748,1859,1.921,1922,1.73,1964,1.921,1965,3.052,1966,4.326,1967,4.326,1968,4.326,1969,3.052,1976,1.921,1977,1.921,1978,3.052,2011,1.73,2012,1.921,2025,1.73,2080,1.224,2082,4.524,2083,1.73,2090,3.798,2165,1.921,2429,1.921,2574,1.921,2960,3.052,2962,3.052,2963,1.921,2964,1.921,2965,1.921,2966,2.212,2967,3.515,2968,2.212,2969,5.434,2970,4.981,2971,2.212,2972,4.373,2973,4.981,2974,2.212,2975,2.212,2976,2.212,2977,2.212,2978,2.212,2979,2.212,2980,2.212,2981,3.515,2982,2.212,2983,2.212,2984,2.212,2985,2.212,2986,2.212,2987,2.212,2988,3.515,2989,3.515,2990,3.515,2991,3.515,2992,3.515,2993,3.515,2994,3.515,2995,3.515,2996,2.212,2997,2.212,2998,2.212,2999,2.212,3000,2.212,3001,2.212,3002,2.212,3003,2.212,3004,2.212,3005,2.212,3006,2.212,3007,2.212,3008,2.212,3009,2.212,3010,2.212,3011,2.212,3012,2.212,3013,2.212,3014,2.212,3015,2.212,3016,2.212,3017,2.212,3018,3.515,3019,2.212,3020,2.212,3021,2.212,3022,2.212,3023,2.212,3024,2.212,3025,3.515,3026,3.515,3027,3.515,3028,2.212,3029,5.786,3030,2.212,3031,2.212,3032,2.212,3033,2.212,3034,2.212,3035,2.212,3036,2.212,3037,3.515,3038,2.212,3039,2.212,3040,3.515,3041,4.373,3042,2.212,3043,2.212,3044,2.212,3045,2.212,3046,2.212,3047,4.981,3048,2.212,3049,2.212,3050,4.981,3051,2.212,3052,2.212,3053,3.515,3054,2.212,3055,2.212,3056,2.212,3057,2.212,3058,2.212,3059,2.212,3060,2.212,3061,2.212,3062,2.212,3063,2.212,3064,2.212,3065,2.212,3066,2.212,3067,2.212,3068,2.212,3069,2.212,3070,2.212,3071,2.212,3072,2.212,3073,2.212,3074,2.212,3075,2.212,3076,2.212,3077,2.212,3078,2.212,3079,2.212]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":280,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/UtilService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1999,"title":{},"body":{"dependencies.html":{}}}],["0.0.3",{"_index":2041,"title":{},"body":{"dependencies.html":{}}}],["0.0.5",{"_index":2022,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":2069,"title":{},"body":{"dependencies.html":{}}}],["0.11.7",{"_index":2032,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":2019,"title":{},"body":{"dependencies.html":{}}}],["0.21.2",{"_index":2016,"title":{},"body":{"dependencies.html":{}}}],["0.3.0",{"_index":2023,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":2047,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":2018,"title":{},"body":{"dependencies.html":{}}}],["0.9",{"_index":1511,"title":{},"body":{"injectables/SitemapService.html":{}}}],["0/1",{"_index":1944,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1972,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1954,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1945,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1975,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1958,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1946,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1957,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1963,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1951,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1950,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":431,"title":{},"body":{"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ParserService.html":{},"classes/Source.html":{},"modules/WikidataModule.html":{},"license.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":2048,"title":{},"body":{"dependencies.html":{}}}],["1.0.1",{"_index":2001,"title":{},"body":{"dependencies.html":{}}}],["1.1.18",{"_index":1995,"title":{},"body":{"dependencies.html":{}}}],["1.17.2",{"_index":2035,"title":{},"body":{"dependencies.html":{}}}],["1.4.1",{"_index":2033,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":2028,"title":{},"body":{"dependencies.html":{}}}],["1.5.0",{"_index":2013,"title":{},"body":{"dependencies.html":{}}}],["1.6.1",{"_index":2076,"title":{},"body":{"dependencies.html":{}}}],["1.8.0",{"_index":2045,"title":{},"body":{"dependencies.html":{}}}],["1.9.1",{"_index":1998,"title":{},"body":{"dependencies.html":{}}}],["1/16",{"_index":1949,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":1960,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1981,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":1953,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":1980,"title":{},"body":{"coverage.html":{}}}],["1/8",{"_index":1983,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":282,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/PersonalityService.html":{},"controllers/SourceController.html":{},"license.html":{},"overview.html":{}}}],["10.2.0",{"_index":2043,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1725,"title":{},"body":{"injectables/UtilService.html":{}}}],["11",{"_index":2459,"title":{},"body":{"license.html":{}}}],["12",{"_index":1982,"title":{},"body":{"coverage.html":{}}}],["12.1.0",{"_index":2042,"title":{},"body":{"dependencies.html":{}}}],["13",{"_index":2842,"title":{},"body":{"license.html":{}}}],["13.11.4",{"_index":2021,"title":{},"body":{"dependencies.html":{}}}],["14",{"_index":1979,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":2664,"title":{},"body":{"license.html":{}}}],["16",{"_index":1952,"title":{},"body":{"coverage.html":{},"license.html":{},"overview.html":{}}}],["17",{"_index":2957,"title":{},"body":{"overview.html":{}}}],["17.0.2",{"_index":2051,"title":{},"body":{"dependencies.html":{}}}],["18",{"_index":1973,"title":{},"body":{"coverage.html":{}}}],["1996",{"_index":2465,"title":{},"body":{"license.html":{}}}],["2",{"_index":1877,"title":{},"body":{"injectables/WikidataService.html":{},"license.html":{}}}],["2.0.0",{"_index":2005,"title":{},"body":{"dependencies.html":{}}}],["2.1.0",{"_index":2058,"title":{},"body":{"dependencies.html":{}}}],["2.1.6",{"_index":2030,"title":{},"body":{"dependencies.html":{}}}],["2.3.0",{"_index":2039,"title":{},"body":{"dependencies.html":{}}}],["2.3.2",{"_index":2055,"title":{},"body":{"dependencies.html":{}}}],["2.8.4",{"_index":2075,"title":{},"body":{"dependencies.html":{}}}],["2/6",{"_index":1962,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":2463,"title":{},"body":{"license.html":{}}}],["2007",{"_index":2132,"title":{},"body":{"license.html":{}}}],["21.6.10",{"_index":2038,"title":{},"body":{"dependencies.html":{}}}],["26",{"_index":1955,"title":{},"body":{"coverage.html":{}}}],["27.4.0",{"_index":2007,"title":{},"body":{"dependencies.html":{}}}],["28",{"_index":2823,"title":{},"body":{"license.html":{}}}],["29",{"_index":2130,"title":{},"body":{"license.html":{}}}],["3",{"_index":1728,"title":{},"body":{"injectables/UtilService.html":{},"license.html":{}}}],["3/16",{"_index":1974,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":2722,"title":{},"body":{"license.html":{}}}],["33",{"_index":1961,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":2497,"title":{},"body":{"license.html":{}}}],["4.1.0",{"_index":1991,"title":{},"body":{"dependencies.html":{}}}],["4.17.1",{"_index":2034,"title":{},"body":{"dependencies.html":{}}}],["4.18.5",{"_index":2015,"title":{},"body":{"dependencies.html":{}}}],["4.29.0",{"_index":2010,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":2063,"title":{},"body":{"dependencies.html":{}}}],["4.6.0",{"_index":2026,"title":{},"body":{"dependencies.html":{}}}],["4.6.2",{"_index":1989,"title":{},"body":{"dependencies.html":{}}}],["4.7.7",{"_index":2036,"title":{},"body":{"dependencies.html":{}}}],["4/15",{"_index":1956,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":1936,"title":{},"body":{"injectables/WikidataService.html":{}}}],["404",{"_index":380,"title":{},"body":{"controllers/ClaimController.html":{},"classes/NotFoundFilter.html":{},"controllers/PersonalityController.html":{},"controllers/ViewController.html":{}}}],["5",{"_index":1037,"title":{},"body":{"controllers/HomeController.html":{},"dependencies.html":{},"license.html":{}}}],["5.13.5",{"_index":2040,"title":{},"body":{"dependencies.html":{}}}],["5.3.0",{"_index":2079,"title":{},"body":{"dependencies.html":{}}}],["5.5.1",{"_index":2066,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":1959,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":1948,"title":{},"body":{"coverage.html":{}}}],["6.1.0",{"_index":2049,"title":{},"body":{"dependencies.html":{}}}],["6.1.1",{"_index":2072,"title":{},"body":{"dependencies.html":{}}}],["6.4.1",{"_index":2053,"title":{},"body":{"dependencies.html":{}}}],["6.7.0",{"_index":2046,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":2715,"title":{},"body":{"license.html":{}}}],["6b",{"_index":2555,"title":{},"body":{"license.html":{}}}],["6d",{"_index":2581,"title":{},"body":{"license.html":{}}}],["7",{"_index":2492,"title":{},"body":{"license.html":{}}}],["7.12.1",{"_index":1993,"title":{},"body":{"dependencies.html":{}}}],["7.2.4",{"_index":2061,"title":{},"body":{"dependencies.html":{}}}],["7.3.0",{"_index":2074,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":912,"title":{},"body":{"injectables/EmailService.html":{}}}],["8.0.0",{"_index":2002,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":2003,"title":{},"body":{"dependencies.html":{}}}],["8.0.6",{"_index":2000,"title":{},"body":{"dependencies.html":{}}}],["86400",{"_index":1832,"title":{},"body":{"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["9a76c3a1c35c",{"_index":1719,"title":{},"body":{"injectables/UtilService.html":{}}}],["_",{"_index":1910,"title":{},"body":{"injectables/WikidataService.html":{}}}],["_checkcaptcharesponse",{"_index":164,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["_checkcaptcharesponse(secret",{"_index":178,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["_getclaim",{"_index":682,"title":{},"body":{"injectables/ClaimService.html":{}}}],["_getclaim(match",{"_index":690,"title":{},"body":{"injectables/ClaimService.html":{}}}],["_getsentencebyhashandclaimid",{"_index":165,"title":{},"body":{"controllers/ClaimController.html":{}}}],["_getsentencebyhashandclaimid(sentencehash",{"_index":183,"title":{},"body":{"controllers/ClaimController.html":{}}}],["_id",{"_index":153,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimService.html":{},"classes/Personality.html":{},"injectables/PersonalityService.html":{},"injectables/SourceService.html":{},"injectables/UtilService.html":{}}}],["_reviewsbysentencehashaggregated",{"_index":479,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["_reviewsbysentencehashaggregated(sentencehash",{"_index":493,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["_topclassificationaccumulator",{"_index":480,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["_verifyinputsquery",{"_index":166,"title":{},"body":{"controllers/ClaimController.html":{}}}],["_verifyinputsquery(query",{"_index":187,"title":{},"body":{"controllers/ClaimController.html":{}}}],["abaixo",{"_index":3064,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ability",{"_index":2634,"title":{},"body":{"license.html":{}}}],["above",{"_index":2698,"title":{},"body":{"license.html":{}}}],["absence",{"_index":2493,"title":{},"body":{"license.html":{}}}],["absolute",{"_index":2902,"title":{},"body":{"license.html":{}}}],["absolutely",{"_index":2930,"title":{},"body":{"license.html":{}}}],["abuse",{"_index":2238,"title":{},"body":{"license.html":{}}}],["acc",{"_index":573,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["accept",{"_index":2011,"title":{},"body":{"dependencies.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["acceptance",{"_index":2726,"title":{},"body":{"license.html":{}}}],["access",{"_index":2116,"title":{},"body":{"index.html":{},"license.html":{}}}],["accessible",{"_index":2791,"title":{},"body":{"license.html":{}}}],["accompanied",{"_index":2536,"title":{},"body":{"license.html":{}}}],["accompanies",{"_index":2906,"title":{},"body":{"license.html":{}}}],["accord",{"_index":2491,"title":{},"body":{"license.html":{}}}],["according",{"_index":2897,"title":{},"body":{"license.html":{}}}],["accumulate",{"_index":498,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["accumulateargs",{"_index":500,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["accumulator",{"_index":496,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["acessar",{"_index":3059,"title":{},"body":{"miscellaneous/variables.html":{}}}],["achieve",{"_index":2912,"title":{},"body":{"license.html":{}}}],["acknowledges",{"_index":2424,"title":{},"body":{"license.html":{}}}],["acquired",{"_index":2772,"title":{},"body":{"license.html":{}}}],["acronyms",{"_index":1165,"title":{},"body":{"injectables/ParserService.html":{}}}],["action",{"_index":1871,"title":{},"body":{"injectables/WikidataService.html":{}}}],["actions",{"_index":2733,"title":{},"body":{"license.html":{}}}],["activities",{"_index":2317,"title":{},"body":{"license.html":{}}}],["activity",{"_index":2818,"title":{},"body":{"license.html":{}}}],["actual",{"_index":2796,"title":{},"body":{"license.html":{}}}],["actually",{"_index":2604,"title":{},"body":{"license.html":{}}}],["adapt",{"_index":2290,"title":{},"body":{"license.html":{}}}],["add",{"_index":790,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/SitemapService.html":{},"license.html":{}}}],["added",{"_index":2490,"title":{},"body":{"license.html":{}}}],["additional",{"_index":2507,"title":{},"body":{"license.html":{}}}],["address",{"_index":2850,"title":{},"body":{"license.html":{}}}],["addressed",{"_index":2287,"title":{},"body":{"license.html":{}}}],["adopted",{"_index":2462,"title":{},"body":{"license.html":{}}}],["adversely",{"_index":2642,"title":{},"body":{"license.html":{}}}],["advised",{"_index":2893,"title":{},"body":{"license.html":{}}}],["affects",{"_index":2643,"title":{},"body":{"license.html":{}}}],["affero",{"_index":2840,"title":{},"body":{"license.html":{}}}],["affirmed",{"_index":2755,"title":{},"body":{"license.html":{}}}],["affirms",{"_index":2418,"title":{},"body":{"license.html":{}}}],["against",{"_index":2479,"title":{},"body":{"license.html":{}}}],["agent",{"_index":1424,"title":{},"body":{"controllers/RootController.html":{}}}],["agg",{"_index":1721,"title":{},"body":{"injectables/UtilService.html":{}}}],["aggregate",{"_index":562,"title":{},"body":{"injectables/ClaimReviewService.html":{},"license.html":{}}}],["aggregates",{"_index":565,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["agree",{"_index":2835,"title":{},"body":{"license.html":{}}}],["agreed",{"_index":2879,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":2782,"title":{},"body":{"license.html":{}}}],["agreggateclassification",{"_index":481,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["agreggateclassification(match",{"_index":506,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["aim",{"_index":2234,"title":{},"body":{"license.html":{}}}],["aletheia",{"_index":2090,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["aliases",{"_index":2959,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alleging",{"_index":2762,"title":{},"body":{"license.html":{}}}],["allow",{"_index":1364,"title":{},"body":{"injectables/PersonalityService.html":{},"license.html":{}}}],["allowed",{"_index":1374,"title":{},"body":{"injectables/PersonalityService.html":{},"license.html":{}}}],["allowedheaders",{"_index":2985,"title":{},"body":{"miscellaneous/variables.html":{}}}],["along",{"_index":2495,"title":{},"body":{"license.html":{}}}],["alphabets",{"_index":1154,"title":{},"body":{"injectables/ParserService.html":{}}}],["already",{"_index":1266,"title":{},"body":{"controllers/PersonalityController.html":{},"license.html":{}}}],["alternative",{"_index":2551,"title":{},"body":{"license.html":{}}}],["although",{"_index":2230,"title":{},"body":{"license.html":{}}}],["ancillary",{"_index":2727,"title":{},"body":{"license.html":{}}}],["and/or",{"_index":2214,"title":{},"body":{"license.html":{}}}],["ant",{"_index":1987,"title":{},"body":{"dependencies.html":{}}}],["antd",{"_index":2014,"title":{},"body":{"dependencies.html":{}}}],["anti",{"_index":2449,"title":{},"body":{"license.html":{}}}],["anyone",{"_index":2504,"title":{},"body":{"license.html":{}}}],["anything",{"_index":2302,"title":{},"body":{"license.html":{}}}],["análise",{"_index":2092,"title":{},"body":{"index.html":{}}}],["api",{"_index":1409,"title":{},"body":{"controllers/RootController.html":{}}}],["api/claimreview",{"_index":440,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["api/stats",{"_index":1583,"title":{},"body":{"controllers/StatsController.html":{}}}],["api\\nsitemap",{"_index":1426,"title":{},"body":{"controllers/RootController.html":{}}}],["app",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["app.close",{"_index":3078,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.get(configservice",{"_index":3033,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.get(emailservice",{"_index":3032,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.get(usersservice",{"_index":3035,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.listen(options.config.port",{"_index":3017,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.logger.log(\"error/recaptcha",{"_index":455,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["app.setglobalprefix(\"api",{"_index":3016,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.use",{"_index":3005,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.use(cookieparser",{"_index":3004,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.use(getlanguagemiddleware",{"_index":2997,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.use(passport.initialize",{"_index":3013,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.use(passport.session",{"_index":3014,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.useglobalpipes",{"_index":2998,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.usestaticassets(join(__dirname",{"_index":3015,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app_filter",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["applicable",{"_index":2308,"title":{},"body":{"license.html":{}}}],["applications",{"_index":2947,"title":{},"body":{"license.html":{}}}],["applied",{"_index":2266,"title":{},"body":{"license.html":{}}}],["applies",{"_index":2166,"title":{},"body":{"license.html":{}}}],["apply",{"_index":2170,"title":{},"body":{"license.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["appmodule.register(options",{"_index":2994,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appropriate",{"_index":2330,"title":{},"body":{"license.html":{}}}],["appropriately",{"_index":2484,"title":{},"body":{"license.html":{}}}],["approximates",{"_index":2901,"title":{},"body":{"license.html":{}}}],["area",{"_index":2240,"title":{},"body":{"license.html":{}}}],["arguable",{"_index":422,"title":{},"body":{"classes/ClaimReview.html":{},"miscellaneous/enumerations.html":{}}}],["argumentshost",{"_index":1110,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["arise",{"_index":2248,"title":{},"body":{"license.html":{}}}],["arising",{"_index":2883,"title":{},"body":{"license.html":{}}}],["arrange",{"_index":2792,"title":{},"body":{"license.html":{}}}],["arrangement",{"_index":2806,"title":{},"body":{"license.html":{}}}],["array",{"_index":1718,"title":{},"body":{"injectables/UtilService.html":{}}}],["array.foreach((item",{"_index":1731,"title":{},"body":{"injectables/UtilService.html":{}}}],["array.from(newarray.values",{"_index":1738,"title":{},"body":{"injectables/UtilService.html":{}}}],["array.isarray(claim.sources",{"_index":674,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["array.isarray(claimreview.sources",{"_index":589,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["array.isarray(claims",{"_index":1396,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["arraynotempty",{"_index":835,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["article",{"_index":2458,"title":{},"body":{"license.html":{}}}],["asc",{"_index":284,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/SourceService.html":{}}}],["asking",{"_index":2188,"title":{},"body":{"license.html":{}}}],["assert",{"_index":2209,"title":{},"body":{"license.html":{}}}],["assets",{"_index":1741,"title":{},"body":{"controllers/ViewController.html":{},"license.html":{}}}],["assets(@req",{"_index":1784,"title":{},"body":{"controllers/ViewController.html":{}}}],["assets(req",{"_index":1747,"title":{},"body":{"controllers/ViewController.html":{}}}],["associated",{"_index":2396,"title":{},"body":{"license.html":{}}}],["assume",{"_index":2873,"title":{},"body":{"license.html":{}}}],["assumption",{"_index":2905,"title":{},"body":{"license.html":{}}}],["assumptions",{"_index":2685,"title":{},"body":{"license.html":{}}}],["assures",{"_index":2269,"title":{},"body":{"license.html":{}}}],["async",{"_index":163,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["attach",{"_index":2914,"title":{},"body":{"license.html":{}}}],["attempt",{"_index":2701,"title":{},"body":{"license.html":{}}}],["attempting",{"_index":1349,"title":{},"body":{"injectables/PersonalityService.html":{},"controllers/UsersController.html":{}}}],["attributed",{"_index":2225,"title":{},"body":{"license.html":{}}}],["attributions",{"_index":2667,"title":{},"body":{"license.html":{}}}],["auth",{"_index":925,"title":{},"body":{"injectables/EmailService.html":{}}}],["auth.guard",{"_index":1640,"title":{},"body":{"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":1047,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth/auth.module",{"_index":27,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/local",{"_index":1639,"title":{},"body":{"controllers/UsersController.html":{}}}],["auth/session.guard",{"_index":243,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/PersonalityController.html":{},"controllers/SitemapController.html":{},"controllers/UsersController.html":{}}}],["authenticate",{"_index":1614,"title":{},"body":{"classes/User.html":{},"interfaces/UserDocument.html":{}}}],["authguard",{"_index":1048,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authguard(\"local",{"_index":1050,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":26,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":2666,"title":{},"body":{"license.html":{}}}],["authorization",{"_index":2618,"title":{},"body":{"license.html":{}}}],["authorized",{"_index":2658,"title":{},"body":{"license.html":{}}}],["authorizes",{"_index":2768,"title":{},"body":{"license.html":{}}}],["authorizing",{"_index":2810,"title":{},"body":{"license.html":{}}}],["authors",{"_index":2169,"title":{},"body":{"license.html":{}}}],["auto",{"_index":606,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["automatic",{"_index":2737,"title":{},"body":{"license.html":{}}}],["automatically",{"_index":2409,"title":{},"body":{"license.html":{}}}],["available",{"_index":2315,"title":{},"body":{"license.html":{},"modules.html":{}}}],["avoid",{"_index":2264,"title":{},"body":{"license.html":{}}}],["avoiding",{"_index":1105,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["await",{"_index":266,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"injectables/SourceService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["away",{"_index":2155,"title":{},"body":{"license.html":{}}}],["axios",{"_index":1490,"title":{},"body":{"injectables/SitemapService.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["axios.get",{"_index":1516,"title":{},"body":{"injectables/SitemapService.html":{},"injectables/WikidataService.html":{}}}],["axios.get(\"https://www.wikidata.org/w/api.php",{"_index":1870,"title":{},"body":{"injectables/WikidataService.html":{}}}],["b",{"_index":2371,"title":{},"body":{"license.html":{}}}],["babel/polyfill",{"_index":1992,"title":{},"body":{"dependencies.html":{}}}],["bail",{"_index":1372,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["based",{"_index":983,"title":{},"body":{"classes/History.html":{},"license.html":{}}}],["baseurl",{"_index":915,"title":{},"body":{"injectables/EmailService.html":{}}}],["basic",{"_index":2410,"title":{},"body":{"license.html":{}}}],["batches",{"_index":1367,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["before",{"_index":981,"title":{},"body":{"classes/History.html":{},"injectables/HistoryService.html":{},"miscellaneous/variables.html":{}}}],["behalf",{"_index":2437,"title":{},"body":{"license.html":{}}}],["being",{"_index":2579,"title":{},"body":{"license.html":{}}}],["believe",{"_index":2802,"title":{},"body":{"license.html":{}}}],["below",{"_index":2444,"title":{},"body":{"license.html":{}}}],["bem",{"_index":3055,"title":{},"body":{"miscellaneous/variables.html":{}}}],["benefit",{"_index":2795,"title":{},"body":{"license.html":{}}}],["best",{"_index":2911,"title":{},"body":{"license.html":{}}}],["between",{"_index":2406,"title":{},"body":{"license.html":{}}}],["beyond",{"_index":2524,"title":{},"body":{"license.html":{}}}],["bigger",{"_index":571,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["body",{"_index":227,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/PersonalityController.html":{},"license.html":{}}}],["boolean",{"_index":651,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreatePersonality.html":{},"classes/GetPersonalities.html":{},"injectables/HistoryService.html":{},"guards/SessionGuard.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{}}}],["both",{"_index":2219,"title":{},"body":{"license.html":{}}}],["box",{"_index":2937,"title":{},"body":{"license.html":{}}}],["br",{"_index":1859,"title":{},"body":{"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["browse",{"_index":2955,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2118,"title":{},"body":{"index.html":{},"modules.html":{}}}],["buf",{"_index":3042,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buf.tostring(\"hex",{"_index":3045,"title":{},"body":{"miscellaneous/variables.html":{}}}],["build",{"_index":2124,"title":{},"body":{"index.html":{}}}],["business",{"_index":2815,"title":{},"body":{"license.html":{}}}],["c",{"_index":2134,"title":{},"body":{"license.html":{}}}],["calculateoverallstats",{"_index":683,"title":{},"body":{"injectables/ClaimService.html":{}}}],["calculateoverallstats(claim",{"_index":693,"title":{},"body":{"injectables/ClaimService.html":{}}}],["called",{"_index":2297,"title":{},"body":{"license.html":{}}}],["canactivate",{"_index":1433,"title":{},"body":{"guards/SessionGuard.html":{}}}],["canactivate(context",{"_index":1434,"title":{},"body":{"guards/SessionGuard.html":{}}}],["carry",{"_index":2499,"title":{},"body":{"license.html":{}}}],["case",{"_index":663,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{},"license.html":{}}}],["cases",{"_index":2599,"title":{},"body":{"license.html":{}}}],["cast",{"_index":578,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["catch",{"_index":378,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimRevisionService.html":{},"classes/NotFoundFilter.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"controllers/UsersController.html":{},"injectables/ViewService.html":{}}}],["catch((e",{"_index":3067,"title":{},"body":{"miscellaneous/variables.html":{}}}],["catch((err",{"_index":1273,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["catch((error",{"_index":296,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/PersonalityService.html":{}}}],["catch(e",{"_index":1666,"title":{},"body":{"controllers/UsersController.html":{}}}],["catch(exception",{"_index":1108,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["catch(notfoundexception",{"_index":1113,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["cause",{"_index":751,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"license.html":{}}}],["cd",{"_index":2105,"title":{},"body":{"index.html":{}}}],["cease",{"_index":2704,"title":{},"body":{"license.html":{}}}],["certain",{"_index":2191,"title":{},"body":{"license.html":{}}}],["cessation",{"_index":2717,"title":{},"body":{"license.html":{}}}],["change",{"_index":1010,"title":{},"body":{"injectables/HistoryService.html":{},"controllers/UsersController.html":{},"license.html":{}}}],["change(create",{"_index":1011,"title":{},"body":{"injectables/HistoryService.html":{}}}],["changed",{"_index":731,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/UsersService.html":{},"license.html":{}}}],["changepassword",{"_index":1621,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["changepassword(@req",{"_index":1650,"title":{},"body":{"controllers/UsersController.html":{}}}],["changepassword(new",{"_index":1661,"title":{},"body":{"controllers/UsersController.html":{}}}],["changepassword(req",{"_index":1623,"title":{},"body":{"controllers/UsersController.html":{}}}],["changepassword(userid",{"_index":1684,"title":{},"body":{"injectables/UsersService.html":{}}}],["changing",{"_index":2146,"title":{},"body":{"license.html":{}}}],["characterized",{"_index":2631,"title":{},"body":{"license.html":{}}}],["characters",{"_index":668,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{}}}],["charge",{"_index":2175,"title":{},"body":{"license.html":{}}}],["choose",{"_index":2858,"title":{},"body":{"license.html":{}}}],["choosing",{"_index":2862,"title":{},"body":{"license.html":{}}}],["circumstances",{"_index":2442,"title":{},"body":{"license.html":{}}}],["circumvention",{"_index":2450,"title":{},"body":{"license.html":{}}}],["civil",{"_index":2904,"title":{},"body":{"license.html":{}}}],["claim",{"_index":35,"title":{"classes/Claim.html":{}},"body":{"modules/AppModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimReview.html":{},"classes/History.html":{},"classes/Personality.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"license.html":{}}}],["claim._id",{"_index":362,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{},"injectables/SitemapService.html":{}}}],["claim.claimid",{"_index":656,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["claim.content",{"_index":657,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{}}}],["claim.content.object",{"_index":804,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claim.content.object.foreach((p",{"_index":811,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claim.content.text",{"_index":1398,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["claim.controller",{"_index":392,"title":{},"body":{"modules/ClaimModule.html":{}}}],["claim.dto",{"_index":252,"title":{},"body":{"controllers/ClaimController.html":{},"classes/UpdateClaimDTO.html":{}}}],["claim.dto.ts",{"_index":823,"title":{},"body":{"classes/CreateClaimDTO.html":{},"classes/UpdateClaimDTO.html":{},"coverage.html":{}}}],["claim.dto.ts:11",{"_index":825,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["claim.dto.ts:16",{"_index":827,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["claim.dto.ts:21",{"_index":834,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["claim.dto.ts:25",{"_index":831,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["claim.dto.ts:29",{"_index":829,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["claim.dto.ts:33",{"_index":828,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["claim.dto.ts:7",{"_index":832,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["claim.lastestrevision",{"_index":1363,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["claim.latestrevision",{"_index":758,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claim.name",{"_index":397,"title":{},"body":{"modules/ClaimModule.html":{},"miscellaneous/variables.html":{}}}],["claim.personality",{"_index":760,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claim.save",{"_index":784,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claim.service",{"_index":236,"title":{},"body":{"controllers/ClaimController.html":{},"modules/ClaimModule.html":{}}}],["claim.slug",{"_index":659,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{}}}],["claim.sources",{"_index":673,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["claim.toobject().latestrevision",{"_index":780,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claim/claim.module",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/SitemapModule.html":{},"modules/StatsModule.html":{}}}],["claim/claim.service",{"_index":1489,"title":{},"body":{"injectables/SitemapService.html":{},"injectables/StatsService.html":{}}}],["claim/schemas/claim.schema",{"_index":417,"title":{},"body":{"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimReview.html":{}}}],["claim?.content?.object",{"_index":803,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claimbody",{"_index":704,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claimcontent",{"_index":724,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claimcontent[paragraphindex].content[sentenceindex].props",{"_index":819,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claimcontroller",{"_index":161,"title":{"controllers/ClaimController.html":{}},"body":{"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"coverage.html":{}}}],["claimcreatepage",{"_index":168,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claimcreatepage(@req",{"_index":371,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claimcreatepage(req",{"_index":190,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claimdocument",{"_index":141,"title":{},"body":{"classes/Claim.html":{},"injectables/ClaimService.html":{},"miscellaneous/typealiases.html":{}}}],["claimid",{"_index":155,"title":{},"body":{"classes/Claim.html":{},"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{}}}],["claimids",{"_index":524,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["claimmatchparameters",{"_index":691,"title":{},"body":{"injectables/ClaimService.html":{},"miscellaneous/typealiases.html":{}}}],["claimmodel",{"_index":395,"title":{},"body":{"modules/ClaimModule.html":{},"injectables/ClaimService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimmodule",{"_index":32,"title":{"modules/ClaimModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/SitemapModule.html":{},"modules/StatsModule.html":{},"modules.html":{},"overview.html":{}}}],["claimobj",{"_index":340,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claimobj.content.object.foreach((p",{"_index":343,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claimobj.date",{"_index":347,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claimobj.personality",{"_index":348,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claimreview",{"_index":398,"title":{"classes/ClaimReview.html":{}},"body":{"classes/ClaimReview.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"classes/Source.html":{},"coverage.html":{}}}],["claimreview.claim",{"_index":582,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["claimreview.name",{"_index":475,"title":{},"body":{"modules/ClaimReviewModule.html":{},"miscellaneous/variables.html":{}}}],["claimreview.personality",{"_index":580,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["claimreview.sources",{"_index":588,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["claimreview.topclassification",{"_index":821,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claimreview.user",{"_index":584,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["claimreviewcontroller",{"_index":437,"title":{"controllers/ClaimReviewController.html":{}},"body":{"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"coverage.html":{}}}],["claimreviewdocument",{"_index":418,"title":{},"body":{"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"miscellaneous/typealiases.html":{}}}],["claimreviewid",{"_index":519,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["claimreviewmodel",{"_index":474,"title":{},"body":{"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimreviewmodule",{"_index":34,"title":{"modules/ClaimReviewModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/PersonalityModule.html":{},"modules/SitemapModule.html":{},"modules/StatsModule.html":{},"modules.html":{},"overview.html":{}}}],["claimreviewschema",{"_index":436,"title":{},"body":{"classes/ClaimReview.html":{},"modules/ClaimReviewModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimreviewschemaraw",{"_index":433,"title":{},"body":{"classes/ClaimReview.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimreviewschemaraw.virtual('sources",{"_index":435,"title":{},"body":{"classes/ClaimReview.html":{}}}],["claimreviewservice",{"_index":233,"title":{"injectables/ClaimReviewService.html":{}},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/StatsService.html":{},"coverage.html":{},"overview.html":{}}}],["claimrevision",{"_index":120,"title":{"classes/ClaimRevision.html":{}},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"coverage.html":{}}}],["claimrevision.name",{"_index":627,"title":{},"body":{"modules/ClaimRevisionModule.html":{},"miscellaneous/variables.html":{}}}],["claimrevisiondocument",{"_index":601,"title":{},"body":{"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"miscellaneous/typealiases.html":{}}}],["claimrevisionmodel",{"_index":626,"title":{},"body":{"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimrevisionmodule",{"_index":63,"title":{"modules/ClaimRevisionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/PersonalityModule.html":{},"modules.html":{},"overview.html":{}}}],["claimrevisionschema",{"_index":617,"title":{},"body":{"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimrevisionschemaraw",{"_index":614,"title":{},"body":{"classes/ClaimRevision.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimrevisionschemaraw.virtual('reviews",{"_index":616,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["claimrevisionservice",{"_index":622,"title":{"injectables/ClaimRevisionService.html":{}},"body":{"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"coverage.html":{},"overview.html":{}}}],["claimrevisionupdate",{"_index":725,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claims",{"_index":295,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/StatsService.html":{},"license.html":{}}}],["claims.dto",{"_index":254,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claims.dto.ts",{"_index":952,"title":{},"body":{"classes/GetClaimsDTO.html":{},"coverage.html":{}}}],["claims.dto.ts:10",{"_index":956,"title":{},"body":{"classes/GetClaimsDTO.html":{}}}],["claims.dto.ts:13",{"_index":954,"title":{},"body":{"classes/GetClaimsDTO.html":{}}}],["claims.dto.ts:17",{"_index":953,"title":{},"body":{"classes/GetClaimsDTO.html":{}}}],["claims.dto.ts:20",{"_index":957,"title":{},"body":{"classes/GetClaimsDTO.html":{}}}],["claims.dto.ts:6",{"_index":955,"title":{},"body":{"classes/GetClaimsDTO.html":{}}}],["claims.map((claim",{"_index":1397,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["claims.map(async",{"_index":749,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claimschema",{"_index":159,"title":{},"body":{"classes/Claim.html":{},"modules/ClaimModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimschemaraw",{"_index":149,"title":{},"body":{"classes/Claim.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimschemaraw.plugin(softdeleteplugin",{"_index":158,"title":{},"body":{"classes/Claim.html":{}}}],["claimschemaraw.virtual('revisions",{"_index":151,"title":{},"body":{"classes/Claim.html":{}}}],["claimschemaraw.virtual('sources",{"_index":156,"title":{},"body":{"classes/Claim.html":{}}}],["claimservice",{"_index":235,"title":{"injectables/ClaimService.html":{}},"body":{"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"injectables/ClaimService.html":{},"injectables/SitemapService.html":{},"injectables/StatsService.html":{},"coverage.html":{},"overview.html":{}}}],["claimslug",{"_index":353,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{}}}],["class",{"_index":69,"title":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"classes/Personality.html":{},"classes/Source.html":{},"classes/UpdateClaimDTO.html":{},"classes/User.html":{},"classes/WikidataCache.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"dependencies.html":{},"license.html":{}}}],["classes",{"_index":112,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"classes/Personality.html":{},"classes/Source.html":{},"classes/UpdateClaimDTO.html":{},"classes/User.html":{},"classes/WikidataCache.html":{},"overview.html":{}}}],["classification",{"_index":402,"title":{},"body":{"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimReview.html":{},"classes/Source.html":{}}}],["classificationenum",{"_index":420,"title":{},"body":{"classes/ClaimReview.html":{},"classes/CreateClaimReview.html":{},"miscellaneous/enumerations.html":{}}}],["clean",{"_index":628,"title":{},"body":{"modules/ClaimRevisionModule.html":{}}}],["clear",{"_index":2565,"title":{},"body":{"license.html":{}}}],["clearly",{"_index":2216,"title":{},"body":{"license.html":{}}}],["client",{"_index":706,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["clone",{"_index":2102,"title":{},"body":{"index.html":{}}}],["closely",{"_index":2900,"title":{},"body":{"license.html":{}}}],["cluster_authmodule",{"_index":96,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":97,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":98,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_claimmodule",{"_index":384,"title":{},"body":{"modules/ClaimModule.html":{},"overview.html":{}}}],["cluster_claimmodule_exports",{"_index":387,"title":{},"body":{"modules/ClaimModule.html":{},"overview.html":{}}}],["cluster_claimmodule_imports",{"_index":386,"title":{},"body":{"modules/ClaimModule.html":{},"overview.html":{}}}],["cluster_claimmodule_providers",{"_index":385,"title":{},"body":{"modules/ClaimModule.html":{},"overview.html":{}}}],["cluster_claimreviewmodule",{"_index":464,"title":{},"body":{"modules/ClaimReviewModule.html":{},"overview.html":{}}}],["cluster_claimreviewmodule_exports",{"_index":467,"title":{},"body":{"modules/ClaimReviewModule.html":{},"overview.html":{}}}],["cluster_claimreviewmodule_imports",{"_index":466,"title":{},"body":{"modules/ClaimReviewModule.html":{}}}],["cluster_claimreviewmodule_providers",{"_index":465,"title":{},"body":{"modules/ClaimReviewModule.html":{},"overview.html":{}}}],["cluster_claimrevisionmodule",{"_index":618,"title":{},"body":{"modules/ClaimRevisionModule.html":{},"overview.html":{}}}],["cluster_claimrevisionmodule_exports",{"_index":619,"title":{},"body":{"modules/ClaimRevisionModule.html":{},"overview.html":{}}}],["cluster_claimrevisionmodule_imports",{"_index":621,"title":{},"body":{"modules/ClaimRevisionModule.html":{}}}],["cluster_claimrevisionmodule_providers",{"_index":620,"title":{},"body":{"modules/ClaimRevisionModule.html":{},"overview.html":{}}}],["cluster_emailmodule",{"_index":877,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_exports",{"_index":879,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_providers",{"_index":878,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_historymodule",{"_index":986,"title":{},"body":{"modules/HistoryModule.html":{},"overview.html":{}}}],["cluster_historymodule_exports",{"_index":987,"title":{},"body":{"modules/HistoryModule.html":{},"overview.html":{}}}],["cluster_historymodule_providers",{"_index":988,"title":{},"body":{"modules/HistoryModule.html":{},"overview.html":{}}}],["cluster_homemodule",{"_index":1041,"title":{},"body":{"modules/HomeModule.html":{},"overview.html":{}}}],["cluster_homemodule_imports",{"_index":1042,"title":{},"body":{"modules/HomeModule.html":{},"overview.html":{}}}],["cluster_parsermodule",{"_index":1117,"title":{},"body":{"modules/ParserModule.html":{},"overview.html":{}}}],["cluster_parsermodule_exports",{"_index":1118,"title":{},"body":{"modules/ParserModule.html":{},"overview.html":{}}}],["cluster_parsermodule_providers",{"_index":1119,"title":{},"body":{"modules/ParserModule.html":{},"overview.html":{}}}],["cluster_personalitymodule",{"_index":1291,"title":{},"body":{"modules/PersonalityModule.html":{},"overview.html":{}}}],["cluster_personalitymodule_exports",{"_index":1293,"title":{},"body":{"modules/PersonalityModule.html":{},"overview.html":{}}}],["cluster_personalitymodule_imports",{"_index":1292,"title":{},"body":{"modules/PersonalityModule.html":{},"overview.html":{}}}],["cluster_personalitymodule_providers",{"_index":1294,"title":{},"body":{"modules/PersonalityModule.html":{},"overview.html":{}}}],["cluster_sitemapmodule",{"_index":1471,"title":{},"body":{"modules/SitemapModule.html":{},"overview.html":{}}}],["cluster_sitemapmodule_exports",{"_index":1474,"title":{},"body":{"modules/SitemapModule.html":{},"overview.html":{}}}],["cluster_sitemapmodule_imports",{"_index":1472,"title":{},"body":{"modules/SitemapModule.html":{}}}],["cluster_sitemapmodule_providers",{"_index":1473,"title":{},"body":{"modules/SitemapModule.html":{},"overview.html":{}}}],["cluster_sourcemodule",{"_index":1557,"title":{},"body":{"modules/SourceModule.html":{},"overview.html":{}}}],["cluster_sourcemodule_exports",{"_index":1559,"title":{},"body":{"modules/SourceModule.html":{},"overview.html":{}}}],["cluster_sourcemodule_providers",{"_index":1558,"title":{},"body":{"modules/SourceModule.html":{},"overview.html":{}}}],["cluster_statsmodule",{"_index":1588,"title":{},"body":{"modules/StatsModule.html":{},"overview.html":{}}}],["cluster_statsmodule_exports",{"_index":1591,"title":{},"body":{"modules/StatsModule.html":{},"overview.html":{}}}],["cluster_statsmodule_imports",{"_index":1590,"title":{},"body":{"modules/StatsModule.html":{}}}],["cluster_statsmodule_providers",{"_index":1589,"title":{},"body":{"modules/StatsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1671,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1673,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":1672,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1674,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_viewmodule",{"_index":1787,"title":{},"body":{"modules/ViewModule.html":{},"overview.html":{}}}],["cluster_viewmodule_exports",{"_index":1789,"title":{},"body":{"modules/ViewModule.html":{},"overview.html":{}}}],["cluster_viewmodule_providers",{"_index":1788,"title":{},"body":{"modules/ViewModule.html":{},"overview.html":{}}}],["cluster_wikidatamodule",{"_index":1822,"title":{},"body":{"modules/WikidataModule.html":{},"overview.html":{}}}],["cluster_wikidatamodule_exports",{"_index":1824,"title":{},"body":{"modules/WikidataModule.html":{},"overview.html":{}}}],["cluster_wikidatamodule_providers",{"_index":1823,"title":{},"body":{"modules/WikidataModule.html":{},"overview.html":{}}}],["code",{"_index":1495,"title":{},"body":{"injectables/SitemapService.html":{},"controllers/ViewController.html":{},"license.html":{}}}],["codeofconductpage",{"_index":1742,"title":{},"body":{"controllers/ViewController.html":{}}}],["codeofconductpage(@req",{"_index":1782,"title":{},"body":{"controllers/ViewController.html":{}}}],["codeofconductpage(req",{"_index":1750,"title":{},"body":{"controllers/ViewController.html":{}}}],["collect",{"_index":2837,"title":{},"body":{"license.html":{}}}],["combate",{"_index":2096,"title":{},"body":{"index.html":{}}}],["combination",{"_index":2844,"title":{},"body":{"license.html":{}}}],["combine",{"_index":2841,"title":{},"body":{"license.html":{}}}],["combined",{"_index":2519,"title":{},"body":{"license.html":{}}}],["combinedlistall",{"_index":1301,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["combinedlistall(query",{"_index":1307,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["comes",{"_index":2505,"title":{},"body":{"license.html":{}}}],["commands",{"_index":2343,"title":{},"body":{"license.html":{}}}],["commercial",{"_index":2609,"title":{},"body":{"license.html":{}}}],["commitment",{"_index":2783,"title":{},"body":{"license.html":{}}}],["common",{"_index":2603,"title":{},"body":{"license.html":{}}}],["communication",{"_index":2404,"title":{},"body":{"license.html":{}}}],["compilation",{"_index":2514,"title":{},"body":{"license.html":{}}}],["compilation's",{"_index":2523,"title":{},"body":{"license.html":{}}}],["compilations",{"_index":2820,"title":{},"body":{"license.html":{}}}],["compiler",{"_index":2382,"title":{},"body":{"license.html":{}}}],["compliance",{"_index":2742,"title":{},"body":{"license.html":{}}}],["comply",{"_index":2434,"title":{},"body":{"license.html":{}}}],["compodoc/compodoc",{"_index":1994,"title":{},"body":{"dependencies.html":{}}}],["component",{"_index":2370,"title":{},"body":{"license.html":{}}}],["components",{"_index":2078,"title":{},"body":{"dependencies.html":{}}}],["compose",{"_index":2110,"title":{},"body":{"index.html":{}}}],["compromise",{"_index":2020,"title":{},"body":{"dependencies.html":{}}}],["computer",{"_index":2311,"title":{},"body":{"license.html":{}}}],["computers",{"_index":2263,"title":{},"body":{"license.html":{}}}],["com|net|org|io|gov)/g",{"_index":1170,"title":{},"body":{"injectables/ParserService.html":{}}}],["concerning",{"_index":2843,"title":{},"body":{"license.html":{}}}],["concerns",{"_index":2851,"title":{},"body":{"license.html":{}}}],["conditioned",{"_index":2814,"title":{},"body":{"license.html":{}}}],["conditions",{"_index":2272,"title":{},"body":{"license.html":{}}}],["conduct",{"_index":1496,"title":{},"body":{"injectables/SitemapService.html":{},"controllers/ViewController.html":{}}}],["configmodule",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{}}}],["configmodule.forroot",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":239,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/EmailService.html":{},"miscellaneous/variables.html":{}}}],["configservice.get(\"disable_smtp",{"_index":3038,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get(\"users",{"_index":3036,"title":{},"body":{"miscellaneous/variables.html":{}}}],["conflicts",{"_index":1763,"title":{},"body":{"controllers/ViewController.html":{}}}],["connect",{"_index":2024,"title":{},"body":{"dependencies.html":{}}}],["connection",{"_index":2804,"title":{},"body":{"license.html":{}}}],["connection_uri",{"_index":2989,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consent",{"_index":2052,"title":{},"body":{"dependencies.html":{}}}],["consequence",{"_index":2729,"title":{},"body":{"license.html":{}}}],["consequential",{"_index":2882,"title":{},"body":{"license.html":{}}}],["consider",{"_index":2945,"title":{},"body":{"license.html":{}}}],["considered",{"_index":2687,"title":{},"body":{"license.html":{}}}],["consistent",{"_index":2776,"title":{},"body":{"license.html":{}}}],["conspicuously",{"_index":2483,"title":{},"body":{"license.html":{}}}],["const",{"_index":148,"title":{},"body":{"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"classes/History.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"classes/NotFoundFilter.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["constantly",{"_index":2258,"title":{},"body":{"license.html":{}}}],["constitutes",{"_index":2423,"title":{},"body":{"license.html":{}}}],["constructor",{"_index":262,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{}}}],["constructor(claimreviewmodel",{"_index":489,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["constructor(claimreviewservice",{"_index":1595,"title":{},"body":{"injectables/StatsService.html":{}}}],["constructor(claimrevisionmodel",{"_index":636,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["constructor(configservice",{"_index":887,"title":{},"body":{"injectables/EmailService.html":{}}}],["constructor(historymodel",{"_index":997,"title":{},"body":{"injectables/HistoryService.html":{}}}],["constructor(logger",{"_index":1077,"title":{},"body":{"classes/Logger.html":{}}}],["constructor(personalityservice",{"_index":1478,"title":{},"body":{"injectables/SitemapService.html":{}}}],["constructor(private",{"_index":1461,"title":{},"body":{"controllers/SitemapController.html":{},"controllers/SourceController.html":{},"controllers/ViewController.html":{}}}],["constructor(req",{"_index":687,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["constructor(sourcemodel",{"_index":1567,"title":{},"body":{"injectables/SourceService.html":{}}}],["constructor(usermodel",{"_index":1052,"title":{},"body":{"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["constructor(wikidatacache",{"_index":1841,"title":{},"body":{"injectables/WikidataService.html":{}}}],["construed",{"_index":2825,"title":{},"body":{"license.html":{}}}],["consumer",{"_index":2587,"title":{},"body":{"license.html":{}}}],["contact",{"_index":2924,"title":{},"body":{"license.html":{}}}],["contain",{"_index":2821,"title":{},"body":{"license.html":{}}}],["containing",{"_index":2669,"title":{},"body":{"license.html":{}}}],["contains",{"_index":2691,"title":{},"body":{"license.html":{}}}],["content",{"_index":591,"title":{},"body":{"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"classes/CreateClaimDTO.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["contents",{"_index":2780,"title":{},"body":{"license.html":{}}}],["context",{"_index":1080,"title":{},"body":{"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"guards/SessionGuard.html":{},"license.html":{}}}],["context.getresponse",{"_index":1115,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["context.switchtohttp",{"_index":1440,"title":{},"body":{"guards/SessionGuard.html":{}}}],["continue",{"_index":2637,"title":{},"body":{"license.html":{}}}],["continued",{"_index":2622,"title":{},"body":{"license.html":{}}}],["continuing",{"_index":3071,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contractual",{"_index":2684,"title":{},"body":{"license.html":{}}}],["contradict",{"_index":2831,"title":{},"body":{"license.html":{}}}],["contrast",{"_index":2157,"title":{},"body":{"license.html":{}}}],["contributor",{"_index":2767,"title":{},"body":{"license.html":{}}}],["contributor's",{"_index":2769,"title":{},"body":{"license.html":{}}}],["control",{"_index":2389,"title":{},"body":{"license.html":{}}}],["controlled",{"_index":2771,"title":{},"body":{"license.html":{}}}],["controller",{"_index":160,"title":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/RootController.html":{},"controllers/SitemapController.html":{},"controllers/SourceController.html":{},"controllers/StatsController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/RootController.html":{},"controllers/SitemapController.html":{},"controllers/SourceController.html":{},"controllers/StatsController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"coverage.html":{}}}],["controller(\"api",{"_index":1418,"title":{},"body":{"controllers/RootController.html":{}}}],["controller(\"api/claimreview",{"_index":453,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["controller(\"api/stats",{"_index":1587,"title":{},"body":{"controllers/StatsController.html":{}}}],["controllers",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"controllers/RootController.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"overview.html":{}}}],["convenient",{"_index":2333,"title":{},"body":{"license.html":{}}}],["convert",{"_index":662,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{}}}],["convey",{"_index":2319,"title":{},"body":{"license.html":{}}}],["conveyance",{"_index":2808,"title":{},"body":{"license.html":{}}}],["conveyed",{"_index":2632,"title":{},"body":{"license.html":{}}}],["conveying",{"_index":2327,"title":{},"body":{"license.html":{}}}],["conveys",{"_index":2683,"title":{},"body":{"license.html":{}}}],["cookie",{"_index":2027,"title":{},"body":{"dependencies.html":{}}}],["cookieparser",{"_index":1965,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["copies",{"_index":2145,"title":{},"body":{"license.html":{}}}],["copy",{"_index":2142,"title":{},"body":{"license.html":{}}}],["copying",{"_index":2273,"title":{},"body":{"license.html":{}}}],["copyleft",{"_index":2148,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":2133,"title":{},"body":{"license.html":{}}}],["copyrightable",{"_index":2282,"title":{},"body":{"license.html":{}}}],["copyrighted",{"_index":2439,"title":{},"body":{"license.html":{}}}],["correction",{"_index":2876,"title":{},"body":{"license.html":{}}}],["corresponding",{"_index":2385,"title":{},"body":{"license.html":{}}}],["cors",{"_index":2996,"title":{},"body":{"miscellaneous/variables.html":{}}}],["corsoptions",{"_index":2981,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cost",{"_index":2549,"title":{},"body":{"license.html":{}}}],["count",{"_index":482,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/UtilService.html":{}}}],["count(query",{"_index":509,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["countdown",{"_index":2054,"title":{},"body":{"dependencies.html":{}}}],["counterclaim",{"_index":2760,"title":{},"body":{"license.html":{}}}],["countreviewsbysentencehash",{"_index":483,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["countreviewsbysentencehash(sentencehash",{"_index":513,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["countries",{"_index":2316,"title":{},"body":{"license.html":{}}}],["country",{"_index":2798,"title":{},"body":{"license.html":{}}}],["course",{"_index":2935,"title":{},"body":{"license.html":{}}}],["court",{"_index":2830,"title":{},"body":{"license.html":{}}}],["courts",{"_index":2899,"title":{},"body":{"license.html":{}}}],["covenant",{"_index":2786,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":1940,"title":{"coverage.html":{}},"body":{"coverage.html":{},"license.html":{}}}],["covered",{"_index":2299,"title":{},"body":{"license.html":{}}}],["create",{"_index":169,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"injectables/SourceService.html":{},"classes/UpdateClaimDTO.html":{},"miscellaneous/enumerations.html":{}}}],["create(@body",{"_index":300,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/PersonalityController.html":{}}}],["create(claim",{"_index":697,"title":{},"body":{"injectables/ClaimService.html":{}}}],["create(claimid",{"_index":639,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["create(claimreview",{"_index":515,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["create(createclaimdto",{"_index":195,"title":{},"body":{"controllers/ClaimController.html":{}}}],["create(createclaimreview",{"_index":442,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["create(createpersonality",{"_index":1225,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["create(data",{"_index":1569,"title":{},"body":{"injectables/SourceService.html":{}}}],["create(personality",{"_index":1310,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["createclaimdto",{"_index":196,"title":{"classes/CreateClaimDTO.html":{}},"body":{"controllers/ClaimController.html":{},"classes/CreateClaimDTO.html":{},"classes/UpdateClaimDTO.html":{},"coverage.html":{}}}],["createclaimdto.recaptcha",{"_index":304,"title":{},"body":{"controllers/ClaimController.html":{}}}],["createclaimreview",{"_index":443,"title":{"classes/CreateClaimReview.html":{}},"body":{"controllers/ClaimReviewController.html":{},"classes/CreateClaimReview.html":{},"coverage.html":{}}}],["createclaimreview.recaptcha",{"_index":454,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["createdat",{"_index":1812,"title":{},"body":{"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["createhistory",{"_index":995,"title":{},"body":{"injectables/HistoryService.html":{}}}],["createhistory(data",{"_index":999,"title":{},"body":{"injectables/HistoryService.html":{}}}],["createparagraphid",{"_index":1126,"title":{},"body":{"injectables/ParserService.html":{}}}],["createpersonality",{"_index":857,"title":{"classes/CreatePersonality.html":{}},"body":{"classes/CreatePersonality.html":{},"controllers/PersonalityController.html":{},"coverage.html":{}}}],["creates",{"_index":700,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["createsentenceid",{"_index":1127,"title":{},"body":{"injectables/ParserService.html":{}}}],["createserver",{"_index":1801,"title":{},"body":{"injectables/ViewService.html":{}}}],["createtransport",{"_index":884,"title":{},"body":{"injectables/EmailService.html":{}}}],["creation",{"_index":703,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["credenciais",{"_index":3063,"title":{},"body":{"miscellaneous/variables.html":{}}}],["credentials",{"_index":2983,"title":{},"body":{"miscellaneous/variables.html":{}}}],["criterion",{"_index":2347,"title":{},"body":{"license.html":{}}}],["cross",{"_index":2759,"title":{},"body":{"license.html":{}}}],["cure",{"_index":2721,"title":{},"body":{"license.html":{}}}],["currentpassword",{"_index":1651,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["custom",{"_index":1104,"title":{},"body":{"classes/NotFoundFilter.html":{},"controllers/ViewController.html":{}}}],["customarily",{"_index":2539,"title":{},"body":{"license.html":{}}}],["customer",{"_index":2545,"title":{},"body":{"license.html":{}}}],["d",{"_index":2111,"title":{},"body":{"index.html":{},"license.html":{}}}],["damages",{"_index":2880,"title":{},"body":{"license.html":{}}}],["danger",{"_index":2265,"title":{},"body":{"license.html":{}}}],["data",{"_index":265,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"injectables/SourceService.html":{},"injectables/WikidataService.html":{},"license.html":{}}}],["data.entities",{"_index":1879,"title":{},"body":{"injectables/WikidataService.html":{}}}],["data.query",{"_index":1938,"title":{},"body":{"injectables/WikidataService.html":{}}}],["data.targetid",{"_index":1573,"title":{},"body":{"injectables/SourceService.html":{}}}],["data.user",{"_index":1575,"title":{},"body":{"injectables/SourceService.html":{}}}],["database",{"_index":643,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{}}}],["dataid",{"_index":1006,"title":{},"body":{"injectables/HistoryService.html":{}}}],["date",{"_index":346,"title":{},"body":{"controllers/ClaimController.html":{},"classes/ClaimRevision.html":{},"classes/CreateClaimDTO.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"classes/WikidataCache.html":{},"license.html":{}}}],["date.now",{"_index":1819,"title":{},"body":{"classes/WikidataCache.html":{}}}],["days",{"_index":2716,"title":{},"body":{"license.html":{}}}],["db",{"_index":2107,"title":{},"body":{"index.html":{}}}],["de",{"_index":1014,"title":{},"body":{"injectables/HistoryService.html":{},"index.html":{}}}],["debug",{"_index":1073,"title":{},"body":{"classes/Logger.html":{}}}],["debug(message",{"_index":1079,"title":{},"body":{"classes/Logger.html":{}}}],["december",{"_index":2464,"title":{},"body":{"license.html":{}}}],["decide",{"_index":2860,"title":{},"body":{"license.html":{}}}],["declining",{"_index":2675,"title":{},"body":{"license.html":{}}}],["decorators",{"_index":121,"title":{},"body":{"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"classes/ClaimRevision.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"controllers/HomeController.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"controllers/RootController.html":{},"controllers/SitemapController.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"controllers/StatsController.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"classes/WikidataCache.html":{}}}],["deemed",{"_index":2452,"title":{},"body":{"license.html":{}}}],["default",{"_index":511,"title":{},"body":{"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"injectables/HistoryService.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/SourceService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":664,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{}}}],["defective",{"_index":2872,"title":{},"body":{"license.html":{}}}],["defenses",{"_index":2828,"title":{},"body":{"license.html":{}}}],["defined",{"_index":11,"title":{},"body":{"modules/AppModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{},"license.html":{}}}],["definition",{"_index":2394,"title":{},"body":{"license.html":{}}}],["definitions",{"_index":2276,"title":{},"body":{"license.html":{}}}],["delete",{"_index":170,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"miscellaneous/enumerations.html":{}}}],["delete(\":id",{"_index":461,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["delete(\"api/claim/:id",{"_index":319,"title":{},"body":{"controllers/ClaimController.html":{}}}],["delete(\"api/personality/:id",{"_index":1277,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["delete(@param",{"_index":462,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["delete(@param(\"id",{"_index":320,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{}}}],["delete(claimid",{"_index":199,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{}}}],["delete(claimreviewid",{"_index":517,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["delete(params",{"_index":446,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["delete(personalityid",{"_index":1228,"title":{},"body":{"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["deleted",{"_index":1280,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["deletion",{"_index":709,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["denied",{"_index":2639,"title":{},"body":{"license.html":{}}}],["denominated",{"_index":2784,"title":{},"body":{"license.html":{}}}],["deny",{"_index":2228,"title":{},"body":{"license.html":{}}}],["denying",{"_index":2187,"title":{},"body":{"license.html":{}}}],["dependencies",{"_index":95,"title":{"dependencies.html":{}},"body":{"modules/AuthModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/HomeModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deprive",{"_index":2793,"title":{},"body":{"license.html":{}}}],["desc",{"_index":325,"title":{},"body":{"controllers/ClaimController.html":{}}}],["description",{"_index":525,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreatePersonality.html":{},"injectables/HistoryService.html":{},"classes/NotFoundFilter.html":{},"classes/Personality.html":{},"injectables/PersonalityService.html":{},"classes/Source.html":{},"injectables/WikidataService.html":{}}}],["descriptions",{"_index":1889,"title":{},"body":{"injectables/WikidataService.html":{}}}],["design/icons",{"_index":1988,"title":{},"body":{"dependencies.html":{}}}],["designated",{"_index":2557,"title":{},"body":{"license.html":{}}}],["designed",{"_index":2153,"title":{},"body":{"license.html":{}}}],["detail",{"_index":2849,"title":{},"body":{"license.html":{}}}],["details",{"_index":969,"title":{},"body":{"classes/History.html":{},"injectables/HistoryService.html":{},"license.html":{}}}],["details.the",{"_index":2933,"title":{},"body":{"license.html":{}}}],["determining",{"_index":2597,"title":{},"body":{"license.html":{}}}],["dev",{"_index":1804,"title":{},"body":{"injectables/ViewService.html":{},"index.html":{}}}],["develop",{"_index":2908,"title":{},"body":{"license.html":{}}}],["developers",{"_index":2205,"title":{},"body":{"license.html":{}}}],["development",{"_index":2119,"title":{},"body":{"index.html":{},"license.html":{}}}],["devices",{"_index":2227,"title":{},"body":{"license.html":{}}}],["dhaiwat10/react",{"_index":1996,"title":{},"body":{"dependencies.html":{}}}],["differ",{"_index":2848,"title":{},"body":{"license.html":{}}}],["different",{"_index":2560,"title":{},"body":{"license.html":{}}}],["differently",{"_index":2663,"title":{},"body":{"license.html":{}}}],["dir",{"_index":1807,"title":{},"body":{"injectables/ViewService.html":{}}}],["direction",{"_index":2438,"title":{},"body":{"license.html":{}}}],["directions",{"_index":2566,"title":{},"body":{"license.html":{}}}],["directly",{"_index":2304,"title":{},"body":{"license.html":{}}}],["disable",{"_index":1383,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["disablesmtp",{"_index":3037,"title":{},"body":{"miscellaneous/variables.html":{}}}],["disclaim",{"_index":2475,"title":{},"body":{"license.html":{}}}],["disclaimer",{"_index":2863,"title":{},"body":{"license.html":{}}}],["disclaiming",{"_index":2660,"title":{},"body":{"license.html":{}}}],["discriminatory",{"_index":2812,"title":{},"body":{"license.html":{}}}],["discursos",{"_index":2093,"title":{},"body":{"index.html":{}}}],["display",{"_index":2513,"title":{},"body":{"license.html":{}}}],["displayed",{"_index":2668,"title":{},"body":{"license.html":{}}}],["displays",{"_index":2329,"title":{},"body":{"license.html":{}}}],["distinguishing",{"_index":2852,"title":{},"body":{"license.html":{}}}],["distribute",{"_index":2143,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":2920,"title":{},"body":{"license.html":{}}}],["distributing",{"_index":2816,"title":{},"body":{"license.html":{}}}],["distribution",{"_index":2274,"title":{},"body":{"license.html":{}}}],["docker:docker",{"_index":2109,"title":{},"body":{"index.html":{}}}],["document",{"_index":1001,"title":{},"body":{"injectables/HistoryService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"classes/WikidataCache.html":{},"license.html":{}}}],["documentation",{"_index":1941,"title":{},"body":{"coverage.html":{}}}],["documented",{"_index":2647,"title":{},"body":{"license.html":{}}}],["doesn't",{"_index":560,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"controllers/UsersController.html":{}}}],["dom",{"_index":2056,"title":{},"body":{"dependencies.html":{}}}],["domains",{"_index":2250,"title":{},"body":{"license.html":{}}}],["domino",{"_index":2029,"title":{},"body":{"dependencies.html":{}}}],["doubtful",{"_index":2598,"title":{},"body":{"license.html":{}}}],["downstream",{"_index":2739,"title":{},"body":{"license.html":{}}}],["draft",{"_index":2031,"title":{},"body":{"dependencies.html":{}}}],["dto/create",{"_index":251,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/PersonalityController.html":{}}}],["dto/get",{"_index":253,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{}}}],["dto/update",{"_index":257,"title":{},"body":{"controllers/ClaimController.html":{}}}],["duplicate",{"_index":1716,"title":{},"body":{"injectables/UtilService.html":{}}}],["durable",{"_index":2538,"title":{},"body":{"license.html":{}}}],["dwelling",{"_index":2596,"title":{},"body":{"license.html":{}}}],["dynamic",{"_index":1529,"title":{},"body":{"classes/Source.html":{}}}],["dynamically",{"_index":2398,"title":{},"body":{"license.html":{}}}],["dynamicmodule",{"_index":19,"title":{},"body":{"modules/AppModule.html":{}}}],["e",{"_index":678,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/EmailService.html":{},"guards/SessionGuard.html":{},"injectables/SitemapService.html":{},"controllers/UsersController.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["e.message",{"_index":1521,"title":{},"body":{"injectables/SitemapService.html":{},"controllers/UsersController.html":{}}}],["each",{"_index":2285,"title":{},"body":{"license.html":{}}}],["earlier",{"_index":2298,"title":{},"body":{"license.html":{}}}],["effect",{"_index":2896,"title":{},"body":{"license.html":{}}}],["effected",{"_index":2473,"title":{},"body":{"license.html":{}}}],["effective",{"_index":2453,"title":{},"body":{"license.html":{}}}],["effectively",{"_index":2267,"title":{},"body":{"license.html":{}}}],["efforts",{"_index":2753,"title":{},"body":{"license.html":{}}}],["electronic",{"_index":2925,"title":{},"body":{"license.html":{}}}],["email",{"_index":1068,"title":{},"body":{"injectables/LocalStrategy.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["email.service",{"_index":882,"title":{},"body":{"modules/EmailModule.html":{}}}],["email/email.module",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["emailmodule",{"_index":50,"title":{"modules/EmailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EmailModule.html":{},"modules.html":{},"overview.html":{}}}],["emailresponse",{"_index":3053,"title":{},"body":{"miscellaneous/variables.html":{}}}],["emailresult",{"_index":933,"title":{},"body":{"injectables/EmailService.html":{}}}],["emailservice",{"_index":880,"title":{"injectables/EmailService.html":{}},"body":{"modules/EmailModule.html":{},"injectables/EmailService.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["emailservice.sendemail",{"_index":3054,"title":{},"body":{"miscellaneous/variables.html":{}}}],["embodied",{"_index":2533,"title":{},"body":{"license.html":{}}}],["employer",{"_index":2938,"title":{},"body":{"license.html":{}}}],["en",{"_index":1317,"title":{},"body":{"injectables/PersonalityService.html":{},"injectables/WikidataService.html":{}}}],["enable",{"_index":2373,"title":{},"body":{"license.html":{}}}],["enableimplicitconversion",{"_index":3001,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enables",{"_index":2321,"title":{},"body":{"license.html":{}}}],["encodeuricomponent(params.wikidataid",{"_index":1874,"title":{},"body":{"injectables/WikidataService.html":{}}}],["encoding",{"_index":910,"title":{},"body":{"injectables/EmailService.html":{}}}],["end",{"_index":2907,"title":{},"body":{"license.html":{}}}],["enforce",{"_index":2785,"title":{},"body":{"license.html":{}}}],["enforcing",{"_index":2478,"title":{},"body":{"license.html":{}}}],["engine",{"_index":1520,"title":{},"body":{"injectables/SitemapService.html":{}}}],["english/javascript",{"_index":1715,"title":{},"body":{"injectables/UtilService.html":{}}}],["ensure",{"_index":2571,"title":{},"body":{"license.html":{}}}],["entered",{"_index":2822,"title":{},"body":{"license.html":{}}}],["entire",{"_index":2503,"title":{},"body":{"license.html":{}}}],["entirely",{"_index":2839,"title":{},"body":{"license.html":{}}}],["entities",{"_index":1878,"title":{},"body":{"injectables/WikidataService.html":{}}}],["entities[params.wikidataid",{"_index":1881,"title":{},"body":{"injectables/WikidataService.html":{}}}],["entity",{"_index":2743,"title":{},"body":{"license.html":{}}}],["enum",{"_index":419,"title":{},"body":{"classes/ClaimReview.html":{},"classes/History.html":{},"classes/Source.html":{}}}],["enumerations",{"_index":2081,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["equal",{"_index":713,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["equivalent",{"_index":2426,"title":{},"body":{"license.html":{}}}],["err",{"_index":1355,"title":{},"body":{"injectables/PersonalityService.html":{},"controllers/UsersController.html":{}}}],["erroneously",{"_index":2226,"title":{},"body":{"license.html":{}}}],["error",{"_index":309,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"controllers/PersonalityController.html":{},"injectables/SitemapService.html":{},"injectables/ViewService.html":{},"miscellaneous/variables.html":{}}}],["error(\"invalid",{"_index":1657,"title":{},"body":{"controllers/UsersController.html":{}}}],["error(\"repeated",{"_index":1659,"title":{},"body":{"controllers/UsersController.html":{}}}],["error(message",{"_index":1083,"title":{},"body":{"classes/Logger.html":{}}}],["error.keypattern",{"_index":1262,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["error.keypattern.wikidata",{"_index":1263,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["error.keyvalue.wikidata",{"_index":1265,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["error.message",{"_index":1264,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["error.name",{"_index":1260,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["errorformat",{"_index":1920,"title":{},"body":{"injectables/WikidataService.html":{}}}],["eslint",{"_index":1382,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["eslint/eslint",{"_index":2008,"title":{},"body":{"dependencies.html":{}}}],["essential",{"_index":2376,"title":{},"body":{"license.html":{}}}],["even",{"_index":2892,"title":{},"body":{"license.html":{}}}],["event",{"_index":2878,"title":{},"body":{"license.html":{}}}],["everyone",{"_index":2140,"title":{},"body":{"license.html":{}}}],["exact",{"_index":2295,"title":{},"body":{"license.html":{}}}],["exaggerated",{"_index":426,"title":{},"body":{"classes/ClaimReview.html":{},"miscellaneous/enumerations.html":{}}}],["example",{"_index":2195,"title":{},"body":{"license.html":{}}}],["except",{"_index":669,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{},"license.html":{}}}],["exception",{"_index":1112,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["exceptionfilter",{"_index":1107,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["exceptions",{"_index":1102,"title":{},"body":{"classes/NotFoundFilter.html":{},"license.html":{}}}],["excluded",{"_index":2585,"title":{},"body":{"license.html":{}}}],["excluding",{"_index":2826,"title":{},"body":{"license.html":{}}}],["exclusion",{"_index":2917,"title":{},"body":{"license.html":{}}}],["exclusive",{"_index":2777,"title":{},"body":{"license.html":{}}}],["exclusively",{"_index":2432,"title":{},"body":{"license.html":{}}}],["excuse",{"_index":2832,"title":{},"body":{"license.html":{}}}],["exec",{"_index":1864,"title":{},"body":{"injectables/WikidataService.html":{}}}],["executable",{"_index":2363,"title":{},"body":{"license.html":{}}}],["execute",{"_index":2620,"title":{},"body":{"license.html":{}}}],["executing",{"_index":2310,"title":{},"body":{"license.html":{}}}],["executioncontext",{"_index":1435,"title":{},"body":{"guards/SessionGuard.html":{}}}],["exercise",{"_index":2754,"title":{},"body":{"license.html":{}}}],["exercising",{"_index":2474,"title":{},"body":{"license.html":{}}}],["exists",{"_index":1267,"title":{},"body":{"controllers/PersonalityController.html":{},"injectables/WikidataService.html":{}}}],["expected",{"_index":2607,"title":{},"body":{"license.html":{}}}],["expects",{"_index":2606,"title":{},"body":{"license.html":{}}}],["expireafterseconds",{"_index":1831,"title":{},"body":{"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["explains",{"_index":2217,"title":{},"body":{"license.html":{}}}],["explicitly",{"_index":2417,"title":{},"body":{"license.html":{}}}],["export",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"dependencies.html":{}}}],["exports",{"_index":390,"title":{},"body":{"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{}}}],["express",{"_index":244,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{},"controllers/HomeController.html":{},"classes/NotFoundFilter.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"dependencies.html":{},"license.html":{}}}],["expressed",{"_index":2865,"title":{},"body":{"license.html":{}}}],["expressly",{"_index":2700,"title":{},"body":{"license.html":{}}}],["extend",{"_index":2253,"title":{},"body":{"license.html":{}}}],["extended",{"_index":2811,"title":{},"body":{"license.html":{}}}],["extends",{"_index":1049,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateClaimDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{}}}],["extensions",{"_index":2518,"title":{},"body":{"license.html":{}}}],["extent",{"_index":2332,"title":{},"body":{"license.html":{}}}],["extract",{"_index":1191,"title":{},"body":{"injectables/ParserService.html":{},"injectables/WikidataService.html":{}}}],["extractclaimwithtextsummary",{"_index":1302,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["extractclaimwithtextsummary(claims",{"_index":1314,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["extractproperties",{"_index":1834,"title":{},"body":{"injectables/WikidataService.html":{}}}],["extractproperties(wikidata",{"_index":1843,"title":{},"body":{"injectables/WikidataService.html":{}}}],["extractvalue",{"_index":1835,"title":{},"body":{"injectables/WikidataService.html":{}}}],["extractvalue(wikidata",{"_index":1845,"title":{},"body":{"injectables/WikidataService.html":{}}}],["f",{"_index":2681,"title":{},"body":{"license.html":{}}}],["facilities",{"_index":2433,"title":{},"body":{"license.html":{}}}],["fact",{"_index":421,"title":{},"body":{"classes/ClaimReview.html":{},"miscellaneous/enumerations.html":{}}}],["fails",{"_index":2712,"title":{},"body":{"license.html":{}}}],["failure",{"_index":2890,"title":{},"body":{"license.html":{}}}],["fair",{"_index":2425,"title":{},"body":{"license.html":{}}}],["fake",{"_index":2097,"title":{},"body":{"index.html":{}}}],["fake\"].indexof",{"_index":1537,"title":{},"body":{"classes/Source.html":{}}}],["false",{"_index":424,"title":{},"body":{"classes/ClaimReview.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"injectables/SitemapService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/WikidataService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["family",{"_index":2591,"title":{},"body":{"license.html":{}}}],["fashion",{"_index":2292,"title":{},"body":{"license.html":{}}}],["favor",{"_index":2601,"title":{},"body":{"license.html":{}}}],["feature",{"_index":2336,"title":{},"body":{"license.html":{}}}],["fee",{"_index":2199,"title":{},"body":{"license.html":{}}}],["fetch",{"_index":791,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["fetchonly",{"_index":1038,"title":{},"body":{"controllers/HomeController.html":{}}}],["fetchproperties",{"_index":1836,"title":{},"body":{"injectables/WikidataService.html":{}}}],["fetchproperties(params",{"_index":1847,"title":{},"body":{"injectables/WikidataService.html":{}}}],["field",{"_index":609,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["field(after",{"_index":980,"title":{},"body":{"classes/History.html":{}}}],["file",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"license.html":{}}}],["file:${imagetitle",{"_index":1932,"title":{},"body":{"injectables/WikidataService.html":{}}}],["filename",{"_index":1897,"title":{},"body":{"injectables/WikidataService.html":{}}}],["files",{"_index":2395,"title":{},"body":{"license.html":{}}}],["filterquery",{"_index":737,"title":{},"body":{"injectables/ClaimService.html":{}}}],["filters",{"_index":1101,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["filters/not",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["finalize",{"_index":504,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["finally",{"_index":2256,"title":{},"body":{"license.html":{}}}],["find",{"_index":570,"title":{},"body":{"injectables/ClaimReviewService.html":{},"license.html":{}}}],["findall",{"_index":1622,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findall(@req",{"_index":1643,"title":{},"body":{"controllers/UsersController.html":{}}}],["findall(req",{"_index":1626,"title":{},"body":{"controllers/UsersController.html":{}}}],["finish",{"_index":3070,"title":{},"body":{"miscellaneous/variables.html":{}}}],["finished",{"_index":3077,"title":{},"body":{"miscellaneous/variables.html":{}}}],["first",{"_index":610,"title":{},"body":{"classes/ClaimRevision.html":{},"injectables/UsersService.html":{},"license.html":{}}}],["firstpasswordchanged",{"_index":1610,"title":{},"body":{"classes/User.html":{},"interfaces/UserDocument.html":{}}}],["fitness",{"_index":2868,"title":{},"body":{"license.html":{}}}],["fixed",{"_index":2537,"title":{},"body":{"license.html":{}}}],["flow",{"_index":2405,"title":{},"body":{"license.html":{}}}],["follow",{"_index":2126,"title":{},"body":{"index.html":{},"license.html":{}}}],["following",{"_index":2781,"title":{},"body":{"license.html":{}}}],["forbid",{"_index":2472,"title":{},"body":{"license.html":{}}}],["forbidnonwhitelisted",{"_index":3003,"title":{},"body":{"miscellaneous/variables.html":{}}}],["force",{"_index":2429,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["forcepassword",{"_index":3041,"title":{},"body":{"miscellaneous/variables.html":{}}}],["foreignfield",{"_index":154,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"classes/Personality.html":{}}}],["fork",{"_index":2100,"title":{},"body":{"index.html":{}}}],["form",{"_index":2349,"title":{},"body":{"license.html":{}}}],["format",{"_index":1875,"title":{},"body":{"injectables/WikidataService.html":{},"license.html":{}}}],["formatstats",{"_index":1704,"title":{},"body":{"injectables/UtilService.html":{}}}],["formatstats(reviews",{"_index":1706,"title":{},"body":{"injectables/UtilService.html":{}}}],["formatversion",{"_index":1876,"title":{},"body":{"injectables/WikidataService.html":{}}}],["forms",{"_index":2528,"title":{},"body":{"license.html":{}}}],["found",{"_index":294,"title":{},"body":{"controllers/ClaimController.html":{},"classes/NotFoundFilter.html":{},"injectables/PersonalityService.html":{},"controllers/SourceController.html":{},"license.html":{}}}],["found.filter",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["found.filter.ts",{"_index":1100,"title":{},"body":{"classes/NotFoundFilter.html":{},"coverage.html":{}}}],["found.filter.ts:9",{"_index":1111,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["foundation",{"_index":2137,"title":{},"body":{"license.html":{}}}],["free",{"_index":2135,"title":{},"body":{"license.html":{}}}],["freedom",{"_index":2156,"title":{},"body":{"license.html":{}}}],["freedoms",{"_index":2202,"title":{},"body":{"license.html":{}}}],["front",{"_index":711,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["fs",{"_index":904,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["fs.readfilesync(path.resolve(__dirname",{"_index":909,"title":{},"body":{"injectables/EmailService.html":{}}}],["fulfilling",{"_index":2456,"title":{},"body":{"license.html":{}}}],["full",{"_index":2919,"title":{},"body":{"license.html":{}}}],["fully",{"_index":631,"title":{},"body":{"modules/ClaimRevisionModule.html":{}}}],["function",{"_index":568,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{},"coverage.html":{}}}],["functioning",{"_index":2623,"title":{},"body":{"license.html":{}}}],["functions",{"_index":2084,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["fundamentally",{"_index":2232,"title":{},"body":{"license.html":{}}}],["further",{"_index":2559,"title":{},"body":{"license.html":{}}}],["future",{"_index":1152,"title":{},"body":{"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"license.html":{}}}],["general",{"_index":2129,"title":{},"body":{"license.html":{}}}],["generally",{"_index":2392,"title":{},"body":{"license.html":{}}}],["generate",{"_index":2386,"title":{},"body":{"license.html":{}}}],["generatepassword",{"_index":3039,"title":{},"body":{"miscellaneous/variables.html":{}}}],["generatepassword(userdata.istestuser",{"_index":3073,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get(\"404",{"_index":1785,"title":{},"body":{"controllers/ViewController.html":{}}}],["get(\":id",{"_index":458,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["get(\"_next",{"_index":1783,"title":{},"body":{"controllers/ViewController.html":{}}}],["get(\"about",{"_index":1777,"title":{},"body":{"controllers/ViewController.html":{}}}],["get(\"api/claim",{"_index":277,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get(\"api/claim/:claimid/sentence/:sentencehash/reviews",{"_index":322,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get(\"api/claim/:id",{"_index":313,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get(\"api/personality",{"_index":1256,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get(\"api/personality/:id",{"_index":1268,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get(\"api/personality/:id/reviews",{"_index":1281,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get(\"api/source/:targetid",{"_index":1549,"title":{},"body":{"controllers/SourceController.html":{}}}],["get(\"api/user/validate",{"_index":1642,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(\"code",{"_index":1781,"title":{},"body":{"controllers/ViewController.html":{}}}],["get(\"health",{"_index":1428,"title":{},"body":{"controllers/RootController.html":{}}}],["get(\"home",{"_index":1032,"title":{},"body":{"controllers/HomeController.html":{},"controllers/StatsController.html":{}}}],["get(\"login",{"_index":1668,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(\"personality",{"_index":1288,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get(\"personality/:personalityslug/claim/:claimslug",{"_index":373,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get(\"personality/:personalityslug/claim/:claimslug/sentence/:sentencehash",{"_index":350,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get(\"personality/:personalityslug/claim/:claimslug/sources",{"_index":381,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get(\"personality/:slug",{"_index":1286,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get(\"personality/:slug/claim/create",{"_index":370,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get(\"personality/search",{"_index":1283,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get(\"privacy",{"_index":1779,"title":{},"body":{"controllers/ViewController.html":{}}}],["get(\"profile",{"_index":1669,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(\"robots.txt",{"_index":1419,"title":{},"body":{"controllers/RootController.html":{}}}],["get(\"sitemap.xml",{"_index":1462,"title":{},"body":{"controllers/SitemapController.html":{}}}],["get(\"submit",{"_index":1468,"title":{},"body":{"controllers/SitemapController.html":{}}}],["get('404",{"_index":1756,"title":{},"body":{"controllers/ViewController.html":{}}}],["get(':id",{"_index":450,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["get('_next",{"_index":1748,"title":{},"body":{"controllers/ViewController.html":{}}}],["get('about",{"_index":1766,"title":{},"body":{"controllers/ViewController.html":{}}}],["get('api/claim",{"_index":215,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get('api/claim/:claimid/sentence/:sentencehash/reviews",{"_index":210,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get('api/claim/:id",{"_index":203,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get('api/personality",{"_index":1238,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get('api/personality/:id",{"_index":1232,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get('api/personality/:id/reviews",{"_index":1235,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get('api/source/:targetid",{"_index":1545,"title":{},"body":{"controllers/SourceController.html":{}}}],["get('code",{"_index":1751,"title":{},"body":{"controllers/ViewController.html":{}}}],["get('health",{"_index":1412,"title":{},"body":{"controllers/RootController.html":{}}}],["get('home",{"_index":1028,"title":{},"body":{"controllers/HomeController.html":{},"controllers/StatsController.html":{}}}],["get('login",{"_index":1632,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('personality",{"_index":1244,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get('personality/:personalityslug/claim/:claimslug",{"_index":218,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get('personality/:personalityslug/claim/:claimslug/sentence/:sentencehash",{"_index":206,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get('personality/:personalityslug/claim/:claimslug/sources",{"_index":221,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get('personality/:slug",{"_index":1247,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get('personality/:slug/claim/create",{"_index":193,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get('privacy",{"_index":1770,"title":{},"body":{"controllers/ViewController.html":{}}}],["get('robots.txt",{"_index":1416,"title":{},"body":{"controllers/RootController.html":{}}}],["get('sitemap.xml')@header('content",{"_index":1451,"title":{},"body":{"controllers/SitemapController.html":{}}}],["get(@param",{"_index":459,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["get(@param(\"id",{"_index":1269,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get(`https://www.wikidata.org/w/api.php",{"_index":1923,"title":{},"body":{"injectables/WikidataService.html":{}}}],["get(params",{"_index":449,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["get(personalityid",{"_index":1231,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get,head,put,patch,post,delete",{"_index":2984,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getbyid",{"_index":171,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/UsersService.html":{}}}],["getbyid(@param(\"id",{"_index":314,"title":{},"body":{"controllers/ClaimController.html":{}}}],["getbyid(claimid",{"_index":202,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{}}}],["getbyid(claimreviewid",{"_index":520,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getbyid(personalityid",{"_index":1271,"title":{},"body":{"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["getbyid(userid",{"_index":1687,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbypersonalityidandclaimslug",{"_index":684,"title":{},"body":{"injectables/ClaimService.html":{}}}],["getbypersonalityidandclaimslug(personalityid",{"_index":715,"title":{},"body":{"injectables/ClaimService.html":{}}}],["getbyslug",{"_index":1303,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["getbyslug(personalityslug",{"_index":1318,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["getbytargetid",{"_index":1566,"title":{},"body":{"injectables/SourceService.html":{}}}],["getbytargetid(targetid",{"_index":1553,"title":{},"body":{"controllers/SourceController.html":{},"injectables/SourceService.html":{}}}],["getclaimreviewpage",{"_index":172,"title":{},"body":{"controllers/ClaimController.html":{}}}],["getclaimreviewpage(@req",{"_index":351,"title":{},"body":{"controllers/ClaimController.html":{}}}],["getclaimreviewpage(req",{"_index":205,"title":{},"body":{"controllers/ClaimController.html":{}}}],["getclaimsbyhashdto",{"_index":209,"title":{"classes/GetClaimsByHashDTO.html":{}},"body":{"controllers/ClaimController.html":{},"classes/GetClaimsByHashDTO.html":{},"coverage.html":{}}}],["getclaimsdto",{"_index":214,"title":{"classes/GetClaimsDTO.html":{}},"body":{"controllers/ClaimController.html":{},"classes/GetClaimsDTO.html":{},"coverage.html":{}}}],["getcommonsthumburl",{"_index":1837,"title":{},"body":{"injectables/WikidataService.html":{}}}],["getcommonsthumburl(imagetitle",{"_index":1849,"title":{},"body":{"injectables/WikidataService.html":{}}}],["getemailbody",{"_index":885,"title":{},"body":{"injectables/EmailService.html":{}}}],["getemailbody(options",{"_index":890,"title":{},"body":{"injectables/EmailService.html":{}}}],["gethistoryparams",{"_index":996,"title":{},"body":{"injectables/HistoryService.html":{}}}],["gethistoryparams(dataid",{"_index":1002,"title":{},"body":{"injectables/HistoryService.html":{}}}],["gethomestats",{"_index":1584,"title":{},"body":{"controllers/StatsController.html":{},"injectables/StatsService.html":{}}}],["getlanguagemiddleware",{"_index":1971,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getlanguagemiddleware(req",{"_index":2086,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getnextserver",{"_index":364,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{}}}],["getpersonalities",{"_index":958,"title":{"classes/GetPersonalities.html":{}},"body":{"classes/GetPersonalities.html":{},"controllers/PersonalityController.html":{},"coverage.html":{}}}],["getreviewsbyclaimid",{"_index":484,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getreviewsbyclaimid(claimid",{"_index":522,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getreviewsbysentencehash",{"_index":485,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getreviewsbysentencehash(sentencehash",{"_index":527,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getreviewstats",{"_index":1221,"title":{},"body":{"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["getreviewstats(@param(\"id",{"_index":1282,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["getreviewstats(id",{"_index":1320,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["getreviewstats(personalityid",{"_index":1234,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["getreviewstatsbyclaimid",{"_index":486,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getreviewstatsbyclaimid(claimid",{"_index":529,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getreviewstatsbysentencehash",{"_index":487,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getreviewstatsbysentencehash(sentencehash",{"_index":531,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getrevision",{"_index":635,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["getrevision(claimid",{"_index":644,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["getsentencereviewsbyhash",{"_index":173,"title":{},"body":{"controllers/ClaimController.html":{}}}],["getsentencereviewsbyhash(@param",{"_index":323,"title":{},"body":{"controllers/ClaimController.html":{}}}],["getsentencereviewsbyhash(params",{"_index":208,"title":{},"body":{"controllers/ClaimController.html":{}}}],["getsitelinkname",{"_index":1838,"title":{},"body":{"injectables/WikidataService.html":{}}}],["getsitelinkname(language",{"_index":1852,"title":{},"body":{"injectables/WikidataService.html":{}}}],["getsitemap",{"_index":1448,"title":{},"body":{"controllers/SitemapController.html":{},"injectables/SitemapService.html":{}}}],["getsitemap(@res",{"_index":1464,"title":{},"body":{"controllers/SitemapController.html":{}}}],["getsitemap(hostname",{"_index":1480,"title":{},"body":{"injectables/SitemapService.html":{}}}],["getsitemap(res",{"_index":1450,"title":{},"body":{"controllers/SitemapController.html":{}}}],["getsources",{"_index":1544,"title":{},"body":{"controllers/SourceController.html":{}}}],["getsourcesclaim",{"_index":1542,"title":{},"body":{"controllers/SourceController.html":{}}}],["getsourcesclaim(@param",{"_index":1550,"title":{},"body":{"controllers/SourceController.html":{}}}],["getsourcesclaim(params",{"_index":1543,"title":{},"body":{"controllers/SourceController.html":{}}}],["getting",{"_index":2088,"title":{"index.html":{},"license.html":{}},"body":{}}],["getuserreviewbysentencehash",{"_index":488,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getuserreviewbysentencehash(sentencehash",{"_index":533,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["give",{"_index":2494,"title":{},"body":{"license.html":{}}}],["given",{"_index":2422,"title":{},"body":{"license.html":{}}}],["gives",{"_index":2510,"title":{},"body":{"license.html":{}}}],["giving",{"_index":2211,"title":{},"body":{"license.html":{}}}],["gnu",{"_index":2128,"title":{},"body":{"license.html":{}}}],["google",{"_index":2057,"title":{},"body":{"dependencies.html":{}}}],["governed",{"_index":2654,"title":{},"body":{"license.html":{}}}],["gpl",{"_index":2206,"title":{},"body":{"license.html":{}}}],["grant",{"_index":2676,"title":{},"body":{"license.html":{}}}],["granted",{"_index":2412,"title":{},"body":{"license.html":{}}}],["grants",{"_index":2732,"title":{},"body":{"license.html":{}}}],["graph",{"_index":2954,"title":{},"body":{"modules.html":{}}}],["gratis",{"_index":2198,"title":{},"body":{"license.html":{}}}],["greatest",{"_index":2909,"title":{},"body":{"license.html":{}}}],["group",{"_index":542,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["guarantee",{"_index":2159,"title":{},"body":{"license.html":{}}}],["guard",{"_index":1430,"title":{"guards/SessionGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":1431,"title":{},"body":{"guards/SessionGuard.html":{}}}],["gui",{"_index":2936,"title":{},"body":{"license.html":{}}}],["handlebars",{"_index":902,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["handlebars.compile(html",{"_index":914,"title":{},"body":{"injectables/EmailService.html":{}}}],["handler",{"_index":1743,"title":{},"body":{"controllers/ViewController.html":{}}}],["handler(req",{"_index":1753,"title":{},"body":{"controllers/ViewController.html":{}}}],["hash",{"_index":333,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{},"injectables/ParserService.html":{}}}],["hash.dto",{"_index":256,"title":{},"body":{"controllers/ClaimController.html":{}}}],["hash.dto.ts",{"_index":937,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{},"coverage.html":{}}}],["hash.dto.ts:11",{"_index":945,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{}}}],["hash.dto.ts:14",{"_index":941,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{}}}],["hash.dto.ts:18",{"_index":940,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{}}}],["hash.dto.ts:22",{"_index":947,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{}}}],["hash.dto.ts:7",{"_index":943,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{}}}],["hasn't",{"_index":730,"title":{},"body":{"injectables/ClaimService.html":{}}}],["having",{"_index":2431,"title":{},"body":{"license.html":{}}}],["header",{"_index":1458,"title":{},"body":{"controllers/SitemapController.html":{}}}],["header(\"content",{"_index":1463,"title":{},"body":{"controllers/SitemapController.html":{}}}],["health",{"_index":1410,"title":{},"body":{"controllers/RootController.html":{}}}],["here",{"_index":1762,"title":{},"body":{"controllers/ViewController.html":{}}}],["hereafter",{"_index":2773,"title":{},"body":{"license.html":{}}}],["history",{"_index":701,"title":{"classes/History.html":{}},"body":{"injectables/ClaimService.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{},"coverage.html":{}}}],["history.service",{"_index":991,"title":{},"body":{"modules/HistoryModule.html":{}}}],["history/history.module",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/PersonalityModule.html":{}}}],["history/history.service",{"_index":738,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["history/schema/history.schema",{"_index":740,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["history_model",{"_index":993,"title":{},"body":{"modules/HistoryModule.html":{},"miscellaneous/variables.html":{}}}],["historydocument",{"_index":979,"title":{},"body":{"classes/History.html":{},"injectables/HistoryService.html":{},"miscellaneous/typealiases.html":{}}}],["historymodel",{"_index":992,"title":{},"body":{"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["historymodule",{"_index":66,"title":{"modules/HistoryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/HistoryModule.html":{},"modules/PersonalityModule.html":{},"modules.html":{},"overview.html":{}}}],["historyschema",{"_index":984,"title":{},"body":{"classes/History.html":{},"modules/HistoryModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["historyservice",{"_index":688,"title":{"injectables/HistoryService.html":{}},"body":{"injectables/ClaimService.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{},"coverage.html":{},"overview.html":{}}}],["historytype",{"_index":739,"title":{},"body":{"injectables/ClaimService.html":{},"classes/History.html":{},"injectables/PersonalityService.html":{},"miscellaneous/enumerations.html":{}}}],["historytype.create",{"_index":773,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["historytype.delete",{"_index":787,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["historytype.update",{"_index":783,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["holder",{"_index":2706,"title":{},"body":{"license.html":{}}}],["holders",{"_index":2659,"title":{},"body":{"license.html":{}}}],["home",{"_index":1040,"title":{},"body":{"controllers/HomeController.html":{},"injectables/SitemapService.html":{}}}],["home.controller",{"_index":1044,"title":{},"body":{"modules/HomeModule.html":{}}}],["home/home.module",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["homecontroller",{"_index":1024,"title":{"controllers/HomeController.html":{}},"body":{"controllers/HomeController.html":{},"modules/HomeModule.html":{},"coverage.html":{}}}],["homemodule",{"_index":48,"title":{"modules/HomeModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HomeModule.html":{},"modules.html":{},"overview.html":{}}}],["hope",{"_index":2921,"title":{},"body":{"license.html":{}}}],["host",{"_index":919,"title":{},"body":{"injectables/EmailService.html":{},"classes/NotFoundFilter.html":{},"controllers/RootController.html":{}}}],["host.switchtohttp",{"_index":1114,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["hostname",{"_index":1482,"title":{},"body":{"injectables/SitemapService.html":{}}}],["hosts",{"_index":2568,"title":{},"body":{"license.html":{}}}],["host}/sitemap.xml",{"_index":1427,"title":{},"body":{"controllers/RootController.html":{}}}],["household",{"_index":2592,"title":{},"body":{"license.html":{}}}],["html",{"_index":908,"title":{},"body":{"injectables/EmailService.html":{},"dependencies.html":{}}}],["http://localhost:3000",{"_index":2117,"title":{},"body":{"index.html":{}}}],["httpcontext",{"_index":1439,"title":{},"body":{"guards/SessionGuard.html":{}}}],["httpcontext.getrequest",{"_index":1441,"title":{},"body":{"guards/SessionGuard.html":{}}}],["httpcontext.getresponse",{"_index":1442,"title":{},"body":{"guards/SessionGuard.html":{}}}],["httpmodule",{"_index":394,"title":{},"body":{"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{}}}],["https://${wikilang.replace",{"_index":1909,"title":{},"body":{"injectables/WikidataService.html":{}}}],["https://commons.wikimedia.org/w/api.php",{"_index":1930,"title":{},"body":{"injectables/WikidataService.html":{}}}],["https://fsf.org",{"_index":2139,"title":{},"body":{"license.html":{}}}],["https://github.com//aletheia",{"_index":2104,"title":{},"body":{"index.html":{}}}],["https://google.com/ping?sitemap=${hostname}/sitemap.xml",{"_index":1517,"title":{},"body":{"injectables/SitemapService.html":{}}}],["https://medium.com/javascript",{"_index":1713,"title":{},"body":{"injectables/UtilService.html":{}}}],["https://mongoosejs.com/docs/populate.html#dynamic",{"_index":1530,"title":{},"body":{"classes/Source.html":{}}}],["https://stackoverflow.com/questions/47669178/mongoose",{"_index":563,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["https://www.gnu.org/licenses",{"_index":2942,"title":{},"body":{"license.html":{}}}],["https://www.gnu.org/licenses/why",{"_index":2952,"title":{},"body":{"license.html":{}}}],["https://www.google.com/recaptcha/api",{"_index":264,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["httpservice",{"_index":240,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["hypothetical",{"_index":2934,"title":{},"body":{"license.html":{}}}],["i18n",{"_index":1764,"title":{},"body":{"controllers/ViewController.html":{}}}],["i18next",{"_index":2037,"title":{},"body":{"dependencies.html":{}}}],["icons",{"_index":2065,"title":{},"body":{"dependencies.html":{}}}],["id",{"_index":526,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["identifiable",{"_index":2800,"title":{},"body":{"license.html":{}}}],["identifier",{"_index":1942,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":1873,"title":{},"body":{"injectables/WikidataService.html":{}}}],["if(newpersonalitybody.name",{"_index":1385,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["ignore",{"_index":274,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/HomeController.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/ViewController.html":{}}}],["iiprop",{"_index":1934,"title":{},"body":{"injectables/WikidataService.html":{}}}],["iiurlwidth",{"_index":1935,"title":{},"body":{"injectables/WikidataService.html":{}}}],["image",{"_index":860,"title":{},"body":{"classes/CreatePersonality.html":{},"injectables/WikidataService.html":{}}}],["imageinfo",{"_index":1933,"title":{},"body":{"injectables/WikidataService.html":{}}}],["imagetitle",{"_index":1851,"title":{},"body":{"injectables/WikidataService.html":{}}}],["implement",{"_index":2374,"title":{},"body":{"license.html":{}}}],["implementation",{"_index":2375,"title":{},"body":{"license.html":{}}}],["implements",{"_index":1071,"title":{},"body":{"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"guards/SessionGuard.html":{},"injectables/ViewService.html":{}}}],["implied",{"_index":2827,"title":{},"body":{"license.html":{}}}],["import",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"dependencies.html":{},"license.html":{}}}],["importing",{"_index":2766,"title":{},"body":{"license.html":{}}}],["imports",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/HomeModule.html":{},"modules/PersonalityModule.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{}}}],["impose",{"_index":2686,"title":{},"body":{"license.html":{}}}],["imposed",{"_index":2829,"title":{},"body":{"license.html":{}}}],["improve",{"_index":1501,"title":{},"body":{"injectables/SitemapService.html":{}}}],["inability",{"_index":2884,"title":{},"body":{"license.html":{}}}],["inaccurate",{"_index":2887,"title":{},"body":{"license.html":{}}}],["inc",{"_index":2138,"title":{},"body":{"license.html":{}}}],["incidental",{"_index":2881,"title":{},"body":{"license.html":{}}}],["include",{"_index":2364,"title":{},"body":{"license.html":{}}}],["included",{"_index":2366,"title":{},"body":{"license.html":{}}}],["includes",{"_index":2314,"title":{},"body":{"license.html":{}}}],["including",{"_index":2387,"title":{},"body":{"license.html":{}}}],["inclusion",{"_index":2527,"title":{},"body":{"license.html":{}}}],["incompatible",{"_index":2233,"title":{},"body":{"license.html":{}}}],["incorporating",{"_index":2943,"title":{},"body":{"license.html":{}}}],["incorporation",{"_index":2595,"title":{},"body":{"license.html":{}}}],["increment",{"_index":607,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["inc|ltd|jr|sr|co",{"_index":1162,"title":{},"body":{"injectables/ParserService.html":{}}}],["indemnification",{"_index":2682,"title":{},"body":{"license.html":{}}}],["independent",{"_index":2516,"title":{},"body":{"license.html":{}}}],["index",{"_index":114,"title":{"index.html":{}},"body":{"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexof(v",{"_index":430,"title":{},"body":{"classes/ClaimReview.html":{}}}],["indicate",{"_index":2736,"title":{},"body":{"license.html":{}}}],["indicating",{"_index":2697,"title":{},"body":{"license.html":{}}}],["individual",{"_index":2525,"title":{},"body":{"license.html":{}}}],["individuals",{"_index":2242,"title":{},"body":{"license.html":{}}}],["industrial",{"_index":2610,"title":{},"body":{"license.html":{}}}],["info",{"_index":3,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["inform",{"_index":2577,"title":{},"body":{"license.html":{}}}],["information",{"_index":2616,"title":{},"body":{"license.html":{}}}],["infringe",{"_index":2734,"title":{},"body":{"license.html":{}}}],["infringed",{"_index":2763,"title":{},"body":{"license.html":{}}}],["infringement",{"_index":2307,"title":{},"body":{"license.html":{}}}],["init",{"_index":497,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["initapp",{"_index":1966,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["initiate",{"_index":2757,"title":{},"body":{"license.html":{}}}],["inject",{"_index":735,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["inject(request",{"_index":743,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["injectable",{"_index":476,"title":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"injectables/HistoryService.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/SourceService.html":{},"injectables/StatsService.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{}},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"injectables/HistoryService.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/SourceService.html":{},"injectables/StatsService.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{},"coverage.html":{}}}],["injectables",{"_index":477,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"injectables/HistoryService.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/SourceService.html":{},"injectables/StatsService.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{},"overview.html":{}}}],["injectmodel",{"_index":538,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"injectables/PersonalityService.html":{},"injectables/SourceService.html":{},"injectables/UsersService.html":{},"injectables/WikidataService.html":{}}}],["injectmodel('history_model",{"_index":1018,"title":{},"body":{"injectables/HistoryService.html":{}}}],["injectmodel(claim.name",{"_index":744,"title":{},"body":{"injectables/ClaimService.html":{}}}],["injectmodel(claimreview.name",{"_index":540,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["injectmodel(claimrevision.name",{"_index":653,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["injectmodel(personality.name",{"_index":1334,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["injectmodel(source.name",{"_index":1572,"title":{},"body":{"injectables/SourceService.html":{}}}],["injectmodel(user.name",{"_index":1057,"title":{},"body":{"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["injectmodel(wikidatacache.name",{"_index":1860,"title":{},"body":{"injectables/WikidataService.html":{}}}],["inside",{"_index":2229,"title":{},"body":{"license.html":{}}}],["instalação",{"_index":2099,"title":{},"body":{"index.html":{}}}],["install",{"_index":2112,"title":{},"body":{"index.html":{},"license.html":{}}}],["installation",{"_index":2615,"title":{},"body":{"license.html":{}}}],["installed",{"_index":2635,"title":{},"body":{"license.html":{}}}],["instead",{"_index":2949,"title":{},"body":{"license.html":{}}}],["intact",{"_index":2487,"title":{},"body":{"license.html":{}}}],["intended",{"_index":2158,"title":{},"body":{"license.html":{}}}],["intention",{"_index":2476,"title":{},"body":{"license.html":{}}}],["interaction",{"_index":2324,"title":{},"body":{"license.html":{}}}],["interactive",{"_index":2328,"title":{},"body":{"license.html":{}}}],["interchange",{"_index":2540,"title":{},"body":{"license.html":{}}}],["interest",{"_index":2751,"title":{},"body":{"license.html":{}}}],["interface",{"_index":71,"title":{"interfaces/UserDocument.html":{}},"body":{"modules/AppModule.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"coverage.html":{},"license.html":{},"overview.html":{}}}],["interfaces",{"_index":1617,"title":{},"body":{"interfaces/UserDocument.html":{},"license.html":{}}}],["interfered",{"_index":2625,"title":{},"body":{"license.html":{}}}],["interpretation",{"_index":2895,"title":{},"body":{"license.html":{}}}],["interpreter",{"_index":2384,"title":{},"body":{"license.html":{}}}],["intimate",{"_index":2403,"title":{},"body":{"license.html":{}}}],["invalidate",{"_index":2511,"title":{},"body":{"license.html":{}}}],["irrevocable",{"_index":2414,"title":{},"body":{"license.html":{}}}],["isallowedprop",{"_index":861,"title":{},"body":{"classes/CreatePersonality.html":{},"injectables/WikidataService.html":{}}}],["isalpha",{"_index":836,"title":{},"body":{"classes/CreateClaimDTO.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{}}}],["isalphanumeric",{"_index":847,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["isarray",{"_index":837,"title":{},"body":{"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/GetClaimsByHashDTO.html":{}}}],["isarray()@arraynotempty",{"_index":830,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["isboolean",{"_index":873,"title":{},"body":{"classes/CreatePersonality.html":{},"classes/GetPersonalities.html":{}}}],["isboolean()@isoptional",{"_index":867,"title":{},"body":{"classes/CreatePersonality.html":{},"classes/GetPersonalities.html":{}}}],["isdatestring",{"_index":838,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["isdeleted",{"_index":712,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["isenum",{"_index":855,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["isenum(classificationenum",{"_index":856,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["isint",{"_index":948,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{}}}],["isnotempty",{"_index":839,"title":{},"body":{"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{}}}],["isnotempty()@isarray",{"_index":853,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["isnotempty()@isstring",{"_index":824,"title":{},"body":{"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{}}}],["isnotempty()@isstring()@isalpha",{"_index":833,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["isnotempty()@isstring()@isdatestring",{"_index":826,"title":{},"body":{"classes/CreateClaimDTO.html":{}}}],["isnotempty()@isstring()@isenum(classificationenum",{"_index":845,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["isnotempty()@isstring()@minlength(3",{"_index":869,"title":{},"body":{"classes/CreatePersonality.html":{}}}],["isnumber",{"_index":949,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{}}}],["isnumber()@isint()@min(0",{"_index":942,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{}}}],["isnumber()@min(0",{"_index":944,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{}}}],["isoftdeletedmodel",{"_index":741,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["isoptional",{"_index":874,"title":{},"body":{"classes/CreatePersonality.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetPersonalities.html":{}}}],["isoptional()@isarray",{"_index":946,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{}}}],["isstring",{"_index":840,"title":{},"body":{"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{}}}],["isstring()@isalpha",{"_index":939,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{}}}],["isstring()@isalphanumeric",{"_index":843,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["isstring()@isoptional",{"_index":865,"title":{},"body":{"classes/CreatePersonality.html":{},"classes/GetPersonalities.html":{}}}],["istestuser",{"_index":3040,"title":{},"body":{"miscellaneous/variables.html":{}}}],["it's",{"_index":982,"title":{},"body":{"classes/History.html":{}}}],["item",{"_index":1736,"title":{},"body":{"injectables/UtilService.html":{},"injectables/WikidataService.html":{},"license.html":{}}}],["item[property",{"_index":1733,"title":{},"body":{"injectables/UtilService.html":{}}}],["iterate",{"_index":755,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{}}}],["itself",{"_index":2640,"title":{},"body":{"license.html":{}}}],["js",{"_index":577,"title":{},"body":{"injectables/ClaimReviewService.html":{},"dependencies.html":{}}}],["json",{"_index":1106,"title":{},"body":{"classes/NotFoundFilter.html":{},"injectables/WikidataService.html":{}}}],["june",{"_index":2131,"title":{},"body":{"license.html":{}}}],["keep",{"_index":2486,"title":{},"body":{"license.html":{}}}],["keeping",{"_index":729,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["kernel",{"_index":2377,"title":{},"body":{"license.html":{}}}],["key",{"_index":2648,"title":{},"body":{"license.html":{}}}],["keys",{"_index":2619,"title":{},"body":{"license.html":{}}}],["kind",{"_index":2320,"title":{},"body":{"license.html":{}}}],["kinds",{"_index":2149,"title":{},"body":{"license.html":{}}}],["know",{"_index":2180,"title":{},"body":{"license.html":{}}}],["knowingly",{"_index":2788,"title":{},"body":{"license.html":{}}}],["knowledge",{"_index":2797,"title":{},"body":{"license.html":{}}}],["label",{"_index":1883,"title":{},"body":{"injectables/WikidataService.html":{}}}],["labels",{"_index":1886,"title":{},"body":{"injectables/WikidataService.html":{}}}],["landing",{"_index":1776,"title":{},"body":{"controllers/ViewController.html":{}}}],["lang",{"_index":505,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["language",{"_index":938,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"dependencies.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["languagefallback",{"_index":1915,"title":{},"body":{"injectables/WikidataService.html":{}}}],["languagevariantmap",{"_index":1858,"title":{},"body":{"injectables/WikidataService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["languagevariantmap[language",{"_index":1912,"title":{},"body":{"injectables/WikidataService.html":{}}}],["language}wiki",{"_index":1913,"title":{},"body":{"injectables/WikidataService.html":{}}}],["larger",{"_index":2520,"title":{},"body":{"license.html":{}}}],["later",{"_index":2855,"title":{},"body":{"license.html":{}}}],["latest",{"_index":1012,"title":{},"body":{"injectables/HistoryService.html":{}}}],["latestchange",{"_index":1003,"title":{},"body":{"injectables/HistoryService.html":{}}}],["latestrevision",{"_index":116,"title":{},"body":{"classes/Claim.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["law",{"_index":2309,"title":{},"body":{"license.html":{}}}],["laws",{"_index":2279,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":2761,"title":{},"body":{"license.html":{}}}],["lean",{"_index":748,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["legal",{"_index":2212,"title":{},"body":{"license.html":{}}}],["less",{"_index":2044,"title":{},"body":{"dependencies.html":{}}}],["lesser",{"_index":2948,"title":{},"body":{"license.html":{}}}],["let's",{"_index":604,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["lgpl.html",{"_index":2953,"title":{},"body":{"license.html":{}}}],["liability",{"_index":2662,"title":{},"body":{"license.html":{}}}],["liable",{"_index":2306,"title":{},"body":{"license.html":{}}}],["libraries",{"_index":2362,"title":{},"body":{"license.html":{}}}],["library",{"_index":2586,"title":{},"body":{"license.html":{}}}],["license",{"_index":2127,"title":{"license.html":{}},"body":{"license.html":{}}}],["licensed",{"_index":2283,"title":{},"body":{"license.html":{}}}],["licensee",{"_index":2286,"title":{},"body":{"license.html":{}}}],["licensees",{"_index":2288,"title":{},"body":{"license.html":{}}}],["licenses",{"_index":2151,"title":{},"body":{"license.html":{}}}],["licensing",{"_index":2738,"title":{},"body":{"license.html":{}}}],["licensors",{"_index":2674,"title":{},"body":{"license.html":{}}}],["likewise",{"_index":2730,"title":{},"body":{"license.html":{}}}],["limit",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"license.html":{}}}],["limit(pagesize",{"_index":557,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SourceService.html":{}}}],["limitation",{"_index":2877,"title":{},"body":{"license.html":{}}}],["limited",{"_index":2866,"title":{},"body":{"license.html":{}}}],["limiting",{"_index":2661,"title":{},"body":{"license.html":{}}}],["line",{"_index":750,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"license.html":{}}}],["link",{"_index":676,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/Source.html":{},"dependencies.html":{},"license.html":{}}}],["linked",{"_index":2399,"title":{},"body":{"license.html":{}}}],["linking",{"_index":2946,"title":{},"body":{"license.html":{}}}],["list",{"_index":1290,"title":{},"body":{"controllers/PersonalityController.html":{},"license.html":{}}}],["listall",{"_index":174,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["listall(@query",{"_index":278,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{}}}],["listall(getclaimsdto",{"_index":213,"title":{},"body":{"controllers/ClaimController.html":{}}}],["listall(getpersonalities",{"_index":1237,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["listall(page",{"_index":718,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["listening",{"_index":3022,"title":{},"body":{"miscellaneous/variables.html":{}}}],["literal",{"_index":647,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{}}}],["litigation",{"_index":2758,"title":{},"body":{"license.html":{}}}],["load",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"injectables/ViewService.html":{}}}],["loaded",{"_index":3031,"title":{},"body":{"miscellaneous/variables.html":{}}}],["loading",{"_index":3030,"title":{},"body":{"miscellaneous/variables.html":{}}}],["local",{"_index":1063,"title":{},"body":{"injectables/LocalStrategy.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["local.serializer",{"_index":108,"title":{},"body":{"modules/AuthModule.html":{}}}],["local.strategy",{"_index":107,"title":{},"body":{"modules/AuthModule.html":{}}}],["localauthguard",{"_index":1045,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"injectables/LocalAuthGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["localfield",{"_index":152,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"classes/Personality.html":{}}}],["localhost",{"_index":3026,"title":{},"body":{"miscellaneous/variables.html":{}}}],["locally:git",{"_index":2103,"title":{},"body":{"index.html":{}}}],["localserializer",{"_index":99,"title":{"injectables/LocalSerializer.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalSerializer.html":{},"coverage.html":{},"overview.html":{}}}],["localstrategy",{"_index":100,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["log",{"_index":1074,"title":{},"body":{"classes/Logger.html":{}}}],["log(message",{"_index":1086,"title":{},"body":{"classes/Logger.html":{}}}],["logger",{"_index":228,"title":{"classes/Logger.html":{}},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"injectables/HistoryService.html":{},"classes/Logger.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ViewService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger(\"claimcontroller",{"_index":261,"title":{},"body":{"controllers/ClaimController.html":{}}}],["logger(\"claimreviewservice",{"_index":536,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["logger(\"claimservice",{"_index":646,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{}}}],["logger(\"emailservice",{"_index":899,"title":{},"body":{"injectables/EmailService.html":{}}}],["logger(\"historyservice",{"_index":1016,"title":{},"body":{"injectables/HistoryService.html":{}}}],["logger(\"personalitycontroller",{"_index":1255,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["logger(\"personalityservice",{"_index":1330,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["logger(\"sitemapservice",{"_index":1485,"title":{},"body":{"injectables/SitemapService.html":{}}}],["logger(\"sourcecontroller",{"_index":1548,"title":{},"body":{"controllers/SourceController.html":{}}}],["logger(\"usercontroller",{"_index":1641,"title":{},"body":{"controllers/UsersController.html":{}}}],["logger(\"userservice",{"_index":1691,"title":{},"body":{"injectables/UsersService.html":{}}}],["logger(\"viewservice",{"_index":1799,"title":{},"body":{"injectables/ViewService.html":{}}}],["logger(options.logger",{"_index":2995,"title":{},"body":{"miscellaneous/variables.html":{}}}],["loggerservice",{"_index":1072,"title":{},"body":{"classes/Logger.html":{}}}],["logic",{"_index":630,"title":{},"body":{"modules/ClaimRevisionModule.html":{}}}],["login",{"_index":1497,"title":{},"body":{"injectables/SitemapService.html":{},"controllers/UsersController.html":{}}}],["login(@req",{"_index":1646,"title":{},"body":{"controllers/UsersController.html":{}}}],["login(req",{"_index":1629,"title":{},"body":{"controllers/UsersController.html":{}}}],["long",{"_index":2427,"title":{},"body":{"license.html":{}}}],["lookup",{"_index":566,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["loop",{"_index":1499,"title":{},"body":{"injectables/SitemapService.html":{},"miscellaneous/variables.html":{}}}],["loss",{"_index":2885,"title":{},"body":{"license.html":{}}}],["losses",{"_index":2888,"title":{},"body":{"license.html":{}}}],["lower",{"_index":661,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{}}}],["machine",{"_index":2530,"title":{},"body":{"license.html":{}}}],["made",{"_index":1009,"title":{},"body":{"injectables/HistoryService.html":{},"license.html":{}}}],["mail",{"_index":932,"title":{},"body":{"injectables/EmailService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["maintain",{"_index":2564,"title":{},"body":{"license.html":{}}}],["major",{"_index":2369,"title":{},"body":{"license.html":{}}}],["make",{"_index":2162,"title":{},"body":{"license.html":{}}}],["makes",{"_index":2447,"title":{},"body":{"license.html":{}}}],["making",{"_index":2294,"title":{},"body":{"license.html":{}}}],["manner",{"_index":2774,"title":{},"body":{"license.html":{}}}],["manufacturer",{"_index":2231,"title":{},"body":{"license.html":{}}}],["map",{"_index":1730,"title":{},"body":{"injectables/UtilService.html":{}}}],["march",{"_index":2824,"title":{},"body":{"license.html":{}}}],["markdown",{"_index":2059,"title":{},"body":{"dependencies.html":{}}}],["marked",{"_index":2223,"title":{},"body":{"license.html":{}}}],["marks",{"_index":2680,"title":{},"body":{"license.html":{}}}],["masks",{"_index":2281,"title":{},"body":{"license.html":{}}}],["match",{"_index":508,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"controllers/UsersController.html":{}}}],["matches",{"_index":793,"title":{},"body":{"injectables/ClaimService.html":{}}}],["matching",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":2435,"title":{},"body":{"license.html":{}}}],["materially",{"_index":2641,"title":{},"body":{"license.html":{}}}],["math.ceil",{"_index":1407,"title":{},"body":{"injectables/PersonalityService.html":{},"controllers/SourceController.html":{}}}],["math.ceil(totalclaims",{"_index":292,"title":{},"body":{"controllers/ClaimController.html":{}}}],["math.ceil(totalreviews",{"_index":330,"title":{},"body":{"controllers/ClaimController.html":{}}}],["matters",{"_index":801,"title":{},"body":{"injectables/ClaimService.html":{}}}],["md5",{"_index":1145,"title":{},"body":{"injectables/ParserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["meaning",{"_index":2690,"title":{},"body":{"license.html":{}}}],["means",{"_index":2278,"title":{},"body":{"license.html":{}}}],["measure",{"_index":2455,"title":{},"body":{"license.html":{}}}],["measures",{"_index":2469,"title":{},"body":{"license.html":{}}}],["medium",{"_index":2482,"title":{},"body":{"license.html":{}}}],["meet",{"_index":2498,"title":{},"body":{"license.html":{}}}],["meets",{"_index":2346,"title":{},"body":{"license.html":{}}}],["menu",{"_index":2344,"title":{},"body":{"license.html":{}}}],["merchantability",{"_index":2867,"title":{},"body":{"license.html":{}}}],["mere",{"_index":2323,"title":{},"body":{"license.html":{}}}],["merge",{"_index":501,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/UtilService.html":{}}}],["mergeobjectsinunique",{"_index":1705,"title":{},"body":{"injectables/UtilService.html":{}}}],["mergeobjectsinunique(array",{"_index":1710,"title":{},"body":{"injectables/UtilService.html":{}}}],["merging",{"_index":2747,"title":{},"body":{"license.html":{}}}],["message",{"_index":408,"title":{},"body":{"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"controllers/PersonalityController.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/UsersController.html":{}}}],["met",{"_index":2416,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":2068,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":1760,"title":{},"body":{"controllers/ViewController.html":{}}}],["methods",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["metrics",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["migrated",{"_index":632,"title":{},"body":{"modules/ClaimRevisionModule.html":{}}}],["min",{"_index":950,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{}}}],["min(0",{"_index":951,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{}}}],["minlength",{"_index":875,"title":{},"body":{"classes/CreatePersonality.html":{}}}],["minlength(3",{"_index":876,"title":{},"body":{"classes/CreatePersonality.html":{}}}],["miscellaneous",{"_index":2080,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["misleading",{"_index":423,"title":{},"body":{"classes/ClaimReview.html":{},"miscellaneous/enumerations.html":{}}}],["misrepresentation",{"_index":2670,"title":{},"body":{"license.html":{}}}],["mode",{"_index":2614,"title":{},"body":{"license.html":{}}}],["model",{"_index":490,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"injectables/PersonalityService.html":{},"injectables/SourceService.html":{},"injectables/UsersService.html":{},"injectables/WikidataService.html":{},"license.html":{}}}],["modeyarn",{"_index":2115,"title":{},"body":{"index.html":{}}}],["modification",{"_index":2275,"title":{},"body":{"license.html":{}}}],["modifications",{"_index":2350,"title":{},"body":{"license.html":{}}}],["modified",{"_index":2222,"title":{},"body":{"license.html":{}}}],["modifies",{"_index":2502,"title":{},"body":{"license.html":{}}}],["modify",{"_index":2193,"title":{},"body":{"license.html":{}}}],["modifying",{"_index":2312,"title":{},"body":{"license.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/HomeModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimService.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/HomeModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/HomeModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{},"modules.html":{},"overview.html":{}}}],["mongo",{"_index":2025,"title":{},"body":{"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["mongodb",{"_index":608,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["mongodb://${mongodb_host}/${mongodb_name",{"_index":2990,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongodb_host",{"_index":1967,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mongodb_name",{"_index":1968,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mongoerror",{"_index":1261,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["mongooptions",{"_index":3012,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongoose",{"_index":134,"title":{},"body":{"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Personality.html":{},"injectables/PersonalityService.html":{},"classes/Source.html":{},"injectables/SourceService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["mongoose.date",{"_index":970,"title":{},"body":{"classes/History.html":{}}}],["mongoose.document",{"_index":142,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Personality.html":{},"classes/Source.html":{}}}],["mongoose.types.objectid",{"_index":147,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Source.html":{}}}],["mongoose.types.objectid(query.personality",{"_index":276,"title":{},"body":{"controllers/ClaimController.html":{}}}],["mongoose.types.objectid(req.params.id",{"_index":1662,"title":{},"body":{"controllers/UsersController.html":{}}}],["mongoosemodule",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/HistoryModule.html":{},"modules/PersonalityModule.html":{},"modules/SourceModule.html":{},"modules/UsersModule.html":{},"modules/WikidataModule.html":{}}}],["mongoosemodule.forfeature",{"_index":396,"title":{},"body":{"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/HistoryModule.html":{},"modules/PersonalityModule.html":{},"modules/SourceModule.html":{},"miscellaneous/variables.html":{}}}],["mongoosemodule.forfeatureasync",{"_index":1678,"title":{},"body":{"modules/UsersModule.html":{},"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["mongoosemodule.forroot",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["mongostore",{"_index":1969,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mongostore.create",{"_index":3010,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongourl",{"_index":3011,"title":{},"body":{"miscellaneous/variables.html":{}}}],["more",{"_index":2547,"title":{},"body":{"license.html":{}}}],["moreover",{"_index":2718,"title":{},"body":{"license.html":{}}}],["mr|mrs|ms|dr|he\\s|she\\s|it\\s|they\\s|their\\s|our\\s|we\\s|but\\s|however\\s|that\\s|this\\s|wherever)/g",{"_index":1164,"title":{},"body":{"injectables/ParserService.html":{}}}],["mr|st|mrs|ms|dr)[.]/g",{"_index":1158,"title":{},"body":{"injectables/ParserService.html":{},"miscellaneous/variables.html":{}}}],["name",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreatePersonality.html":{},"injectables/EmailService.html":{},"classes/GetPersonalities.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"injectables/StatsService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["names",{"_index":2673,"title":{},"body":{"license.html":{}}}],["nature",{"_index":2517,"title":{},"body":{"license.html":{}}}],["ndisallow",{"_index":1425,"title":{},"body":{"controllers/RootController.html":{}}}],["necessary",{"_index":1015,"title":{},"body":{"injectables/HistoryService.html":{},"license.html":{}}}],["need",{"_index":2184,"title":{},"body":{"license.html":{}}}],["needed",{"_index":2255,"title":{},"body":{"license.html":{}}}],["nestfactory.create",{"_index":2993,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nestjs/axios",{"_index":241,"title":{},"body":{"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"modules/HistoryModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1607,"title":{},"body":{"classes/UpdateClaimDTO.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"classes/Claim.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Personality.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"classes/Source.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":106,"title":{},"body":{"modules/AuthModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":2004,"title":{},"body":{"dependencies.html":{}}}],["nestjs/throttler",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["network",{"_index":2325,"title":{},"body":{"license.html":{}}}],["new",{"_index":260,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"injectables/HistoryService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["newarray",{"_index":1729,"title":{},"body":{"injectables/UtilService.html":{}}}],["newarray.get(propertyvalue",{"_index":1737,"title":{},"body":{"injectables/UtilService.html":{}}}],["newarray.has(propertyvalue",{"_index":1734,"title":{},"body":{"injectables/UtilService.html":{}}}],["newarray.set(propertyvalue",{"_index":1735,"title":{},"body":{"injectables/UtilService.html":{}}}],["newclaim",{"_index":762,"title":{},"body":{"injectables/ClaimService.html":{}}}],["newclaim._id",{"_index":771,"title":{},"body":{"injectables/ClaimService.html":{}}}],["newclaim.latestrevision",{"_index":765,"title":{},"body":{"injectables/ClaimService.html":{}}}],["newclaim.save",{"_index":775,"title":{},"body":{"injectables/ClaimService.html":{}}}],["newclaim.slug",{"_index":767,"title":{},"body":{"injectables/ClaimService.html":{}}}],["newclaim.toobject",{"_index":776,"title":{},"body":{"injectables/ClaimService.html":{}}}],["newclaimreview",{"_index":586,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["newclaimrevision",{"_index":671,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{}}}],["newclaimrevision._id",{"_index":766,"title":{},"body":{"injectables/ClaimService.html":{}}}],["newclaimrevision.save",{"_index":680,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["newclaimrevision.slug",{"_index":768,"title":{},"body":{"injectables/ClaimService.html":{}}}],["newclaimrevision.toobject",{"_index":777,"title":{},"body":{"injectables/ClaimService.html":{}}}],["newhistory",{"_index":1021,"title":{},"body":{"injectables/HistoryService.html":{}}}],["newhistory.save",{"_index":1023,"title":{},"body":{"injectables/HistoryService.html":{}}}],["newpassword",{"_index":1652,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["newpassword).then",{"_index":1699,"title":{},"body":{"injectables/UsersService.html":{}}}],["newpersonality",{"_index":1347,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["newpersonality._id",{"_index":1351,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["newpersonality.save",{"_index":1354,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["newpersonalitybody",{"_index":1325,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["newpersonalitybody.slug",{"_index":1386,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["news",{"_index":2098,"title":{},"body":{"index.html":{}}}],["newsentences",{"_index":1187,"title":{},"body":{"injectables/ParserService.html":{}}}],["newsentences.concat(semicolonsentences",{"_index":1201,"title":{},"body":{"injectables/ParserService.html":{}}}],["newwikidatacache",{"_index":1866,"title":{},"body":{"injectables/WikidataService.html":{}}}],["newwikidatacache.save",{"_index":1868,"title":{},"body":{"injectables/WikidataService.html":{}}}],["next",{"_index":307,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/PersonalityService.html":{},"injectables/ViewService.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["next/dist/server/next",{"_index":1802,"title":{},"body":{"injectables/ViewService.html":{}}}],["nextfunction",{"_index":2087,"title":{},"body":{"miscellaneous/functions.html":{}}}],["nextserver",{"_index":1797,"title":{},"body":{"injectables/ViewService.html":{}}}],["nlp",{"_index":1147,"title":{},"body":{"injectables/ParserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["nlp(content",{"_index":1175,"title":{},"body":{"injectables/ParserService.html":{}}}],["nlp.extend(require('compromise",{"_index":1149,"title":{},"body":{"injectables/ParserService.html":{}}}],["nlpcontent",{"_index":1174,"title":{},"body":{"injectables/ParserService.html":{}}}],["nlpcontent.paragraphs",{"_index":1176,"title":{},"body":{"injectables/ParserService.html":{}}}],["nlpcontent.text(this.nlpoptions",{"_index":1186,"title":{},"body":{"injectables/ParserService.html":{}}}],["nlpoptions",{"_index":1123,"title":{},"body":{"injectables/ParserService.html":{}}}],["nodemailer",{"_index":900,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["nodemailer.createtransport",{"_index":918,"title":{},"body":{"injectables/EmailService.html":{}}}],["non",{"_index":2270,"title":{},"body":{"license.html":{}}}],["noncommercially",{"_index":2553,"title":{},"body":{"license.html":{}}}],["normal",{"_index":2367,"title":{},"body":{"license.html":{}}}],["normally",{"_index":2590,"title":{},"body":{"license.html":{}}}],["notfoundexception",{"_index":1109,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["notfoundfilter",{"_index":55,"title":{"classes/NotFoundFilter.html":{}},"body":{"modules/AppModule.html":{},"classes/NotFoundFilter.html":{},"coverage.html":{}}}],["nothing",{"_index":2731,"title":{},"body":{"license.html":{}}}],["notice",{"_index":2337,"title":{},"body":{"license.html":{}}}],["notices",{"_index":2331,"title":{},"body":{"license.html":{}}}],["notifies",{"_index":2719,"title":{},"body":{"license.html":{}}}],["notify",{"_index":2713,"title":{},"body":{"license.html":{}}}],["notwithstanding",{"_index":2657,"title":{},"body":{"license.html":{}}}],["null",{"_index":788,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":613,"title":{},"body":{"classes/ClaimRevision.html":{},"injectables/ClaimService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"injectables/ParserService.html":{},"license.html":{}}}],["numbered",{"_index":2854,"title":{},"body":{"license.html":{}}}],["o",{"_index":3060,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object",{"_index":594,"title":{},"body":{"classes/ClaimRevision.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"classes/WikidataCache.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["object.assign",{"_index":1376,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["object.assign(claim",{"_index":810,"title":{},"body":{"injectables/ClaimService.html":{}}}],["object.assign(parsedurl.query",{"_index":367,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["object.assign(personality",{"_index":1390,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["object.assign(sentence.props",{"_index":820,"title":{},"body":{"injectables/ClaimService.html":{}}}],["object.keys(state).reduce",{"_index":572,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["objectid",{"_index":579,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["objects",{"_index":1717,"title":{},"body":{"injectables/UtilService.html":{}}}],["obligate",{"_index":2836,"title":{},"body":{"license.html":{}}}],["obligated",{"_index":2570,"title":{},"body":{"license.html":{}}}],["obligations",{"_index":2457,"title":{},"body":{"license.html":{}}}],["occasionally",{"_index":2552,"title":{},"body":{"license.html":{}}}],["occurring",{"_index":2728,"title":{},"body":{"license.html":{}}}],["occurs",{"_index":2239,"title":{},"body":{"license.html":{}}}],["offer",{"_index":2210,"title":{},"body":{"license.html":{}}}],["offered",{"_index":2580,"title":{},"body":{"license.html":{}}}],["offering",{"_index":2556,"title":{},"body":{"license.html":{}}}],["official",{"_index":2352,"title":{},"body":{"license.html":{}}}],["ok",{"_index":1429,"title":{},"body":{"controllers/RootController.html":{}}}],["old",{"_index":727,"title":{},"body":{"injectables/ClaimService.html":{}}}],["omit",{"_index":710,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["one",{"_index":2358,"title":{},"body":{"license.html":{}}}],["onmodel",{"_index":974,"title":{},"body":{"classes/History.html":{},"classes/Source.html":{}}}],["onmoduleinit",{"_index":1794,"title":{},"body":{"injectables/ViewService.html":{}}}],["operate",{"_index":2891,"title":{},"body":{"license.html":{}}}],["operated",{"_index":2561,"title":{},"body":{"license.html":{}}}],["operating",{"_index":2380,"title":{},"body":{"license.html":{}}}],["operation",{"_index":2477,"title":{},"body":{"license.html":{}}}],["option",{"_index":549,"title":{},"body":{"injectables/ClaimReviewService.html":{},"license.html":{}}}],["optional",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreatePersonality.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"injectables/StatsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"injectables/WikidataService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailService.html":{},"injectables/PersonalityService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["options.config",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["options.config.interface",{"_index":3023,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.config.port",{"_index":3024,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.config.throttle.limit",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["options.config.throttle.ttl",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["options.db",{"_index":2988,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.db.connection_uri",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["options.db.options",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["options.logger.log",{"_index":3018,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.logger.log(\"error",{"_index":3068,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.logger.log(\"info",{"_index":3029,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.name",{"_index":3019,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options?.config?.cors",{"_index":2982,"title":{},"body":{"miscellaneous/variables.html":{}}}],["optionstoupdate",{"_index":634,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{}}}],["order",{"_index":283,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"controllers/HomeController.html":{},"injectables/PersonalityService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"license.html":{}}}],["organization",{"_index":2745,"title":{},"body":{"license.html":{}}}],["organizations",{"_index":2289,"title":{},"body":{"license.html":{}}}],["origin",{"_index":1922,"title":{},"body":{"injectables/WikidataService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["original",{"_index":2671,"title":{},"body":{"license.html":{}}}],["others",{"_index":2186,"title":{},"body":{"license.html":{}}}],["otherwise",{"_index":2428,"title":{},"body":{"license.html":{}}}],["out",{"_index":103,"title":{},"body":{"modules/AuthModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/HomeModule.html":{},"classes/NotFoundFilter.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{},"license.html":{},"overview.html":{}}}],["output",{"_index":2420,"title":{},"body":{"license.html":{}}}],["outside",{"_index":2440,"title":{},"body":{"license.html":{}}}],["overallstats",{"_index":808,"title":{},"body":{"injectables/ClaimService.html":{}}}],["overview",{"_index":2956,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":728,"title":{},"body":{"injectables/ClaimService.html":{}}}],["overwrites",{"_index":1327,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["owned",{"_index":2770,"title":{},"body":{"license.html":{}}}],["p.content.foreach((sentence",{"_index":344,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{}}}],["p.content.length",{"_index":812,"title":{},"body":{"injectables/ClaimService.html":{}}}],["package",{"_index":1986,"title":{"dependencies.html":{}},"body":{}}],["packaged",{"_index":2509,"title":{},"body":{"license.html":{}}}],["packages:yarn",{"_index":2113,"title":{},"body":{"index.html":{}}}],["packaging",{"_index":2368,"title":{},"body":{"license.html":{}}}],["page",{"_index":279,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"controllers/HomeController.html":{},"classes/NotFoundFilter.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["pages",{"_index":1937,"title":{},"body":{"injectables/WikidataService.html":{}}}],["pages.length",{"_index":1939,"title":{},"body":{"injectables/WikidataService.html":{}}}],["pagesize",{"_index":281,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"controllers/HomeController.html":{},"injectables/PersonalityService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{}}}],["paginates",{"_index":1500,"title":{},"body":{"injectables/SitemapService.html":{}}}],["paper",{"_index":2926,"title":{},"body":{"license.html":{}}}],["paragraph",{"_index":1183,"title":{},"body":{"injectables/ParserService.html":{},"license.html":{}}}],["paragraph.content.foreach((sentence",{"_index":815,"title":{},"body":{"injectables/ClaimService.html":{}}}],["paragraphid",{"_index":1178,"title":{},"body":{"injectables/ParserService.html":{}}}],["paragraphs",{"_index":1150,"title":{},"body":{"injectables/ParserService.html":{},"dependencies.html":{},"license.html":{}}}],["paragraphs.foreach((paragraph",{"_index":1177,"title":{},"body":{"injectables/ParserService.html":{}}}],["paragraphsequence",{"_index":1124,"title":{},"body":{"injectables/ParserService.html":{}}}],["param",{"_index":229,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/SourceController.html":{},"injectables/UtilService.html":{}}}],["parameters",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"injectables/StatsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"injectables/WikidataService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":212,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/HistoryService.html":{},"controllers/SourceController.html":{},"injectables/WikidataService.html":{}}}],["params.language",{"_index":1863,"title":{},"body":{"injectables/WikidataService.html":{}}}],["params.wikidataid",{"_index":1862,"title":{},"body":{"injectables/WikidataService.html":{}}}],["parse",{"_index":245,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["parse(content",{"_index":1132,"title":{},"body":{"injectables/ParserService.html":{}}}],["parse(req.url",{"_index":356,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["parsedurl",{"_index":355,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["parsedurl.pathname",{"_index":1774,"title":{},"body":{"controllers/ViewController.html":{}}}],["parsedurl.query",{"_index":1775,"title":{},"body":{"controllers/ViewController.html":{}}}],["parseint(getsources.pagesize",{"_index":1551,"title":{},"body":{"controllers/SourceController.html":{}}}],["parseint(page",{"_index":554,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["parseint(pagesize",{"_index":331,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/PersonalityService.html":{}}}],["parser",{"_index":2012,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["parser.service",{"_index":1121,"title":{},"body":{"modules/ParserModule.html":{}}}],["parser/parser.module",{"_index":393,"title":{},"body":{"modules/ClaimModule.html":{},"modules/ClaimRevisionModule.html":{}}}],["parser/parser.service",{"_index":650,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["parsermodule",{"_index":388,"title":{"modules/ParserModule.html":{}},"body":{"modules/ClaimModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/ParserModule.html":{},"modules.html":{},"overview.html":{}}}],["parserservice",{"_index":637,"title":{"injectables/ParserService.html":{}},"body":{"injectables/ClaimRevisionService.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"coverage.html":{},"overview.html":{}}}],["parsesentence",{"_index":1128,"title":{},"body":{"injectables/ParserService.html":{}}}],["parsesentence(sentencecontent",{"_index":1134,"title":{},"body":{"injectables/ParserService.html":{}}}],["part",{"_index":2291,"title":{},"body":{"license.html":{}}}],["partialtype",{"_index":1606,"title":{},"body":{"classes/UpdateClaimDTO.html":{}}}],["partialtype(createclaimdto",{"_index":1608,"title":{},"body":{"classes/UpdateClaimDTO.html":{}}}],["particular",{"_index":2356,"title":{},"body":{"license.html":{}}}],["parties",{"_index":2322,"title":{},"body":{"license.html":{}}}],["parts",{"_index":2407,"title":{},"body":{"license.html":{}}}],["party",{"_index":2562,"title":{},"body":{"license.html":{}}}],["party's",{"_index":2749,"title":{},"body":{"license.html":{}}}],["pass",{"_index":927,"title":{},"body":{"injectables/EmailService.html":{},"license.html":{}}}],["passport",{"_index":1055,"title":{},"body":{"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passport.deserializeuser(this.usermodel.deserializeuser",{"_index":1059,"title":{},"body":{"injectables/LocalSerializer.html":{}}}],["passport.serializeuser(this.usermodel.serializeuser",{"_index":1058,"title":{},"body":{"injectables/LocalSerializer.html":{}}}],["passportmodule",{"_index":105,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":109,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1064,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1065,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["password",{"_index":1658,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["patent",{"_index":2703,"title":{},"body":{"license.html":{}}}],["patents",{"_index":2259,"title":{},"body":{"license.html":{}}}],["path",{"_index":906,"title":{},"body":{"injectables/EmailService.html":{},"injectables/PersonalityService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["pattern",{"_index":2237,"title":{},"body":{"license.html":{}}}],["payment",{"_index":2817,"title":{},"body":{"license.html":{}}}],["peer",{"_index":2575,"title":{},"body":{"license.html":{}}}],["peers",{"_index":2578,"title":{},"body":{"license.html":{}}}],["percentage",{"_index":1724,"title":{},"body":{"injectables/UtilService.html":{}}}],["percentage.tofixed(0",{"_index":1726,"title":{},"body":{"injectables/UtilService.html":{}}}],["performance",{"_index":1502,"title":{},"body":{"injectables/SitemapService.html":{},"license.html":{}}}],["performing",{"_index":2393,"title":{},"body":{"license.html":{}}}],["permanently",{"_index":2711,"title":{},"body":{"license.html":{}}}],["permission",{"_index":2213,"title":{},"body":{"license.html":{}}}],["permissions",{"_index":2411,"title":{},"body":{"license.html":{}}}],["permissive",{"_index":2489,"title":{},"body":{"license.html":{}}}],["permit",{"_index":2526,"title":{},"body":{"license.html":{}}}],["permits",{"_index":2693,"title":{},"body":{"license.html":{}}}],["permitted",{"_index":2141,"title":{},"body":{"license.html":{}}}],["perpetuity",{"_index":2630,"title":{},"body":{"license.html":{}}}],["personal",{"_index":2589,"title":{},"body":{"license.html":{}}}],["personalidades",{"_index":2094,"title":{},"body":{"index.html":{}}}],["personalities",{"_index":1034,"title":{},"body":{"controllers/HomeController.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/StatsService.html":{}}}],["personalities.dto",{"_index":1253,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["personalities.dto.ts",{"_index":960,"title":{},"body":{"classes/GetPersonalities.html":{},"coverage.html":{}}}],["personalities.dto.ts:10",{"_index":966,"title":{},"body":{"classes/GetPersonalities.html":{}}}],["personalities.dto.ts:13",{"_index":964,"title":{},"body":{"classes/GetPersonalities.html":{}}}],["personalities.dto.ts:17",{"_index":962,"title":{},"body":{"classes/GetPersonalities.html":{}}}],["personalities.dto.ts:21",{"_index":967,"title":{},"body":{"classes/GetPersonalities.html":{}}}],["personalities.dto.ts:25",{"_index":963,"title":{},"body":{"classes/GetPersonalities.html":{}}}],["personalities.dto.ts:6",{"_index":965,"title":{},"body":{"classes/GetPersonalities.html":{}}}],["personalities.map(async",{"_index":1343,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["personality",{"_index":117,"title":{"classes/Personality.html":{}},"body":{"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/GetClaimsDTO.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["personality._id",{"_index":360,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{}}}],["personality.claims",{"_index":1361,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["personality.controller",{"_index":1297,"title":{},"body":{"modules/PersonalityModule.html":{}}}],["personality.dto",{"_index":1254,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["personality.dto.ts",{"_index":859,"title":{},"body":{"classes/CreatePersonality.html":{},"coverage.html":{}}}],["personality.dto.ts:12",{"_index":871,"title":{},"body":{"classes/CreatePersonality.html":{}}}],["personality.dto.ts:16",{"_index":868,"title":{},"body":{"classes/CreatePersonality.html":{}}}],["personality.dto.ts:20",{"_index":866,"title":{},"body":{"classes/CreatePersonality.html":{}}}],["personality.dto.ts:24",{"_index":872,"title":{},"body":{"classes/CreatePersonality.html":{}}}],["personality.dto.ts:6",{"_index":870,"title":{},"body":{"classes/CreatePersonality.html":{}}}],["personality.dto.ts:9",{"_index":864,"title":{},"body":{"classes/CreatePersonality.html":{}}}],["personality.name",{"_index":1299,"title":{},"body":{"modules/PersonalityModule.html":{},"miscellaneous/variables.html":{}}}],["personality.service",{"_index":1252,"title":{},"body":{"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{}}}],["personality.slug",{"_index":1345,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["personality.wikidata",{"_index":1371,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["personality/${personality.slug",{"_index":1506,"title":{},"body":{"injectables/SitemapService.html":{}}}],["personality/${personality.slug}/claim/${claim.slug",{"_index":1508,"title":{},"body":{"injectables/SitemapService.html":{}}}],["personality/${personality.slug}/claim/${claim.slug}/sentence/${review._id",{"_index":1509,"title":{},"body":{"injectables/SitemapService.html":{}}}],["personality/personality.module",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/HomeModule.html":{},"modules/SitemapModule.html":{},"modules/StatsModule.html":{}}}],["personality/personality.service",{"_index":248,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"injectables/SitemapService.html":{},"injectables/StatsService.html":{}}}],["personality/schemas/personality.schema",{"_index":135,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{}}}],["personalitybody",{"_index":1312,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["personalityclaimpage",{"_index":175,"title":{},"body":{"controllers/ClaimController.html":{}}}],["personalityclaimpage(@req",{"_index":374,"title":{},"body":{"controllers/ClaimController.html":{}}}],["personalityclaimpage(req",{"_index":217,"title":{},"body":{"controllers/ClaimController.html":{}}}],["personalitycontroller",{"_index":1219,"title":{"controllers/PersonalityController.html":{}},"body":{"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"coverage.html":{}}}],["personalitycreatesearch",{"_index":1222,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["personalitycreatesearch(@req",{"_index":1284,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["personalitycreatesearch(req",{"_index":1240,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["personalitydocument",{"_index":1213,"title":{},"body":{"classes/Personality.html":{},"injectables/PersonalityService.html":{},"miscellaneous/typealiases.html":{}}}],["personalityid",{"_index":717,"title":{},"body":{"injectables/ClaimService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["personalitylist",{"_index":1223,"title":{},"body":{"controllers/PersonalityController.html":{},"controllers/UsersController.html":{}}}],["personalitylist(@req",{"_index":1289,"title":{},"body":{"controllers/PersonalityController.html":{},"controllers/UsersController.html":{}}}],["personalitylist(req",{"_index":1243,"title":{},"body":{"controllers/PersonalityController.html":{},"controllers/UsersController.html":{}}}],["personalitymodel",{"_index":1298,"title":{},"body":{"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["personalitymodule",{"_index":30,"title":{"modules/PersonalityModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/HomeModule.html":{},"modules/PersonalityModule.html":{},"modules/SitemapModule.html":{},"modules/StatsModule.html":{},"modules.html":{},"overview.html":{}}}],["personalitypage",{"_index":1224,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["personalitypage(@req",{"_index":1287,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["personalitypage(req",{"_index":1246,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["personalityschema",{"_index":1218,"title":{},"body":{"classes/Personality.html":{},"modules/PersonalityModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["personalityschemaraw",{"_index":1214,"title":{},"body":{"classes/Personality.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["personalityschemaraw.plugin(softdeleteplugin",{"_index":1217,"title":{},"body":{"classes/Personality.html":{}}}],["personalityschemaraw.virtual('claims",{"_index":1216,"title":{},"body":{"classes/Personality.html":{}}}],["personalityservice",{"_index":247,"title":{"injectables/PersonalityService.html":{}},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/StatsService.html":{},"coverage.html":{},"overview.html":{}}}],["personalityslug",{"_index":352,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/PersonalityService.html":{}}}],["personalityupdate",{"_index":1391,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["pertinent",{"_index":2834,"title":{},"body":{"license.html":{}}}],["ph\\.d\\./g",{"_index":1160,"title":{},"body":{"injectables/ParserService.html":{},"miscellaneous/variables.html":{}}}],["phdregex",{"_index":1159,"title":{},"body":{"injectables/ParserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["physical",{"_index":2534,"title":{},"body":{"license.html":{}}}],["physically",{"_index":2550,"title":{},"body":{"license.html":{}}}],["pid",{"_index":3020,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pieces",{"_index":2179,"title":{},"body":{"license.html":{}}}],["place",{"_index":2558,"title":{},"body":{"license.html":{}}}],["plain",{"_index":1714,"title":{},"body":{"injectables/UtilService.html":{}}}],["plaintext",{"_index":1921,"title":{},"body":{"injectables/WikidataService.html":{}}}],["plataforma",{"_index":2091,"title":{},"body":{"index.html":{}}}],["please",{"_index":2950,"title":{},"body":{"license.html":{}}}],["plugin",{"_index":2009,"title":{},"body":{"dependencies.html":{}}}],["plus",{"_index":2752,"title":{},"body":{"license.html":{}}}],["poder",{"_index":3058,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pointer",{"_index":2918,"title":{},"body":{"license.html":{}}}],["policy",{"_index":1494,"title":{},"body":{"injectables/SitemapService.html":{},"controllers/ViewController.html":{}}}],["populate",{"_index":564,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/PersonalityService.html":{}}}],["populate(\"latestrevision",{"_index":747,"title":{},"body":{"injectables/ClaimService.html":{}}}],["populate(\"personality",{"_index":797,"title":{},"body":{"injectables/ClaimService.html":{}}}],["populate(\"sources",{"_index":798,"title":{},"body":{"injectables/ClaimService.html":{}}}],["populates",{"_index":559,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["port",{"_index":921,"title":{},"body":{"injectables/EmailService.html":{}}}],["portion",{"_index":2583,"title":{},"body":{"license.html":{}}}],["positive",{"_index":752,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{}}}],["possesses",{"_index":2546,"title":{},"body":{"license.html":{}}}],["possession",{"_index":2506,"title":{},"body":{"license.html":{}}}],["possibility",{"_index":2894,"title":{},"body":{"license.html":{}}}],["possible",{"_index":2910,"title":{},"body":{"license.html":{}}}],["post",{"_index":230,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{}}}],["post(\"api/claim",{"_index":299,"title":{},"body":{"controllers/ClaimController.html":{}}}],["post(\"api/personality",{"_index":1258,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["post(\"api/user/signin",{"_index":1645,"title":{},"body":{"controllers/UsersController.html":{}}}],["postprocess",{"_index":685,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["postprocess(claim",{"_index":720,"title":{},"body":{"injectables/ClaimService.html":{}}}],["postprocess(personality",{"_index":1323,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["postprocesssentences",{"_index":1129,"title":{},"body":{"injectables/ParserService.html":{}}}],["postprocesssentences(sentences",{"_index":1138,"title":{},"body":{"injectables/ParserService.html":{}}}],["power",{"_index":2471,"title":{},"body":{"license.html":{}}}],["practical",{"_index":2152,"title":{},"body":{"license.html":{}}}],["practice",{"_index":2246,"title":{},"body":{"license.html":{}}}],["preamble",{"_index":2147,"title":{},"body":{"license.html":{}}}],["precise",{"_index":2271,"title":{},"body":{"license.html":{}}}],["precisely",{"_index":2243,"title":{},"body":{"license.html":{}}}],["predecessor",{"_index":2750,"title":{},"body":{"license.html":{}}}],["preferred",{"_index":2348,"title":{},"body":{"license.html":{}}}],["prefix",{"_index":439,"title":{},"body":{"controllers/ClaimReviewController.html":{},"controllers/HomeController.html":{},"controllers/RootController.html":{},"controllers/SitemapController.html":{},"controllers/StatsController.html":{},"controllers/ViewController.html":{}}}],["prefixes",{"_index":1157,"title":{},"body":{"injectables/ParserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["present",{"_index":2847,"title":{},"body":{"license.html":{}}}],["presents",{"_index":2342,"title":{},"body":{"license.html":{}}}],["preservation",{"_index":2665,"title":{},"body":{"license.html":{}}}],["prevent",{"_index":2185,"title":{},"body":{"license.html":{}}}],["prevented",{"_index":2624,"title":{},"body":{"license.html":{}}}],["preview",{"_index":1997,"title":{},"body":{"dependencies.html":{}}}],["previous",{"_index":1013,"title":{},"body":{"injectables/HistoryService.html":{},"license.html":{}}}],["previouschange",{"_index":1004,"title":{},"body":{"injectables/HistoryService.html":{}}}],["previousclaim",{"_index":785,"title":{},"body":{"injectables/ClaimService.html":{}}}],["previouspersonality",{"_index":1389,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["previousrevision",{"_index":779,"title":{},"body":{"injectables/ClaimService.html":{}}}],["previousrevision._id",{"_index":781,"title":{},"body":{"injectables/ClaimService.html":{}}}],["price",{"_index":2174,"title":{},"body":{"license.html":{}}}],["primarily",{"_index":2819,"title":{},"body":{"license.html":{}}}],["prior",{"_index":2714,"title":{},"body":{"license.html":{}}}],["priority",{"_index":1510,"title":{},"body":{"injectables/SitemapService.html":{}}}],["privacy",{"_index":1493,"title":{},"body":{"injectables/SitemapService.html":{},"controllers/ViewController.html":{}}}],["private",{"_index":258,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{},"license.html":{}}}],["problems",{"_index":2224,"title":{},"body":{"license.html":{}}}],["procedures",{"_index":2617,"title":{},"body":{"license.html":{}}}],["process.env.development_password",{"_index":3044,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.environment",{"_index":1805,"title":{},"body":{"injectables/ViewService.html":{}}}],["process.env.mongodb_host",{"_index":3025,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.mongodb_name",{"_index":3027,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.pid",{"_index":3021,"title":{},"body":{"miscellaneous/variables.html":{}}}],["procuring",{"_index":2807,"title":{},"body":{"license.html":{}}}],["produce",{"_index":2383,"title":{},"body":{"license.html":{}}}],["product",{"_index":2535,"title":{},"body":{"license.html":{}}}],["production",{"_index":2123,"title":{},"body":{"index.html":{}}}],["products",{"_index":2241,"title":{},"body":{"license.html":{}}}],["profile",{"_index":1498,"title":{},"body":{"injectables/SitemapService.html":{},"controllers/UsersController.html":{}}}],["profile(@req",{"_index":1670,"title":{},"body":{"controllers/UsersController.html":{}}}],["profile(req",{"_index":1634,"title":{},"body":{"controllers/UsersController.html":{}}}],["program",{"_index":2161,"title":{},"body":{"license.html":{}}}],["program's",{"_index":2481,"title":{},"body":{"license.html":{}}}],["programmer",{"_index":2939,"title":{},"body":{"license.html":{}}}],["programming",{"_index":2357,"title":{},"body":{"license.html":{}}}],["programs",{"_index":2171,"title":{},"body":{"license.html":{}}}],["prohibit",{"_index":2245,"title":{},"body":{"license.html":{}}}],["prohibiting",{"_index":2467,"title":{},"body":{"license.html":{}}}],["prohibits",{"_index":2813,"title":{},"body":{"license.html":{}}}],["project",{"_index":567,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["prominent",{"_index":2345,"title":{},"body":{"license.html":{}}}],["prominently",{"_index":2334,"title":{},"body":{"license.html":{}}}],["promise",{"_index":1437,"title":{},"body":{"guards/SessionGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{}}}],["promise.all",{"_index":286,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/StatsService.html":{},"miscellaneous/variables.html":{}}}],["promise.all(personality.claims.map((claim",{"_index":1362,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["promise.resolve(undefined",{"_index":551,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["prop",{"_index":131,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Personality.html":{},"classes/Source.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{}}}],["prop({default",{"_index":1813,"title":{},"body":{"classes/WikidataCache.html":{}}}],["prop({required",{"_index":129,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Personality.html":{},"classes/Source.html":{},"classes/User.html":{},"classes/WikidataCache.html":{}}}],["prop({type",{"_index":122,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Source.html":{},"classes/WikidataCache.html":{}}}],["prop({unique",{"_index":1210,"title":{},"body":{"classes/Personality.html":{}}}],["prop({validate",{"_index":1524,"title":{},"body":{"classes/Source.html":{}}}],["propagate",{"_index":2301,"title":{},"body":{"license.html":{}}}],["propagating",{"_index":2735,"title":{},"body":{"license.html":{}}}],["propagation",{"_index":2313,"title":{},"body":{"license.html":{}}}],["properties",{"_index":115,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"classes/Logger.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{}}}],["property",{"_index":1373,"title":{},"body":{"injectables/PersonalityService.html":{},"injectables/UtilService.html":{},"injectables/WikidataService.html":{},"license.html":{}}}],["propertyvalue",{"_index":1732,"title":{},"body":{"injectables/UtilService.html":{}}}],["proprietary",{"_index":2268,"title":{},"body":{"license.html":{}}}],["props",{"_index":1137,"title":{},"body":{"injectables/ParserService.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{}}}],["protect",{"_index":2182,"title":{},"body":{"license.html":{}}}],["protecting",{"_index":2235,"title":{},"body":{"license.html":{}}}],["protection",{"_index":2215,"title":{},"body":{"license.html":{}}}],["protocols",{"_index":2645,"title":{},"body":{"license.html":{}}}],["prove",{"_index":2871,"title":{},"body":{"license.html":{}}}],["provide",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"license.html":{}}}],["provided",{"_index":2340,"title":{},"body":{"license.html":{}}}],["providers",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/HomeModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{}}}],["provision",{"_index":2254,"title":{},"body":{"license.html":{}}}],["provisionally",{"_index":2708,"title":{},"body":{"license.html":{}}}],["proxy",{"_index":2859,"title":{},"body":{"license.html":{}}}],["proxy's",{"_index":2861,"title":{},"body":{"license.html":{}}}],["pt",{"_index":1504,"title":{},"body":{"injectables/SitemapService.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["public",{"_index":167,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/SourceController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["publicity",{"_index":2672,"title":{},"body":{"license.html":{}}}],["publicly",{"_index":2646,"title":{},"body":{"license.html":{}}}],["publish",{"_index":2485,"title":{},"body":{"license.html":{}}}],["published",{"_index":2856,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":2262,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":2593,"title":{},"body":{"license.html":{}}}],["pursuant",{"_index":2803,"title":{},"body":{"license.html":{}}}],["put",{"_index":231,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{}}}],["put(\"api/claim/:id",{"_index":316,"title":{},"body":{"controllers/ClaimController.html":{}}}],["put(\"api/personality/:id",{"_index":1275,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["put(\"api/user/:id/password",{"_index":1649,"title":{},"body":{"controllers/UsersController.html":{}}}],["públicas",{"_index":2095,"title":{},"body":{"index.html":{}}}],["q5",{"_index":1895,"title":{},"body":{"injectables/WikidataService.html":{}}}],["qs",{"_index":237,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["qs.stringify",{"_index":269,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["qualify",{"_index":2725,"title":{},"body":{"license.html":{}}}],["quality",{"_index":2870,"title":{},"body":{"license.html":{}}}],["query",{"_index":189,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/SourceController.html":{},"injectables/WikidataService.html":{}}}],["query.language",{"_index":1272,"title":{},"body":{"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["query.name",{"_index":1399,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["query.name.$regex",{"_index":1341,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["query.personality",{"_index":272,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{}}}],["query.withsuggestions",{"_index":1403,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["queryinputs",{"_index":271,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/PersonalityService.html":{}}}],["queryinputs.name",{"_index":1400,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["queryinputs.personality",{"_index":275,"title":{},"body":{"controllers/ClaimController.html":{}}}],["querystring",{"_index":238,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["querywikibaseentities",{"_index":1839,"title":{},"body":{"injectables/WikidataService.html":{}}}],["querywikibaseentities(query",{"_index":1854,"title":{},"body":{"injectables/WikidataService.html":{}}}],["random",{"_index":1036,"title":{},"body":{"controllers/HomeController.html":{},"injectables/PersonalityService.html":{}}}],["randombytes(8",{"_index":3043,"title":{},"body":{"miscellaneous/variables.html":{}}}],["raw",{"_index":2071,"title":{},"body":{"dependencies.html":{}}}],["react",{"_index":2050,"title":{},"body":{"dependencies.html":{}}}],["read",{"_index":2951,"title":{},"body":{"license.html":{}}}],["readable",{"_index":2531,"title":{},"body":{"license.html":{}}}],["readily",{"_index":2790,"title":{},"body":{"license.html":{}}}],["reading",{"_index":2650,"title":{},"body":{"license.html":{}}}],["readonly",{"_index":259,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"injectables/HistoryService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ViewService.html":{}}}],["ready",{"_index":2252,"title":{},"body":{"license.html":{}}}],["reason",{"_index":2801,"title":{},"body":{"license.html":{}}}],["reasonable",{"_index":2548,"title":{},"body":{"license.html":{}}}],["recaptcha",{"_index":310,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"dependencies.html":{}}}],["recaptcha_api_url",{"_index":263,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["recaptcha_api_url}/siteverify",{"_index":268,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["recaptchacheck",{"_index":302,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["recaptchacheck.success",{"_index":305,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["receipt",{"_index":2723,"title":{},"body":{"license.html":{}}}],["receive",{"_index":2177,"title":{},"body":{"license.html":{}}}],["received",{"_index":705,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"license.html":{}}}],["receives",{"_index":2740,"title":{},"body":{"license.html":{}}}],["receiving",{"_index":2809,"title":{},"body":{"license.html":{}}}],["recipient",{"_index":2629,"title":{},"body":{"license.html":{}}}],["recipient's",{"_index":2799,"title":{},"body":{"license.html":{}}}],["recipients",{"_index":2200,"title":{},"body":{"license.html":{}}}],["recognized",{"_index":2353,"title":{},"body":{"license.html":{}}}],["redirect",{"_index":1103,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["redirects",{"_index":1758,"title":{},"body":{"controllers/ViewController.html":{}}}],["redistribute",{"_index":2913,"title":{},"body":{"license.html":{}}}],["redux",{"_index":2060,"title":{},"body":{"dependencies.html":{}}}],["ref",{"_index":125,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Personality.html":{},"classes/Source.html":{}}}],["referring",{"_index":2173,"title":{},"body":{"license.html":{}}}],["refers",{"_index":2277,"title":{},"body":{"license.html":{}}}],["reflect",{"_index":2067,"title":{},"body":{"dependencies.html":{}}}],["refpath",{"_index":973,"title":{},"body":{"classes/History.html":{},"classes/Source.html":{}}}],["refrain",{"_index":2838,"title":{},"body":{"license.html":{}}}],["regard",{"_index":2655,"title":{},"body":{"license.html":{}}}],["regardless",{"_index":2508,"title":{},"body":{"license.html":{}}}],["regenerate",{"_index":2408,"title":{},"body":{"license.html":{}}}],["regex",{"_index":1151,"title":{},"body":{"injectables/ParserService.html":{},"injectables/PersonalityService.html":{}}}],["register",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"injectables/UsersService.html":{}}}],["register(options",{"_index":10,"title":{},"body":{"modules/AppModule.html":{}}}],["register(user",{"_index":1689,"title":{},"body":{"injectables/UsersService.html":{}}}],["rehype",{"_index":2070,"title":{},"body":{"dependencies.html":{}}}],["reinstated",{"_index":2707,"title":{},"body":{"license.html":{}}}],["relationship",{"_index":2441,"title":{},"body":{"license.html":{}}}],["released",{"_index":2167,"title":{},"body":{"license.html":{}}}],["relevant",{"_index":2500,"title":{},"body":{"license.html":{}}}],["reliable",{"_index":1535,"title":{},"body":{"classes/Source.html":{}}}],["relicensing",{"_index":2694,"title":{},"body":{"license.html":{}}}],["relying",{"_index":2789,"title":{},"body":{"license.html":{}}}],["remain",{"_index":2569,"title":{},"body":{"license.html":{}}}],["remains",{"_index":2164,"title":{},"body":{"license.html":{}}}],["removal",{"_index":2656,"title":{},"body":{"license.html":{}}}],["remove",{"_index":754,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"license.html":{}}}],["render",{"_index":365,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"license.html":{}}}],["render(req",{"_index":1773,"title":{},"body":{"controllers/ViewController.html":{}}}],["render(req,res",{"_index":379,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{},"controllers/ViewController.html":{}}}],["render404",{"_index":1759,"title":{},"body":{"controllers/ViewController.html":{}}}],["rendered",{"_index":2886,"title":{},"body":{"license.html":{}}}],["repair",{"_index":2875,"title":{},"body":{"license.html":{}}}],["repeatednewpassword",{"_index":1653,"title":{},"body":{"controllers/UsersController.html":{}}}],["replace_me",{"_index":3006,"title":{},"body":{"miscellaneous/variables.html":{}}}],["replacement",{"_index":670,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{}}}],["repo",{"_index":2101,"title":{},"body":{"index.html":{}}}],["report",{"_index":403,"title":{},"body":{"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/CreateClaimReview.html":{}}}],["represent",{"_index":2612,"title":{},"body":{"license.html":{}}}],["req",{"_index":184,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimService.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"controllers/SitemapController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"miscellaneous/functions.html":{}}}],["req.body",{"_index":1654,"title":{},"body":{"controllers/UsersController.html":{}}}],["req.get(\"host",{"_index":1422,"title":{},"body":{"controllers/RootController.html":{},"controllers/SitemapController.html":{}}}],["req.language",{"_index":358,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{}}}],["req.login(req.user",{"_index":1647,"title":{},"body":{"controllers/UsersController.html":{}}}],["req.params",{"_index":354,"title":{},"body":{"controllers/ClaimController.html":{}}}],["req.params.claimslug",{"_index":377,"title":{},"body":{"controllers/ClaimController.html":{}}}],["req.params.id",{"_index":1655,"title":{},"body":{"controllers/UsersController.html":{}}}],["req.params.personalityslug",{"_index":376,"title":{},"body":{"controllers/ClaimController.html":{}}}],["req.params.slug",{"_index":372,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{}}}],["req.protocol",{"_index":1421,"title":{},"body":{"controllers/RootController.html":{},"controllers/SitemapController.html":{}}}],["req.user",{"_index":335,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/UsersController.html":{}}}],["req.user._id.tostring",{"_index":1656,"title":{},"body":{"controllers/UsersController.html":{}}}],["req?.user?._id",{"_index":457,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["request",{"_index":191,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["request.isauthenticated",{"_index":1443,"title":{},"body":{"guards/SessionGuard.html":{}}}],["request.url.startswith(\"/api",{"_index":1444,"title":{},"body":{"guards/SessionGuard.html":{}}}],["requested",{"_index":2987,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requester.internalerror(res",{"_index":308,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["requestproperties",{"_index":1840,"title":{},"body":{"injectables/WikidataService.html":{}}}],["requestproperties(params",{"_index":1856,"title":{},"body":{"injectables/WikidataService.html":{}}}],["require",{"_index":2402,"title":{},"body":{"license.html":{}}}],["require(\"axios",{"_index":1491,"title":{},"body":{"injectables/SitemapService.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["require(\"connect",{"_index":3028,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require(\"cookie",{"_index":2980,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require(\"fs",{"_index":905,"title":{},"body":{"injectables/EmailService.html":{},"miscellaneous/variables.html":{}}}],["require(\"handlebars",{"_index":903,"title":{},"body":{"injectables/EmailService.html":{},"miscellaneous/variables.html":{}}}],["require(\"md5",{"_index":1146,"title":{},"body":{"injectables/ParserService.html":{},"miscellaneous/variables.html":{}}}],["require(\"nodemailer",{"_index":901,"title":{},"body":{"injectables/EmailService.html":{},"miscellaneous/variables.html":{}}}],["require(\"path",{"_index":907,"title":{},"body":{"injectables/EmailService.html":{},"miscellaneous/variables.html":{}}}],["require(\"service",{"_index":3079,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('compromise",{"_index":1148,"title":{},"body":{"injectables/ParserService.html":{},"miscellaneous/variables.html":{}}}],["required",{"_index":124,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Personality.html":{},"classes/Source.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"classes/WikidataCache.html":{},"license.html":{}}}],["requirement",{"_index":2501,"title":{},"body":{"license.html":{}}}],["requirements",{"_index":2573,"title":{},"body":{"license.html":{}}}],["requires",{"_index":2221,"title":{},"body":{"license.html":{}}}],["requiring",{"_index":2293,"title":{},"body":{"license.html":{}}}],["res",{"_index":192,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/RootController.html":{},"controllers/SitemapController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"miscellaneous/functions.html":{}}}],["res.send",{"_index":1648,"title":{},"body":{"controllers/UsersController.html":{}}}],["res.send(sitemapxml",{"_index":1467,"title":{},"body":{"controllers/SitemapController.html":{}}}],["res.status(200).json",{"_index":1663,"title":{},"body":{"controllers/UsersController.html":{}}}],["res.status(500).json",{"_index":1667,"title":{},"body":{"controllers/UsersController.html":{}}}],["res.type(\"text/plain\").end",{"_index":1423,"title":{},"body":{"controllers/RootController.html":{}}}],["resave",{"_index":3007,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reset",{"_index":102,"title":{},"body":{"modules/AuthModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/HomeModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{},"overview.html":{}}}],["resolved",{"_index":2600,"title":{},"body":{"license.html":{}}}],["resolver",{"_index":1366,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["respect",{"_index":2194,"title":{},"body":{"license.html":{}}}],["response",{"_index":179,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/HomeController.html":{},"classes/NotFoundFilter.html":{},"controllers/PersonalityController.html":{},"guards/SessionGuard.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"injectables/WikidataService.html":{},"miscellaneous/functions.html":{}}}],["response.data",{"_index":1925,"title":{},"body":{"injectables/WikidataService.html":{}}}],["response.redirect(\"/login",{"_index":1445,"title":{},"body":{"guards/SessionGuard.html":{}}}],["response.redirect('/404",{"_index":1116,"title":{},"body":{"classes/NotFoundFilter.html":{}}}],["responsibilities",{"_index":2192,"title":{},"body":{"license.html":{}}}],["responsible",{"_index":2741,"title":{},"body":{"license.html":{}}}],["restrict",{"_index":2261,"title":{},"body":{"license.html":{}}}],["restricting",{"_index":2468,"title":{},"body":{"license.html":{}}}],["restriction",{"_index":2692,"title":{},"body":{"license.html":{}}}],["restrictions",{"_index":2688,"title":{},"body":{"license.html":{}}}],["result",{"_index":1173,"title":{},"body":{"injectables/ParserService.html":{},"injectables/UtilService.html":{},"license.html":{}}}],["result.push",{"_index":1182,"title":{},"body":{"injectables/ParserService.html":{}}}],["result.slice(0",{"_index":1727,"title":{},"body":{"injectables/UtilService.html":{}}}],["resulting",{"_index":2296,"title":{},"body":{"license.html":{}}}],["results",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retains",{"_index":2633,"title":{},"body":{"license.html":{}}}],["return",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"injectables/HistoryService.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/ViewService.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{}}}],["review",{"_index":366,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/SitemapService.html":{},"injectables/UtilService.html":{}}}],["review._id",{"_index":818,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/UtilService.html":{}}}],["review.controller",{"_index":472,"title":{},"body":{"modules/ClaimReviewModule.html":{}}}],["review.controller.ts",{"_index":438,"title":{},"body":{"controllers/ClaimReviewController.html":{},"coverage.html":{}}}],["review.controller.ts:17",{"_index":441,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["review.controller.ts:32",{"_index":445,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["review.controller.ts:55",{"_index":451,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["review.controller.ts:61",{"_index":448,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["review.count",{"_index":1722,"title":{},"body":{"injectables/UtilService.html":{}}}],["review.dto",{"_index":452,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["review.dto.ts",{"_index":842,"title":{},"body":{"classes/CreateClaimReview.html":{},"coverage.html":{}}}],["review.dto.ts:13",{"_index":844,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["review.dto.ts:16",{"_index":848,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["review.dto.ts:20",{"_index":852,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["review.dto.ts:23",{"_index":851,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["review.dto.ts:27",{"_index":850,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["review.dto.ts:30",{"_index":849,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["review.dto.ts:34",{"_index":854,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["review.dto.ts:9",{"_index":846,"title":{},"body":{"classes/CreateClaimReview.html":{}}}],["review.module",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/PersonalityModule.html":{},"modules/SitemapModule.html":{},"modules/StatsModule.html":{}}}],["review.module.ts",{"_index":469,"title":{},"body":{"modules/ClaimReviewModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["review.schema",{"_index":471,"title":{},"body":{"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/CreateClaimReview.html":{}}}],["review.schema.ts",{"_index":401,"title":{},"body":{"classes/ClaimReview.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["review.schema.ts:43",{"_index":410,"title":{},"body":{"classes/ClaimReview.html":{}}}],["review.schema.ts:50",{"_index":406,"title":{},"body":{"classes/ClaimReview.html":{}}}],["review.schema.ts:57",{"_index":411,"title":{},"body":{"classes/ClaimReview.html":{}}}],["review.schema.ts:60",{"_index":414,"title":{},"body":{"classes/ClaimReview.html":{}}}],["review.schema.ts:63",{"_index":413,"title":{},"body":{"classes/ClaimReview.html":{}}}],["review.schema.ts:66",{"_index":412,"title":{},"body":{"classes/ClaimReview.html":{}}}],["review.schema.ts:73",{"_index":415,"title":{},"body":{"classes/ClaimReview.html":{}}}],["review.service",{"_index":234,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/StatsService.html":{}}}],["review.service.ts",{"_index":478,"title":{},"body":{"injectables/ClaimReviewService.html":{},"coverage.html":{}}}],["review.service.ts:124",{"_index":495,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:13",{"_index":492,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:168",{"_index":516,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:192",{"_index":521,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:198",{"_index":518,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:21",{"_index":507,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:29",{"_index":510,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:33",{"_index":532,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:42",{"_index":530,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:56",{"_index":523,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:68",{"_index":535,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:83",{"_index":514,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:89",{"_index":528,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:99",{"_index":494,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review/claim",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["review/dto/create",{"_index":841,"title":{},"body":{"classes/CreateClaimReview.html":{},"coverage.html":{}}}],["review/schemas/claim",{"_index":400,"title":{},"body":{"classes/ClaimReview.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["reviewing",{"_index":2898,"title":{},"body":{"license.html":{}}}],["reviews",{"_index":255,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"classes/GetClaimsByHashDTO.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/StatsService.html":{},"injectables/UtilService.html":{},"coverage.html":{}}}],["reviews.find((review",{"_index":817,"title":{},"body":{"injectables/ClaimService.html":{}}}],["reviews.length",{"_index":814,"title":{},"body":{"injectables/ClaimService.html":{}}}],["reviews.map((review",{"_index":1723,"title":{},"body":{"injectables/UtilService.html":{}}}],["reviews.reduce((agg",{"_index":1720,"title":{},"body":{"injectables/UtilService.html":{}}}],["reviewstats",{"_index":806,"title":{},"body":{"injectables/ClaimService.html":{}}}],["revised",{"_index":2845,"title":{},"body":{"license.html":{}}}],["revision",{"_index":699,"title":{},"body":{"injectables/ClaimService.html":{}}}],["revision.module",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/PersonalityModule.html":{}}}],["revision.module.ts",{"_index":623,"title":{},"body":{"modules/ClaimRevisionModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["revision.schema",{"_index":137,"title":{},"body":{"classes/Claim.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{}}}],["revision.schema.ts",{"_index":590,"title":{},"body":{"classes/ClaimRevision.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["revision.schema.ts:11",{"_index":599,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["revision.schema.ts:14",{"_index":598,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["revision.schema.ts:17",{"_index":595,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["revision.schema.ts:20",{"_index":596,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["revision.schema.ts:27",{"_index":593,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["revision.schema.ts:38",{"_index":600,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["revision.schema.ts:45",{"_index":597,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["revision.service",{"_index":625,"title":{},"body":{"modules/ClaimRevisionModule.html":{},"injectables/ClaimService.html":{}}}],["revision.service.ts",{"_index":633,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"coverage.html":{}}}],["revision.service.ts:11",{"_index":648,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["revision.service.ts:12",{"_index":638,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["revision.service.ts:27",{"_index":645,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["revision.service.ts:36",{"_index":640,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["revision/claim",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"modules/PersonalityModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["revision/schema/claim",{"_index":136,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimRevision.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["revisionid",{"_index":612,"title":{},"body":{"classes/ClaimRevision.html":{},"injectables/ClaimService.html":{}}}],["revisions",{"_index":143,"title":{},"body":{"classes/Claim.html":{}}}],["right",{"_index":2627,"title":{},"body":{"license.html":{}}}],["rights",{"_index":2183,"title":{},"body":{"license.html":{}}}],["risk",{"_index":2869,"title":{},"body":{"license.html":{}}}],["robots",{"_index":1411,"title":{},"body":{"controllers/RootController.html":{}}}],["robots(@res",{"_index":1420,"title":{},"body":{"controllers/RootController.html":{}}}],["robots(res",{"_index":1415,"title":{},"body":{"controllers/RootController.html":{}}}],["rom",{"_index":2636,"title":{},"body":{"license.html":{}}}],["root/root.controller",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["rootcontroller",{"_index":42,"title":{"controllers/RootController.html":{}},"body":{"modules/AppModule.html":{},"controllers/RootController.html":{},"coverage.html":{}}}],["royalty",{"_index":2756,"title":{},"body":{"license.html":{}}}],["rules",{"_index":1153,"title":{},"body":{"injectables/ParserService.html":{},"license.html":{}}}],["run",{"_index":2114,"title":{},"body":{"index.html":{},"license.html":{}}}],["runner",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["running",{"_index":2421,"title":{},"body":{"license.html":{}}}],["runs",{"_index":2381,"title":{},"body":{"license.html":{}}}],["rxjs",{"_index":2073,"title":{},"body":{"dependencies.html":{}}}],["safest",{"_index":2915,"title":{},"body":{"license.html":{}}}],["sake",{"_index":2220,"title":{},"body":{"license.html":{}}}],["sale",{"_index":2765,"title":{},"body":{"license.html":{}}}],["same",{"_index":2201,"title":{},"body":{"license.html":{}}}],["sample",{"_index":1336,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["satisfy",{"_index":2572,"title":{},"body":{"license.html":{}}}],["save",{"_index":642,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["saveuninitialized",{"_index":3008,"title":{},"body":{"miscellaneous/variables.html":{}}}],["saying",{"_index":2567,"title":{},"body":{"license.html":{}}}],["schema",{"_index":132,"title":{},"body":{"classes/Claim.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"modules/ClaimReviewModule.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"classes/History.html":{},"modules/HistoryModule.html":{},"classes/Personality.html":{},"modules/PersonalityModule.html":{},"classes/Source.html":{},"modules/SourceModule.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"modules/UsersModule.html":{},"classes/WikidataCache.html":{},"miscellaneous/variables.html":{}}}],["schema.plugin(require(\"passport",{"_index":1681,"title":{},"body":{"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["schema/claim",{"_index":624,"title":{},"body":{"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{}}}],["schema/history.schema",{"_index":990,"title":{},"body":{"modules/HistoryModule.html":{},"injectables/HistoryService.html":{}}}],["schemafactory",{"_index":133,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Personality.html":{},"classes/Source.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"classes/WikidataCache.html":{}}}],["schemafactory.createforclass(claim",{"_index":150,"title":{},"body":{"classes/Claim.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(claimreview",{"_index":434,"title":{},"body":{"classes/ClaimReview.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(claimrevision",{"_index":615,"title":{},"body":{"classes/ClaimRevision.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(history",{"_index":985,"title":{},"body":{"classes/History.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(personality",{"_index":1215,"title":{},"body":{"classes/Personality.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(source",{"_index":1539,"title":{},"body":{"classes/Source.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":1616,"title":{},"body":{"classes/User.html":{},"interfaces/UserDocument.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(wikidatacache",{"_index":1821,"title":{},"body":{"classes/WikidataCache.html":{},"miscellaneous/variables.html":{}}}],["schemas/claim",{"_index":470,"title":{},"body":{"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/CreateClaimReview.html":{}}}],["schemas/claim.schema",{"_index":391,"title":{},"body":{"modules/ClaimModule.html":{}}}],["schemas/personality.schema",{"_index":1296,"title":{},"body":{"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{}}}],["schemas/source.schema",{"_index":1561,"title":{},"body":{"modules/SourceModule.html":{},"injectables/SourceService.html":{}}}],["schemas/user.schema",{"_index":1676,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["schemas/wikidata.schema",{"_index":1827,"title":{},"body":{"modules/WikidataModule.html":{},"injectables/WikidataService.html":{}}}],["school",{"_index":2940,"title":{},"body":{"license.html":{}}}],["scope",{"_index":736,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"license.html":{}}}],["scope.request",{"_index":742,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["scripts",{"_index":2388,"title":{},"body":{"license.html":{}}}],["search",{"_index":1285,"title":{},"body":{"controllers/PersonalityController.html":{},"injectables/SitemapService.html":{},"injectables/WikidataService.html":{}}}],["search.map((wbentity",{"_index":1926,"title":{},"body":{"injectables/WikidataService.html":{}}}],["secondarily",{"_index":2305,"title":{},"body":{"license.html":{}}}],["secret",{"_index":181,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"miscellaneous/variables.html":{}}}],["section",{"_index":2446,"title":{},"body":{"license.html":{}}}],["sections",{"_index":2529,"title":{},"body":{"license.html":{}}}],["secure",{"_index":923,"title":{},"body":{"injectables/EmailService.html":{}}}],["see",{"_index":2923,"title":{},"body":{"license.html":{}}}],["seed",{"_index":3076,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seedbuild",{"_index":2122,"title":{},"body":{"index.html":{}}}],["seeded",{"_index":3051,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seeder",{"_index":2120,"title":{},"body":{"index.html":{}}}],["seeding",{"_index":3069,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seedsingleuser",{"_index":3046,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seedsingleuser(userdata",{"_index":3075,"title":{},"body":{"miscellaneous/variables.html":{}}}],["select",{"_index":1357,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["sell",{"_index":2779,"title":{},"body":{"license.html":{}}}],["selling",{"_index":2764,"title":{},"body":{"license.html":{}}}],["semicolon",{"_index":1192,"title":{},"body":{"injectables/ParserService.html":{}}}],["semicolonsentence",{"_index":1197,"title":{},"body":{"injectables/ParserService.html":{}}}],["semicolonsentence.trim",{"_index":1200,"title":{},"body":{"injectables/ParserService.html":{}}}],["semicolonsentences",{"_index":1193,"title":{},"body":{"injectables/ParserService.html":{}}}],["semicolonsentences.length",{"_index":1198,"title":{},"body":{"injectables/ParserService.html":{}}}],["semicolonsentences.map",{"_index":1196,"title":{},"body":{"injectables/ParserService.html":{}}}],["semicolonsentence};`.trim",{"_index":1199,"title":{},"body":{"injectables/ParserService.html":{}}}],["semiconductor",{"_index":2280,"title":{},"body":{"license.html":{}}}],["sendemail",{"_index":886,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendemail(to",{"_index":894,"title":{},"body":{"injectables/EmailService.html":{}}}],["sent",{"_index":3066,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sentence",{"_index":332,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ParserService.html":{}}}],["sentence.props.topclassification",{"_index":813,"title":{},"body":{"injectables/ClaimService.html":{}}}],["sentence.props[\"data",{"_index":345,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{}}}],["sentence.text(this.nlpoptions",{"_index":1190,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentence_content",{"_index":404,"title":{},"body":{"classes/ClaimReview.html":{},"classes/CreateClaimReview.html":{}}}],["sentence_hash",{"_index":405,"title":{},"body":{"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/CreateClaimReview.html":{}}}],["sentencecontent",{"_index":1136,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentencedatahash",{"_index":1204,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentencehash",{"_index":186,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{}}}],["sentenceid",{"_index":1202,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentenceindex",{"_index":816,"title":{},"body":{"injectables/ClaimService.html":{}}}],["sentenceobj",{"_index":342,"title":{},"body":{"controllers/ClaimController.html":{}}}],["sentences",{"_index":1140,"title":{},"body":{"injectables/ParserService.html":{},"dependencies.html":{}}}],["sentences.foreach(sentence",{"_index":1188,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentences.length",{"_index":1181,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentences.map((sentence",{"_index":1184,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentencesequence",{"_index":1125,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentencetext",{"_index":1189,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentencetext.includes",{"_index":1195,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentencetext.split",{"_index":1194,"title":{},"body":{"injectables/ParserService.html":{}}}],["separable",{"_index":2582,"title":{},"body":{"license.html":{}}}],["separate",{"_index":2515,"title":{},"body":{"license.html":{}}}],["separately",{"_index":2512,"title":{},"body":{"license.html":{}}}],["serializefunctions",{"_index":550,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["server",{"_index":1793,"title":{},"body":{"injectables/ViewService.html":{},"license.html":{}}}],["server/.../claim",{"_index":2082,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/.../claim.module.ts",{"_index":2968,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../claim.schema.ts",{"_index":2960,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/.../claim.service.ts",{"_index":2961,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["server/.../email.service.ts",{"_index":2970,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../history.module.ts",{"_index":2971,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../history.schema.ts",{"_index":2083,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/.../language.middleware.ts",{"_index":2085,"title":{},"body":{"miscellaneous/functions.html":{}}}],["server/.../main.ts",{"_index":2969,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../parser.service.ts",{"_index":2973,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../personality.module.ts",{"_index":2974,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../personality.schema.ts",{"_index":2962,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/.../seed.ts",{"_index":2972,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../server.ts",{"_index":2975,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../sitemap.service.ts",{"_index":2966,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../source.module.ts",{"_index":2976,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../source.schema.ts",{"_index":2963,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/.../user.schema.ts",{"_index":2978,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../users.module.ts",{"_index":2977,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../wikidata.module.ts",{"_index":2979,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../wikidata.schema.ts",{"_index":2964,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/.../wikidata.service.ts",{"_index":2967,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/app.module.ts",{"_index":6,"title":{},"body":{"modules/AppModule.html":{}}}],["server/app.module.ts:25",{"_index":12,"title":{},"body":{"modules/AppModule.html":{}}}],["server/auth/auth.module.ts",{"_index":104,"title":{},"body":{"modules/AuthModule.html":{}}}],["server/auth/local",{"_index":1046,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["server/auth/local.serializer.ts",{"_index":1051,"title":{},"body":{"injectables/LocalSerializer.html":{},"coverage.html":{}}}],["server/auth/local.serializer.ts:8",{"_index":1053,"title":{},"body":{"injectables/LocalSerializer.html":{}}}],["server/auth/local.strategy.ts",{"_index":1060,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["server/auth/local.strategy.ts:9",{"_index":1061,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["server/auth/session.guard.ts",{"_index":1432,"title":{},"body":{"guards/SessionGuard.html":{},"coverage.html":{}}}],["server/auth/session.guard.ts:8",{"_index":1436,"title":{},"body":{"guards/SessionGuard.html":{}}}],["server/claim",{"_index":399,"title":{},"body":{"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"classes/CreateClaimReview.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/claim/claim.controller.ts",{"_index":162,"title":{},"body":{"controllers/ClaimController.html":{},"coverage.html":{}}}],["server/claim/claim.controller.ts:114",{"_index":204,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:120",{"_index":226,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:126",{"_index":201,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:131",{"_index":211,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:162",{"_index":185,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:192",{"_index":207,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:224",{"_index":194,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:248",{"_index":219,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:279",{"_index":222,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:41",{"_index":180,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:53",{"_index":188,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:64",{"_index":216,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:94",{"_index":198,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.module.ts",{"_index":389,"title":{},"body":{"modules/ClaimModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/claim/claim.service.ts",{"_index":681,"title":{},"body":{"injectables/ClaimService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["server/claim/claim.service.ts:101",{"_index":726,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:137",{"_index":707,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:153",{"_index":714,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:157",{"_index":716,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:161",{"_index":692,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:17",{"_index":734,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:18",{"_index":689,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:182",{"_index":721,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:211",{"_index":694,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:230",{"_index":723,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:34",{"_index":719,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:56",{"_index":696,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:66",{"_index":698,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/dto/create",{"_index":822,"title":{},"body":{"classes/CreateClaimDTO.html":{},"coverage.html":{}}}],["server/claim/dto/get",{"_index":936,"title":{},"body":{"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"coverage.html":{}}}],["server/claim/dto/update",{"_index":1605,"title":{},"body":{"classes/UpdateClaimDTO.html":{},"coverage.html":{}}}],["server/claim/schemas/claim.schema.ts",{"_index":113,"title":{},"body":{"classes/Claim.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/claim/schemas/claim.schema.ts:16",{"_index":127,"title":{},"body":{"classes/Claim.html":{}}}],["server/claim/schemas/claim.schema.ts:19",{"_index":130,"title":{},"body":{"classes/Claim.html":{}}}],["server/claim/schemas/claim.schema.ts:26",{"_index":126,"title":{},"body":{"classes/Claim.html":{}}}],["server/email/email.module.ts",{"_index":881,"title":{},"body":{"modules/EmailModule.html":{}}}],["server/email/email.service.ts",{"_index":883,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/email/email.service.ts:10",{"_index":888,"title":{},"body":{"injectables/EmailService.html":{}}}],["server/email/email.service.ts:16",{"_index":892,"title":{},"body":{"injectables/EmailService.html":{}}}],["server/email/email.service.ts:27",{"_index":889,"title":{},"body":{"injectables/EmailService.html":{}}}],["server/email/email.service.ts:40",{"_index":898,"title":{},"body":{"injectables/EmailService.html":{}}}],["server/filters/not",{"_index":1099,"title":{},"body":{"classes/NotFoundFilter.html":{},"coverage.html":{}}}],["server/history/history.module.ts",{"_index":989,"title":{},"body":{"modules/HistoryModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/history/history.service.ts",{"_index":994,"title":{},"body":{"injectables/HistoryService.html":{},"coverage.html":{}}}],["server/history/history.service.ts:31",{"_index":1005,"title":{},"body":{"injectables/HistoryService.html":{}}}],["server/history/history.service.ts:58",{"_index":1000,"title":{},"body":{"injectables/HistoryService.html":{}}}],["server/history/history.service.ts:8",{"_index":1017,"title":{},"body":{"injectables/HistoryService.html":{}}}],["server/history/history.service.ts:9",{"_index":998,"title":{},"body":{"injectables/HistoryService.html":{}}}],["server/history/schema/history.schema.ts",{"_index":968,"title":{},"body":{"classes/History.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/history/schema/history.schema.ts:24",{"_index":975,"title":{},"body":{"classes/History.html":{}}}],["server/history/schema/history.schema.ts:29",{"_index":976,"title":{},"body":{"classes/History.html":{}}}],["server/history/schema/history.schema.ts:36",{"_index":978,"title":{},"body":{"classes/History.html":{}}}],["server/history/schema/history.schema.ts:41",{"_index":977,"title":{},"body":{"classes/History.html":{}}}],["server/history/schema/history.schema.ts:47",{"_index":972,"title":{},"body":{"classes/History.html":{}}}],["server/history/schema/history.schema.ts:53",{"_index":971,"title":{},"body":{"classes/History.html":{}}}],["server/home/home.controller.ts",{"_index":1025,"title":{},"body":{"controllers/HomeController.html":{},"coverage.html":{}}}],["server/home/home.controller.ts:17",{"_index":1029,"title":{},"body":{"controllers/HomeController.html":{}}}],["server/home/home.module.ts",{"_index":1043,"title":{},"body":{"modules/HomeModule.html":{}}}],["server/logger.ts",{"_index":1070,"title":{},"body":{"classes/Logger.html":{},"coverage.html":{}}}],["server/logger.ts:13",{"_index":1081,"title":{},"body":{"classes/Logger.html":{}}}],["server/logger.ts:17",{"_index":1085,"title":{},"body":{"classes/Logger.html":{}}}],["server/logger.ts:21",{"_index":1090,"title":{},"body":{"classes/Logger.html":{}}}],["server/logger.ts:25",{"_index":1092,"title":{},"body":{"classes/Logger.html":{}}}],["server/logger.ts:4",{"_index":1078,"title":{},"body":{"classes/Logger.html":{}}}],["server/logger.ts:9",{"_index":1087,"title":{},"body":{"classes/Logger.html":{}}}],["server/main.ts",{"_index":1964,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/middleware/language.middleware.ts",{"_index":1970,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["server/parser/parser.module.ts",{"_index":1120,"title":{},"body":{"modules/ParserModule.html":{}}}],["server/parser/parser.service.ts",{"_index":1122,"title":{},"body":{"injectables/ParserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/parser/parser.service.ts:18",{"_index":1143,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/parser/parser.service.ts:19",{"_index":1144,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/parser/parser.service.ts:20",{"_index":1142,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/parser/parser.service.ts:22",{"_index":1133,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/parser/parser.service.ts:50",{"_index":1139,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/parser/parser.service.ts:70",{"_index":1135,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/parser/parser.service.ts:86",{"_index":1130,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/parser/parser.service.ts:91",{"_index":1131,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/personality/dto/create",{"_index":858,"title":{},"body":{"classes/CreatePersonality.html":{},"coverage.html":{}}}],["server/personality/dto/get",{"_index":959,"title":{},"body":{"classes/GetPersonalities.html":{},"coverage.html":{}}}],["server/personality/personality.controller.ts",{"_index":1220,"title":{},"body":{"controllers/PersonalityController.html":{},"coverage.html":{}}}],["server/personality/personality.controller.ts:105",{"_index":1248,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:130",{"_index":1245,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:32",{"_index":1239,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:38",{"_index":1227,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:54",{"_index":1233,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:64",{"_index":1251,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:70",{"_index":1230,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:80",{"_index":1236,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:90",{"_index":1242,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.module.ts",{"_index":1295,"title":{},"body":{"modules/PersonalityModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/personality/personality.service.ts",{"_index":1300,"title":{},"body":{"injectables/PersonalityService.html":{},"coverage.html":{}}}],["server/personality/personality.service.ts:109",{"_index":1316,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:120",{"_index":1319,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:142",{"_index":1324,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:167",{"_index":1321,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:17",{"_index":1331,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:18",{"_index":1332,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:184",{"_index":1326,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:21",{"_index":1306,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:226",{"_index":1313,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:241",{"_index":1309,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:245",{"_index":1315,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:255",{"_index":1329,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:264",{"_index":1308,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:32",{"_index":1322,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:82",{"_index":1311,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/schemas/personality.schema.ts",{"_index":1206,"title":{},"body":{"classes/Personality.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/personality/schemas/personality.schema.ts:10",{"_index":1208,"title":{},"body":{"classes/Personality.html":{}}}],["server/personality/schemas/personality.schema.ts:13",{"_index":1209,"title":{},"body":{"classes/Personality.html":{}}}],["server/personality/schemas/personality.schema.ts:16",{"_index":1207,"title":{},"body":{"classes/Personality.html":{}}}],["server/personality/schemas/personality.schema.ts:19",{"_index":1212,"title":{},"body":{"classes/Personality.html":{}}}],["server/root/root.controller.ts",{"_index":1408,"title":{},"body":{"controllers/RootController.html":{},"coverage.html":{}}}],["server/root/root.controller.ts:14",{"_index":1413,"title":{},"body":{"controllers/RootController.html":{}}}],["server/root/root.controller.ts:6",{"_index":1417,"title":{},"body":{"controllers/RootController.html":{}}}],["server/seed.ts",{"_index":1976,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/server.ts",{"_index":1977,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/sitemap/sitemap.controller.ts",{"_index":1447,"title":{},"body":{"controllers/SitemapController.html":{},"coverage.html":{}}}],["server/sitemap/sitemap.controller.ts:18",{"_index":1453,"title":{},"body":{"controllers/SitemapController.html":{}}}],["server/sitemap/sitemap.controller.ts:27",{"_index":1457,"title":{},"body":{"controllers/SitemapController.html":{}}}],["server/sitemap/sitemap.module.ts",{"_index":1475,"title":{},"body":{"modules/SitemapModule.html":{}}}],["server/sitemap/sitemap.service.ts",{"_index":1477,"title":{},"body":{"injectables/SitemapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/sitemap/sitemap.service.ts:15",{"_index":1486,"title":{},"body":{"injectables/SitemapService.html":{}}}],["server/sitemap/sitemap.service.ts:17",{"_index":1481,"title":{},"body":{"injectables/SitemapService.html":{}}}],["server/sitemap/sitemap.service.ts:73",{"_index":1484,"title":{},"body":{"injectables/SitemapService.html":{}}}],["server/sitemap/sitemap.service.ts:9",{"_index":1479,"title":{},"body":{"injectables/SitemapService.html":{}}}],["server/source/schemas/source.schema.ts",{"_index":1523,"title":{},"body":{"classes/Source.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/source/schemas/source.schema.ts:10",{"_index":1527,"title":{},"body":{"classes/Source.html":{}}}],["server/source/schemas/source.schema.ts:24",{"_index":1525,"title":{},"body":{"classes/Source.html":{}}}],["server/source/schemas/source.schema.ts:27",{"_index":1526,"title":{},"body":{"classes/Source.html":{}}}],["server/source/schemas/source.schema.ts:37",{"_index":1528,"title":{},"body":{"classes/Source.html":{}}}],["server/source/schemas/source.schema.ts:43",{"_index":1531,"title":{},"body":{"classes/Source.html":{}}}],["server/source/schemas/source.schema.ts:50",{"_index":1532,"title":{},"body":{"classes/Source.html":{}}}],["server/source/source.controller.ts",{"_index":1541,"title":{},"body":{"controllers/SourceController.html":{},"coverage.html":{}}}],["server/source/source.controller.ts:10",{"_index":1546,"title":{},"body":{"controllers/SourceController.html":{}}}],["server/source/source.module.ts",{"_index":1560,"title":{},"body":{"modules/SourceModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/source/source.service.ts",{"_index":1565,"title":{},"body":{"injectables/SourceService.html":{},"coverage.html":{}}}],["server/source/source.service.ts:12",{"_index":1570,"title":{},"body":{"injectables/SourceService.html":{}}}],["server/source/source.service.ts:20",{"_index":1571,"title":{},"body":{"injectables/SourceService.html":{}}}],["server/source/source.service.ts:7",{"_index":1568,"title":{},"body":{"injectables/SourceService.html":{}}}],["server/stats/stats.controller.ts",{"_index":1582,"title":{},"body":{"controllers/StatsController.html":{},"coverage.html":{}}}],["server/stats/stats.controller.ts:10",{"_index":1585,"title":{},"body":{"controllers/StatsController.html":{}}}],["server/stats/stats.module.ts",{"_index":1592,"title":{},"body":{"modules/StatsModule.html":{}}}],["server/stats/stats.service.ts",{"_index":1594,"title":{},"body":{"injectables/StatsService.html":{},"coverage.html":{}}}],["server/stats/stats.service.ts:14",{"_index":1597,"title":{},"body":{"injectables/StatsService.html":{}}}],["server/stats/stats.service.ts:7",{"_index":1596,"title":{},"body":{"injectables/StatsService.html":{}}}],["server/users/schemas/user.schema.ts",{"_index":1609,"title":{},"body":{"classes/User.html":{},"interfaces/UserDocument.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/users/schemas/user.schema.ts:11",{"_index":1613,"title":{},"body":{"classes/User.html":{}}}],["server/users/schemas/user.schema.ts:14",{"_index":1611,"title":{},"body":{"classes/User.html":{}}}],["server/users/schemas/user.schema.ts:17",{"_index":1612,"title":{},"body":{"classes/User.html":{}}}],["server/users/schemas/user.schema.ts:5",{"_index":1618,"title":{},"body":{"interfaces/UserDocument.html":{}}}],["server/users/users.controller.ts",{"_index":1620,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["server/users/users.controller.ts:26",{"_index":1628,"title":{},"body":{"controllers/UsersController.html":{}}}],["server/users/users.controller.ts:32",{"_index":1631,"title":{},"body":{"controllers/UsersController.html":{}}}],["server/users/users.controller.ts:40",{"_index":1625,"title":{},"body":{"controllers/UsersController.html":{}}}],["server/users/users.controller.ts:68",{"_index":1633,"title":{},"body":{"controllers/UsersController.html":{}}}],["server/users/users.controller.ts:84",{"_index":1636,"title":{},"body":{"controllers/UsersController.html":{}}}],["server/users/users.module.ts",{"_index":1675,"title":{},"body":{"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/users/users.service.ts",{"_index":1682,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["server/users/users.service.ts:13",{"_index":1686,"title":{},"body":{"injectables/UsersService.html":{}}}],["server/users/users.service.ts:17",{"_index":1690,"title":{},"body":{"injectables/UsersService.html":{}}}],["server/users/users.service.ts:25",{"_index":1688,"title":{},"body":{"injectables/UsersService.html":{}}}],["server/users/users.service.ts:31",{"_index":1685,"title":{},"body":{"injectables/UsersService.html":{}}}],["server/users/users.service.ts:8",{"_index":1683,"title":{},"body":{"injectables/UsersService.html":{}}}],["server/util.ts",{"_index":1703,"title":{},"body":{"injectables/UtilService.html":{},"coverage.html":{}}}],["server/util.ts:26",{"_index":1712,"title":{},"body":{"injectables/UtilService.html":{}}}],["server/util.ts:5",{"_index":1708,"title":{},"body":{"injectables/UtilService.html":{}}}],["server/view/view.controller.ts",{"_index":1740,"title":{},"body":{"controllers/ViewController.html":{},"coverage.html":{}}}],["server/view/view.controller.ts:10",{"_index":1754,"title":{},"body":{"controllers/ViewController.html":{}}}],["server/view/view.controller.ts:20",{"_index":1768,"title":{},"body":{"controllers/ViewController.html":{}}}],["server/view/view.controller.ts:30",{"_index":1767,"title":{},"body":{"controllers/ViewController.html":{}}}],["server/view/view.controller.ts:40",{"_index":1771,"title":{},"body":{"controllers/ViewController.html":{}}}],["server/view/view.controller.ts:50",{"_index":1752,"title":{},"body":{"controllers/ViewController.html":{}}}],["server/view/view.controller.ts:60",{"_index":1749,"title":{},"body":{"controllers/ViewController.html":{}}}],["server/view/view.controller.ts:74",{"_index":1757,"title":{},"body":{"controllers/ViewController.html":{}}}],["server/view/view.module.ts",{"_index":1790,"title":{},"body":{"modules/ViewModule.html":{}}}],["server/view/view.service.ts",{"_index":1792,"title":{},"body":{"injectables/ViewService.html":{},"coverage.html":{}}}],["server/view/view.service.ts:12",{"_index":1798,"title":{},"body":{"injectables/ViewService.html":{}}}],["server/view/view.service.ts:24",{"_index":1796,"title":{},"body":{"injectables/ViewService.html":{}}}],["server/view/view.service.ts:7",{"_index":1800,"title":{},"body":{"injectables/ViewService.html":{}}}],["server/view/view.service.ts:8",{"_index":1795,"title":{},"body":{"injectables/ViewService.html":{}}}],["server/wikidata/schemas/wikidata.schema.ts",{"_index":1811,"title":{},"body":{"classes/WikidataCache.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/wikidata/schemas/wikidata.schema.ts:12",{"_index":1815,"title":{},"body":{"classes/WikidataCache.html":{}}}],["server/wikidata/schemas/wikidata.schema.ts:15",{"_index":1816,"title":{},"body":{"classes/WikidataCache.html":{}}}],["server/wikidata/schemas/wikidata.schema.ts:18",{"_index":1814,"title":{},"body":{"classes/WikidataCache.html":{}}}],["server/wikidata/schemas/wikidata.schema.ts:9",{"_index":1817,"title":{},"body":{"classes/WikidataCache.html":{}}}],["server/wikidata/wikidata.module.ts",{"_index":1825,"title":{},"body":{"modules/WikidataModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/wikidata/wikidata.service.ts",{"_index":1833,"title":{},"body":{"injectables/WikidataService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/wikidata/wikidata.service.ts:104",{"_index":1853,"title":{},"body":{"injectables/WikidataService.html":{}}}],["server/wikidata/wikidata.service.ts:111",{"_index":1846,"title":{},"body":{"injectables/WikidataService.html":{}}}],["server/wikidata/wikidata.service.ts:125",{"_index":1855,"title":{},"body":{"injectables/WikidataService.html":{}}}],["server/wikidata/wikidata.service.ts:153",{"_index":1850,"title":{},"body":{"injectables/WikidataService.html":{}}}],["server/wikidata/wikidata.service.ts:16",{"_index":1842,"title":{},"body":{"injectables/WikidataService.html":{}}}],["server/wikidata/wikidata.service.ts:22",{"_index":1848,"title":{},"body":{"injectables/WikidataService.html":{}}}],["server/wikidata/wikidata.service.ts:39",{"_index":1857,"title":{},"body":{"injectables/WikidataService.html":{}}}],["server/wikidata/wikidata.service.ts:55",{"_index":1844,"title":{},"body":{"injectables/WikidataService.html":{}}}],["serves",{"_index":2372,"title":{},"body":{"license.html":{}}}],["service",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"license.html":{}}}],["servicerunner",{"_index":1978,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["servicing",{"_index":2874,"title":{},"body":{"license.html":{}}}],["session",{"_index":110,"title":{},"body":{"modules/AuthModule.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["sessionguard",{"_index":242,"title":{"guards/SessionGuard.html":{}},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/PersonalityController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["shall",{"_index":2451,"title":{},"body":{"license.html":{}}}],["share",{"_index":2062,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["shared",{"_index":2397,"title":{},"body":{"license.html":{}}}],["short",{"_index":2928,"title":{},"body":{"license.html":{}}}],["show",{"_index":2203,"title":{},"body":{"license.html":{}}}],["show404",{"_index":1744,"title":{},"body":{"controllers/ViewController.html":{}}}],["show404(@req",{"_index":1786,"title":{},"body":{"controllers/ViewController.html":{}}}],["show404(req",{"_index":1755,"title":{},"body":{"controllers/ViewController.html":{}}}],["showaboutpage",{"_index":1745,"title":{},"body":{"controllers/ViewController.html":{}}}],["showaboutpage(@req",{"_index":1778,"title":{},"body":{"controllers/ViewController.html":{}}}],["showaboutpage(req",{"_index":1765,"title":{},"body":{"controllers/ViewController.html":{}}}],["showhome",{"_index":1026,"title":{},"body":{"controllers/HomeController.html":{},"controllers/ViewController.html":{}}}],["showhome(@req",{"_index":1033,"title":{},"body":{"controllers/HomeController.html":{},"controllers/ViewController.html":{}}}],["showhome(req",{"_index":1027,"title":{},"body":{"controllers/HomeController.html":{},"controllers/ViewController.html":{}}}],["showprivacypolicypage",{"_index":1746,"title":{},"body":{"controllers/ViewController.html":{}}}],["showprivacypolicypage(@req",{"_index":1780,"title":{},"body":{"controllers/ViewController.html":{}}}],["showprivacypolicypage(req",{"_index":1769,"title":{},"body":{"controllers/ViewController.html":{}}}],["sign",{"_index":2941,"title":{},"body":{"license.html":{}}}],["significant",{"_index":2613,"title":{},"body":{"license.html":{}}}],["similar",{"_index":2466,"title":{},"body":{"license.html":{}}}],["simultaneously",{"_index":2833,"title":{},"body":{"license.html":{}}}],["single",{"_index":2805,"title":{},"body":{"license.html":{}}}],["sistema",{"_index":3061,"title":{},"body":{"miscellaneous/variables.html":{}}}],["site",{"_index":1512,"title":{},"body":{"injectables/SitemapService.html":{}}}],["sitekey",{"_index":368,"title":{},"body":{"controllers/ClaimController.html":{}}}],["sitelinkname",{"_index":1901,"title":{},"body":{"injectables/WikidataService.html":{}}}],["sitelinkname.match(/^(.*)wiki$/)[1",{"_index":1905,"title":{},"body":{"injectables/WikidataService.html":{}}}],["sitemap",{"_index":1456,"title":{},"body":{"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"dependencies.html":{}}}],["sitemap.controller",{"_index":1476,"title":{},"body":{"modules/SitemapModule.html":{}}}],["sitemap.service",{"_index":1460,"title":{},"body":{"controllers/SitemapController.html":{},"modules/SitemapModule.html":{}}}],["sitemap/sitemap.module",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["sitemapcontroller",{"_index":1446,"title":{"controllers/SitemapController.html":{}},"body":{"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"coverage.html":{}}}],["sitemapmodule",{"_index":61,"title":{"modules/SitemapModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SitemapModule.html":{},"modules.html":{},"overview.html":{}}}],["sitemapservice",{"_index":1459,"title":{"injectables/SitemapService.html":{}},"body":{"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"coverage.html":{},"overview.html":{}}}],["sitemapstream",{"_index":1487,"title":{},"body":{"injectables/SitemapService.html":{}}}],["sitemapstream.end",{"_index":1514,"title":{},"body":{"injectables/SitemapService.html":{}}}],["sitemapstream.write(site",{"_index":1513,"title":{},"body":{"injectables/SitemapService.html":{}}}],["sitemapxml",{"_index":1465,"title":{},"body":{"controllers/SitemapController.html":{}}}],["sites",{"_index":1492,"title":{},"body":{"injectables/SitemapService.html":{}}}],["sites.push",{"_index":1505,"title":{},"body":{"injectables/SitemapService.html":{}}}],["size",{"_index":1337,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["skip(page",{"_index":556,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SourceService.html":{}}}],["slice",{"_index":1707,"title":{},"body":{"injectables/UtilService.html":{}}}],["slug",{"_index":118,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimService.html":{},"classes/Personality.html":{},"injectables/PersonalityService.html":{}}}],["slugify",{"_index":649,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{},"dependencies.html":{}}}],["slugify(claim.title",{"_index":660,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["slugify(newpersonalitybody.name",{"_index":1387,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["slugify(personality.name",{"_index":1346,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["social",{"_index":2064,"title":{},"body":{"dependencies.html":{}}}],["soft",{"_index":708,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["softdelete",{"_index":139,"title":{},"body":{"classes/Claim.html":{},"injectables/ClaimService.html":{},"classes/Personality.html":{},"injectables/PersonalityService.html":{},"dependencies.html":{}}}],["softdeleteplugin",{"_index":138,"title":{},"body":{"classes/Claim.html":{},"classes/Personality.html":{}}}],["software",{"_index":2136,"title":{},"body":{"license.html":{}}}],["sold",{"_index":2594,"title":{},"body":{"license.html":{}}}],["sole",{"_index":2430,"title":{},"body":{"license.html":{}}}],["solely",{"_index":2443,"title":{},"body":{"license.html":{}}}],["sonarcloud",{"_index":753,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{}}}],["sort",{"_index":544,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SourceService.html":{}}}],["source",{"_index":4,"title":{"classes/Source.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"modules/SitemapModule.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/UpdateClaimDTO.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"license.html":{}}}],["source.controller",{"_index":1562,"title":{},"body":{"modules/SourceModule.html":{}}}],["source.name",{"_index":1564,"title":{},"body":{"modules/SourceModule.html":{},"miscellaneous/variables.html":{}}}],["source.save",{"_index":1578,"title":{},"body":{"injectables/SourceService.html":{}}}],["source.service",{"_index":1547,"title":{},"body":{"controllers/SourceController.html":{},"modules/SourceModule.html":{}}}],["source/source.module",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{}}}],["source/source.service",{"_index":539,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{}}}],["sourcecontroller",{"_index":1540,"title":{"controllers/SourceController.html":{}},"body":{"controllers/SourceController.html":{},"modules/SourceModule.html":{},"coverage.html":{}}}],["sourcedocument",{"_index":1533,"title":{},"body":{"classes/Source.html":{},"injectables/SourceService.html":{},"miscellaneous/typealiases.html":{}}}],["sourcemodel",{"_index":1563,"title":{},"body":{"modules/SourceModule.html":{},"injectables/SourceService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sourcemodule",{"_index":38,"title":{"modules/SourceModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/SourceModule.html":{},"modules.html":{},"overview.html":{}}}],["sources",{"_index":383,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"controllers/SourceController.html":{}}}],["sources.length",{"_index":1556,"title":{},"body":{"controllers/SourceController.html":{}}}],["sourceschema",{"_index":1538,"title":{},"body":{"classes/Source.html":{},"modules/SourceModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sourcesclaimpage",{"_index":176,"title":{},"body":{"controllers/ClaimController.html":{}}}],["sourcesclaimpage(@req",{"_index":382,"title":{},"body":{"controllers/ClaimController.html":{}}}],["sourcesclaimpage(req",{"_index":220,"title":{},"body":{"controllers/ClaimController.html":{}}}],["sourceservice",{"_index":491,"title":{"injectables/SourceService.html":{}},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"controllers/SourceController.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"coverage.html":{},"overview.html":{}}}],["spare",{"_index":2544,"title":{},"body":{"license.html":{}}}],["sparse",{"_index":1211,"title":{},"body":{"classes/Personality.html":{}}}],["speak",{"_index":2172,"title":{},"body":{"license.html":{}}}],["special",{"_index":667,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{},"license.html":{}}}],["specifc",{"_index":792,"title":{},"body":{"injectables/ClaimService.html":{}}}],["specific",{"_index":2379,"title":{},"body":{"license.html":{}}}],["specifically",{"_index":2401,"title":{},"body":{"license.html":{}}}],["specified",{"_index":2355,"title":{},"body":{"license.html":{}}}],["specifies",{"_index":2853,"title":{},"body":{"license.html":{}}}],["specify",{"_index":2857,"title":{},"body":{"license.html":{}}}],["speech",{"_index":602,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["spirit",{"_index":2846,"title":{},"body":{"license.html":{}}}],["stand",{"_index":2251,"title":{},"body":{"license.html":{}}}],["standard",{"_index":2351,"title":{},"body":{"license.html":{}}}],["standards",{"_index":2354,"title":{},"body":{"license.html":{}}}],["start",{"_index":2916,"title":{},"body":{"license.html":{}}}],["started",{"_index":2089,"title":{"index.html":{},"license.html":{}},"body":{}}],["starters",{"_index":1163,"title":{},"body":{"injectables/ParserService.html":{}}}],["starts",{"_index":2929,"title":{},"body":{"license.html":{}}}],["startup",{"_index":2106,"title":{},"body":{"index.html":{}}}],["state",{"_index":499,"title":{},"body":{"injectables/ClaimReviewService.html":{},"license.html":{}}}],["state1",{"_index":502,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["state2",{"_index":503,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["state[acc",{"_index":574,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["state[classification",{"_index":569,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["state[topclassification",{"_index":576,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["stated",{"_index":2415,"title":{},"body":{"license.html":{}}}],["statement",{"_index":2696,"title":{},"body":{"license.html":{}}}],["statements",{"_index":1943,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":2260,"title":{},"body":{"license.html":{}}}],["static",{"_index":8,"title":{},"body":{"modules/AppModule.html":{}}}],["stating",{"_index":2488,"title":{},"body":{"license.html":{}}}],["stats",{"_index":349,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{},"controllers/HomeController.html":{},"injectables/PersonalityService.html":{}}}],["stats.controller",{"_index":1593,"title":{},"body":{"modules/StatsModule.html":{}}}],["stats.service",{"_index":1586,"title":{},"body":{"controllers/StatsController.html":{},"modules/StatsModule.html":{}}}],["stats/stats.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/HomeModule.html":{}}}],["stats/stats.service",{"_index":1031,"title":{},"body":{"controllers/HomeController.html":{}}}],["statscontroller",{"_index":1581,"title":{"controllers/StatsController.html":{}},"body":{"controllers/StatsController.html":{},"modules/StatsModule.html":{},"coverage.html":{}}}],["statsmodule",{"_index":40,"title":{"modules/StatsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HomeModule.html":{},"modules/StatsModule.html":{},"modules.html":{},"overview.html":{}}}],["statsservice",{"_index":1030,"title":{"injectables/StatsService.html":{}},"body":{"controllers/HomeController.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"coverage.html":{},"overview.html":{}}}],["status",{"_index":1414,"title":{},"body":{"controllers/RootController.html":{},"license.html":{}}}],["step",{"_index":2125,"title":{},"body":{"index.html":{}}}],["steps",{"_index":2208,"title":{},"body":{"license.html":{}}}],["storage",{"_index":2522,"title":{},"body":{"license.html":{}}}],["store",{"_index":3009,"title":{},"body":{"miscellaneous/variables.html":{}}}],["strategy",{"_index":1062,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/SitemapService.html":{},"controllers/ViewController.html":{}}}],["streamtopromise",{"_index":1488,"title":{},"body":{"injectables/SitemapService.html":{}}}],["streamtopromise(sitemapstream",{"_index":1515,"title":{},"body":{"injectables/SitemapService.html":{}}}],["strict",{"_index":665,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{}}}],["string",{"_index":128,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/Logger.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"classes/Source.html":{},"injectables/SourceService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{}}}],["strip",{"_index":666,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/PersonalityService.html":{}}}],["styled",{"_index":2077,"title":{},"body":{"dependencies.html":{}}}],["subdividing",{"_index":2746,"title":{},"body":{"license.html":{}}}],["subject",{"_index":895,"title":{},"body":{"injectables/EmailService.html":{},"license.html":{}}}],["sublicenses",{"_index":2775,"title":{},"body":{"license.html":{}}}],["sublicensing",{"_index":2445,"title":{},"body":{"license.html":{}}}],["submitsitemap",{"_index":1449,"title":{},"body":{"controllers/SitemapController.html":{},"injectables/SitemapService.html":{}}}],["submitsitemap(@request",{"_index":1469,"title":{},"body":{"controllers/SitemapController.html":{}}}],["submitsitemap(hostname",{"_index":1483,"title":{},"body":{"injectables/SitemapService.html":{}}}],["submitsitemap(req",{"_index":1454,"title":{},"body":{"controllers/SitemapController.html":{}}}],["submitted",{"_index":1518,"title":{},"body":{"injectables/SitemapService.html":{}}}],["submitting",{"_index":1519,"title":{},"body":{"injectables/SitemapService.html":{}}}],["subprograms",{"_index":2400,"title":{},"body":{"license.html":{}}}],["subroutine",{"_index":2944,"title":{},"body":{"license.html":{}}}],["subsection",{"_index":2554,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":2608,"title":{},"body":{"license.html":{}}}],["substantially",{"_index":2249,"title":{},"body":{"license.html":{}}}],["success",{"_index":1664,"title":{},"body":{"controllers/UsersController.html":{}}}],["successful",{"_index":1665,"title":{},"body":{"controllers/UsersController.html":{}}}],["successfully",{"_index":1279,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["such",{"_index":2196,"title":{},"body":{"license.html":{}}}],["sue",{"_index":2787,"title":{},"body":{"license.html":{}}}],["suffice",{"_index":2621,"title":{},"body":{"license.html":{}}}],["suffixes",{"_index":1161,"title":{},"body":{"injectables/ParserService.html":{}}}],["sum",{"_index":543,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["super",{"_index":1066,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["supplement",{"_index":2651,"title":{},"body":{"license.html":{}}}],["support",{"_index":2496,"title":{},"body":{"license.html":{},"modules.html":{}}}],["supports",{"_index":2563,"title":{},"body":{"license.html":{}}}],["sure",{"_index":2163,"title":{},"body":{"license.html":{}}}],["surrender",{"_index":2189,"title":{},"body":{"license.html":{}}}],["survive",{"_index":2695,"title":{},"body":{"license.html":{}}}],["sustained",{"_index":2889,"title":{},"body":{"license.html":{}}}],["svg",{"_index":1990,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["system",{"_index":2361,"title":{},"body":{"license.html":{}}}],["systematic",{"_index":2236,"title":{},"body":{"license.html":{}}}],["t",{"_index":1711,"title":{},"body":{"injectables/UtilService.html":{}}}],["table",{"_index":1985,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1984,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":409,"title":{},"body":{"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/Source.html":{}}}],["take",{"_index":2154,"title":{},"body":{"license.html":{}}}],["tangible",{"_index":2588,"title":{},"body":{"license.html":{}}}],["target",{"_index":1007,"title":{},"body":{"injectables/HistoryService.html":{}}}],["target(claim",{"_index":1008,"title":{},"body":{"injectables/HistoryService.html":{}}}],["targetid",{"_index":157,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{}}}],["targetmodel",{"_index":677,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{},"classes/Source.html":{},"miscellaneous/enumerations.html":{}}}],["targetmodel.claim",{"_index":772,"title":{},"body":{"injectables/ClaimService.html":{}}}],["targetmodel.personality",{"_index":1352,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["technological",{"_index":2454,"title":{},"body":{"license.html":{}}}],["tells",{"_index":2338,"title":{},"body":{"license.html":{}}}],["template",{"_index":913,"title":{},"body":{"injectables/EmailService.html":{}}}],["template/email.html",{"_index":893,"title":{},"body":{"injectables/EmailService.html":{}}}],["templateoptions",{"_index":897,"title":{},"body":{"injectables/EmailService.html":{}}}],["templatepath",{"_index":891,"title":{},"body":{"injectables/EmailService.html":{}}}],["templates/userseed.html",{"_index":3065,"title":{},"body":{"miscellaneous/variables.html":{}}}],["term",{"_index":2413,"title":{},"body":{"license.html":{}}}],["terminal",{"_index":2927,"title":{},"body":{"license.html":{}}}],["terminate",{"_index":2702,"title":{},"body":{"license.html":{}}}],["terminated",{"_index":2724,"title":{},"body":{"license.html":{}}}],["terminates",{"_index":2710,"title":{},"body":{"license.html":{}}}],["termination",{"_index":2699,"title":{},"body":{"license.html":{}}}],["terms",{"_index":2204,"title":{},"body":{"license.html":{}}}],["text",{"_index":896,"title":{},"body":{"injectables/EmailService.html":{},"injectables/ParserService.html":{}}}],["text/xml",{"_index":1452,"title":{},"body":{"controllers/SitemapController.html":{}}}],["then(([claims",{"_index":289,"title":{},"body":{"controllers/ClaimController.html":{}}}],["then(([personalities",{"_index":1405,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["then(([reviews",{"_index":327,"title":{},"body":{"controllers/ClaimController.html":{}}}],["then(([stats",{"_index":339,"title":{},"body":{"controllers/ClaimController.html":{}}}],["then((response",{"_index":1924,"title":{},"body":{"injectables/WikidataService.html":{}}}],["then((sources",{"_index":1554,"title":{},"body":{"controllers/SourceController.html":{}}}],["then((values",{"_index":1601,"title":{},"body":{"injectables/StatsService.html":{}}}],["then(async",{"_index":3049,"title":{},"body":{"miscellaneous/variables.html":{}}}],["therefore",{"_index":2190,"title":{},"body":{"license.html":{}}}],["things",{"_index":2181,"title":{},"body":{"license.html":{}}}],["third",{"_index":2480,"title":{},"body":{"license.html":{}}}],["this._checkcaptcharesponse",{"_index":303,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["this._getclaim",{"_index":778,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this._getclaim({_id",{"_index":794,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this._getclaim({personality",{"_index":795,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this._getsentencebyhashandclaimid(sentencehash",{"_index":361,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this._reviewsbysentencehashaggregated(sentencehash",{"_index":555,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["this._reviewsbysentencehashaggregated(sentencehash).count",{"_index":553,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["this._topclassificationaccumulator",{"_index":548,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["this._verifyinputsquery(getclaimsdto",{"_index":285,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.calculateoverallstats(claim",{"_index":809,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimmodel(claim",{"_index":763,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimmodel.countdocuments().where(query",{"_index":759,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimmodel.find(query",{"_index":746,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimmodel.findone(match",{"_index":796,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimmodel.softdelete",{"_index":789,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimreview.agreggateclassification",{"_index":1380,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.claimreviewmodel(claimreview",{"_index":587,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["this.claimreviewmodel.aggregate",{"_index":541,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["this.claimreviewmodel.countdocuments().where(query",{"_index":545,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["this.claimreviewmodel.findone",{"_index":552,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["this.claimreviewservice.count",{"_index":1600,"title":{},"body":{"injectables/StatsService.html":{}}}],["this.claimreviewservice.countreviewsbysentencehash(sentencehash",{"_index":326,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimreviewservice.create",{"_index":456,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["this.claimreviewservice.delete(params.id",{"_index":463,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["this.claimreviewservice.getbyid(params.id",{"_index":460,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["this.claimreviewservice.getreviewsbyclaimid",{"_index":802,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/SitemapService.html":{}}}],["this.claimreviewservice.getreviewsbysentencehash",{"_index":324,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimreviewservice.getreviewstatsbyclaimid",{"_index":807,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimreviewservice.getreviewstatsbysentencehash(sentencehash",{"_index":336,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimreviewservice.getuserreviewbysentencehash",{"_index":337,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimrevisionmodel(claim",{"_index":672,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["this.claimrevisionmodel.findone",{"_index":655,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["this.claimrevisionservice.create(claim._id",{"_index":782,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimrevisionservice.create(newclaim._id",{"_index":764,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimservice.count",{"_index":1598,"title":{},"body":{"injectables/StatsService.html":{}}}],["this.claimservice.count(queryinputs",{"_index":288,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimservice.create(createclaimdto",{"_index":312,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimservice.delete(claimid",{"_index":321,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimservice.getbyid(claimid",{"_index":315,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimservice.getbypersonalityidandclaimslug",{"_index":359,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimservice.listall",{"_index":287,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimservice.listall(0",{"_index":1507,"title":{},"body":{"injectables/SitemapService.html":{}}}],["this.claimservice.update(claimid",{"_index":318,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.configservice.get(\"recaptcha_secret",{"_index":301,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["this.configservice.get(\"recaptcha_sitekey",{"_index":369,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.configservice.get(\"smtp_email_pass",{"_index":928,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get(\"smtp_email_user",{"_index":926,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get(\"smtp_host",{"_index":920,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get(\"smtp_port",{"_index":922,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get(\"smtp_secure",{"_index":924,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get(\"web_url",{"_index":916,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.count(queryinputs",{"_index":1404,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.createparagraphid",{"_index":1179,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.createsentenceid",{"_index":1203,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.createtransport",{"_index":929,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.extractclaimwithtextsummary(personality.claims",{"_index":1378,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.extractproperties",{"_index":1880,"title":{},"body":{"injectables/WikidataService.html":{}}}],["this.extractvalue",{"_index":1888,"title":{},"body":{"injectables/WikidataService.html":{}}}],["this.extractvalue(wikidata",{"_index":1885,"title":{},"body":{"injectables/WikidataService.html":{}}}],["this.getbyid(claimid",{"_index":786,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.getbyid(personalityid",{"_index":1388,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.getbyid(userid",{"_index":1697,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getcommonsthumburl(filename",{"_index":1900,"title":{},"body":{"injectables/WikidataService.html":{}}}],["this.getemailbody(templateoptions",{"_index":930,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.getreviewstats(personality._id",{"_index":1377,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.getsitelinkname(language",{"_index":1902,"title":{},"body":{"injectables/WikidataService.html":{}}}],["this.history.createhistory(history",{"_index":1353,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.history.gethistoryparams",{"_index":1350,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.historymodel(data",{"_index":1022,"title":{},"body":{"injectables/HistoryService.html":{}}}],["this.historyservice.createhistory(history",{"_index":774,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.historyservice.gethistoryparams",{"_index":770,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.httpservice.post",{"_index":267,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["this.listall",{"_index":1402,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.logger",{"_index":1093,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.error(\"failed",{"_index":1809,"title":{},"body":{"injectables/ViewService.html":{}}}],["this.logger.error(`error/recaptcha",{"_index":306,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.logger.error(e",{"_index":679,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"controllers/UsersController.html":{}}}],["this.logger.error(err",{"_index":1274,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["this.logger.error(error",{"_index":297,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["this.logger.error(message",{"_index":1522,"title":{},"body":{"injectables/SitemapService.html":{}}}],["this.logger.log",{"_index":293,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/PersonalityService.html":{},"controllers/SourceController.html":{}}}],["this.logger.log(\"debug",{"_index":1095,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.log(\"error",{"_index":1096,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.log(\"info",{"_index":1094,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.log(\"verbose",{"_index":1097,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.log(\"warn",{"_index":1098,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.log(`found",{"_index":1358,"title":{},"body":{"injectables/PersonalityService.html":{},"injectables/UsersService.html":{}}}],["this.logger.log(`got",{"_index":1381,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.logger.log(`sending",{"_index":931,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.logger.log(`updated",{"_index":1393,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.logger.log(`user",{"_index":1701,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.optionstoupdate",{"_index":654,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{}}}],["this.paragraphsequence",{"_index":1171,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.paragraphsequence}${this.sentencesequence}${sentencecontent",{"_index":1205,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.parserservice.parse(claim.content",{"_index":658,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["this.parsesentence(sentence",{"_index":1185,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.personalitymodel(personality",{"_index":1348,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.aggregate",{"_index":1335,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.countdocuments().where(query",{"_index":1395,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.find(query",{"_index":1338,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.findbyid",{"_index":1356,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.findbyid(id",{"_index":1379,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.findbyidandupdate",{"_index":1392,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.findone",{"_index":1360,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.softdelete",{"_index":1394,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalityservice",{"_index":1270,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["this.personalityservice.combinedlistall",{"_index":1035,"title":{},"body":{"controllers/HomeController.html":{}}}],["this.personalityservice.combinedlistall(getpersonalities",{"_index":1257,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["this.personalityservice.count",{"_index":1599,"title":{},"body":{"injectables/StatsService.html":{}}}],["this.personalityservice.create(createpersonality",{"_index":1259,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["this.personalityservice.delete(personalityid",{"_index":1278,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["this.personalityservice.getbyslug",{"_index":357,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{}}}],["this.personalityservice.listall",{"_index":1503,"title":{},"body":{"injectables/SitemapService.html":{}}}],["this.personalityservice.update(personalityid",{"_index":1276,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["this.postprocess",{"_index":757,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.postprocess(claim.toobject",{"_index":799,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.postprocess(personality",{"_index":1344,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.postprocess(personality.toobject",{"_index":1359,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.postprocesssentences(paragraph.sentences",{"_index":1180,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.req.user",{"_index":769,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["this.requestproperties(params",{"_index":1865,"title":{},"body":{"injectables/WikidataService.html":{}}}],["this.sentencesequence",{"_index":1172,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.server",{"_index":1803,"title":{},"body":{"injectables/ViewService.html":{}}}],["this.server.prepare",{"_index":1808,"title":{},"body":{"injectables/ViewService.html":{}}}],["this.sitemapservice.getsitemap",{"_index":1466,"title":{},"body":{"controllers/SitemapController.html":{}}}],["this.sitemapservice.submitsitemap",{"_index":1470,"title":{},"body":{"controllers/SitemapController.html":{}}}],["this.sourcemodel(data",{"_index":1577,"title":{},"body":{"injectables/SourceService.html":{}}}],["this.sourcemodel.find",{"_index":1580,"title":{},"body":{"injectables/SourceService.html":{}}}],["this.sourceservice",{"_index":1552,"title":{},"body":{"controllers/SourceController.html":{}}}],["this.sourceservice.create",{"_index":675,"title":{},"body":{"injectables/ClaimRevisionService.html":{}}}],["this.statsservice.gethomestats",{"_index":1039,"title":{},"body":{"controllers/HomeController.html":{},"controllers/StatsController.html":{}}}],["this.transformcontentobject",{"_index":805,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.usermodel(user",{"_index":1694,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.find().exec",{"_index":1692,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyid(userid",{"_index":1696,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.register",{"_index":1693,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice",{"_index":1660,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.util.formatstats(reviews",{"_index":546,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/PersonalityService.html":{}}}],["this.util.mergeobjectsinunique",{"_index":1342,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.verifyinputsquery(query",{"_index":1401,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.viewservice",{"_index":363,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["this.wikidata.fetchproperties",{"_index":1369,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.wikidata.querywikibaseentities",{"_index":1340,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.wikidatacache",{"_index":1867,"title":{},"body":{"injectables/WikidataService.html":{}}}],["this.wikidatacache.findone",{"_index":1861,"title":{},"body":{"injectables/WikidataService.html":{}}}],["those",{"_index":2247,"title":{},"body":{"license.html":{}}}],["though",{"_index":2653,"title":{},"body":{"license.html":{}}}],["threatened",{"_index":2257,"title":{},"body":{"license.html":{}}}],["three",{"_index":2542,"title":{},"body":{"license.html":{}}}],["throttlerguard",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule.forroot",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["through",{"_index":756,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"license.html":{}}}],["throw",{"_index":311,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimRevisionService.html":{},"guards/SessionGuard.html":{},"controllers/UsersController.html":{}}}],["thus",{"_index":2436,"title":{},"body":{"license.html":{}}}],["ties",{"_index":575,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["time",{"_index":2720,"title":{},"body":{"license.html":{}}}],["title",{"_index":592,"title":{},"body":{"classes/ClaimRevision.html":{},"classes/CreateClaimDTO.html":{},"injectables/PersonalityService.html":{}}}],["titles",{"_index":1931,"title":{},"body":{"injectables/WikidataService.html":{}}}],["todo",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"modules/ClaimRevisionModule.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{}}}],["tojson",{"_index":146,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Personality.html":{}}}],["toobject",{"_index":144,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Personality.html":{}}}],["tools",{"_index":2391,"title":{},"body":{"license.html":{}}}],["topclassification",{"_index":547,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{}}}],["topromise",{"_index":270,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["total",{"_index":1709,"title":{},"body":{"injectables/UtilService.html":{}}}],["totalclaims",{"_index":290,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{}}}],["totalclaimsreviewed",{"_index":695,"title":{},"body":{"injectables/ClaimService.html":{}}}],["totalpages",{"_index":291,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/PersonalityService.html":{},"controllers/SourceController.html":{}}}],["totalpersonalities",{"_index":1406,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["totalreviews",{"_index":328,"title":{},"body":{"controllers/ClaimController.html":{}}}],["totalreviews[0]?.count",{"_index":329,"title":{},"body":{"controllers/ClaimController.html":{}}}],["totalsources",{"_index":1555,"title":{},"body":{"controllers/SourceController.html":{}}}],["trace",{"_index":1084,"title":{},"body":{"classes/Logger.html":{}}}],["tracks",{"_index":702,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["trade",{"_index":2678,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":2677,"title":{},"body":{"license.html":{}}}],["trademarks",{"_index":2679,"title":{},"body":{"license.html":{}}}],["transaction",{"_index":2626,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":2326,"title":{},"body":{"license.html":{}}}],["transferred",{"_index":2628,"title":{},"body":{"license.html":{}}}],["transferring",{"_index":2744,"title":{},"body":{"license.html":{}}}],["transform",{"_index":800,"title":{},"body":{"injectables/ClaimService.html":{},"miscellaneous/variables.html":{}}}],["transformcontentobject",{"_index":686,"title":{},"body":{"injectables/ClaimService.html":{}}}],["transformcontentobject(claimcontent",{"_index":722,"title":{},"body":{"injectables/ClaimService.html":{}}}],["transformer",{"_index":2017,"title":{},"body":{"dependencies.html":{}}}],["transformoptions",{"_index":3000,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transmission",{"_index":2576,"title":{},"body":{"license.html":{}}}],["transporter",{"_index":917,"title":{},"body":{"injectables/EmailService.html":{}}}],["transporter.close",{"_index":935,"title":{},"body":{"injectables/EmailService.html":{}}}],["transporter.sendmail",{"_index":934,"title":{},"body":{"injectables/EmailService.html":{}}}],["treated",{"_index":2652,"title":{},"body":{"license.html":{}}}],["treaty",{"_index":2461,"title":{},"body":{"license.html":{}}}],["trim:true",{"_index":1141,"title":{},"body":{"injectables/ParserService.html":{}}}],["true",{"_index":111,"title":{},"body":{"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"classes/Source.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/ViewController.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":375,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"injectables/SitemapService.html":{},"controllers/UsersController.html":{},"injectables/ViewService.html":{}}}],["ts",{"_index":273,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/HomeController.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/ViewController.html":{}}}],["ttl",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["twitter\"].indexof(v",{"_index":603,"title":{},"body":{"classes/ClaimRevision.html":{}}}],["two",{"_index":2207,"title":{},"body":{"license.html":{}}}],["type",{"_index":119,"title":{},"body":{"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"injectables/EmailService.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"controllers/HomeController.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"classes/Source.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"injectables/StatsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"license.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":2958,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":537,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/SourceService.html":{},"classes/UpdateClaimDTO.html":{},"dependencies.html":{}}}],["types.objectid(claim.personality",{"_index":761,"title":{},"body":{"injectables/ClaimService.html":{}}}],["types.objectid(claimreview.claim",{"_index":583,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["types.objectid(claimreview.personality",{"_index":581,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["types.objectid(claimreview.user",{"_index":585,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["types.objectid(data.targetid",{"_index":1574,"title":{},"body":{"injectables/SourceService.html":{}}}],["types.objectid(data.user",{"_index":1576,"title":{},"body":{"injectables/SourceService.html":{}}}],["types.objectid(dataid",{"_index":1019,"title":{},"body":{"injectables/HistoryService.html":{}}}],["types.objectid(query.personality",{"_index":745,"title":{},"body":{"injectables/ClaimService.html":{}}}],["types.objectid(targetid",{"_index":1579,"title":{},"body":{"injectables/SourceService.html":{}}}],["types/jest",{"_index":2006,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":140,"title":{},"body":{"classes/Claim.html":{},"injectables/ClaimService.html":{},"classes/Personality.html":{},"injectables/PersonalityService.html":{},"dependencies.html":{}}}],["typical",{"_index":2602,"title":{},"body":{"license.html":{}}}],["unacceptable",{"_index":2244,"title":{},"body":{"license.html":{}}}],["unauthorizedexception",{"_index":1438,"title":{},"body":{"guards/SessionGuard.html":{}}}],["unclassified",{"_index":1534,"title":{},"body":{"classes/Source.html":{}}}],["undefined",{"_index":123,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"classes/Source.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["under",{"_index":2284,"title":{},"body":{"license.html":{}}}],["unique",{"_index":641,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"classes/Personality.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["unknown",{"_index":182,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"injectables/HistoryService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/SitemapController.html":{},"injectables/SitemapService.html":{},"controllers/SourceController.html":{},"injectables/SourceService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WikidataService.html":{}}}],["unless",{"_index":2611,"title":{},"body":{"license.html":{}}}],["unlimited",{"_index":2419,"title":{},"body":{"license.html":{}}}],["unmodified",{"_index":2300,"title":{},"body":{"license.html":{}}}],["unnecessary",{"_index":2448,"title":{},"body":{"license.html":{}}}],["unpacking",{"_index":2649,"title":{},"body":{"license.html":{}}}],["unreliable",{"_index":1536,"title":{},"body":{"classes/Source.html":{}}}],["unsustainable",{"_index":425,"title":{},"body":{"classes/ClaimReview.html":{},"miscellaneous/enumerations.html":{}}}],["until",{"_index":2709,"title":{},"body":{"license.html":{}}}],["unverifiable",{"_index":427,"title":{},"body":{"classes/ClaimReview.html":{},"miscellaneous/enumerations.html":{}}}],["up",{"_index":629,"title":{},"body":{"modules/ClaimRevisionModule.html":{},"index.html":{}}}],["update",{"_index":177,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{},"classes/History.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"miscellaneous/enumerations.html":{}}}],["update(@param(\"id",{"_index":317,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{}}}],["update(claimid",{"_index":223,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{}}}],["update(personalityid",{"_index":1249,"title":{},"body":{"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["updateclaimdto",{"_index":224,"title":{"classes/UpdateClaimDTO.html":{}},"body":{"controllers/ClaimController.html":{},"classes/UpdateClaimDTO.html":{},"coverage.html":{}}}],["updated",{"_index":733,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["updates",{"_index":2638,"title":{},"body":{"license.html":{}}}],["updation",{"_index":732,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["upsert",{"_index":652,"title":{},"body":{"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/HistoryService.html":{},"injectables/PersonalityService.html":{}}}],["url",{"_index":246,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"injectables/SitemapService.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"injectables/WikidataService.html":{}}}],["usando",{"_index":3062,"title":{},"body":{"miscellaneous/variables.html":{}}}],["use",{"_index":605,"title":{},"body":{"classes/ClaimRevision.html":{},"classes/Source.html":{},"license.html":{}}}],["useclass",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["used",{"_index":1761,"title":{},"body":{"controllers/ViewController.html":{},"license.html":{}}}],["usefactory",{"_index":1680,"title":{},"body":{"modules/UsersModule.html":{},"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["useful",{"_index":2922,"title":{},"body":{"license.html":{}}}],["useguards",{"_index":232,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/PersonalityController.html":{},"controllers/SitemapController.html":{},"controllers/UsersController.html":{}}}],["useguards(localauthguard",{"_index":1644,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(localauthguard)@post('api/user/signin",{"_index":1630,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(sessionguard",{"_index":298,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/PersonalityController.html":{},"controllers/SitemapController.html":{},"controllers/UsersController.html":{}}}],["useguards(sessionguard)@delete(':id",{"_index":447,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["useguards(sessionguard)@delete('api/claim/:id",{"_index":200,"title":{},"body":{"controllers/ClaimController.html":{}}}],["useguards(sessionguard)@delete('api/personality/:id",{"_index":1229,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["useguards(sessionguard)@get('api/user/validate",{"_index":1627,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(sessionguard)@get('personality/search",{"_index":1241,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["useguards(sessionguard)@get('profile",{"_index":1635,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(sessionguard)@get('submit",{"_index":1455,"title":{},"body":{"controllers/SitemapController.html":{}}}],["useguards(sessionguard)@post",{"_index":444,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["useguards(sessionguard)@post('api/claim",{"_index":197,"title":{},"body":{"controllers/ClaimController.html":{}}}],["useguards(sessionguard)@post('api/personality",{"_index":1226,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["useguards(sessionguard)@put('api/claim/:id",{"_index":225,"title":{},"body":{"controllers/ClaimController.html":{}}}],["useguards(sessionguard)@put('api/personality/:id",{"_index":1250,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["useguards(sessionguard)@put('api/user/:id/password",{"_index":1624,"title":{},"body":{"controllers/UsersController.html":{}}}],["useless",{"_index":1384,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["usenewurlparser",{"_index":2992,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user",{"_index":334,"title":{"classes/User.html":{}},"body":{"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"classes/History.html":{},"injectables/HistoryService.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"classes/Source.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["user._id",{"_index":1020,"title":{},"body":{"injectables/HistoryService.html":{},"injectables/UsersService.html":{}}}],["user.changepassword(currentpassword",{"_index":1698,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.firstpasswordchanged",{"_index":1700,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.name",{"_index":1679,"title":{},"body":{"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["user.password",{"_index":1695,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.save",{"_index":1702,"title":{},"body":{"injectables/UsersService.html":{}}}],["user?._id",{"_index":338,"title":{},"body":{"controllers/ClaimController.html":{}}}],["userdata",{"_index":3047,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdata.email",{"_index":3050,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdata.password",{"_index":3074,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdata.sendauthdetails",{"_index":3052,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdocument",{"_index":1056,"title":{"interfaces/UserDocument.html":{}},"body":{"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userid",{"_index":534,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/UsersService.html":{}}}],["usermodel",{"_index":1054,"title":{},"body":{"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["usermodel.authenticate",{"_index":1069,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["usernamefield",{"_index":1067,"title":{},"body":{"injectables/LocalStrategy.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["userreview",{"_index":341,"title":{},"body":{"controllers/ClaimController.html":{}}}],["users",{"_index":2165,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["users.controller",{"_index":1677,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.map(async",{"_index":3072,"title":{},"body":{"miscellaneous/variables.html":{}}}],["users.service",{"_index":1638,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/schemas/user.schema",{"_index":416,"title":{},"body":{"classes/ClaimReview.html":{},"classes/History.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Source.html":{}}}],["users/users.module",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["userschema",{"_index":1615,"title":{},"body":{"classes/User.html":{},"interfaces/UserDocument.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":1619,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":3034,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userservice.register",{"_index":3048,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usersmodule",{"_index":24,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":1637,"title":{"injectables/UsersService.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":2605,"title":{},"body":{"license.html":{}}}],["useunifiedtopology",{"_index":2991,"title":{},"body":{"miscellaneous/variables.html":{}}}],["using",{"_index":2574,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["utf",{"_index":911,"title":{},"body":{"injectables/EmailService.html":{}}}],["util",{"_index":473,"title":{},"body":{"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{}}}],["utilservice",{"_index":468,"title":{"injectables/UtilService.html":{}},"body":{"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"injectables/UtilService.html":{},"coverage.html":{},"overview.html":{}}}],["v",{"_index":429,"title":{},"body":{"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/Source.html":{}}}],["valid",{"_index":432,"title":{},"body":{"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/Source.html":{},"license.html":{}}}],["validate",{"_index":407,"title":{},"body":{"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Source.html":{}}}],["validationpipe",{"_index":2999,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validator",{"_index":428,"title":{},"body":{"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/CreateClaimDTO.html":{},"classes/CreateClaimReview.html":{},"classes/CreatePersonality.html":{},"classes/GetClaimsByHashDTO.html":{},"classes/GetClaimsDTO.html":{},"classes/GetPersonalities.html":{},"classes/Source.html":{},"dependencies.html":{}}}],["value",{"_index":512,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimRevisionService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"injectables/HistoryService.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"injectables/SitemapService.html":{},"injectables/SourceService.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values[0",{"_index":1602,"title":{},"body":{"injectables/StatsService.html":{}}}],["values[1",{"_index":1603,"title":{},"body":{"injectables/StatsService.html":{}}}],["values[2",{"_index":1604,"title":{},"body":{"injectables/StatsService.html":{}}}],["variable",{"_index":1947,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2965,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verbatim",{"_index":2144,"title":{},"body":{"license.html":{}}}],["verbose",{"_index":1075,"title":{},"body":{"classes/Logger.html":{}}}],["verbose(message",{"_index":1089,"title":{},"body":{"classes/Logger.html":{}}}],["verifyinputsquery",{"_index":1304,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["verifyinputsquery(query",{"_index":1328,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["version",{"_index":611,"title":{},"body":{"classes/ClaimRevision.html":{},"license.html":{}}}],["versions",{"_index":2160,"title":{},"body":{"license.html":{}}}],["via",{"_index":2108,"title":{},"body":{"index.html":{}}}],["view",{"_index":2341,"title":{},"body":{"license.html":{}}}],["view.controller",{"_index":1791,"title":{},"body":{"modules/ViewModule.html":{}}}],["view.service",{"_index":1772,"title":{},"body":{"controllers/ViewController.html":{},"modules/ViewModule.html":{}}}],["view/view.module",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/HomeModule.html":{},"modules/PersonalityModule.html":{},"modules/UsersModule.html":{}}}],["view/view.service",{"_index":250,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{}}}],["viewcontroller",{"_index":1739,"title":{"controllers/ViewController.html":{}},"body":{"controllers/ViewController.html":{},"modules/ViewModule.html":{},"coverage.html":{}}}],["viewmodule",{"_index":46,"title":{"modules/ViewModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/HomeModule.html":{},"modules/PersonalityModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules.html":{},"overview.html":{}}}],["viewservice",{"_index":249,"title":{"injectables/ViewService.html":{}},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"coverage.html":{},"overview.html":{}}}],["vinda(o",{"_index":3056,"title":{},"body":{"miscellaneous/variables.html":{}}}],["violates",{"_index":2644,"title":{},"body":{"license.html":{}}}],["violation",{"_index":2705,"title":{},"body":{"license.html":{}}}],["virtual",{"_index":558,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["virtuals",{"_index":145,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/ClaimRevision.html":{},"classes/History.html":{},"classes/Personality.html":{}}}],["visible",{"_index":2335,"title":{},"body":{"license.html":{}}}],["voc",{"_index":3057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":1088,"title":{},"body":{"classes/Logger.html":{},"classes/NotFoundFilter.html":{},"controllers/RootController.html":{},"license.html":{}}}],["volume",{"_index":2521,"title":{},"body":{"license.html":{}}}],["w",{"_index":2931,"title":{},"body":{"license.html":{}}}],["waive",{"_index":2470,"title":{},"body":{"license.html":{}}}],["waiver",{"_index":2903,"title":{},"body":{"license.html":{}}}],["want",{"_index":2178,"title":{},"body":{"license.html":{}}}],["warn",{"_index":1076,"title":{},"body":{"classes/Logger.html":{}}}],["warn(message",{"_index":1091,"title":{},"body":{"classes/Logger.html":{}}}],["warranties",{"_index":2339,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":2218,"title":{},"body":{"license.html":{}}}],["watch",{"_index":1806,"title":{},"body":{"injectables/ViewService.html":{}}}],["way",{"_index":2168,"title":{},"body":{"license.html":{}}}],["ways",{"_index":2532,"title":{},"body":{"license.html":{}}}],["wbentities",{"_index":1339,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["wbentity.description",{"_index":1928,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wbentity.id",{"_index":1929,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wbentity.label",{"_index":1927,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wbgetentities",{"_index":1872,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wbsearchentities",{"_index":1919,"title":{},"body":{"injectables/WikidataService.html":{}}}],["websites",{"_index":1169,"title":{},"body":{"injectables/ParserService.html":{}}}],["welcome",{"_index":2932,"title":{},"body":{"license.html":{}}}],["well",{"_index":2318,"title":{},"body":{"license.html":{}}}],["whatever",{"_index":2748,"title":{},"body":{"license.html":{}}}],["whether",{"_index":2197,"title":{},"body":{"license.html":{}}}],["whitelist",{"_index":3002,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whole",{"_index":2365,"title":{},"body":{"license.html":{}}}],["whose",{"_index":2584,"title":{},"body":{"license.html":{}}}],["widely",{"_index":2359,"title":{},"body":{"license.html":{}}}],["wikdiata",{"_index":1365,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["wikidata",{"_index":862,"title":{},"body":{"classes/CreatePersonality.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"injectables/WikidataService.html":{}}}],["wikidata.claims.p18",{"_index":1896,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata.claims.p18[0].mainsnak.datavalue.value",{"_index":1898,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata.claims.p31",{"_index":1890,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata.claims.p31[0].mainsnak.datavalue.value",{"_index":1892,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata.service",{"_index":1826,"title":{},"body":{"modules/WikidataModule.html":{}}}],["wikidata.sitelinks[sitelinkname",{"_index":1903,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata.sitelinks[sitelinkname].title",{"_index":1907,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata/wikidata.module",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"modules/PersonalityModule.html":{}}}],["wikidata/wikidata.service",{"_index":1333,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["wikidata[property",{"_index":1914,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata[property][language",{"_index":1916,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata[property][languagefallback",{"_index":1917,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata[property][languagefallback].value",{"_index":1918,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidatacache",{"_index":1810,"title":{"classes/WikidataCache.html":{}},"body":{"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{}}}],["wikidatacache.name",{"_index":1829,"title":{},"body":{"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["wikidatacache.props",{"_index":1869,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidatacachedocument",{"_index":1818,"title":{},"body":{"classes/WikidataCache.html":{},"injectables/WikidataService.html":{},"miscellaneous/typealiases.html":{}}}],["wikidatacachemodel",{"_index":1828,"title":{},"body":{"modules/WikidataModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["wikidatacacheschema",{"_index":1820,"title":{},"body":{"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["wikidatacacheschema.index",{"_index":1830,"title":{},"body":{"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["wikidataextract",{"_index":1368,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["wikidataextract.isallowedprop",{"_index":1375,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["wikidataid",{"_index":1370,"title":{},"body":{"injectables/PersonalityService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["wikidatainstanceof",{"_index":1891,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidatainstanceof.id",{"_index":1894,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidatamodule",{"_index":28,"title":{"modules/WikidataModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PersonalityModule.html":{},"modules/WikidataModule.html":{},"modules.html":{},"overview.html":{}}}],["wikidataprops",{"_index":1882,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidataprops.description",{"_index":1887,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidataprops.image",{"_index":1899,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidataprops.isallowedprop",{"_index":1893,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidataprops.name",{"_index":1884,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidataprops.wikipedia",{"_index":1908,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidataservice",{"_index":1305,"title":{"injectables/WikidataService.html":{}},"body":{"injectables/PersonalityService.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"overview.html":{}}}],["wikilang",{"_index":1904,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikipedia",{"_index":863,"title":{},"body":{"classes/CreatePersonality.html":{},"injectables/WikidataService.html":{}}}],["wikipedia.org/wiki/${encodeuri(wikititle",{"_index":1911,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikititle",{"_index":1906,"title":{},"body":{"injectables/WikidataService.html":{}}}],["window",{"_index":2378,"title":{},"body":{"license.html":{}}}],["wipo",{"_index":2460,"title":{},"body":{"license.html":{}}}],["wish",{"_index":2176,"title":{},"body":{"license.html":{}}}],["within",{"_index":2689,"title":{},"body":{"license.html":{}}}],["without",{"_index":2303,"title":{},"body":{"license.html":{}}}],["withsuggestions",{"_index":961,"title":{},"body":{"classes/GetPersonalities.html":{},"injectables/PersonalityService.html":{}}}],["work",{"_index":561,"title":{},"body":{"injectables/ClaimReviewService.html":{},"license.html":{}}}],["work's",{"_index":2390,"title":{},"body":{"license.html":{}}}],["working",{"_index":2360,"title":{},"body":{"license.html":{}}}],["works",{"_index":2150,"title":{},"body":{"license.html":{}}}],["worldwide",{"_index":2778,"title":{},"body":{"license.html":{}}}],["writing",{"_index":2864,"title":{},"body":{"license.html":{}}}],["written",{"_index":2541,"title":{},"body":{"license.html":{}}}],["x",{"_index":2986,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yarn",{"_index":2121,"title":{},"body":{"index.html":{}}}],["years",{"_index":2543,"title":{},"body":{"license.html":{}}}],["yes",{"_index":1082,"title":{},"body":{"classes/Logger.html":{}}}],["yourself",{"_index":2794,"title":{},"body":{"license.html":{}}}],["z])/g",{"_index":1156,"title":{},"body":{"injectables/ParserService.html":{}}}],["z][.](?:[a",{"_index":1167,"title":{},"body":{"injectables/ParserService.html":{}}}],["z][.])?)/g",{"_index":1168,"title":{},"body":{"injectables/ParserService.html":{}}}],["z][.][a",{"_index":1166,"title":{},"body":{"injectables/ParserService.html":{}}}],["za",{"_index":1155,"title":{},"body":{"injectables/ParserService.html":{}}}],["zoom",{"_index":101,"title":{},"body":{"modules/AuthModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/ClaimRevisionModule.html":{},"modules/EmailModule.html":{},"modules/HistoryModule.html":{},"modules/HomeModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"modules/SitemapModule.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/app.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(options)\n                \n            \n\n\n            \n                \n                    Defined in server/app.module.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { DynamicModule, Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { UsersModule } from \"./users/users.module\";\nimport { AuthModule } from \"./auth/auth.module\";\nimport { WikidataModule } from \"./wikidata/wikidata.module\";\nimport { PersonalityModule } from \"./personality/personality.module\";\nimport { ClaimModule } from \"./claim/claim.module\";\nimport { ClaimReviewModule } from \"./claim-review/claim-review.module\";\nimport { SourceModule } from \"./source/source.module\";\nimport { StatsModule } from \"./stats/stats.module\";\nimport { RootController } from \"./root/root.controller\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { ViewModule } from \"./view/view.module\";\nimport { HomeModule } from \"./home/home.module\";\nimport { EmailModule } from \"./email/email.module\";\nimport { APP_FILTER, APP_GUARD } from \"@nestjs/core\";\nimport { NotFoundFilter } from \"./filters/not-found.filter\";\nimport { ThrottlerModule, ThrottlerGuard } from \"@nestjs/throttler\";\nimport { SitemapModule } from \"./sitemap/sitemap.module\";\nimport { ClaimRevisionModule } from \"./claim-revision/claim-revision.module\";\nimport { HistoryModule } from \"./history/history.module\";\n\n@Module({})\nexport class AppModule {\n    static register(options): DynamicModule {\n        // TODO: interface app with service-runner metrics interface\n        return {\n            module: AppModule,\n            imports: [\n                MongooseModule.forRoot(\n                    options.db.connection_uri,\n                    options.db.options\n                ),\n                ConfigModule.forRoot({\n                    load: [() => options.config || {}],\n                }),\n                ThrottlerModule.forRoot({\n                    ttl: options.config.throttle.ttl,\n                    limit: options.config.throttle.limit,\n                }),\n                UsersModule,\n                AuthModule,\n                WikidataModule,\n                PersonalityModule,\n                ClaimModule,\n                ClaimReviewModule,\n                ClaimRevisionModule,\n                HistoryModule,\n                SourceModule,\n                StatsModule,\n                ViewModule,\n                HomeModule,\n                EmailModule,\n                SitemapModule,\n            ],\n            controllers: [RootController],\n            providers: [\n                {\n                    provide: APP_FILTER,\n                    useClass: NotFoundFilter,\n                },\n                {\n                    provide: APP_GUARD,\n                    useClass: ThrottlerGuard\n                }\n            ],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nLocalSerializer\n\nLocalSerializer\n\nAuthModule -->\n\nLocalSerializer->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            LocalSerializer\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { UsersModule } from \"../users/users.module\";\nimport { PassportModule } from \"@nestjs/passport\";\nimport { LocalStrategy } from \"./local.strategy\";\nimport { LocalSerializer } from \"./local.serializer\";\n\n@Module({\n    imports: [UsersModule, PassportModule.register({ session: true })],\n    providers: [LocalStrategy, LocalSerializer],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Claim.html":{"url":"classes/Claim.html","title":"class - Claim","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Claim\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim/schemas/claim.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                latestRevision\n                            \n                            \n                                personality\n                            \n                            \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        latestRevision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ClaimRevision\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'ClaimRevision'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/schemas/claim.schema.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        personality\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Personality\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'Personality'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/schemas/claim.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/schemas/claim.schema.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport * as mongoose from \"mongoose\";\nimport { Personality } from \"../../personality/schemas/personality.schema\"\nimport { ClaimRevision } from \"../../claim-revision/schema/claim-revision.schema\"\nimport { softDeletePlugin } from 'mongoose-softdelete-typescript';\n\nexport type ClaimDocument = Claim & mongoose.Document & { revisions: any };\n\n@Schema({ toObject: {virtuals: true}, toJSON: {virtuals: true} })\nexport class Claim {\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"Personality\",\n    })\n    personality: Personality;\n    \n    @Prop({ required: true })\n    slug: string;\n\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"ClaimRevision\",\n    })\n    latestRevision: ClaimRevision\n}\nconst ClaimSchemaRaw = SchemaFactory.createForClass(Claim);\n\nClaimSchemaRaw.virtual('revisions', {\n    ref: 'ClaimRevision',\n    localField: '_id',\n    foreignField: 'claimId'\n})\n\nClaimSchemaRaw.virtual('sources', {\n    ref: 'Source',\n    localField: '_id',\n    foreignField: 'targetId'\n})\n\nClaimSchemaRaw.plugin(softDeletePlugin)\n\nexport const ClaimSchema = ClaimSchemaRaw;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ClaimController.html":{"url":"controllers/ClaimController.html","title":"controller - ClaimController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ClaimController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim/claim.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                _checkCaptchaResponse\n                            \n                            \n                                _getSentenceByHashAndClaimId\n                            \n                            \n                                _verifyInputsQuery\n                            \n                            \n                                    Public\n                                    Async\n                                claimCreatePage\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                getById\n                            \n                            \n                                    Public\n                                    Async\n                                getClaimReviewPage\n                            \n                            \n                                getSentenceReviewsByHash\n                            \n                            \n                                listAll\n                            \n                            \n                                    Public\n                                    Async\n                                personalityClaimPage\n                            \n                            \n                                    Public\n                                    Async\n                                sourcesClaimPage\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        _checkCaptchaResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    _checkCaptchaResponse(secret, response)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    secret\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _getSentenceByHashAndClaimId\n                        \n                    \n                \n            \n            \n                \n_getSentenceByHashAndClaimId(sentenceHash, claimId, req)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.controller.ts:162\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentenceHash\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _verifyInputsQuery\n                        \n                    \n                \n            \n            \n                \n_verifyInputsQuery(query)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        claimCreatePage\n                        \n                    \n                \n            \n            \n                \n                    \n                    claimCreatePage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('personality/:slug/claim/create/')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:224\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createClaimDTO: CreateClaimDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Post('api/claim')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createClaimDTO\n                                    \n                                                CreateClaimDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(claimId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Delete('api/claim/:id')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getById\n                        \n                    \n                \n            \n            \n                \ngetById(claimId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('api/claim/:id')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getClaimReviewPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    getClaimReviewPage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('personality/:personalitySlug/claim/:claimSlug/sentence/:sentenceHash')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:192\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSentenceReviewsByHash\n                        \n                    \n                \n            \n            \n                \ngetSentenceReviewsByHash(params, getClaimsByHashDTO: GetClaimsByHashDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('api/claim/:claimId/sentence/:sentenceHash/reviews')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    getClaimsByHashDTO\n                                    \n                                                GetClaimsByHashDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        listAll\n                        \n                    \n                \n            \n            \n                \nlistAll(getClaimsDTO: GetClaimsDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('api/claim')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    getClaimsDTO\n                                    \n                                                GetClaimsDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        personalityClaimPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    personalityClaimPage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('personality/:personalitySlug/claim/:claimSlug')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:248\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        sourcesClaimPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    sourcesClaimPage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('personality/:personalitySlug/claim/:claimSlug/sources')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:279\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(claimId, updateClaimDTO: UpdateClaimDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Put('api/claim/:id')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateClaimDTO\n                                    \n                                                UpdateClaimDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get, Logger,\n    Param,\n    Post,\n    Put,\n    Query,\n    Req,\n    Res,\n    UseGuards,\n} from \"@nestjs/common\";\nimport { ClaimReviewService } from \"../claim-review/claim-review.service\";\nimport { ClaimService } from \"./claim.service\";\nimport * as qs from \"querystring\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { HttpService } from \"@nestjs/axios\";\nimport { SessionGuard } from \"../auth/session.guard\";\nimport { Request, Response } from \"express\";\nimport { parse } from \"url\";\nimport { PersonalityService } from \"../personality/personality.service\";\nimport { ViewService } from \"../view/view.service\";\nimport * as mongoose from \"mongoose\";\nimport { CreateClaimDTO } from \"./dto/create-claim.dto\";\nimport { GetClaimsDTO } from \"./dto/get-claims.dto\";\nimport { GetClaimsByHashDTO } from \"./dto/get-reviews-by-hash.dto\";\nimport { UpdateClaimDTO } from \"./dto/update-claim.dto\"\n@Controller()\nexport class ClaimController {\n    private readonly logger = new Logger(\"ClaimController\");\n    constructor(\n        private claimReviewService: ClaimReviewService,\n        private personalityService: PersonalityService,\n        private claimService: ClaimService,\n        private configService: ConfigService,\n        private httpService: HttpService,\n        private viewService: ViewService,\n    ) {}\n\n    async _checkCaptchaResponse(secret, response) {\n        const RECAPTCHA_API_URL = \"https://www.google.com/recaptcha/api\";\n        const { data } = await this.httpService.post(\n            `${RECAPTCHA_API_URL}/siteverify`,\n            qs.stringify({\n                secret,\n                response,\n            })\n        ).toPromise();\n\n        return data;\n    }\n    _verifyInputsQuery(query) {\n        const queryInputs = {};\n        if (query.personality) {\n            // @ts-ignore\n            queryInputs.personality = new mongoose.Types.ObjectId(query.personality);\n        }\n\n        return queryInputs;\n    }\n\n    @Get(\"api/claim\")\n    listAll(@Query() getClaimsDTO: GetClaimsDTO) {\n        const { page = 0, pageSize = 10, order = \"asc\" } = getClaimsDTO;\n        const queryInputs = this._verifyInputsQuery(getClaimsDTO);\n        return Promise.all([\n            this.claimService.listAll(\n                page,\n                pageSize,\n                order,\n                queryInputs\n            ),\n            this.claimService.count(queryInputs),\n        ]).then(([claims, totalClaims]) => {\n            const totalPages = Math.ceil(totalClaims / pageSize);\n\n            this.logger.log(\n                `Found ${totalClaims} claims. Page ${page} of ${totalPages}`\n            );\n\n            return {\n                claims,\n                totalClaims,\n                totalPages,\n                page,\n                pageSize,\n            };\n        }).catch((error) => this.logger.error(error));\n    }\n\n    @UseGuards(SessionGuard)\n    @Post(\"api/claim\")\n    async create(@Body() createClaimDTO: CreateClaimDTO) {\n        const secret = this.configService.get(\"recaptcha_secret\");\n        const recaptchaCheck = await this._checkCaptchaResponse(\n            secret,\n            createClaimDTO && createClaimDTO.recaptcha\n        );\n\n        // @ts-ignore\n        if (!recaptchaCheck.success) {\n            this.logger.error(`error/recaptcha ${recaptchaCheck}`);\n            // next(\n            //     Requester.internalError(res, \"Error with your reCaptcha response\")\n            // );\n            throw Error();\n        }\n        return this.claimService.create(createClaimDTO)\n\n    }\n\n    @Get(\"api/claim/:id\")\n    getById(@Param(\"id\") claimId) {\n        return this.claimService.getById(claimId);\n    }\n\n    @UseGuards(SessionGuard)\n    @Put(\"api/claim/:id\")\n    update(@Param(\"id\") claimId, @Body() updateClaimDTO: UpdateClaimDTO) {\n        return this.claimService.update(claimId, updateClaimDTO);\n    }\n\n    @UseGuards(SessionGuard)\n    @Delete(\"api/claim/:id\")\n    delete(@Param(\"id\") claimId) {\n        return this.claimService.delete(claimId);\n    }\n\n    @Get(\"api/claim/:claimId/sentence/:sentenceHash/reviews\")\n    getSentenceReviewsByHash(@Param() params, @Query() getClaimsByHashDTO: GetClaimsByHashDTO) {\n        const { sentenceHash } = params;\n        const { page, pageSize, order } = getClaimsByHashDTO;\n\n        return Promise.all([\n            this.claimReviewService.getReviewsBySentenceHash(\n                sentenceHash,\n                page,\n                pageSize,\n                order || \"desc\"\n            ),\n            this.claimReviewService.countReviewsBySentenceHash(sentenceHash),\n        ]).then(([reviews, totalReviews]) => {\n            totalReviews = totalReviews[0]?.count;\n            // @ts-ignore\n            const totalPages = Math.ceil(totalReviews / parseInt(pageSize, 10));\n\n            this.logger.log(\n                `Found ${totalReviews} reviews for sentence hash ${sentenceHash}. Page ${page} of ${totalPages}`\n            );\n\n            return {\n                reviews,\n                totalReviews,\n                totalPages,\n                page,\n                pageSize,\n            };\n        });\n    }\n\n    _getSentenceByHashAndClaimId(sentenceHash, claimId, req) {\n        const user = req.user;\n        return Promise.all([\n            this.claimReviewService.getReviewStatsBySentenceHash(sentenceHash),\n            this.claimService.getById(claimId),\n            this.claimReviewService.getUserReviewBySentenceHash(\n                sentenceHash,\n                user?._id\n            ),\n        ]).then(([stats, claimObj, userReview]) => {\n            let sentenceObj;\n\n            claimObj.content.object.forEach((p) => {\n                p.content.forEach((sentence) => {\n                    if (sentence.props[\"data-hash\"] === sentenceHash) {\n                        sentenceObj = sentence;\n                    }\n                });\n            });\n            return {\n                userReview,\n                date: claimObj.date,\n                personality: claimObj.personality,\n                stats,\n                ...sentenceObj,\n            };\n        });\n    }\n\n    @Get(\"personality/:personalitySlug/claim/:claimSlug/sentence/:sentenceHash\")\n    public async getClaimReviewPage(@Req() req: Request, @Res() res: Response) {\n        const { sentenceHash, personalitySlug, claimSlug } = req.params;\n        const parsedUrl = parse(req.url, true);\n        const personality = await this.personalityService.getBySlug(\n            personalitySlug,\n            // @ts-ignore\n            req.language\n        );\n\n        const claim = await this.claimService.getByPersonalityIdAndClaimSlug(\n            personality._id,\n            claimSlug\n        );\n\n        const sentence = await this._getSentenceByHashAndClaimId(sentenceHash, claim._id, req);\n\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/claim-review\",\n                Object.assign(parsedUrl.query, {\n                    personality,\n                    claim,\n                    sentence,\n                    sitekey: this.configService.get(\"recaptcha_sitekey\"),\n                })\n            );\n    }\n\n    @Get(\"personality/:slug/claim/create/\")\n    public async claimCreatePage(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n\n        const personality = await this.personalityService.getBySlug(\n            req.params.slug,\n            // @ts-ignore\n            req.language\n        );\n\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/claim-create\",\n                Object.assign(parsedUrl.query, {\n                    personality,\n                    sitekey: this.configService.get(\"recaptcha_sitekey\"),\n                })\n            );\n    }\n\n    @Get(\"personality/:personalitySlug/claim/:claimSlug\")\n    public async personalityClaimPage(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n        try{\n            const personality = await this.personalityService.getBySlug(\n                req.params.personalitySlug,\n                // @ts-ignore\n                req.language\n            );\n\n            const claim = await this.claimService.getByPersonalityIdAndClaimSlug(\n                personality._id,\n                req.params.claimSlug\n            );\n\n            await this.viewService\n                .getNextServer()\n                .render(\n                    req,\n                    res,\n                    \"/claim-page\",\n                    Object.assign(parsedUrl.query, { personality, claim })\n                );\n        } catch {\n            await this.viewService\n                .getNextServer()\n                .render(req,res, '/404-page', Object.assign(parsedUrl.query))\n        }\n    }\n\n    @Get(\"personality/:personalitySlug/claim/:claimSlug/sources\")\n    public async sourcesClaimPage(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n\n        const personality = await this.personalityService.getBySlug(\n            req.params.personalitySlug\n        );\n\n        const claim = await this.claimService.getByPersonalityIdAndClaimSlug(\n            personality._id,\n            req.params.claimSlug\n        );\n\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/claim-sources-page\",\n                Object.assign(parsedUrl.query, { claimId: claim._id })\n            );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ClaimModule.html":{"url":"modules/ClaimModule.html","title":"module - ClaimModule","body":"\n                   \n\n\n\n\n    Modules\n    ClaimModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ClaimModule\n\n\n\ncluster_ClaimModule_providers\n\n\n\ncluster_ClaimModule_imports\n\n\n\ncluster_ClaimModule_exports\n\n\n\n\nClaimReviewModule\n\nClaimReviewModule\n\n\n\nClaimModule\n\nClaimModule\n\nClaimModule -->\n\nClaimReviewModule->ClaimModule\n\n\n\n\n\nClaimRevisionModule\n\nClaimRevisionModule\n\nClaimModule -->\n\nClaimRevisionModule->ClaimModule\n\n\n\n\n\nHistoryModule\n\nHistoryModule\n\nClaimModule -->\n\nHistoryModule->ClaimModule\n\n\n\n\n\nParserModule\n\nParserModule\n\nClaimModule -->\n\nParserModule->ClaimModule\n\n\n\n\n\nPersonalityModule\n\nPersonalityModule\n\nClaimModule -->\n\nPersonalityModule->ClaimModule\n\n\n\n\n\nSourceModule\n\nSourceModule\n\nClaimModule -->\n\nSourceModule->ClaimModule\n\n\n\n\n\nViewModule\n\nViewModule\n\nClaimModule -->\n\nViewModule->ClaimModule\n\n\n\n\n\nClaimService \n\nClaimService \n\nClaimService  -->\n\nClaimModule->ClaimService \n\n\n\n\n\nClaimService\n\nClaimService\n\nClaimModule -->\n\nClaimService->ClaimModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/claim/claim.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ClaimService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ClaimController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClaimReviewModule\n                        \n                        \n                            ClaimRevisionModule\n                        \n                        \n                            HistoryModule\n                        \n                        \n                            ParserModule\n                        \n                        \n                            PersonalityModule\n                        \n                        \n                            SourceModule\n                        \n                        \n                            ViewModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ClaimService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { Claim, ClaimSchema } from \"./schemas/claim.schema\";\nimport { ClaimService } from \"./claim.service\";\nimport { ClaimController } from \"./claim.controller\";\nimport { ClaimReviewModule } from \"../claim-review/claim-review.module\";\nimport { ParserModule } from \"../parser/parser.module\";\nimport { PersonalityModule } from \"../personality/personality.module\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { HttpModule } from \"@nestjs/axios\";\nimport { ViewModule } from \"../view/view.module\";\nimport { SourceModule } from \"../source/source.module\";\nimport { ClaimRevisionModule } from \"../claim-revision/claim-revision.module\"\nimport { HistoryModule } from \"../history/history.module\";\n\nconst ClaimModel = MongooseModule.forFeature([\n    {\n        name: Claim.name,\n        schema: ClaimSchema,\n    },\n]);\n\n@Module({\n    imports: [\n        ClaimModel,\n        ClaimReviewModule,\n        ClaimRevisionModule,\n        ParserModule,\n        PersonalityModule,\n        HistoryModule,\n        ConfigModule,\n        HttpModule,\n        ViewModule,\n        SourceModule,\n    ],\n    exports: [ClaimService],\n    providers: [ClaimService],\n    controllers: [ClaimController],\n})\nexport class ClaimModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClaimReview.html":{"url":"classes/ClaimReview.html","title":"class - ClaimReview","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClaimReview\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim-review/schemas/claim-review.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                claim\n                            \n                            \n                                classification\n                            \n                            \n                                personality\n                            \n                            \n                                report\n                            \n                            \n                                sentence_content\n                            \n                            \n                                sentence_hash\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        claim\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Claim\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'ClaimRevision'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/schemas/claim-review.schema.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        classification\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, validate: undefined, message: tag => })\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/schemas/claim-review.schema.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        personality\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Personality\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'Personality'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/schemas/claim-review.schema.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        report\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/schemas/claim-review.schema.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sentence_content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/schemas/claim-review.schema.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sentence_hash\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/schemas/claim-review.schema.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/schemas/claim-review.schema.ts:73\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { Personality } from \"../../personality/schemas/personality.schema\";\nimport * as mongoose from \"mongoose\";\nimport { User } from \"../../users/schemas/user.schema\";\nimport { Claim } from \"../../claim/schemas/claim.schema\";\n\nexport type ClaimReviewDocument = ClaimReview & mongoose.Document;\n\nexport enum ClassificationEnum {\n    \"not-fact\",\n    \"true\",\n    \"true-but\",\n    \"arguable\",\n    \"misleading\",\n    \"false\",\n    \"unsustainable\",\n    \"exaggerated\",\n    \"unverifiable\",\n};\n@Schema({ toObject: {virtuals: true}, toJSON: {virtuals: true} })\nexport class ClaimReview {\n    @Prop({\n        required: true,\n        validate: {\n            validator: (v) => {\n                return (\n                    [\n                        \"not-fact\",\n                        \"true\",\n                        \"true-but\",\n                        \"arguable\",\n                        \"misleading\",\n                        \"false\",\n                        \"unsustainable\",\n                        \"exaggerated\",\n                        \"unverifiable\",\n                    ].indexOf(v) !== -1\n                );\n            },\n        },\n        message: (tag) => `${tag} is not a valid classification.`,\n    })\n    classification: string;\n\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"ClaimRevision\",\n    })\n    claim: Claim;\n\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"Personality\",\n    })\n    personality: Personality;\n\n    @Prop({ required: true })\n    sentence_hash: string;\n\n    @Prop({ required: true })\n    sentence_content: string;\n\n    @Prop({ required: true })\n    report: string;\n\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"User\",\n    })\n    user: User;\n}\n\nconst ClaimReviewSchemaRaw = SchemaFactory.createForClass(ClaimReview);\n\nClaimReviewSchemaRaw.virtual('sources', {\n    ref: 'Source',\n    localField: '_id',\n    foreignField: 'targetId'\n});\n\nexport const ClaimReviewSchema = ClaimReviewSchemaRaw;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ClaimReviewController.html":{"url":"controllers/ClaimReviewController.html","title":"controller - ClaimReviewController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ClaimReviewController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim-review/claim-review.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/claimreview\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                _checkCaptchaResponse\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        _checkCaptchaResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    _checkCaptchaResponse(secret, response)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    secret\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createClaimReview: CreateClaimReview, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in server/claim-review/claim-review.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createClaimReview\n                                    \n                                                CreateClaimReview\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(params)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in server/claim-review/claim-review.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(params)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in server/claim-review/claim-review.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {Body, Controller, Delete, Get, Param, Post, Req, UseGuards} from \"@nestjs/common\";\nimport { ClaimReviewService } from \"./claim-review.service\";\nimport * as qs from \"querystring\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { HttpService } from \"@nestjs/axios\";\nimport {SessionGuard} from \"../auth/session.guard\";\nimport { CreateClaimReview } from \"./dto/create-claim-review.dto\";\n\n@Controller(\"api/claimreview\")\nexport class ClaimReviewController {\n    constructor(\n        private claimReviewService: ClaimReviewService,\n        private configService: ConfigService,\n        private httpService: HttpService\n    ) {}\n\n    async _checkCaptchaResponse(secret, response) {\n        const RECAPTCHA_API_URL = \"https://www.google.com/recaptcha/api\";\n        const { data } = await this.httpService.post(\n            `${RECAPTCHA_API_URL}/siteverify`,\n            qs.stringify({\n                secret,\n                response,\n            })\n        ).toPromise();\n\n        return data;\n    }\n\n    @UseGuards(SessionGuard)\n    @Post()\n    async create(@Body() createClaimReview: CreateClaimReview, @Req() req) {\n        const secret = this.configService.get(\"recaptcha_secret\");\n        const recaptchaCheck = await this._checkCaptchaResponse(\n            secret,\n            createClaimReview && createClaimReview.recaptcha\n        );\n\n        // @ts-ignore\n        if (!recaptchaCheck.success) {\n            throw Error();\n            // app.logger.log(\"error/recaptcha\", recaptchaCheck);\n            // next(\n            //     Requester.internalError(res, \"Error with your reCaptcha response\")\n            // );\n        } else {\n            return this.claimReviewService.create({\n                ...createClaimReview,\n                user: req?.user?._id,\n            });\n        }\n    }\n\n    @Get(\":id\")\n    get(@Param() params) {\n        return this.claimReviewService.getById(params.id);\n    }\n\n    @UseGuards(SessionGuard)\n    @Delete(\":id\")\n    delete(@Param() params) {\n        return this.claimReviewService.delete(params.id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ClaimReviewModule.html":{"url":"modules/ClaimReviewModule.html","title":"module - ClaimReviewModule","body":"\n                   \n\n\n\n\n    Modules\n    ClaimReviewModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ClaimReviewModule\n\n\n\ncluster_ClaimReviewModule_providers\n\n\n\ncluster_ClaimReviewModule_imports\n\n\n\ncluster_ClaimReviewModule_exports\n\n\n\n\nSourceModule\n\nSourceModule\n\n\n\nClaimReviewModule\n\nClaimReviewModule\n\nClaimReviewModule -->\n\nSourceModule->ClaimReviewModule\n\n\n\n\n\nClaimReviewService \n\nClaimReviewService \n\nClaimReviewService  -->\n\nClaimReviewModule->ClaimReviewService \n\n\n\n\n\nClaimReviewService\n\nClaimReviewService\n\nClaimReviewModule -->\n\nClaimReviewService->ClaimReviewModule\n\n\n\n\n\nUtilService\n\nUtilService\n\nClaimReviewModule -->\n\nUtilService->ClaimReviewModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/claim-review/claim-review.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ClaimReviewService\n                        \n                        \n                            UtilService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ClaimReviewController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SourceModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ClaimReviewService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ClaimReview, ClaimReviewSchema } from \"./schemas/claim-review.schema\";\nimport { ClaimReviewService } from \"./claim-review.service\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { ClaimReviewController } from \"./claim-review.controller\";\nimport { UtilService } from \"../util\";\nimport { SourceModule } from \"../source/source.module\";\nimport { HttpModule } from \"@nestjs/axios\";\nimport { ConfigModule } from \"@nestjs/config\";\n\nexport const ClaimReviewModel = MongooseModule.forFeature([\n    {\n        name: ClaimReview.name,\n        schema: ClaimReviewSchema,\n    },\n]);\n\n@Module({\n    imports: [ClaimReviewModel, SourceModule, HttpModule, ConfigModule],\n    providers: [UtilService, ClaimReviewService],\n    exports: [ClaimReviewService],\n    controllers: [ClaimReviewController],\n})\nexport class ClaimReviewModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClaimReviewService.html":{"url":"injectables/ClaimReviewService.html","title":"injectable - ClaimReviewService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClaimReviewService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim-review/claim-review.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                _reviewsBySentenceHashAggregated\n                            \n                            \n                                _topClassificationAccumulator\n                            \n                            \n                                agreggateClassification\n                            \n                            \n                                count\n                            \n                            \n                                countReviewsBySentenceHash\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                getById\n                            \n                            \n                                getReviewsByClaimId\n                            \n                            \n                                getReviewsBySentenceHash\n                            \n                            \n                                    Async\n                                getReviewStatsByClaimId\n                            \n                            \n                                    Async\n                                getReviewStatsBySentenceHash\n                            \n                            \n                                getUserReviewBySentenceHash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ClaimReviewModel: Model, sourceService: SourceService, util: UtilService)\n                    \n                \n                        \n                            \n                                Defined in server/claim-review/claim-review.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ClaimReviewModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sourceService\n                                                  \n                                                        \n                                                                        SourceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        util\n                                                  \n                                                        \n                                                                        UtilService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        _reviewsBySentenceHashAggregated\n                        \n                    \n                \n            \n            \n                \n_reviewsBySentenceHashAggregated(sentenceHash)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentenceHash\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _topClassificationAccumulator\n                        \n                    \n                \n            \n            \n                \n_topClassificationAccumulator()\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:124\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { $accumulator: { init: () => {}; accumulate: (state: any, classification: any) => any; accumulateArgs: {}; merge: (state1: any, state2: any) => any; finalize: (state: any) => { classification: any; count: any; }; lang: string; }; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        agreggateClassification\n                        \n                    \n                \n            \n            \n                \nagreggateClassification(match: any)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    match\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        count\n                        \n                    \n                \n            \n            \n                \ncount(query: any)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        countReviewsBySentenceHash\n                        \n                    \n                \n            \n            \n                \ncountReviewsBySentenceHash(sentenceHash)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentenceHash\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(claimReview)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:168\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimReview\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(claimReviewId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:198\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimReviewId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getById\n                        \n                    \n                \n            \n            \n                \ngetById(claimReviewId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:192\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimReviewId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getReviewsByClaimId\n                        \n                    \n                \n            \n            \n                \ngetReviewsByClaimId(claimId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:56\n                \n            \n\n\n            \n                \n                    get all personality claim claimIDs\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        claim Id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getReviewsBySentenceHash\n                        \n                    \n                \n            \n            \n                \ngetReviewsBySentenceHash(sentenceHash, page, pageSize, order)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentenceHash\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    page\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageSize\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    order\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getReviewStatsByClaimId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getReviewStatsByClaimId(claimId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getReviewStatsBySentenceHash\n                        \n                    \n                \n            \n            \n                \n                    \n                    getReviewStatsBySentenceHash(sentenceHash)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentenceHash\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserReviewBySentenceHash\n                        \n                    \n                \n            \n            \n                \ngetUserReviewBySentenceHash(sentenceHash, userId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentenceHash\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"ClaimReviewService\")\n                    \n                \n                    \n                        \n                                Defined in server/claim-review/claim-review.service.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {Injectable, Logger} from \"@nestjs/common\";\nimport { Model, Types } from \"mongoose\";\nimport {\n    ClaimReview,\n    ClaimReviewDocument,\n} from \"./schemas/claim-review.schema\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport { UtilService } from \"../util\";\nimport { SourceService } from \"../source/source.service\";\n\n@Injectable()\nexport class ClaimReviewService {\n    private readonly logger = new Logger(\"ClaimReviewService\");\n    constructor(\n        @InjectModel(ClaimReview.name)\n        private ClaimReviewModel: Model,\n        private sourceService: SourceService,\n        private util: UtilService\n    ) {}\n\n    agreggateClassification(match: any) {\n        return this.ClaimReviewModel.aggregate([\n            { $match: match },\n            { $group: { _id: \"$classification\", count: { $sum: 1 } } },\n            { $sort: { count: -1 } },\n        ]);\n    }\n\n    count(query: any = {}) {\n        return this.ClaimReviewModel.countDocuments().where(query);\n    }\n\n    async getReviewStatsBySentenceHash(sentenceHash) {\n        const reviews = await this.ClaimReviewModel.aggregate([\n            { $match: { sentence_hash: sentenceHash } },\n            { $group: { _id: \"$classification\", count: { $sum: 1 } } },\n            { $sort: { count: -1 } },\n        ]);\n        return this.util.formatStats(reviews);\n    }\n\n    async getReviewStatsByClaimId(claimId) {\n        const reviews = await this.ClaimReviewModel.aggregate([\n            { $match: { claim: claimId } },\n            { $group: { _id: \"$classification\", count: { $sum: 1 } } },\n            { $sort: { count: -1 } },\n        ]);\n        return this.util.formatStats(reviews);\n    }\n\n    /**\n     * get all personality claim claimIDs\n     * @param claimId claim Id\n     * @returns \n     */\n    getReviewsByClaimId(claimId) {\n        return this.ClaimReviewModel.aggregate([\n            { $match: { claim: claimId } },\n            {\n                $group: {\n                    _id: \"$sentence_hash\",\n                    topClassification: this._topClassificationAccumulator(),\n                },\n            },\n        ]).option({ serializeFunctions: true });\n    }\n\n    getUserReviewBySentenceHash(sentenceHash, userId) {\n        if (!userId) {\n            return Promise.resolve(undefined);\n        }\n        return this.ClaimReviewModel.findOne(\n            { sentence_hash: sentenceHash, user: userId },\n            {\n                sources: 1,\n                _id: 1,\n                classification: 1,\n                user: 1,\n            }\n        );\n    }\n\n    countReviewsBySentenceHash(sentenceHash) {\n        return this._reviewsBySentenceHashAggregated(sentenceHash).count(\n            \"count\"\n        );\n    }\n\n    getReviewsBySentenceHash(sentenceHash, page, pageSize, order) {\n        pageSize = parseInt(pageSize);\n        page = parseInt(page);\n\n        return this._reviewsBySentenceHashAggregated(sentenceHash)\n            .skip(page * pageSize)\n            .limit(pageSize)\n            .sort({ _id: order });\n    }\n\n    _reviewsBySentenceHashAggregated(sentenceHash) {\n        return this.ClaimReviewModel.aggregate([\n            { $match: { sentence_hash: sentenceHash } },\n            // Virtual Populates doesn't work with aggregate\n            // https://stackoverflow.com/questions/47669178/mongoose-virtual-populate-and-aggregates\n            {\n                $lookup: {\n                    from: 'sources',\n                    localField: '_id',\n                    foreignField: 'targetId',\n                    as: 'sources'\n                }\n            },\n            {\n                $project: {\n                    _id: 1,\n                    sources: 1,\n                    report: 1,\n                    classification: 1,\n                    user: 1,\n                },\n            },\n        ]);\n    }\n\n    _topClassificationAccumulator() {\n        return {\n            $accumulator: {\n                init: function () {\n                    return {};\n                },\n                accumulate: function (state, classification) {\n                    if (!state[classification]) {\n                        state[classification] = 1;\n                    } else {\n                        state[classification]++;\n                    }\n\n                    return state;\n                },\n                accumulateArgs: [\"$classification\"],\n                merge: function (state1, state2) {\n                    return { ...state1, ...state2 };\n                },\n                finalize: function (state) {\n                    // Find the classification with bigger count\n                    const topClassification = Object.keys(state).reduce(\n                        (acc, classification) => {\n                            if (!state[acc]) {\n                                return classification;\n                            } else {\n                                return state[acc] >= state[classification]\n                                    ? acc\n                                    : classification;\n                            }\n                        },\n                        \"\"\n                    );\n                    // TODO: what can we do about ties?\n                    return {\n                        classification: topClassification,\n                        count: state[topClassification],\n                    };\n                },\n                lang: \"js\",\n            },\n        };\n    }\n\n    async create(claimReview) {\n        // Cast ObjectId\n        claimReview.personality = new Types.ObjectId(claimReview.personality);\n        claimReview.claim = new Types.ObjectId(claimReview.claim);\n        claimReview.user = new Types.ObjectId(claimReview.user);\n        const newClaimReview = new this.ClaimReviewModel(claimReview);\n        if (claimReview.sources && Array.isArray(claimReview.sources)) {\n            try {\n                for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClaimRevision.html":{"url":"classes/ClaimRevision.html","title":"class - ClaimRevision","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClaimRevision\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim-revision/schema/claim-revision.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                claimId\n                            \n                            \n                                content\n                            \n                            \n                                date\n                            \n                            \n                                personality\n                            \n                            \n                                slug\n                            \n                            \n                                title\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        claimId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Claim\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'Claim'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-revision/schema/claim-revision.schema.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-revision/schema/claim-revision.schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-revision/schema/claim-revision.schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        personality\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Personality\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'Personality'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-revision/schema/claim-revision.schema.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-revision/schema/claim-revision.schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-revision/schema/claim-revision.schema.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, validate: undefined, message: tag => })\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-revision/schema/claim-revision.schema.ts:38\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport * as mongoose from \"mongoose\";\nimport { Claim } from \"../../claim/schemas/claim.schema\";\nimport { Personality } from \"../../personality/schemas/personality.schema\"\n\nexport type ClaimRevisionDocument = ClaimRevision & mongoose.Document;\n\n@Schema({ toObject: {virtuals: true}, toJSON: {virtuals: true} })\nexport class ClaimRevision {\n    @Prop({ required: true })\n    title: string;\n\n    @Prop({ required: true })\n    slug: string;\n\n    @Prop({ type: Object, required: true })\n    content: object;\n\n    @Prop({ required: true })\n    date: Date;\n\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"Claim\",\n    })\n    claimId: Claim;\n\n    @Prop({\n        required: true,\n        validate: {\n            validator: (v) => {\n                return [\"speech\", \"twitter\"].indexOf(v) !== -1;\n            },\n        },\n        message: (tag) => `${tag} is not a valid claim type.`,\n    })\n    type: string;\n\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"Personality\",\n    })\n    personality: Personality;\n\n    // TODO: Let's not use the auto-increment yet\n    // mongodb will create a default _id field and we can use it for the first version\n    // @Prop({ required: true })\n    // revisionId: number;\n}\n\nconst ClaimRevisionSchemaRaw = SchemaFactory.createForClass(ClaimRevision);\n\nClaimRevisionSchemaRaw.virtual('reviews', {\n    ref: 'ClaimReview',\n    localField: '_id',\n    foreignField: 'claim'\n});\n\nexport const ClaimRevisionSchema = ClaimRevisionSchemaRaw;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ClaimRevisionModule.html":{"url":"modules/ClaimRevisionModule.html","title":"module - ClaimRevisionModule","body":"\n                   \n\n\n\n\n    Modules\n    ClaimRevisionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ClaimRevisionModule\n\n\n\ncluster_ClaimRevisionModule_exports\n\n\n\ncluster_ClaimRevisionModule_providers\n\n\n\ncluster_ClaimRevisionModule_imports\n\n\n\n\nParserModule\n\nParserModule\n\n\n\nClaimRevisionModule\n\nClaimRevisionModule\n\nClaimRevisionModule -->\n\nParserModule->ClaimRevisionModule\n\n\n\n\n\nSourceModule\n\nSourceModule\n\nClaimRevisionModule -->\n\nSourceModule->ClaimRevisionModule\n\n\n\n\n\nViewModule\n\nViewModule\n\nClaimRevisionModule -->\n\nViewModule->ClaimRevisionModule\n\n\n\n\n\nClaimRevisionService \n\nClaimRevisionService \n\nClaimRevisionService  -->\n\nClaimRevisionModule->ClaimRevisionService \n\n\n\n\n\nClaimRevisionService\n\nClaimRevisionService\n\nClaimRevisionModule -->\n\nClaimRevisionService->ClaimRevisionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/claim-revision/claim-revision.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ClaimRevisionService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ParserModule\n                        \n                        \n                            SourceModule\n                        \n                        \n                            ViewModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ClaimRevisionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { ClaimRevision, ClaimRevisionSchema } from \"./schema/claim-revision.schema\";\nimport { ParserModule } from \"../parser/parser.module\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { HttpModule } from \"@nestjs/axios\";\nimport { ViewModule } from \"../view/view.module\";\nimport { SourceModule } from \"../source/source.module\";\nimport { ClaimRevisionService } from \"./claim-revision.service\";\n\nconst ClaimRevisionModel = MongooseModule.forFeature([\n    {\n        name: ClaimRevision.name,\n        schema: ClaimRevisionSchema,\n    },\n]);\n\n@Module({\n    // TODO: clean-up Claim module after logic is fully migrated to ClaimRevision\n    imports: [\n        ClaimRevisionModel,\n        ParserModule,\n        ConfigModule,\n        HttpModule,\n        ViewModule,\n        SourceModule,\n    ],\n    exports: [ClaimRevisionService],\n    providers: [ClaimRevisionService],\n})\nexport class ClaimRevisionModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClaimRevisionService.html":{"url":"injectables/ClaimRevisionService.html","title":"injectable - ClaimRevisionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClaimRevisionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim-revision/claim-revision.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                optionsToUpdate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                getRevision\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ClaimRevisionModel: Model, sourceService: SourceService, parserService: ParserService)\n                    \n                \n                        \n                            \n                                Defined in server/claim-revision/claim-revision.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ClaimRevisionModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sourceService\n                                                  \n                                                        \n                                                                        SourceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        parserService\n                                                  \n                                                        \n                                                                        ParserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(claimId, claim)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-revision/claim-revision.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        an unique claim id\n\n                                    \n                                \n                                \n                                    claim\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Claim Content\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        Save the claimRevision in database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRevision\n                        \n                    \n                \n            \n            \n                \ngetRevision(claimId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-revision/claim-revision.service.ts:27\n                \n            \n\n\n            \n                \n                    get ClaimRevision by ID\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"ClaimService\")\n                    \n                \n                    \n                        \n                                Defined in server/claim-revision/claim-revision.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        optionsToUpdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in server/claim-revision/claim-revision.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {Injectable, Logger} from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport { Model } from \"mongoose\";\nimport slugify from 'slugify'\nimport { ParserService } from \"../parser/parser.service\";\nimport { SourceService } from \"../source/source.service\";\nimport { ClaimRevision, ClaimRevisionDocument } from \"./schema/claim-revision.schema\";\n\n@Injectable()\nexport class ClaimRevisionService {\n    private optionsToUpdate: { new: boolean; upsert: boolean };\n    private readonly logger = new Logger(\"ClaimService\");\n\n    constructor(\n        @InjectModel(ClaimRevision.name)\n        private ClaimRevisionModel: Model,\n        private sourceService: SourceService,\n        private parserService: ParserService\n    ) {\n        this.optionsToUpdate = {\n            new: true,\n            upsert: true,\n        };\n    }\n\n    /** get ClaimRevision by ID */\n    getRevision(claimId) {\n        return this.ClaimRevisionModel.findOne({ claimId })\n    }\n    /**\n     *\n     * @param claimId an unique claim id\n     * @param claim Claim Content\n     * @returns Save the claimRevision in database\n     */\n    async create(claimId, claim) {\n        claim.claimId = claimId;\n        claim.content = this.parserService.parse(claim.content);\n        claim.slug = slugify(claim.title, {\n            lower: true,     // convert to lower case, defaults to `false`\n            strict: true     // strip special characters except replacement, defaults to `false`\n        })\n        const newClaimRevision = new this.ClaimRevisionModel(claim);\n        if (claim.sources && Array.isArray(claim.sources)) {\n            try {\n                for (let source of claim.sources) {\n                    await this.sourceService.create({\n                        link: source,\n                        targetId: claimId,\n                        targetModel: \"Claim\",\n                    });\n                }\n            } catch (e) {\n                this.logger.error(e);\n                throw e;\n            }\n        }\n        return newClaimRevision.save();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClaimService.html":{"url":"injectables/ClaimService.html","title":"injectable - ClaimService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClaimService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim/claim.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                optionsToUpdate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                _getClaim\n                            \n                            \n                                    Private\n                                calculateOverallStats\n                            \n                            \n                                count\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getByPersonalityIdAndClaimSlug\n                            \n                            \n                                    Async\n                                listAll\n                            \n                            \n                                    Private\n                                    Async\n                                postProcess\n                            \n                            \n                                    Private\n                                transformContentObject\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(req: Request, ClaimModel, claimReviewService: ClaimReviewService, historyService: HistoryService, claimRevisionService: ClaimRevisionService)\n                    \n                \n                        \n                            \n                                Defined in server/claim/claim.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        req\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        ClaimModel\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        claimReviewService\n                                                  \n                                                        \n                                                                        ClaimReviewService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        historyService\n                                                  \n                                                        \n                                                                        HistoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        claimRevisionService\n                                                  \n                                                        \n                                                                        ClaimRevisionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        _getClaim\n                        \n                    \n                \n            \n            \n                \n                    \n                    _getClaim(match: ClaimMatchParameters, postprocess)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:161\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    match\n                                    \n                                                ClaimMatchParameters\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    postprocess\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        calculateOverallStats\n                        \n                    \n                \n            \n            \n                \n                    \n                    calculateOverallStats(claim)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:211\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claim\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         { totalClaims: number; totalClaimsReviewed: number; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        count\n                        \n                    \n                \n            \n            \n                \ncount(query: any)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(claim)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:66\n                \n            \n\n\n            \n                \n                    This function will create a new claim and claim Revision and save it to the dataBase.\nAlso creates a History Module that tracks creation of claims.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    claim\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ClaimBody received of the client.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        Return a new claim object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(claimId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:137\n                \n            \n\n\n            \n                \n                    This function does a soft deletion, doesn't delete claim in DataBase,\nbut omit its in the front page\nAlso creates a History Module that tracks deletion of claims.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Claim id which wants to delete\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        Returns the claim with the param isDeleted equal to true\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(claimId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:153\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByPersonalityIdAndClaimSlug\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByPersonalityIdAndClaimSlug(personalityId, claimSlug)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    personalityId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    claimSlug\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAll(page, pageSize, order, query)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    page\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageSize\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    order\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        postProcess\n                        \n                    \n                \n            \n            \n                \n                    \n                    postProcess(claim)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:182\n                \n            \n\n\n            \n                \n                    This function return all personality claims\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    claim\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        all personality claims\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        return all claims\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        transformContentObject\n                        \n                    \n                \n            \n            \n                \n                    \n                    transformContentObject(claimContent, reviews)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:230\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimContent\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    reviews\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(claimId, claimRevisionUpdate)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:101\n                \n            \n\n\n            \n                \n                    This function creates a new claim with the old claim data\nand overwrite with the new data, keeping data that hasn't changed.\nAlso creates a History Module that tracks updation of claims.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Claim id which wants updated.\n\n                                    \n                                \n                                \n                                    claimRevisionUpdate\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ClaimBody received of the client.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        Return a new claim object.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"ClaimService\")\n                    \n                \n                    \n                        \n                                Defined in server/claim/claim.service.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        optionsToUpdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in server/claim/claim.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, Logger, Scope } from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport { FilterQuery, Model, Types } from \"mongoose\";\nimport { Claim, ClaimDocument } from \"../claim/schemas/claim.schema\";\nimport { ClaimReviewService } from \"../claim-review/claim-review.service\";\nimport { ClaimRevisionService } from \"../claim-revision/claim-revision.service\";\nimport { HistoryService } from \"../history/history.service\"\nimport { HistoryType, TargetModel } from \"../history/schema/history.schema\";\nimport { ISoftDeletedModel } from 'mongoose-softdelete-typescript';\nimport { REQUEST } from '@nestjs/core';\nimport { Request } from 'express';\n\ntype ClaimMatchParameters = ({ _id: string } | { personality: string, slug: string }) & FilterQuery;\n\n@Injectable({ scope: Scope.REQUEST })\nexport class ClaimService {\n    private optionsToUpdate: { new: boolean; upsert: boolean };\n    private readonly logger = new Logger(\"ClaimService\");\n\n    constructor(\n        @Inject(REQUEST) private req: Request,\n        @InjectModel(Claim.name)\n        private ClaimModel: ISoftDeletedModel & Model,\n        private claimReviewService: ClaimReviewService,\n        private historyService: HistoryService,\n        private claimRevisionService: ClaimRevisionService,\n    ) {\n        this.optionsToUpdate = {\n            new: true,\n            upsert: true,\n        };\n    }\n\n    async listAll(page, pageSize, order, query) {\n        if (query.personality) {\n            query.personality = new Types.ObjectId(query.personality)\n        }\n        const claims = await this.ClaimModel.find(query)\n            .populate(\"latestRevision\")    \n            .skip(page * pageSize)\n            .limit(pageSize)\n            .sort({ _id: order })\n            .lean();\n            \n        return Promise.all(\n            claims.map(async (claim) => {\n                // This line may cause a false positive in sonarCloud because if we remove the await, we cannot iterate through the results\n                return this.postProcess({\n                    ...claim.latestRevision,\n                    ...claim\n                });\n            })\n        );\n    }\n\n    count(query: any = {}) {\n        return this.ClaimModel.countDocuments().where(query);\n    }\n\n    /**\n     * This function will create a new claim and claim Revision and save it to the dataBase.\n     * Also creates a History Module that tracks creation of claims.\n     * @param claim ClaimBody received of the client.\n     * @returns Return a new claim object.\n     */\n    async create(claim) {\n        claim.personality = new Types.ObjectId(claim.personality);\n        const newClaim = new this.ClaimModel(claim);\n        const newClaimRevision = await this.claimRevisionService.create(newClaim._id, claim)\n        newClaim.latestRevision = newClaimRevision._id\n        newClaim.slug = newClaimRevision.slug\n        \n        const user = this.req.user\n\n        const history =\n            this.historyService.getHistoryParams(\n                newClaim._id,\n                TargetModel.Claim,\n                user,\n                HistoryType.Create,\n                newClaim.latestRevision\n            )\n        await this.historyService.createHistory(history)\n\n        newClaim.save();\n\n        return {\n            ...newClaim.toObject(),\n            ...newClaimRevision.toObject()\n        }\n    }\n\n    /**\n     * This function creates a new claim with the old claim data \n     * and overwrite with the new data, keeping data that hasn't changed.\n     * Also creates a History Module that tracks updation of claims.\n     * @param claimId Claim id which wants updated.\n     * @param claimRevisionUpdate ClaimBody received of the client.\n     * @returns Return a new claim object.\n     */\n    async update(claimId, claimRevisionUpdate) {\n        const claim = await this._getClaim({ _id: claimId }, false);\n        const previousRevision = claim.toObject().latestRevision\n        delete previousRevision._id\n        const newClaimRevision =\n            await this.claimRevisionService.create(claim._id, {\n                ...previousRevision,\n                ...claimRevisionUpdate\n            })\n        claim.latestRevision = newClaimRevision._id\n        claim.slug = newClaimRevision.slug\n        \n        const user = this.req.user\n\n        const history =\n            this.historyService.getHistoryParams(\n                claimId,\n                TargetModel.Claim,\n                user,\n                HistoryType.Update,\n                newClaimRevision,\n                previousRevision\n            )\n        await this.historyService.createHistory(history)\n        \n        claim.save()\n        return newClaimRevision;\n    }\n\n    /**\n     * This function does a soft deletion, doesn't delete claim in DataBase,\n     * but omit its in the front page\n     * Also creates a History Module that tracks deletion of claims.\n     * @param claimId Claim id which wants to delete\n     * @returns Returns the claim with the param isDeleted equal to true\n     */\n    async delete(claimId) {\n        const user = this.req.user\n        const previousClaim = await this.getById(claimId)\n        const history = this.historyService.getHistoryParams(\n            claimId,\n            TargetModel.Claim,\n            user,\n            HistoryType.Delete,\n            null,\n            previousClaim\n        )\n        await this.historyService.createHistory(history)\n        return this.ClaimModel.softDelete({ _id: claimId });\n    }\n\n    // TODO: add optional revisionId that will fetch a specifc revision that matches\n    async getById(claimId) {\n        return this._getClaim({_id: claimId})\n    }\n\n    async getByPersonalityIdAndClaimSlug(personalityId, claimSlug) {\n        return this._getClaim({personality: personalityId, slug: claimSlug})\n    }\n\n    private async _getClaim(match: ClaimMatchParameters, postprocess = true) {\n        // This line may cause a false positive in sonarCloud because if we remove the await, we cannot iterate through the results\n        const claim =\n            await this.ClaimModel.findOne(match)\n                .populate(\"personality\", \"_id name\")\n                .populate(\"sources\", \"_id link classification\")\n                .populate(\"latestRevision\")\n\n        if (!claim) {\n            return {};\n        }\n\n\n        return postprocess === true ? this.postProcess(claim.toObject()) : claim;\n    }\n\n    /**\n     * This function return all personality claims\n     * @param claim all personality claims\n     * @returns return all claims\n     */\n    private async postProcess(claim) {\n        // TODO: we should not transform the object in this function\n        claim = {\n            ...claim.latestRevision, // the order matters\n            ...claim,\n            latestRevision: undefined\n        }\n        const reviews = await this.claimReviewService.getReviewsByClaimId(\n            claim._id\n        );\n        if (claim) {\n            if (claim?.content?.object) {\n                claim.content.object = this.transformContentObject(\n                    claim.content.object,\n                    reviews\n                );\n            }\n            const reviewStats =\n                await this.claimReviewService.getReviewStatsByClaimId(\n                    claim._id\n                );\n            const overallStats = this.calculateOverallStats(claim);\n            const stats = { ...reviewStats, ...overallStats };\n            claim = Object.assign(claim, { stats });\n        }\n\n        return claim;\n    }\n\n    private calculateOverallStats(claim) {\n        let totalClaims = 0;\n        let totalClaimsReviewed = 0;\n        if (claim?.content?.object) {\n            claim.content.object.forEach((p) => {\n                totalClaims += p.content.length;\n                p.content.forEach((sentence) => {\n                    if (sentence.props.topClassification) {\n                        totalClaimsReviewed++;\n                    }\n                });\n            }, 0);\n        }\n        return {\n            totalClaims,\n            totalClaimsReviewed,\n        };\n    }\n\n    private transformContentObject(claimContent, reviews) {\n        if (!claimContent || reviews.length  {\n            paragraph.content.forEach((sentence, sentenceIndex) => {\n                const claimReview = reviews.find((review) => {\n                    return review._id === sentence.props[\"data-hash\"];\n                });\n                if (claimReview) {\n                    claimContent[paragraphIndex].content[sentenceIndex].props =\n                        Object.assign(sentence.props, {\n                            topClassification: claimReview.topClassification,\n                        });\n                }\n            });\n        });\n        return claimContent;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateClaimDTO.html":{"url":"classes/CreateClaimDTO.html","title":"class - CreateClaimDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateClaimDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim/dto/create-claim.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                date\n                            \n                            \n                                personality\n                            \n                            \n                                recaptcha\n                            \n                            \n                                sources\n                            \n                            \n                                title\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/create-claim.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/create-claim.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        personality\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Personality\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/create-claim.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recaptcha\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/create-claim.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sources\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ArrayNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/create-claim.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/create-claim.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@IsAlpha()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/create-claim.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArrayNotEmpty, IsAlpha, IsArray, IsDateString, IsNotEmpty, IsString } from 'class-validator';\nimport { Personality } from \"../../personality/schemas/personality.schema\";\n\nexport class CreateClaimDTO {\n    @IsNotEmpty()\n    @IsString()\n    title: string;\n\n    @IsNotEmpty()\n    @IsString()\n    content: string;\n\n    @IsNotEmpty()\n    @IsString()\n    @IsDateString()\n    date: string;\n\n    @IsNotEmpty()\n    @IsString()\n    @IsAlpha()\n    type: string;\n\n    @IsArray()\n    @ArrayNotEmpty()\n    sources: string[];\n\n    @IsNotEmpty()\n    @IsString()\n    recaptcha: string;\n\n    @IsNotEmpty()\n    @IsString()\n    personality: Personality;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateClaimReview.html":{"url":"classes/CreateClaimReview.html","title":"class - CreateClaimReview","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateClaimReview\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim-review/dto/create-claim-review.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                claim\n                            \n                            \n                                classification\n                            \n                            \n                                personality\n                            \n                            \n                                recaptcha\n                            \n                            \n                                report\n                            \n                            \n                                sentence_content\n                            \n                            \n                                sentence_hash\n                            \n                            \n                                sources\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        claim\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Claim\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsAlphanumeric()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/dto/create-claim-review.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        classification\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@IsEnum(ClassificationEnum)\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/dto/create-claim-review.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        personality\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Personality\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsAlphanumeric()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/dto/create-claim-review.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recaptcha\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/dto/create-claim-review.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        report\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/dto/create-claim-review.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sentence_content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/dto/create-claim-review.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sentence_hash\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsAlphanumeric()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/dto/create-claim-review.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sources\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/dto/create-claim-review.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsAlphanumeric, IsArray, IsEnum, IsNotEmpty, IsString } from 'class-validator';\nimport { Personality } from \"../../personality/schemas/personality.schema\";\nimport { Claim } from \"../../claim/schemas/claim.schema\";\nimport { ClassificationEnum } from \"../schemas/claim-review.schema\"\nexport class CreateClaimReview {\n    @IsNotEmpty()\n    @IsString()\n    @IsEnum(ClassificationEnum)\n    classification: string;\n\n    @IsString()\n    @IsAlphanumeric()\n    claim: Claim;\n\n    @IsAlphanumeric()\n    personality: Personality;\n\n    @IsString()\n    @IsAlphanumeric()\n    sentence_hash: string;\n\n    @IsString()\n    sentence_content: string;\n\n    @IsNotEmpty()\n    @IsString()\n    report: string;\n\n    @IsString()\n    recaptcha: string\n\n    @IsNotEmpty()\n    @IsArray()\n    sources: string[]\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePersonality.html":{"url":"classes/CreatePersonality.html","title":"class - CreatePersonality","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePersonality\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/personality/dto/create-personality.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                    Optional\n                                image\n                            \n                            \n                                    Optional\n                                isAllowedProp\n                            \n                            \n                                name\n                            \n                            \n                                wikidata\n                            \n                            \n                                    Optional\n                                wikipedia\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/create-personality.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/create-personality.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        isAllowedProp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/create-personality.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MinLength(3)\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/create-personality.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wikidata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/create-personality.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        wikipedia\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/create-personality.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsNotEmpty, IsOptional, IsString, MinLength } from 'class-validator';\nexport class CreatePersonality {\n    @IsNotEmpty()\n    @IsString()\n    @MinLength(3)\n    name: string;\n\n    @IsString()\n    description: string;\n\n    @IsString()\n    wikidata: string;\n\n    @IsBoolean()\n    @IsOptional()\n    isAllowedProp?: boolean\n\n    @IsString()\n    @IsOptional()\n    image?: string\n\n    @IsString()\n    @IsOptional()\n    wikipedia?: string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailModule.html":{"url":"modules/EmailModule.html","title":"module - EmailModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_EmailModule_exports\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/email/email.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { EmailService } from \"./email.service\";\nimport { ConfigModule } from \"@nestjs/config\";\n\n\n@Module({\n    exports: [EmailService],\n    imports: [ConfigModule],\n    providers: [EmailService],\n})\nexport class EmailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/email/email.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTransport\n                            \n                            \n                                getEmailBody\n                            \n                            \n                                    Async\n                                sendEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in server/email/email.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createTransport\n                        \n                    \n                \n            \n            \n                \n                    \n                    createTransport()\n                \n            \n\n\n            \n                \n                    Defined in server/email/email.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEmailBody\n                        \n                    \n                \n            \n            \n                \ngetEmailBody(options, templatePath: string)\n                \n            \n\n\n            \n                \n                    Defined in server/email/email.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    templatePath\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"./template/email.html\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendEmail(to, subject, text, templateOptions, templatePath)\n                \n            \n\n\n            \n                \n                    Defined in server/email/email.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    to\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    subject\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    text\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    templateOptions\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    templatePath\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"EmailService\")\n                    \n                \n                    \n                        \n                                Defined in server/email/email.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nconst nodemailer = require(\"nodemailer\");\nconst handlebars = require(\"handlebars\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\n@Injectable()\nexport class EmailService {\n    private readonly logger = new Logger(\"EmailService\");\n\n    constructor(\n        private configService: ConfigService,\n    ) {}\n\n    getEmailBody (options, templatePath = \"./template/email.html\") {\n        const html = fs.readFileSync(path.resolve(__dirname, templatePath), {\n            encoding: \"utf-8\",\n        });\n        const template = handlebars.compile(html);\n        return template({\n            ...options,\n            baseUrl: this.configService.get(\"web_url\"),\n        });\n    }\n\n    async createTransport() {\n        const transporter = nodemailer.createTransport({\n            host: this.configService.get(\"smtp_host\"),\n            port: this.configService.get(\"smtp_port\"),\n            secure: this.configService.get(\"smtp_secure\"),\n            auth: {\n                user: this.configService.get(\"smtp_email_user\"),\n                pass: this.configService.get(\"smtp_email_pass\")\n            },\n        });\n        return transporter;\n    }\n\n    async sendEmail(to, subject, text, templateOptions, templatePath) {\n        const transporter = await this.createTransport();\n        const html = this.getEmailBody(templateOptions, templatePath);\n        const from = this.configService.get(\"smtp_email_user\")\n        this.logger.log(`Sending e-mail to ${to} ...`);\n        const emailResult = await transporter.sendMail({ from, to, subject, text, html })//.then(() => transporter.close());\n        return emailResult;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetClaimsByHashDTO.html":{"url":"classes/GetClaimsByHashDTO.html","title":"class - GetClaimsByHashDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetClaimsByHashDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim/dto/get-reviews-by-hash.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                language\n                            \n                            \n                                order\n                            \n                            \n                                page\n                            \n                            \n                                pageSize\n                            \n                            \n                                    Optional\n                                reviews\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsAlpha()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/get-reviews-by-hash.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/get-reviews-by-hash.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsInt()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/get-reviews-by-hash.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pageSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/get-reviews-by-hash.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        reviews\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/get-reviews-by-hash.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsAlpha, IsArray, IsInt, IsNumber, IsOptional, IsString, Min } from 'class-validator';\n\nexport class GetClaimsByHashDTO {\n    @IsNumber()\n    @IsInt()\n    @Min(0)\n    page: number;\n\n    @IsNumber()\n    @Min(0)\n    pageSize: number;\n\n    @IsString()\n    order: string;\n\n    @IsString()\n    @IsAlpha()\n    language: string;\n\n    @IsOptional()\n    @IsArray()\n    reviews?: string[];\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetClaimsDTO.html":{"url":"classes/GetClaimsDTO.html","title":"class - GetClaimsDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetClaimsDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim/dto/get-claims.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                language\n                            \n                            \n                                order\n                            \n                            \n                                page\n                            \n                            \n                                pageSize\n                            \n                            \n                                personality\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsAlpha()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/get-claims.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/get-claims.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsInt()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/get-claims.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pageSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/get-claims.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        personality\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/dto/get-claims.dto.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsAlpha, IsInt, IsNumber, IsString, Min } from 'class-validator';\nexport class GetClaimsDTO {\n    @IsNumber()\n    @IsInt()\n    @Min(0)\n    page: number;\n\n    @IsNumber()\n    @Min(0)\n    pageSize: number;\n\n    @IsString()\n    order: string;\n\n    @IsString()\n    @IsAlpha()\n    language: string;\n\n    @IsString()\n    personality: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPersonalities.html":{"url":"classes/GetPersonalities.html","title":"class - GetPersonalities","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPersonalities\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/personality/dto/get-personalities.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                language\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                order\n                            \n                            \n                                page\n                            \n                            \n                                pageSize\n                            \n                            \n                                    Optional\n                                withSuggestions\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsAlpha()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/get-personalities.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/get-personalities.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/get-personalities.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsInt()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/get-personalities.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pageSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/get-personalities.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        withSuggestions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/dto/get-personalities.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsAlpha, IsBoolean, IsInt, IsNumber, IsOptional, IsString, Min } from 'class-validator';\nexport class GetPersonalities {\n    @IsNumber()\n    @IsInt()\n    @Min(0)\n    page: number;\n\n    @IsNumber()\n    @Min(0)\n    pageSize: number;\n\n    @IsString()\n    order: string;\n\n    @IsString()\n    @IsAlpha()\n    language: string;\n\n    @IsBoolean()\n    @IsOptional()\n    withSuggestions?: boolean;\n\n    @IsString()\n    @IsOptional()\n    name?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/History.html":{"url":"classes/History.html","title":"class - History","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  History\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/history/schema/history.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                date\n                            \n                            \n                                details\n                            \n                            \n                                targetId\n                            \n                            \n                                targetModel\n                            \n                            \n                                type\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Date, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/history/schema/history.schema.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        details\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/history/schema/history.schema.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        targetId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, refPath: 'onModel'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/history/schema/history.schema.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        targetModel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TargetModel\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/history/schema/history.schema.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HistoryType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/history/schema/history.schema.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/history/schema/history.schema.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport * as mongoose from \"mongoose\";\nimport { User } from \"../../users/schemas/user.schema\";\n\nexport type HistoryDocument = History & mongoose.Document;\n\nexport enum TargetModel { \n  Claim = 'claim',\n  Personality = 'personality',\n}\n\nexport enum HistoryType { \n  Create = 'create',\n  Update = 'update',\n  Delete = 'delete'\n}\n@Schema({ toObject: {virtuals: true}, toJSON: {virtuals: true} })\nexport class History {\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        refPath: \"onModel\",\n    })\n    targetId: mongoose.Types.ObjectId;\n\n    @Prop({\n        required: true,\n    })\n    targetModel: TargetModel;\n\n    @Prop({\n      type: mongoose.Types.ObjectId,\n      required: true,\n      ref: \"User\",\n    })\n    user: User;\n        \n    @Prop({\n      required: true,\n    })\n    type: HistoryType //TODO: Validate if details field(after, before) it's optional or required based on type\n\n    @Prop({\n      type: Object,\n      required: true,\n    })\n    details: object\n\n    @Prop({\n      type: Date,\n      required: true,\n    })\n    date: mongoose.Date\n}\n\nexport const HistorySchema = SchemaFactory.createForClass(History);\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HistoryModule.html":{"url":"modules/HistoryModule.html","title":"module - HistoryModule","body":"\n                   \n\n\n\n\n    Modules\n    HistoryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HistoryModule\n\n\n\ncluster_HistoryModule_exports\n\n\n\ncluster_HistoryModule_providers\n\n\n\n\nHistoryService \n\nHistoryService \n\n\n\nHistoryModule\n\nHistoryModule\n\nHistoryService  -->\n\nHistoryModule->HistoryService \n\n\n\n\n\nHistoryService\n\nHistoryService\n\nHistoryModule -->\n\nHistoryService->HistoryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/history/history.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HistoryService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HistoryService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { HistorySchema } from \"./schema/history.schema\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { HistoryService } from \"./history.service\";\n\nconst HistoryModel = MongooseModule.forFeature([\n    {\n        name: \"HISTORY_MODEL\",\n        schema: HistorySchema,\n    },\n]);\n\n@Module({\n    imports: [\n        HistoryModel,\n        ConfigModule,\n    ],\n    exports: [HistoryService],\n    providers: [HistoryService],\n})\n\nexport class HistoryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HistoryService.html":{"url":"injectables/HistoryService.html","title":"injectable - HistoryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HistoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/history/history.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                optionsToUpdate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createHistory\n                            \n                            \n                                getHistoryParams\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(HistoryModel: Model)\n                    \n                \n                        \n                            \n                                Defined in server/history/history.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        HistoryModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createHistory\n                        \n                    \n                \n            \n            \n                \n                    \n                    createHistory(data)\n                \n            \n\n\n            \n                \n                    Defined in server/history/history.service.ts:58\n                \n            \n\n\n            \n                \n                    This function create a new history document to database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object with the history data\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        Returns a new history document to database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHistoryParams\n                        \n                    \n                \n            \n            \n                \ngetHistoryParams(dataId, targetModel, user, type, latestChange, previousChange: null)\n                \n            \n\n\n            \n                \n                    Defined in server/history/history.service.ts:31\n                \n            \n\n\n            \n                \n                    This function return an history object.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Target Id.\n\n                                    \n                                \n                                \n                                    targetModel\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The model of the target(claim or personality ).\n\n                                    \n                                \n                                \n                                    user\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        User who made the change.\n\n                                    \n                                \n                                \n                                    type\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Type of the change(create, personality or delete).\n\n                                    \n                                \n                                \n                                    latestChange\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Model latest change .\n\n                                    \n                                \n                                \n                                    previousChange\n                                    \n                                            null\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        null\n                                    \n\n                                    \n                                        Model previous change.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { targetId: any; targetModel: any; user: any; type: any; details: { after: any; before: any; }; date: any; }\n\n                    \n                    \n                        Returns an object with de params necessary to create an history.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"HistoryService\")\n                    \n                \n                    \n                        \n                                Defined in server/history/history.service.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        optionsToUpdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in server/history/history.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {Injectable, Logger} from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport { Model, Types } from \"mongoose\";\nimport { HistoryDocument } from \"./schema/history.schema\";\n\n@Injectable()\nexport class HistoryService {\n    private optionsToUpdate: { new: boolean; upsert: boolean };\n    private readonly logger = new Logger(\"HistoryService\");\n\n    constructor(\n        @InjectModel('HISTORY_MODEL')\n        private HistoryModel: Model,\n    ) {\n        this.optionsToUpdate = {\n            new: true,\n            upsert: true,\n        };\n    }\n\n    /**\n     * This function return an history object.\n     * @param dataId Target Id.\n     * @param targetModel The model of the target(claim or personality ).\n     * @param user User who made the change.\n     * @param type Type of the change(create, personality or delete).\n     * @param latestChange Model latest change .\n     * @param previousChange Model previous change.\n     * @returns Returns an object with de params necessary to create an history.\n     */\n    getHistoryParams(\n        dataId,\n        targetModel,\n        user,\n        type,\n        latestChange,\n        previousChange = null\n    ) {\n        const date = new Date()\n        return {\n            targetId: new Types.ObjectId(dataId),\n            targetModel,\n            user: user._id,\n            type,\n            details: {\n                after: latestChange,\n                before: previousChange\n            },\n            date,\n        }\n    }\n\n    /**\n     * This function create a new history document to database\n     * @param data Object with the history data\n     * @returns Returns a new history document to database\n     */\n    async createHistory(data) {\n        const newHistory = new this.HistoryModel(data);\n        return newHistory.save();\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HomeController.html":{"url":"controllers/HomeController.html","title":"controller - HomeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HomeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/home/home.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                showHome\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        showHome\n                        \n                    \n                \n            \n            \n                \n                    \n                    showHome(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('home')\n                \n            \n\n            \n                \n                    Defined in server/home/home.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Req, Res } from \"@nestjs/common\";\nimport { ViewService } from \"../view/view.service\";\nimport { Request, Response } from \"express\";\nimport { parse } from \"url\";\nimport { PersonalityService } from \"../personality/personality.service\";\nimport { StatsService } from \"../stats/stats.service\";\n\n@Controller(\"/\")\nexport class HomeController {\n    constructor(\n        private viewService: ViewService,\n        private personalityService: PersonalityService,\n        private statsService: StatsService\n    ) {}\n\n    @Get(\"home\")\n    public async showHome(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n        const { personalities } = await this.personalityService.combinedListAll({\n            // @ts-ignore\n            language: req.language,\n            order: 'random',\n            pageSize: 5,\n            fetchOnly: true\n        });\n        const stats = await this.statsService.getHomeStats();\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/home-page\",\n                Object.assign(parsedUrl.query, { personalities, stats })\n            );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HomeModule.html":{"url":"modules/HomeModule.html","title":"module - HomeModule","body":"\n                   \n\n\n\n\n    Modules\n    HomeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HomeModule\n\n\n\ncluster_HomeModule_imports\n\n\n\n\nPersonalityModule\n\nPersonalityModule\n\n\n\nHomeModule\n\nHomeModule\n\nHomeModule -->\n\nPersonalityModule->HomeModule\n\n\n\n\n\nStatsModule\n\nStatsModule\n\nHomeModule -->\n\nStatsModule->HomeModule\n\n\n\n\n\nViewModule\n\nViewModule\n\nHomeModule -->\n\nViewModule->HomeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/home/home.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HomeController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PersonalityModule\n                        \n                        \n                            StatsModule\n                        \n                        \n                            ViewModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { HomeController } from \"./home.controller\";\nimport {PersonalityModule} from \"../personality/personality.module\";\nimport {StatsModule} from \"../stats/stats.module\";\nimport {ViewModule} from \"../view/view.module\";\n\n@Module({\n    imports: [PersonalityModule, StatsModule, ViewModule],\n    providers: [],\n    controllers: [HomeController],\n})\nexport class HomeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/auth/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard(\"local\") {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalSerializer.html":{"url":"injectables/LocalSerializer.html","title":"injectable - LocalSerializer","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalSerializer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/auth/local.serializer.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in server/auth/local.serializer.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Model } from \"mongoose\";\nimport * as passport from \"passport\";\nimport { User, UserDocument } from \"../users/schemas/user.schema\";\nimport { InjectModel } from \"@nestjs/mongoose\";\n\n@Injectable()\nexport class LocalSerializer {\n    constructor(\n        @InjectModel(User.name) private userModel: Model\n    ) {\n        // @ts-ignore\n        passport.serializeUser(this.userModel.serializeUser());\n        // @ts-ignore\n        passport.deserializeUser(this.userModel.deserializeUser());\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/auth/local.strategy.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in server/auth/local.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import { Strategy } from \"passport-local\";\nimport { Model } from \"mongoose\";\nimport { Injectable } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { User, UserDocument } from \"../users/schemas/user.schema\";\nimport { InjectModel } from \"@nestjs/mongoose\";\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n    constructor(\n        @InjectModel(User.name) private userModel: Model\n    ) {\n        // @ts-ignore\n        super({ usernameField: \"email\" }, userModel.authenticate());\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Logger.html":{"url":"classes/Logger.html","title":"class - Logger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Logger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/logger.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            LoggerService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                log\n                            \n                            \n                                verbose\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger)\n                    \n                \n                        \n                            \n                                Defined in server/logger.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in server/logger.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(message: any, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in server/logger.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: any, trace?: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in server/logger.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    trace\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(message)\n                \n            \n\n\n            \n                \n                    Defined in server/logger.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verbose\n                        \n                    \n                \n            \n            \n                \nverbose(message: any, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in server/logger.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(message: any, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in server/logger.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { LoggerService } from \"@nestjs/common\";\n\nexport default class Logger implements LoggerService {\n    private logger: any;\n    constructor(logger) {\n        this.logger = logger;\n    }\n\n    log(message) {\n        this.logger.log(\"info\", message);\n    }\n\n    debug(message: any, context?: string): any {\n        this.logger.log(\"debug\", message);\n    }\n\n    error(message: any, trace?: string, context?: string): any {\n        this.logger.log(\"error\", message + trace);\n    }\n\n    verbose(message: any, context?: string): any {\n        this.logger.log(\"verbose\", message);\n    }\n\n    warn(message: any, context?: string): any {\n        this.logger.log(\"warn\", message);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotFoundFilter.html":{"url":"classes/NotFoundFilter.html","title":"class - NotFoundFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotFoundFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/filters/not-found.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                Filters out not found exceptions and redirect to our custom 404 page, avoiding the default json error message\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: NotFoundException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in server/filters/not-found.filter.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            NotFoundException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, ExceptionFilter, NotFoundException } from '@nestjs/common'\nimport { Response } from 'express';\n\n/**\n * Filters out not found exceptions and redirect to our custom 404 page, avoiding the default json error message\n */\n@Catch(NotFoundException)\nexport class NotFoundFilter implements ExceptionFilter {\n  catch(exception: NotFoundException, host: ArgumentsHost) {\n    const context = host.switchToHttp();\n    const response = context.getResponse();\n\n    response.redirect('/404')\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ParserModule.html":{"url":"modules/ParserModule.html","title":"module - ParserModule","body":"\n                   \n\n\n\n\n    Modules\n    ParserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ParserModule\n\n\n\ncluster_ParserModule_exports\n\n\n\ncluster_ParserModule_providers\n\n\n\n\nParserService \n\nParserService \n\n\n\nParserModule\n\nParserModule\n\nParserService  -->\n\nParserModule->ParserService \n\n\n\n\n\nParserService\n\nParserService\n\nParserModule -->\n\nParserService->ParserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/parser/parser.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ParserService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ParserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ParserService } from \"./parser.service\";\nimport { Module } from \"@nestjs/common\";\n\n@Module({\n    exports: [ParserService],\n    providers: [ParserService],\n})\nexport class ParserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParserService.html":{"url":"injectables/ParserService.html","title":"injectable - ParserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/parser/parser.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                nlpOptions\n                            \n                            \n                                paragraphSequence\n                            \n                            \n                                sentenceSequence\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createParagraphId\n                            \n                            \n                                createSentenceId\n                            \n                            \n                                parse\n                            \n                            \n                                parseSentence\n                            \n                            \n                                postProcessSentences\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createParagraphId\n                        \n                    \n                \n            \n            \n                \ncreateParagraphId()\n                \n            \n\n\n            \n                \n                    Defined in server/parser/parser.service.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createSentenceId\n                        \n                    \n                \n            \n            \n                \ncreateSentenceId()\n                \n            \n\n\n            \n                \n                    Defined in server/parser/parser.service.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parse\n                        \n                    \n                \n            \n            \n                \nparse(content: string)\n                \n            \n\n\n            \n                \n                    Defined in server/parser/parser.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { object: {}; text: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parseSentence\n                        \n                    \n                \n            \n            \n                \nparseSentence(sentenceContent)\n                \n            \n\n\n            \n                \n                    Defined in server/parser/parser.service.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentenceContent\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { type: string; props: { id: number; \"data-hash\": any; }; content: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postProcessSentences\n                        \n                    \n                \n            \n            \n                \npostProcessSentences(sentences)\n                \n            \n\n\n            \n                \n                    Defined in server/parser/parser.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentences\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        nlpOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : { trim:true }\n                    \n                \n                    \n                        \n                                Defined in server/parser/parser.service.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        paragraphSequence\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in server/parser/parser.service.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sentenceSequence\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in server/parser/parser.service.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nconst md5 = require(\"md5\");\nconst nlp = require('compromise')\nnlp.extend(require('compromise-sentences'))\nnlp.extend(require('compromise-paragraphs'))\n\n// TODO: regex for future rules\n// const alphabets = /([A-Za-z])/g;\nconst prefixes = /(Mr|St|Mrs|Ms|Dr)[.]/g;\nconst phdRegex = /Ph\\.D\\./g;\n// const suffixes = \"(Inc|Ltd|Jr|Sr|Co)\";\n// const starters = /(Mr|Mrs|Ms|Dr|He\\s|She\\s|It\\s|They\\s|Their\\s|Our\\s|We\\s|But\\s|However\\s|That\\s|This\\s|Wherever)/g;\n// const acronyms = /([A-Z][.][A-Z][.](?:[A-Z][.])?)/g;\n// const websites = /[.](com|net|org|io|gov)/g;\n\n@Injectable()\nexport class ParserService {\n    paragraphSequence: number;\n    sentenceSequence: number;\n    nlpOptions: object = { trim:true };\n\n    parse(content: string) {\n        this.paragraphSequence = 0;\n        this.sentenceSequence = 0;\n        const result = [];\n        const nlpContent = nlp(content);\n        const paragraphs = nlpContent.paragraphs();\n\n        paragraphs.forEach((paragraph) => {\n            const paragraphId = this.createParagraphId();\n            const sentences = this.postProcessSentences(paragraph.sentences());\n\n            if (sentences && sentences.length) {\n                result.push({\n                    type: \"paragraph\",\n                    props: {\n                        id: paragraphId,\n                    },\n                    content: sentences.map((sentence) => this.parseSentence(sentence)),\n                });\n            }\n        });\n\n        return {\n            object: result,\n            text: nlpContent.text(this.nlpOptions),\n        };\n    }\n\n    postProcessSentences(sentences) {\n        let newSentences = [];\n        sentences.forEach(sentence => {\n            const sentenceText = sentence.text(this.nlpOptions);\n            // Extract semicolon sentences\n            let semicolonSentences = sentenceText.split(\";\");\n            if (sentenceText.includes(\";\")) {\n                semicolonSentences = semicolonSentences.map(\n                    (semicolonSentence, index) => {\n                        return index !== (semicolonSentences.length - 1)\n                            ? `${semicolonSentence};`.trim()\n                            : semicolonSentence.trim();\n                    }\n                );\n            }\n            newSentences = newSentences.concat(semicolonSentences);\n        });\n        return newSentences;\n    }\n\n    parseSentence(sentenceContent) {\n        const sentenceId = this.createSentenceId();\n        const sentenceDataHash = md5(\n            `${this.paragraphSequence}${this.sentenceSequence}${sentenceContent}`\n        );\n\n        return {\n            type: \"sentence\",\n            props: {\n                id: sentenceId,\n                \"data-hash\": sentenceDataHash,\n            },\n            content: sentenceContent,\n        };\n    }\n\n    createParagraphId() {\n        this.paragraphSequence++;\n        return this.paragraphSequence;\n    }\n\n    createSentenceId() {\n        this.sentenceSequence++;\n        return this.sentenceSequence;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Personality.html":{"url":"classes/Personality.html","title":"class - Personality","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Personality\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/personality/schemas/personality.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                name\n                            \n                            \n                                slug\n                            \n                            \n                                wikidata\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/schemas/personality.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/schemas/personality.schema.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/schemas/personality.schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wikidata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true, sparse: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/schemas/personality.schema.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { softDeletePlugin } from 'mongoose-softdelete-typescript';\nimport * as mongoose from \"mongoose\";\n\nexport type PersonalityDocument = Personality & mongoose.Document;\n\n@Schema({ toJSON: { virtuals: true }, toObject: { virtuals: true } })\nexport class Personality {\n    @Prop({ required: true })\n    name: string;\n\n    @Prop({ required: true })\n    slug: string;\n\n    @Prop({ required: true })\n    description: string;\n\n    @Prop({ unique: true, sparse: true })\n    wikidata: string;\n}\n\n\nconst PersonalitySchemaRaw = SchemaFactory.createForClass(Personality);\n\nPersonalitySchemaRaw.virtual('claims', {\n    ref: 'Claim',\n    localField: '_id',\n    foreignField: 'personality'\n});\n\nPersonalitySchemaRaw.plugin(softDeletePlugin)\n\nexport const PersonalitySchema = PersonalitySchemaRaw;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PersonalityController.html":{"url":"controllers/PersonalityController.html","title":"controller - PersonalityController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PersonalityController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/personality/personality.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                getReviewStats\n                            \n                            \n                                    Async\n                                listAll\n                            \n                            \n                                    Public\n                                    Async\n                                personalityCreateSearch\n                            \n                            \n                                    Public\n                                    Async\n                                personalityList\n                            \n                            \n                                    Public\n                                    Async\n                                personalityPage\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createPersonality: CreatePersonality)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Post('api/personality')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createPersonality\n                                    \n                                                CreatePersonality\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(personalityId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Delete('api/personality/:id')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    personalityId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(personalityId, query)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('api/personality/:id')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    personalityId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getReviewStats\n                        \n                    \n                \n            \n            \n                \ngetReviewStats(personalityId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('api/personality/:id/reviews')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    personalityId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAll(getPersonalities: GetPersonalities)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('api/personality')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    getPersonalities\n                                    \n                                                GetPersonalities\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        personalityCreateSearch\n                        \n                    \n                \n            \n            \n                \n                    \n                    personalityCreateSearch(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Get('personality/search')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        personalityList\n                        \n                    \n                \n            \n            \n                \n                    \n                    personalityList(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('personality')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:130\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        personalityPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    personalityPage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('personality/:slug')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(personalityId, body)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Put('api/personality/:id')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    personalityId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Logger,\n    Param,\n    Post,\n    Put,\n    Query,\n    UseGuards,\n    Req,\n    Res\n} from \"@nestjs/common\";\nimport { parse } from \"url\";\nimport { Request, Response } from \"express\";\nimport { ViewService } from \"../view/view.service\";\nimport { PersonalityService } from \"./personality.service\";\nimport { SessionGuard } from \"../auth/session.guard\";\nimport { GetPersonalities } from \"./dto/get-personalities.dto\";\nimport { CreatePersonality } from \"./dto/create-personality.dto\";\n\n@Controller()\nexport class PersonalityController {\n    private readonly logger = new Logger(\"PersonalityController\");\n    constructor(\n        private personalityService: PersonalityService,\n        private viewService: ViewService\n    ) {}\n\n    @Get(\"api/personality\")\n    async listAll(@Query() getPersonalities: GetPersonalities) {\n        return this.personalityService.combinedListAll(getPersonalities);\n    }\n\n    @UseGuards(SessionGuard)\n    @Post(\"api/personality\")\n    async create(@Body() createPersonality: CreatePersonality) {\n        try {\n            return this.personalityService.create(createPersonality);\n        } catch (error) {\n            if (\n                error.name === \"MongoError\" &&\n                error.keyPattern &&\n                error.keyPattern.wikidata\n            ) {\n                error.message = `Personality with wikidata id ${error.keyValue.wikidata} already exists`;\n            }\n            this.logger.error(error);\n        }\n    }\n\n    @Get(\"api/personality/:id\")\n    async get(@Param(\"id\") personalityId, @Query() query) {\n        return this.personalityService\n            .getById(personalityId, query.language) // TODO: get language from request object in the future\n            .catch((err) => {\n                this.logger.error(err);\n            });\n    }\n\n    @UseGuards(SessionGuard)\n    @Put(\"api/personality/:id\")\n    async update(@Param(\"id\") personalityId, @Body() body) {\n        return this.personalityService.update(personalityId, body)\n    }\n\n    @UseGuards(SessionGuard)\n    @Delete(\"api/personality/:id\")\n    async delete(@Param(\"id\") personalityId) {\n        try {\n            await this.personalityService.delete(personalityId);\n            return { message: \"Personality successfully deleted\" };\n        } catch (error) {\n            this.logger.error(error);\n        }\n    }\n\n    @Get(\"api/personality/:id/reviews\")\n    getReviewStats(@Param(\"id\") personalityId) {\n        return this.personalityService\n            .getReviewStats(personalityId)\n            .catch((err) => {\n                this.logger.error(err);\n            });\n    }\n\n    @UseGuards(SessionGuard)\n    @Get(\"personality/search\")\n    public async personalityCreateSearch(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/personality-create-search\",\n                Object.assign(parsedUrl.query)\n            );\n    }\n\n    @Get(\"personality/:slug\")\n    public async personalityPage(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n        try {\n            const personality = await this.personalityService.getBySlug(\n                req.params.slug,\n                // @ts-ignore\n                req.language\n            );\n            await this.viewService\n                .getNextServer()\n                .render(\n                    req,\n                    res,\n                    \"/personality-page\",\n                    Object.assign(parsedUrl.query, { personality })\n                );\n        } catch {\n            await this.viewService\n                .getNextServer()\n                .render(req,res, '/404-page', Object.assign(parsedUrl.query))\n        }\n    }\n\n    @Get(\"personality\")\n    public async personalityList(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n        \n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/personality-list\",\n                Object.assign(parsedUrl.query, {})\n            );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PersonalityModule.html":{"url":"modules/PersonalityModule.html","title":"module - PersonalityModule","body":"\n                   \n\n\n\n\n    Modules\n    PersonalityModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PersonalityModule\n\n\n\ncluster_PersonalityModule_imports\n\n\n\ncluster_PersonalityModule_exports\n\n\n\ncluster_PersonalityModule_providers\n\n\n\n\nClaimReviewModule\n\nClaimReviewModule\n\n\n\nPersonalityModule\n\nPersonalityModule\n\nPersonalityModule -->\n\nClaimReviewModule->PersonalityModule\n\n\n\n\n\nClaimRevisionModule\n\nClaimRevisionModule\n\nPersonalityModule -->\n\nClaimRevisionModule->PersonalityModule\n\n\n\n\n\nHistoryModule\n\nHistoryModule\n\nPersonalityModule -->\n\nHistoryModule->PersonalityModule\n\n\n\n\n\nViewModule\n\nViewModule\n\nPersonalityModule -->\n\nViewModule->PersonalityModule\n\n\n\n\n\nWikidataModule\n\nWikidataModule\n\nPersonalityModule -->\n\nWikidataModule->PersonalityModule\n\n\n\n\n\nPersonalityService \n\nPersonalityService \n\nPersonalityService  -->\n\nPersonalityModule->PersonalityService \n\n\n\n\n\nPersonalityService\n\nPersonalityService\n\nPersonalityModule -->\n\nPersonalityService->PersonalityModule\n\n\n\n\n\nUtilService\n\nUtilService\n\nPersonalityModule -->\n\nUtilService->PersonalityModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/personality/personality.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PersonalityService\n                        \n                        \n                            UtilService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PersonalityController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClaimReviewModule\n                        \n                        \n                            ClaimRevisionModule\n                        \n                        \n                            HistoryModule\n                        \n                        \n                            ViewModule\n                        \n                        \n                            WikidataModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PersonalityService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PersonalityService } from \"./personality.service\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { Personality, PersonalitySchema } from \"./schemas/personality.schema\";\nimport { UtilService } from \"../util\";\nimport { WikidataModule } from \"../wikidata/wikidata.module\";\nimport { ClaimReviewModule } from \"../claim-review/claim-review.module\";\nimport { ClaimRevisionModule } from \"../claim-revision/claim-revision.module\";\nimport { HistoryModule } from \"../history/history.module\";\nimport { PersonalityController } from \"./personality.controller\";\nimport Logger from \"../logger\";\nimport { ViewModule } from \"../view/view.module\";\n\nconst PersonalityModel = MongooseModule.forFeature([\n    {\n        name: Personality.name,\n        schema: PersonalitySchema,\n    },\n]);\n\n@Module({\n    imports: [\n        PersonalityModel,\n        WikidataModule,\n        ClaimReviewModule,\n        ClaimRevisionModule,\n        HistoryModule,\n        ViewModule\n    ],\n    exports: [PersonalityService],\n    providers: [UtilService, PersonalityService, Logger],\n    controllers: [PersonalityController],\n})\nexport class PersonalityModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PersonalityService.html":{"url":"injectables/PersonalityService.html","title":"injectable - PersonalityService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PersonalityService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/personality/personality.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                    Readonly\n                                optionsToUpdate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                combinedListAll\n                            \n                            \n                                count\n                            \n                            \n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                extractClaimWithTextSummary\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getBySlug\n                            \n                            \n                                    Async\n                                getReviewStats\n                            \n                            \n                                    Async\n                                listAll\n                            \n                            \n                                    Async\n                                postProcess\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                verifyInputsQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(req: Request, PersonalityModel, claimReview: ClaimReviewService, history: HistoryService, wikidata: WikidataService, util: UtilService)\n                    \n                \n                        \n                            \n                                Defined in server/personality/personality.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        req\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        PersonalityModel\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        claimReview\n                                                  \n                                                        \n                                                                        ClaimReviewService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        history\n                                                  \n                                                        \n                                                                        HistoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        wikidata\n                                                  \n                                                        \n                                                                        WikidataService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        util\n                                                  \n                                                        \n                                                                        UtilService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        combinedListAll\n                        \n                    \n                \n            \n            \n                \ncombinedListAll(query)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:264\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        count\n                        \n                    \n                \n            \n            \n                \ncount(query: any)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:241\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(personality)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:82\n                \n            \n\n\n            \n                \n                    This function will create a new personality and save it to the dataBase.\nAlso creates a History Module that tracks creation of personalities.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    personality\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        PersonalityBody received of the client.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Return a new personality.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(personalityId)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:226\n                \n            \n\n\n            \n                \n                    This function does a soft deletion, doesn't delete claim in DataBase,\nbut omit its in the front page\nAlso creates a History Module that tracks deletion of personalities.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    personalityId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Personality Id which wants to delete\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        Returns the personality with the param isDeleted equal to true\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        extractClaimWithTextSummary\n                        \n                    \n                \n            \n            \n                \nextractClaimWithTextSummary(claims: any)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:245\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claims\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(personalityId, language: string)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    personalityId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"en\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getBySlug\n                        \n                    \n                \n            \n            \n                \n                    \n                    getBySlug(personalitySlug, language: string)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    personalitySlug\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"en\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getReviewStats\n                        \n                    \n                \n            \n            \n                \n                    \n                    getReviewStats(id)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:167\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAll(page, pageSize, order, query, language, withSuggestions)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    page\n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    pageSize\n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    order\n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    language\n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    withSuggestions\n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postProcess\n                        \n                    \n                \n            \n            \n                \n                    \n                    postProcess(personality, language: string)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    personality\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"en\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(personalityId, newPersonalityBody)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:184\n                \n            \n\n\n            \n                \n                    This function overwrites personality data with the new data,\nkeeping data that has not changed.\nAlso creates a History Module that tracks updation of personalities.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    personalityId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Personality id which wants updated.\n\n                                    \n                                \n                                \n                                    newPersonalityBody\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        PersonalityBody received of the client.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        Return changed personality.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifyInputsQuery\n                        \n                    \n                \n            \n            \n                \nverifyInputsQuery(query)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:255\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"PersonalityService\")\n                    \n                \n                    \n                        \n                                Defined in server/personality/personality.service.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        optionsToUpdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n        new: true,\n        upsert: true,\n    }\n                    \n                \n                    \n                        \n                                Defined in server/personality/personality.service.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, Logger, Scope } from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport { Model } from \"mongoose\";\nimport slugify from 'slugify'\nimport { Personality, PersonalityDocument } from \"./schemas/personality.schema\";\nimport { WikidataService } from \"../wikidata/wikidata.service\";\nimport { UtilService } from \"../util\";\nimport { ClaimReviewService } from \"../claim-review/claim-review.service\";\nimport { HistoryService } from \"../history/history.service\";\nimport { HistoryType, TargetModel } from \"../history/schema/history.schema\";\nimport { ISoftDeletedModel } from 'mongoose-softdelete-typescript';\nimport { REQUEST } from '@nestjs/core';\nimport { Request } from 'express';\n\n@Injectable({ scope: Scope.REQUEST })\nexport class PersonalityService {\n    private readonly logger = new Logger(\"PersonalityService\");\n    private readonly optionsToUpdate = {\n        new: true,\n        upsert: true,\n    };\n\n    constructor(\n        @Inject(REQUEST) private req: Request,\n        @InjectModel(Personality.name)\n        private PersonalityModel: ISoftDeletedModel & Model,\n        private claimReview: ClaimReviewService,\n        private history: HistoryService,\n        private wikidata: WikidataService,\n        private util: UtilService\n    ) {}\n    async listAll(\n        page,\n        pageSize,\n        order,\n        query,\n        language,\n        withSuggestions = false\n    ) {\n        let personalities;\n\n        if (order === 'random') {\n            // This line may cause a false positive in sonarCloud because if we remove the await, we cannot iterate through the results\n            personalities = await this.PersonalityModel.aggregate([\n                { $match: query },\n                { $sample: { size: pageSize } },\n            ])\n\n            \n        } else {\n            // This line may cause a false positive in sonarCloud because if we remove the await, we cannot iterate through the results\n            personalities = await this.PersonalityModel.find(query)\n                .skip(page * pageSize)\n                .limit(pageSize)\n                .sort({ _id: order })\n                .lean()\n        }\n\n        if (withSuggestions) {\n            const wbentities = await this.wikidata.queryWikibaseEntities(\n                query.name.$regex,\n                language\n            );\n            personalities = this.util.mergeObjectsInUnique(\n                [...wbentities, ...personalities],\n                \"wikidata\"\n            );\n        }\n        return Promise.all(\n            personalities.map(async (personality) => {\n                return await this.postProcess(personality, language);\n            })\n        );\n    }\n\n    /**\n     * This function will create a new personality and save it to the dataBase.\n     * Also creates a History Module that tracks creation of personalities.\n     * @param personality PersonalityBody received of the client.\n     * @returns Return a new personality.\n     */\n    create(personality) {\n        try {\n            personality.slug = slugify(personality.name, {\n                lower: true,     // convert to lower case, defaults to `false`\n                strict: true     // strip special characters except replacement, defaults to `false`\n            })\n            const newPersonality = new this.PersonalityModel(personality);\n            this.logger.log(\n                `Attempting to create new personality with data ${personality}`\n            );\n\n            const user = this.req.user\n\n            const history = this.history.getHistoryParams(\n                newPersonality._id,\n                TargetModel.Personality,\n                user,\n                HistoryType.Create,\n                personality\n            )\n\n            this.history.createHistory(history)\n\n            return newPersonality.save();\n        } catch (err) {}\n    }\n\n    async getById(personalityId, language = \"en\") {\n        const personality = await this.PersonalityModel.findById(\n            personalityId\n        ).populate({\n            path: \"claims\",\n            select: \"_id title content\",\n        });\n        this.logger.log(`Found personality ${personality._id}`);\n        return await this.postProcess(personality.toObject(), language);\n    }\n\n    async getBySlug(personalitySlug, language = \"en\") {\n        // This line may cause a false positive in sonarCloud because if we remove the await, we cannot iterate through the results\n        const personality: any = await this.PersonalityModel.findOne({\n            slug: personalitySlug\n        }).populate({\n            path: \"claims\",\n            populate: {\n                path: \"latestRevision\",\n                select: \"_id title content\"\n            },\n            select: \"_id\",\n        });\n        personality.claims = await Promise.all(personality.claims.map((claim) => {\n            return {\n                ...claim.lastestRevision,\n                ...claim\n            }\n        })) \n        this.logger.log(`Found personality ${personality._id}`);\n        return await this.postProcess(personality.toObject(), language);\n    }\n\n    async postProcess(personality, language: string = \"en\") {\n        if (personality) {\n            // TODO: allow wikdiata resolver to fetch in batches\n            const wikidataExtract = await this.wikidata.fetchProperties({\n                wikidataId: personality.wikidata,\n                language,\n            });\n            // bail out if wikidata property is not allowed\n            if (wikidataExtract.isAllowedProp === false) {\n                return;\n            }\n            return Object.assign(\n                wikidataExtract,\n                personality, {\n                stats:\n                    personality._id &&\n                    (await this.getReviewStats(personality._id)),\n                claims:\n                    personality.claims &&\n                    this.extractClaimWithTextSummary(personality.claims),\n            });\n        }\n        return personality;\n    }\n\n    async getReviewStats(id) {\n        const personality = await this.PersonalityModel.findById(id);\n        const reviews = await this.claimReview.agreggateClassification({\n            personality: personality._id,\n        });\n        this.logger.log(`Got stats ${reviews}`);\n        return this.util.formatStats(reviews, true);\n    }\n\n    /**\n     * This function overwrites personality data with the new data,\n     * keeping data that has not changed.\n     * Also creates a History Module that tracks updation of personalities.\n     * @param personalityId Personality id which wants updated.\n     * @param newPersonalityBody PersonalityBody received of the client.\n     * @returns Return changed personality.\n     */\n    async update(personalityId, newPersonalityBody) {\n        // eslint-disable-next-line no-useless-catch\n        if(newPersonalityBody.name) {\n            newPersonalityBody.slug = slugify(newPersonalityBody.name, {\n                lower: true,\n                strict: true\n            })\n        }\n        const personality = await this.getById(personalityId);\n        const previousPersonality = {...personality}\n        const newPersonality = Object.assign(personality, newPersonalityBody);\n        const personalityUpdate =\n            await this.PersonalityModel.findByIdAndUpdate(\n                personalityId,\n                newPersonality,\n                this.optionsToUpdate\n            );\n        this.logger.log(`Updated personality with data ${newPersonality}`);\n\n        const user = this.req.user;\n\n        const history =\n            this.history.getHistoryParams(\n                personalityId,\n                TargetModel.Personality,\n                user,\n                HistoryType.Update,\n                personalityUpdate,\n                previousPersonality\n            )\n        await this.history.createHistory(history)\n        \n        return personalityUpdate;\n    }\n\n    /**\n     * This function does a soft deletion, doesn't delete claim in DataBase,\n     * but omit its in the front page\n     * Also creates a History Module that tracks deletion of personalities.\n     * @param personalityId Personality Id which wants to delete\n     * @returns Returns the personality with the param isDeleted equal to true\n     */\n    async delete(personalityId) {\n        const user = this.req.user\n        const previousPersonality = await this.getById(personalityId)\n        const history = this.history.getHistoryParams(\n            personalityId,\n            TargetModel.Personality,\n            user,\n            HistoryType.Delete,\n            null,\n            previousPersonality\n        )\n        await this.history.createHistory(history)\n        return this.PersonalityModel.softDelete({ _id: personalityId });\n    }\n\n    count(query: any = {}) {\n        return this.PersonalityModel.countDocuments().where(query);\n    }\n\n    extractClaimWithTextSummary(claims: any) {\n        claims = Array.isArray(claims) ? claims : [claims];\n        return claims.map((claim) => {\n            if (!claim.content) {\n                return claim;\n            }\n            return { ...claim, content: claim.content.text };\n        });\n    }\n\n    verifyInputsQuery(query) {\n        const queryInputs = {};\n        if (query.name) {\n            // @ts-ignore\n            queryInputs.name = { $regex: query.name, $options: \"i\" };\n        }\n        return queryInputs;\n    }\n\n    combinedListAll(query) : any {\n        const { page = 0, pageSize = 10, order = \"asc\" } = query;\n        const queryInputs = this.verifyInputsQuery(query);\n\n        return Promise.all([\n            this.listAll(\n                page,\n                parseInt(pageSize, 10),\n                order,\n                queryInputs,\n                query.language,\n                query.withSuggestions\n            ),\n            this.count(queryInputs),\n        ])\n            .then(([personalities, totalPersonalities]) => {\n                const totalPages = Math.ceil(\n                    totalPersonalities / parseInt(pageSize, 10)\n                );\n\n                this.logger.log(\n                    `Found ${totalPersonalities} personalities. Page ${page} of ${totalPages}`\n                );\n\n                return {\n                    personalities,\n                    totalPersonalities,\n                    totalPages,\n                    page,\n                    pageSize,\n                };\n            })\n            .catch((error) => this.logger.error(error));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RootController.html":{"url":"controllers/RootController.html","title":"controller - RootController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RootController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/root/root.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                health\n                            \n                            \n                                robots\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        health\n                        \n                    \n                \n            \n            \n                \nhealth()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('health')\n                \n            \n\n            \n                \n                    Defined in server/root/root.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { status: string; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        robots\n                        \n                    \n                \n            \n            \n                \nrobots(res, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('robots.txt')\n                \n            \n\n            \n                \n                    Defined in server/root/root.controller.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Req, Res } from \"@nestjs/common\";\n\n@Controller(\"api\")\nexport class RootController {\n    @Get(\"robots.txt\")\n    robots(@Res() res, @Req() req) {\n        const host = req.protocol + \"://\" + req.get(\"host\");\n        res.type(\"text/plain\").end(\n            `User-agent: *\\nDisallow: /api\\nSitemap: ${host}/sitemap.xml`\n        );\n    }\n\n    @Get(\"health\")\n    health() {\n        return { status: \"ok\" };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/SessionGuard.html":{"url":"guards/SessionGuard.html","title":"guard - SessionGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    SessionGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                server/auth/session.guard.ts\n            \n\n\n\n\n                \n                Implements\n                \n                \n                                CanActivate\n                \n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in server/auth/session.guard.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n    CanActivate,\n    ExecutionContext,\n    UnauthorizedException,\n} from \"@nestjs/common\";\n\nexport class SessionGuard implements CanActivate {\n    canActivate(context: ExecutionContext): boolean | Promise {\n        const httpContext = context.switchToHttp();\n        const request = httpContext.getRequest();\n        const response = httpContext.getResponse();\n        try {\n            if (request.isAuthenticated && request.isAuthenticated()) {\n                return true;\n            } else {\n                if (request.url.startsWith(\"/api\")) {\n                    return false;\n                } else {\n                    response.redirect(\"/login\");\n                }\n            }\n        } catch (e) {\n            throw new UnauthorizedException();\n        }\n    }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SitemapController.html":{"url":"controllers/SitemapController.html","title":"controller - SitemapController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SitemapController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/sitemap/sitemap.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getSitemap\n                            \n                            \n                                    Async\n                                submitSitemap\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSitemap\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSitemap(res, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('sitemap.xml')@Header('Content-Type', 'text/xml')\n                \n            \n\n            \n                \n                    Defined in server/sitemap/sitemap.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitSitemap\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitSitemap(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Get('submit-sitemap')\n                \n            \n\n            \n                \n                    Defined in server/sitemap/sitemap.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    Header,\n    Request,\n    Res,\n    UseGuards,\n} from \"@nestjs/common\";\nimport { SessionGuard } from \"../auth/session.guard\";\nimport { SitemapService } from \"./sitemap.service\";\n\n@Controller(\"/\")\nexport class SitemapController {\n    constructor(private sitemapService: SitemapService) {}\n\n    @Get(\"sitemap.xml\")\n    @Header(\"Content-Type\", \"text/xml\")\n    async getSitemap(@Res() res, @Request() req) {\n        const sitemapXml = await this.sitemapService.getSitemap(\n            req.protocol + \"://\" + req.get(\"host\")\n        );\n        res.send(sitemapXml);\n    }\n\n    @UseGuards(SessionGuard)\n    @Get(\"submit-sitemap\")\n    async submitSitemap(@Request() req) {\n        return this.sitemapService.submitSitemap(\n            req.protocol + \"://\" + req.get(\"host\")\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SitemapModule.html":{"url":"modules/SitemapModule.html","title":"module - SitemapModule","body":"\n                   \n\n\n\n\n    Modules\n    SitemapModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SitemapModule\n\n\n\ncluster_SitemapModule_imports\n\n\n\ncluster_SitemapModule_providers\n\n\n\ncluster_SitemapModule_exports\n\n\n\n\nClaimModule\n\nClaimModule\n\n\n\nSitemapModule\n\nSitemapModule\n\nSitemapModule -->\n\nClaimModule->SitemapModule\n\n\n\n\n\nClaimReviewModule\n\nClaimReviewModule\n\nSitemapModule -->\n\nClaimReviewModule->SitemapModule\n\n\n\n\n\nPersonalityModule\n\nPersonalityModule\n\nSitemapModule -->\n\nPersonalityModule->SitemapModule\n\n\n\n\n\nSitemapService \n\nSitemapService \n\nSitemapService  -->\n\nSitemapModule->SitemapService \n\n\n\n\n\nSitemapService\n\nSitemapService\n\nSitemapModule -->\n\nSitemapService->SitemapModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/sitemap/sitemap.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SitemapService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SitemapController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClaimModule\n                        \n                        \n                            ClaimReviewModule\n                        \n                        \n                            PersonalityModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SitemapService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { SitemapController } from \"./sitemap.controller\";\nimport { PersonalityModule } from \"../personality/personality.module\";\nimport { ClaimModule } from \"../claim/claim.module\";\nimport { ClaimReviewModule } from \"../claim-review/claim-review.module\";\nimport { SitemapService } from \"./sitemap.service\";\n\n@Module({\n    imports: [PersonalityModule, ClaimModule, ClaimReviewModule],\n    controllers: [SitemapController],\n    providers: [SitemapService],\n    exports: [SitemapService],\n})\nexport class SitemapModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SitemapService.html":{"url":"injectables/SitemapService.html","title":"injectable - SitemapService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SitemapService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/sitemap/sitemap.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getSitemap\n                            \n                            \n                                    Async\n                                submitSitemap\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(personalityService: PersonalityService, claimService: ClaimService, claimReviewService: ClaimReviewService)\n                    \n                \n                        \n                            \n                                Defined in server/sitemap/sitemap.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        personalityService\n                                                  \n                                                        \n                                                                        PersonalityService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        claimService\n                                                  \n                                                        \n                                                                        ClaimService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        claimReviewService\n                                                  \n                                                        \n                                                                        ClaimReviewService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSitemap\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSitemap(hostname)\n                \n            \n\n\n            \n                \n                    Defined in server/sitemap/sitemap.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    hostname\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitSitemap\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitSitemap(hostname)\n                \n            \n\n\n            \n                \n                    Defined in server/sitemap/sitemap.service.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    hostname\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"SitemapService\")\n                    \n                \n                    \n                        \n                                Defined in server/sitemap/sitemap.service.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from \"@nestjs/common\";\nimport { SitemapStream, streamToPromise } from \"sitemap\";\nimport { PersonalityService } from \"../personality/personality.service\";\nimport { ClaimService } from \"../claim/claim.service\";\nimport { ClaimReviewService } from \"../claim-review/claim-review.service\";\nconst axios = require(\"axios\");\n\n@Injectable()\nexport class SitemapService {\n    constructor(\n        private personalityService: PersonalityService,\n        private claimService: ClaimService,\n        private claimReviewService: ClaimReviewService\n    ) {}\n    private readonly logger = new Logger(\"SitemapService\");\n\n    async getSitemap(hostname) {\n        const sites: any[] = [\n            { url: \"/\" },\n            { url: \"/home\" },\n            { url: \"/about\" },\n            { url: \"/privacy-policy\" },\n            { url: \"/code-of-conduct\" },\n            { url: \"/login\" },\n            { url: \"/profile\" },\n            { url: \"/personality\" },\n        ];\n\n        // TODO: Add a loop strategy that paginates the results to improve performance\n        const personalities: any[] = await this.personalityService.listAll(\n            0,\n            0,\n            \"asc\",\n            {},\n            \"pt\",\n            false\n        );\n\n        for (const personality of personalities) {\n            sites.push({ url: `/personality/${personality.slug}` });\n            const claims = await this.claimService.listAll(0, 0, \"asc\", {\n                personality: personality._id,\n            });\n\n            for (const claim of claims) {\n                sites.push({\n                    url: `/personality/${personality.slug}/claim/${claim.slug}`,\n                });\n                // This line may cause a false positive in sonarCloud because if we remove the await, we cannot iterate through the results\n                const reviews =\n                    await this.claimReviewService.getReviewsByClaimId(\n                        claim._id\n                    );\n                for (const review of reviews) {\n                    sites.push({\n                        url: `/personality/${personality.slug}/claim/${claim.slug}/sentence/${review._id}`,\n                        priority: 0.9,\n                    });\n                }\n            }\n        }\n        const sitemapStream = new SitemapStream({\n            hostname,\n        });\n        for (const site of sites) {\n            sitemapStream.write(site);\n        }\n        sitemapStream.end();\n\n        return streamToPromise(sitemapStream);\n    }\n\n    async submitSitemap(hostname) {\n        try {\n            await axios.get(\n                `https://google.com/ping?sitemap=${hostname}/sitemap.xml`\n            );\n            return \"Sitemap submitted\";\n        } catch (e) {\n            const message =\n                \"Error while submitting sitemap to search engine: \" + e.message;\n            this.logger.error(message);\n            return message;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Source.html":{"url":"classes/Source.html","title":"class - Source","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Source\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/source/schemas/source.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                classification\n                            \n                            \n                                description\n                            \n                            \n                                link\n                            \n                            \n                                targetId\n                            \n                            \n                                targetModel\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        classification\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({validate: undefined, message: tag => })\n                        \n                    \n                \n                    \n                        \n                                Defined in server/source/schemas/source.schema.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/source/schemas/source.schema.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        link\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/source/schemas/source.schema.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        targetId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, refPath: 'onModel'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/source/schemas/source.schema.ts:37\n                        \n                    \n\n            \n                \n                    Use Dynamic ref https://mongoosejs.com/docs/populate.html#dynamic-ref\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        targetModel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, enum: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/source/schemas/source.schema.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/source/schemas/source.schema.ts:50\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport * as mongoose from \"mongoose\";\nimport { User } from \"../../users/schemas/user.schema\";\n\nexport type SourceDocument = Source & mongoose.Document;\n\n@Schema()\nexport class Source {\n    @Prop({ required: true })\n    link: string;\n\n    @Prop({\n        validate: {\n            validator: (v) => {\n                return (\n                    [\"unclassified\", \"reliable\", \"unreliable\", \"fake\"].indexOf(\n                        v\n                    ) !== -1\n                );\n            },\n        },\n        message: (tag) => `${tag} is not a valid classification.`,\n    })\n    classification: string;\n\n    @Prop()\n    description: string;\n\n    /**\n     * Use Dynamic ref https://mongoosejs.com/docs/populate.html#dynamic-ref\n     */\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        refPath: \"onModel\",\n    })\n    targetId: mongoose.Types.ObjectId;\n\n    @Prop({\n        required: true,\n        enum: [\"Claim\", \"ClaimReview\"],\n    })\n    targetModel: string;\n\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"User\",\n    })\n    user: User;\n}\n\nexport const SourceSchema = SchemaFactory.createForClass(Source);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SourceController.html":{"url":"controllers/SourceController.html","title":"controller - SourceController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SourceController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/source/source.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getSourcesClaim\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getSourcesClaim\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSourcesClaim(params, getSources: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('api/source/:targetId')\n                \n            \n\n            \n                \n                    Defined in server/source/source.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    getSources\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Logger, Param, Query } from \"@nestjs/common\";\nimport { SourceService } from \"./source.service\";\n\n@Controller()\nexport class SourceController {\n    private readonly logger = new Logger(\"SourceController\");\n    constructor(private sourceService: SourceService) {}\n\n    @Get(\"api/source/:targetId\")\n    public async getSourcesClaim(@Param() params, @Query() getSources: any) {\n        const { targetId } = params;\n        const { page, order } = getSources;\n        const pageSize = parseInt(getSources.pageSize, 10)\n        return this.sourceService\n            .getByTargetId(targetId, page, pageSize, order)\n            .then((sources) => {\n                const totalSources = sources.length;\n                const totalPages = Math.ceil(\n                    totalSources / pageSize\n                );\n                this.logger.log(\n                    `Found ${totalSources} sources for targetId ${targetId}. Page ${page} of ${totalPages}`\n                );\n                return { sources, totalSources, totalPages, page, pageSize };\n            })\n            .catch();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SourceModule.html":{"url":"modules/SourceModule.html","title":"module - SourceModule","body":"\n                   \n\n\n\n\n    Modules\n    SourceModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SourceModule\n\n\n\ncluster_SourceModule_providers\n\n\n\ncluster_SourceModule_exports\n\n\n\n\nSourceService \n\nSourceService \n\n\n\nSourceModule\n\nSourceModule\n\nSourceService  -->\n\nSourceModule->SourceService \n\n\n\n\n\nSourceService\n\nSourceService\n\nSourceModule -->\n\nSourceService->SourceModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/source/source.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SourceService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SourceController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SourceService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { Source, SourceSchema } from \"./schemas/source.schema\";\nimport { SourceController } from \"./source.controller\";\nimport { SourceService } from \"./source.service\";\n\nconst SourceModel = MongooseModule.forFeature([\n    {\n        name: Source.name,\n        schema: SourceSchema,\n    },\n]);\n\n@Module({\n    imports: [SourceModel],\n    providers: [SourceService],\n    exports: [SourceService],\n    controllers: [SourceController],\n})\nexport class SourceModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SourceService.html":{"url":"injectables/SourceService.html","title":"injectable - SourceService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SourceService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/source/source.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                getByTargetId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(SourceModel: Model)\n                    \n                \n                        \n                            \n                                Defined in server/source/source.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        SourceModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data)\n                \n            \n\n\n            \n                \n                    Defined in server/source/source.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByTargetId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByTargetId(targetId, page, pageSize, order: string)\n                \n            \n\n\n            \n                \n                    Defined in server/source/source.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    targetId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    page\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    pageSize\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    order\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"asc\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Model, Types } from \"mongoose\";\nimport { SourceDocument, Source } from \"./schemas/source.schema\";\nimport { InjectModel } from \"@nestjs/mongoose\";\n\n@Injectable()\nexport class SourceService {\n    constructor(\n        @InjectModel(Source.name)\n        private SourceModel: Model\n    ) {}\n    async create(data) {\n        data.targetId = new Types.ObjectId(data.targetId);\n        data.user = new Types.ObjectId(data.user);\n        const source = new this.SourceModel(data);\n        await source.save();\n        return source;\n    }\n\n    async getByTargetId(targetId, page, pageSize, order = \"asc\") {\n        targetId = new Types.ObjectId(targetId);\n\n        return this.SourceModel.find({ targetId })\n        .skip(page * pageSize)\n        .limit(pageSize)\n        .sort({ _id: order });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StatsController.html":{"url":"controllers/StatsController.html","title":"controller - StatsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StatsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/stats/stats.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/stats\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHomeStats\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHomeStats\n                        \n                    \n                \n            \n            \n                \ngetHomeStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('home')\n                \n            \n\n            \n                \n                    Defined in server/stats/stats.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport {StatsService} from \"./stats.service\";\n\n@Controller(\"api/stats\")\nexport class StatsController {\n    constructor(\n        private statsService: StatsService,\n    ) {}\n    @Get(\"home\")\n    getHomeStats() {\n        return this.statsService.getHomeStats();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StatsModule.html":{"url":"modules/StatsModule.html","title":"module - StatsModule","body":"\n                   \n\n\n\n\n    Modules\n    StatsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StatsModule\n\n\n\ncluster_StatsModule_providers\n\n\n\ncluster_StatsModule_imports\n\n\n\ncluster_StatsModule_exports\n\n\n\n\nClaimModule\n\nClaimModule\n\n\n\nStatsModule\n\nStatsModule\n\nStatsModule -->\n\nClaimModule->StatsModule\n\n\n\n\n\nClaimReviewModule\n\nClaimReviewModule\n\nStatsModule -->\n\nClaimReviewModule->StatsModule\n\n\n\n\n\nPersonalityModule\n\nPersonalityModule\n\nStatsModule -->\n\nPersonalityModule->StatsModule\n\n\n\n\n\nStatsService \n\nStatsService \n\nStatsService  -->\n\nStatsModule->StatsService \n\n\n\n\n\nStatsService\n\nStatsService\n\nStatsModule -->\n\nStatsService->StatsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/stats/stats.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StatsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StatsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClaimModule\n                        \n                        \n                            ClaimReviewModule\n                        \n                        \n                            PersonalityModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StatsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { StatsController } from \"./stats.controller\";\nimport { PersonalityModule } from \"../personality/personality.module\";\nimport { ClaimModule } from \"../claim/claim.module\";\nimport { ClaimReviewModule } from \"../claim-review/claim-review.module\";\nimport {StatsService} from \"./stats.service\";\n\n@Module({\n    imports: [PersonalityModule, ClaimModule, ClaimReviewModule],\n    controllers: [StatsController],\n    providers: [StatsService],\n    exports: [StatsService]\n})\nexport class StatsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StatsService.html":{"url":"injectables/StatsService.html","title":"injectable - StatsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StatsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/stats/stats.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHomeStats\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(claimReviewService: ClaimReviewService, personalityService: PersonalityService, claimService: ClaimService)\n                    \n                \n                        \n                            \n                                Defined in server/stats/stats.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        claimReviewService\n                                                  \n                                                        \n                                                                        ClaimReviewService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        personalityService\n                                                  \n                                                        \n                                                                        PersonalityService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        claimService\n                                                  \n                                                        \n                                                                        ClaimService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHomeStats\n                        \n                    \n                \n            \n            \n                \ngetHomeStats()\n                \n            \n\n\n            \n                \n                    Defined in server/stats/stats.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Injectable} from \"@nestjs/common\";\nimport {ClaimReviewService} from \"../claim-review/claim-review.service\";\nimport {PersonalityService} from \"../personality/personality.service\";\nimport {ClaimService} from \"../claim/claim.service\";\n\n@Injectable()\nexport class StatsService {\n    constructor(\n        private claimReviewService: ClaimReviewService,\n        private personalityService: PersonalityService,\n        private claimService: ClaimService\n    ) {}\n\n    getHomeStats() {\n        return Promise.all([\n            this.claimService.count(),\n            this.personalityService.count(),\n            this.claimReviewService.count(),\n        ]).then((values) => {\n            return {\n                claims: values[0],\n                personalities: values[1],\n                reviews: values[2],\n            };\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateClaimDTO.html":{"url":"classes/UpdateClaimDTO.html","title":"class - UpdateClaimDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateClaimDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim/dto/update-claim.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/mapped-types\"\nimport { CreateClaimDTO } from \"./create-claim.dto\";\n\nexport class UpdateClaimDTO extends PartialType(CreateClaimDTO){}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/users/schemas/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstPasswordChanged\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/users/schemas/user.schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstPasswordChanged\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/users/schemas/user.schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/users/schemas/user.schema.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { Document } from \"mongoose\";\n\nexport interface UserDocument extends User, Document {\n    authenticate(): any;\n}\n\n@Schema()\nexport class User {\n    @Prop({ required: true })\n    name: string;\n\n    @Prop({ required: true, unique: true })\n    email: string;\n\n    @Prop({ required: true, default: false })\n    firstPasswordChanged: boolean;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserDocument.html":{"url":"interfaces/UserDocument.html","title":"interface - UserDocument","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserDocument\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/users/schemas/user.schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        User\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        authenticate\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate()\n                \n            \n\n\n            \n                \n                    Defined in server/users/schemas/user.schema.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { Document } from \"mongoose\";\n\nexport interface UserDocument extends User, Document {\n    authenticate(): any;\n}\n\n@Schema()\nexport class User {\n    @Prop({ required: true })\n    name: string;\n\n    @Prop({ required: true, unique: true })\n    email: string;\n\n    @Prop({ required: true, default: false })\n    firstPasswordChanged: boolean;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/users/users.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Public\n                                    Async\n                                personalityList\n                            \n                            \n                                    Public\n                                    Async\n                                profile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    changePassword(req, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Put('api/user/:id/password')\n                \n            \n\n            \n                \n                    Defined in server/users/users.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Get('api/user/validate')\n                \n            \n\n            \n                \n                    Defined in server/users/users.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Post('api/user/signin')\n                \n            \n\n            \n                \n                    Defined in server/users/users.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        personalityList\n                        \n                    \n                \n            \n            \n                \n                    \n                    personalityList(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('login')\n                \n            \n\n            \n                \n                    Defined in server/users/users.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        profile\n                        \n                    \n                \n            \n            \n                \n                    \n                    profile(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Get('profile')\n                \n            \n\n            \n                \n                    Defined in server/users/users.controller.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get, Logger,\n    Post, Put, Req,\n    Res,\n    UseGuards,\n} from \"@nestjs/common\";\nimport {Request, Response} from \"express\";\nimport { UsersService } from \"./users.service\";\nimport { LocalAuthGuard } from \"../auth/local-auth.guard\";\nimport { SessionGuard } from \"../auth/session.guard\";\nimport { parse } from \"url\";\nimport { ViewService } from \"../view/view.service\";\nimport * as mongoose from \"mongoose\";\n\n@Controller()\nexport class UsersController {\n    private readonly logger = new Logger(\"UserController\");\n    constructor(\n        private readonly usersService: UsersService,\n        private viewService: ViewService\n    ) {}\n\n    @UseGuards(SessionGuard)\n    @Get(\"api/user/validate\")\n    async findAll(@Req() req): Promise {\n        return { login: true, user: req.user };\n    }\n\n    @UseGuards(LocalAuthGuard)\n    @Post(\"api/user/signin\")\n    async login(@Req() req, @Res() res) {\n        return req.logIn(req.user, (err) => {\n            return res.send({ login: true });\n        });\n    }\n\n    @UseGuards(SessionGuard)\n    @Put(\"api/user/:id/password\")\n    async changePassword(@Req() req, @Res() res) {\n        const { currentPassword, newPassword, repeatedNewPassword } = req.body;\n\n        try {\n            if (req.params.id !== req.user._id.toString()) {\n                throw Error(\"Invalid user attempting to change password\");\n            }\n            if (newPassword !== repeatedNewPassword) {\n                throw Error(\"Repeated password doesn't match\");\n            }\n            this.usersService\n                .changePassword(new mongoose.Types.ObjectId(req.params.id), currentPassword, newPassword)\n                .then(() => {\n                    res.status(200).json({\n                        success: true,\n                        message: \"Password reset successful\"\n                    });\n                }).catch(e => {\n                    this.logger.error(e);\n                    res.status(500).json({ message: e.message });\n                });\n        } catch (e) {\n            this.logger.error(e);\n            res.status(500).json({ message: e.message });\n        }\n    }\n\n    @Get(\"login\")\n    public async personalityList(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/login\",\n                Object.assign(parsedUrl.query, {})\n            );\n    }\n\n    @UseGuards(SessionGuard)\n    @Get(\"profile\")\n    public async profile(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/profile-page\",\n                Object.assign(parsedUrl.query, {})\n            );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nViewModule\n\nViewModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nViewModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ViewModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { User, UserSchema } from \"./schemas/user.schema\";\nimport { UsersService } from \"./users.service\";\nimport { UsersController } from \"./users.controller\";\nimport { ViewModule } from \"../view/view.module\";\n\nconst UserModel = MongooseModule.forFeatureAsync([\n    {\n        name: User.name,\n        useFactory: () => {\n            const schema = UserSchema;\n            schema.plugin(require(\"passport-local-mongoose\"), {\n                usernameField: \"email\",\n            });\n            return schema;\n        },\n    },\n]);\n\n@Module({\n    imports: [UserModel, ViewModule],\n    exports: [UsersService, UserModel],\n    controllers: [UsersController],\n    providers: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(UserModel: Model)\n                    \n                \n                        \n                            \n                                Defined in server/users/users.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        UserModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    changePassword(userId, currentPassword, newPassword)\n                \n            \n\n\n            \n                \n                    Defined in server/users/users.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentPassword\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newPassword\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in server/users/users.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(userId)\n                \n            \n\n\n            \n                \n                    Defined in server/users/users.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(user)\n                \n            \n\n\n            \n                \n                    Defined in server/users/users.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"UserService\")\n                    \n                \n                    \n                        \n                                Defined in server/users/users.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Model } from \"mongoose\";\nimport {Injectable, Logger} from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport { User, UserDocument } from \"./schemas/user.schema\";\n\n@Injectable()\nexport class UsersService {\n    private readonly logger = new Logger(\"UserService\");\n    constructor(\n        @InjectModel(User.name) private UserModel: Model\n    ) {}\n\n    async findAll(): Promise {\n        return this.UserModel.find().exec();\n    }\n\n    register(user) {\n        // @ts-ignore\n        return this.UserModel.register(\n            new this.UserModel(user),\n            user.password\n        );\n    }\n\n    async getById(userId) {\n        const user = await this.UserModel.findById(userId);\n        this.logger.log(`Found user ${user._id}`);\n        return user;\n    }\n\n    async changePassword(userId, currentPassword, newPassword) {\n        const user = await this.getById(userId);\n        // @ts-ignore\n        return user.changePassword(currentPassword, newPassword).then(() => {\n            if (user.firstPasswordChanged === false) {\n                this.logger.log(`User ${user._id} changed first password`);\n                user.firstPasswordChanged = true;\n            }\n            this.logger.log(`User ${user._id} changed password`);\n            user.save();\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UtilService.html":{"url":"injectables/UtilService.html","title":"injectable - UtilService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UtilService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/util.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                formatStats\n                            \n                            \n                                mergeObjectsInUnique\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        formatStats\n                        \n                    \n                \n            \n            \n                \nformatStats(reviews, slice)\n                \n            \n\n\n            \n                \n                    Defined in server/util.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    reviews\n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    slice\n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { total: any; reviews: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mergeObjectsInUnique\n                        \n                    \n                \n            \n            \n                \nmergeObjectsInUnique(array: T[], property: any)\n                \n            \n\n\n            \n                \n                    Defined in server/util.ts:26\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    https://medium.com/javascript-in-plain-english/javascript-merge-duplicate-objects-in-array-of-objects-9a76c3a1c35c\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    array\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    property\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\n@Injectable()\nexport class UtilService {\n    formatStats(reviews, slice = false) {\n        const total = reviews.reduce((agg, review) => {\n            agg += review.count;\n            return agg;\n        }, 0);\n        const result = reviews.map((review) => {\n            const percentage = (review.count / total) * 100;\n            return {\n                _id: review._id,\n                percentage: percentage.toFixed(0),\n                count: review.count,\n            };\n        });\n        return { total, reviews: slice ? result.slice(0, 3) : result };\n    }\n\n    /**\n     * https://medium.com/javascript-in-plain-english/javascript-merge-duplicate-objects-in-array-of-objects-9a76c3a1c35c\n     * @param array\n     * @param property\n     */\n    mergeObjectsInUnique(array: T[], property: any): T[] {\n        const newArray = new Map();\n\n        array.forEach((item: T) => {\n            const propertyValue = item[property];\n            newArray.has(propertyValue)\n                ? newArray.set(propertyValue, {\n                      ...item,\n                      ...newArray.get(propertyValue),\n                  })\n                : newArray.set(propertyValue, item);\n        });\n\n        return Array.from(newArray.values());\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ViewController.html":{"url":"controllers/ViewController.html","title":"controller - ViewController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ViewController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/view/view.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                assets\n                            \n                            \n                                    Public\n                                    Async\n                                codeOfConductPage\n                            \n                            \n                                    Async\n                                handler\n                            \n                            \n                                    Public\n                                    Async\n                                show404\n                            \n                            \n                                    Public\n                                    Async\n                                showAboutPage\n                            \n                            \n                                    Public\n                                    Async\n                                showHome\n                            \n                            \n                                    Public\n                                    Async\n                                showPrivacyPolicyPage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        assets\n                        \n                    \n                \n            \n            \n                \n                    \n                    assets(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('_next*')\n                \n            \n\n            \n                \n                    Defined in server/view/view.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        codeOfConductPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    codeOfConductPage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('code-of-conduct')\n                \n            \n\n            \n                \n                    Defined in server/view/view.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handler\n                        \n                    \n                \n            \n            \n                \n                    \n                    handler(req: Request, res: Response)\n                \n            \n\n\n            \n                \n                    Defined in server/view/view.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        show404\n                        \n                    \n                \n            \n            \n                \n                    \n                    show404(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('404')\n                \n            \n\n            \n                \n                    Defined in server/view/view.controller.ts:74\n                \n            \n\n\n            \n                \n                    Redirects to our custom 404 page.\nThe render404() method was not used here as it conflicts with our i18n strategy.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        showAboutPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    showAboutPage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('about')\n                \n            \n\n            \n                \n                    Defined in server/view/view.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        showHome\n                        \n                    \n                \n            \n            \n                \n                    \n                    showHome(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in server/view/view.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        showPrivacyPolicyPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    showPrivacyPolicyPage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('privacy-policy')\n                \n            \n\n            \n                \n                    Defined in server/view/view.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Res, Req } from \"@nestjs/common\";\nimport { Request, Response } from \"express\";\nimport { parse } from \"url\";\nimport { ViewService } from \"./view.service\";\n\n@Controller(\"/\")\nexport class ViewController {\n    constructor(private viewService: ViewService) {}\n\n    async handler(req: Request, res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n\n        await this.viewService\n            .getNextServer()\n            .render(req, res, parsedUrl.pathname, parsedUrl.query);\n    }\n\n    @Get()\n    public async showHome(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n\n        await this.viewService\n            .getNextServer()\n            .render(req, res, \"/landing-page\", Object.assign(parsedUrl.query));\n    }\n\n    @Get(\"about\")\n    public async showAboutPage(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n\n        await this.viewService\n            .getNextServer()\n            .render(req, res, \"/about-page\", Object.assign(parsedUrl.query));\n    }\n\n    @Get(\"privacy-policy\")\n    public async showPrivacyPolicyPage(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n\n        await this.viewService\n            .getNextServer()\n            .render(req, res, \"/privacy-policy-page\", Object.assign(parsedUrl.query));\n    }\n\n    @Get(\"code-of-conduct\")\n    public async codeOfConductPage(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n\n        await this.viewService\n            .getNextServer()\n            .render(req, res, \"/code-of-conduct-page\", Object.assign(parsedUrl.query));\n    }\n\n    @Get(\"_next*\")\n    public async assets(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n\n        await this.viewService\n            .getNextServer()\n            .render(req, res, parsedUrl.pathname, parsedUrl.query);\n    }\n\n    /**\n     * Redirects to our custom 404 page.\n     * The render404() method was not used here as it conflicts with our i18n strategy.\n     */\n    @Get(\"404\")\n    public async show404(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n\n        await this.viewService\n            .getNextServer()\n            .render(req,res, '/404-page', Object.assign(parsedUrl.query))\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ViewModule.html":{"url":"modules/ViewModule.html","title":"module - ViewModule","body":"\n                   \n\n\n\n\n    Modules\n    ViewModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ViewModule\n\n\n\ncluster_ViewModule_providers\n\n\n\ncluster_ViewModule_exports\n\n\n\n\nViewService \n\nViewService \n\n\n\nViewModule\n\nViewModule\n\nViewService  -->\n\nViewModule->ViewService \n\n\n\n\n\nViewService\n\nViewService\n\nViewModule -->\n\nViewService->ViewModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/view/view.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ViewService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ViewController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ViewService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ViewController } from \"./view.controller\";\nimport { ViewService } from \"./view.service\";\n\n@Module({\n    imports: [],\n    providers: [ViewService],\n    controllers: [ViewController],\n    exports: [ViewService]\n})\nexport class ViewModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ViewService.html":{"url":"injectables/ViewService.html","title":"injectable - ViewService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ViewService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/view/view.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getNextServer\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in server/view/view.service.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getNextServer\n                        \n                    \n                \n            \n            \n                \ngetNextServer()\n                \n            \n\n\n            \n                \n                    Defined in server/view/view.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     NextServer\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in server/view/view.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"ViewService\")\n                    \n                \n                    \n                        \n                                Defined in server/view/view.service.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     NextServer\n\n                    \n                \n                    \n                        \n                                Defined in server/view/view.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {Injectable, Logger, OnModuleInit} from \"@nestjs/common\";\nimport createServer from \"next\";\nimport { NextServer } from \"next/dist/server/next\";\n\n@Injectable()\nexport class ViewService implements OnModuleInit {\n    private server: NextServer;\n    private readonly logger = new Logger(\"ViewService\");\n\n    constructor() {}\n\n    async onModuleInit(): Promise {\n        try {\n            this.server = await createServer({\n                dev: process.env.ENVIRONMENT === \"watch-dev\",\n                dir: \"./\",\n            });\n            await this.server.prepare();\n        } catch (error) {\n            this.logger.error(\"Failed to load NextServer\", error);\n        }\n    }\n\n    getNextServer(): NextServer {\n        return this.server;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WikidataCache.html":{"url":"classes/WikidataCache.html","title":"class - WikidataCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WikidataCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/wikidata/schemas/wikidata.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                language\n                            \n                            \n                                props\n                            \n                            \n                                wikidataId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/wikidata/schemas/wikidata.schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/wikidata/schemas/wikidata.schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        props\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/wikidata/schemas/wikidata.schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wikidataId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/wikidata/schemas/wikidata.schema.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { Document } from \"mongoose\";\n\nexport type WikidataCacheDocument = WikidataCache & Document;\n\n@Schema()\nexport class WikidataCache {\n    @Prop({ required: true })\n    wikidataId: string;\n\n    @Prop({ required: true })\n    language: string;\n\n    @Prop({ type: Object, required: true })\n    props: object;\n\n    @Prop({ default: Date.now })\n    createdAt: Date;\n}\n\nexport const WikidataCacheSchema = SchemaFactory.createForClass(WikidataCache);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WikidataModule.html":{"url":"modules/WikidataModule.html","title":"module - WikidataModule","body":"\n                   \n\n\n\n\n    Modules\n    WikidataModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_WikidataModule\n\n\n\ncluster_WikidataModule_providers\n\n\n\ncluster_WikidataModule_exports\n\n\n\n\nWikidataService \n\nWikidataService \n\n\n\nWikidataModule\n\nWikidataModule\n\nWikidataService  -->\n\nWikidataModule->WikidataService \n\n\n\n\n\nWikidataService\n\nWikidataService\n\nWikidataModule -->\n\nWikidataService->WikidataModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/wikidata/wikidata.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            WikidataService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            WikidataService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { WikidataService } from \"./wikidata.service\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { WikidataCache, WikidataCacheSchema } from \"./schemas/wikidata.schema\";\n\nconst WikidataCacheModel = MongooseModule.forFeatureAsync([\n    {\n        name: WikidataCache.name,\n        useFactory: () => {\n            const wikidataCacheSchema = WikidataCacheSchema;\n            wikidataCacheSchema.index(\n                { wikidataId: 1, language: 1 },\n                { unique: true }\n            );\n            wikidataCacheSchema.index(\n                { createdAt: 1 },\n                { expireAfterSeconds: 86400 }\n            );\n            return wikidataCacheSchema;\n        },\n    },\n]);\n\n@Module({\n    imports: [WikidataCacheModel],\n    exports: [WikidataService],\n    providers: [WikidataService],\n})\nexport class WikidataModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WikidataService.html":{"url":"injectables/WikidataService.html","title":"injectable - WikidataService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WikidataService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/wikidata/wikidata.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                extractProperties\n                            \n                            \n                                extractValue\n                            \n                            \n                                    Async\n                                fetchProperties\n                            \n                            \n                                    Async\n                                getCommonsThumbURL\n                            \n                            \n                                getSiteLinkName\n                            \n                            \n                                queryWikibaseEntities\n                            \n                            \n                                    Async\n                                requestProperties\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(WikidataCache: Model)\n                    \n                \n                        \n                            \n                                Defined in server/wikidata/wikidata.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        WikidataCache\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        extractProperties\n                        \n                    \n                \n            \n            \n                \n                    \n                    extractProperties(wikidata, language: string)\n                \n            \n\n\n            \n                \n                    Defined in server/wikidata/wikidata.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    wikidata\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"en\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        extractValue\n                        \n                    \n                \n            \n            \n                \nextractValue(wikidata, property, language)\n                \n            \n\n\n            \n                \n                    Defined in server/wikidata/wikidata.service.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    wikidata\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    property\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    language\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        fetchProperties\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchProperties(params)\n                \n            \n\n\n            \n                \n                    Defined in server/wikidata/wikidata.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCommonsThumbURL\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCommonsThumbURL(imageTitle)\n                \n            \n\n\n            \n                \n                    Defined in server/wikidata/wikidata.service.ts:153\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imageTitle\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSiteLinkName\n                        \n                    \n                \n            \n            \n                \ngetSiteLinkName(language)\n                \n            \n\n\n            \n                \n                    Defined in server/wikidata/wikidata.service.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    language\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        queryWikibaseEntities\n                        \n                    \n                \n            \n            \n                \nqueryWikibaseEntities(query, language: string)\n                \n            \n\n\n            \n                \n                    Defined in server/wikidata/wikidata.service.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"en\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        requestProperties\n                        \n                    \n                \n            \n            \n                \n                    \n                    requestProperties(params)\n                \n            \n\n\n            \n                \n                    Defined in server/wikidata/wikidata.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Model } from \"mongoose\";\nimport { Injectable } from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport {\n    WikidataCache,\n    WikidataCacheDocument,\n} from \"./schemas/wikidata.schema\";\n\nconst axios = require(\"axios\");\n\nconst languageVariantMap = {\n    \"pt-br\": \"pt\",\n};\n\n@Injectable()\nexport class WikidataService {\n    constructor(\n        @InjectModel(WikidataCache.name)\n        private WikidataCache: Model\n    ) {}\n\n    async fetchProperties(params) {\n        const wikidataCache = await this.WikidataCache.findOne({\n            wikidataId: params.wikidataId,\n            language: params.language,\n        }).exec();\n        if (!wikidataCache) {\n            const props = await this.requestProperties(params);\n            const newWikidataCache = new this.WikidataCache({\n                ...params,\n                props,\n            });\n            newWikidataCache.save();\n            return props;\n        }\n        return wikidataCache.props;\n    }\n\n    async requestProperties(params) {\n        const { data } = await axios.get(\"https://www.wikidata.org/w/api.php\", {\n            params: {\n                action: \"wbgetentities\",\n                ids: encodeURIComponent(params.wikidataId),\n                format: \"json\",\n                formatversion: \"2\",\n            },\n        });\n        const entities = data && data.entities;\n        return this.extractProperties(\n            entities && entities[params.wikidataId],\n            params.language\n        );\n    }\n\n    async extractProperties(wikidata, language = \"en\"): Promise {\n        const wikidataProps = {\n            name: undefined,\n            description: undefined,\n            isAllowedProp: undefined,\n            image: undefined,\n            wikipedia: undefined,\n        };\n        if (!wikidata) {\n            return {};\n        }\n\n        // Get label for the personality name\n        wikidataProps.name = this.extractValue(wikidata, \"labels\", language);\n\n        // Get description for the personality description\n        wikidataProps.description = this.extractValue(\n            wikidata,\n            \"descriptions\",\n            language\n        );\n\n        if (wikidata.claims.P31) {\n            const wikidataInstanceof =\n                wikidata.claims.P31[0].mainsnak.datavalue.value;\n            wikidataProps.isAllowedProp = wikidataInstanceof.id === \"Q5\";\n        } else {\n            wikidataProps.isAllowedProp = false;\n        }\n\n        // Extract image if it exists\n        if (wikidata.claims.P18) {\n            const fileName = wikidata.claims.P18[0].mainsnak.datavalue.value;\n            wikidataProps.image = await this.getCommonsThumbURL(fileName);\n        }\n        const siteLinkName = this.getSiteLinkName(language);\n        if (wikidata.sitelinks[siteLinkName]) {\n            const wikiLang = siteLinkName.match(/^(.*)wiki$/)[1];\n            const wikiTitle = wikidata.sitelinks[siteLinkName].title;\n            if (wikiLang && wikiTitle) {\n                wikidataProps.wikipedia = `https://${wikiLang.replace(\n                    \"_\",\n                    \"-\"\n                )}.wikipedia.org/wiki/${encodeURI(wikiTitle)}`;\n            }\n        }\n        return wikidataProps;\n    }\n\n    getSiteLinkName(language) {\n        if (languageVariantMap[language]) {\n            language = languageVariantMap[language];\n        }\n        return `${language}wiki`;\n    }\n\n    extractValue(wikidata, property, language) {\n        if (!wikidata[property]) {\n            return;\n        }\n        const languageFallback =\n            wikidata[property] && wikidata[property][language]\n                ? language\n                : \"en\";\n        return (\n            wikidata[property][languageFallback] &&\n            wikidata[property][languageFallback].value\n        );\n    }\n\n    queryWikibaseEntities(query, language = \"en\") {\n        const params = {\n            action: \"wbsearchentities\",\n            search: query,\n            format: \"json\",\n            errorformat: \"plaintext\",\n            language,\n            type: \"item\",\n            origin: \"*\",\n        };\n\n        return axios\n            .get(`https://www.wikidata.org/w/api.php`, { params })\n            .then((response) => {\n                const { search } = response && response.data;\n                return search.map((wbentity) => {\n                    if (!wbentity.label) {\n                        return;\n                    }\n                    return {\n                        name: wbentity.label,\n                        description: wbentity.description,\n                        wikidata: wbentity.id,\n                    };\n                });\n            });\n    }\n\n    async getCommonsThumbURL(imageTitle) {\n        const { data } = await axios.get(\n            \"https://commons.wikimedia.org/w/api.php\",\n            {\n                params: {\n                    action: \"query\",\n                    titles: `File:${imageTitle}`,\n                    prop: \"imageinfo\",\n                    iiprop: \"url\",\n                    iiurlwidth: 400,\n                    format: \"json\",\n                    formatversion: \"2\",\n                },\n            }\n        );\n        const { pages } = data && data.query;\n        if (pages.length \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                server/auth/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/auth/local.serializer.ts\n            \n            injectable\n            LocalSerializer\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/auth/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/auth/session.guard.ts\n            \n            guard\n            SessionGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/claim-review/claim-review.controller.ts\n            \n            controller\n            ClaimReviewController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                server/claim-review/claim-review.module.ts\n            \n            variable\n            ClaimReviewModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim-review/claim-review.service.ts\n            \n            injectable\n            ClaimReviewService\n            \n                6 %\n                (1/16)\n            \n        \n        \n            \n                \n                server/claim-review/dto/create-claim-review.dto.ts\n            \n            class\n            CreateClaimReview\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                server/claim-review/schemas/claim-review.schema.ts\n            \n            class\n            ClaimReview\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                server/claim-review/schemas/claim-review.schema.ts\n            \n            variable\n            ClaimReviewSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim-review/schemas/claim-review.schema.ts\n            \n            variable\n            ClaimReviewSchemaRaw\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim-revision/claim-revision.module.ts\n            \n            variable\n            ClaimRevisionModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim-revision/claim-revision.service.ts\n            \n            injectable\n            ClaimRevisionService\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                server/claim-revision/schema/claim-revision.schema.ts\n            \n            class\n            ClaimRevision\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                server/claim-revision/schema/claim-revision.schema.ts\n            \n            variable\n            ClaimRevisionSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim-revision/schema/claim-revision.schema.ts\n            \n            variable\n            ClaimRevisionSchemaRaw\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim/claim.controller.ts\n            \n            controller\n            ClaimController\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                server/claim/claim.module.ts\n            \n            variable\n            ClaimModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim/claim.service.ts\n            \n            injectable\n            ClaimService\n            \n                26 %\n                (4/15)\n            \n        \n        \n            \n                \n                server/claim/dto/create-claim.dto.ts\n            \n            class\n            CreateClaimDTO\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                server/claim/dto/get-claims.dto.ts\n            \n            class\n            GetClaimsDTO\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                server/claim/dto/get-reviews-by-hash.dto.ts\n            \n            class\n            GetClaimsByHashDTO\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                server/claim/dto/update-claim.dto.ts\n            \n            class\n            UpdateClaimDTO\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim/schemas/claim.schema.ts\n            \n            class\n            Claim\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                server/claim/schemas/claim.schema.ts\n            \n            variable\n            ClaimSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim/schemas/claim.schema.ts\n            \n            variable\n            ClaimSchemaRaw\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/email/email.service.ts\n            \n            injectable\n            EmailService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                server/email/email.service.ts\n            \n            variable\n            fs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/email/email.service.ts\n            \n            variable\n            handlebars\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/email/email.service.ts\n            \n            variable\n            nodemailer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/email/email.service.ts\n            \n            variable\n            path\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/filters/not-found.filter.ts\n            \n            class\n            NotFoundFilter\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                server/history/history.module.ts\n            \n            variable\n            HistoryModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/history/history.service.ts\n            \n            injectable\n            HistoryService\n            \n                33 %\n                (2/6)\n            \n        \n        \n            \n                \n                server/history/schema/history.schema.ts\n            \n            class\n            History\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                server/history/schema/history.schema.ts\n            \n            variable\n            HistorySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/home/home.controller.ts\n            \n            controller\n            HomeController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/logger.ts\n            \n            class\n            Logger\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                server/main.ts\n            \n            variable\n            cookieParser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/main.ts\n            \n            variable\n            initApp\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/main.ts\n            \n            variable\n            mongodb_host\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/main.ts\n            \n            variable\n            mongodb_name\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/main.ts\n            \n            variable\n            MongoStore\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/middleware/language.middleware.ts\n            \n            function\n            GetLanguageMiddleware\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/parser/parser.service.ts\n            \n            injectable\n            ParserService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                server/parser/parser.service.ts\n            \n            variable\n            md5\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/parser/parser.service.ts\n            \n            variable\n            nlp\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/parser/parser.service.ts\n            \n            variable\n            phdRegex\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/parser/parser.service.ts\n            \n            variable\n            prefixes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/personality/dto/create-personality.dto.ts\n            \n            class\n            CreatePersonality\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                server/personality/dto/get-personalities.dto.ts\n            \n            class\n            GetPersonalities\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                server/personality/personality.controller.ts\n            \n            controller\n            PersonalityController\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                server/personality/personality.module.ts\n            \n            variable\n            PersonalityModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/personality/personality.service.ts\n            \n            injectable\n            PersonalityService\n            \n                18 %\n                (3/16)\n            \n        \n        \n            \n                \n                server/personality/schemas/personality.schema.ts\n            \n            class\n            Personality\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                server/personality/schemas/personality.schema.ts\n            \n            variable\n            PersonalitySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/personality/schemas/personality.schema.ts\n            \n            variable\n            PersonalitySchemaRaw\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/root/root.controller.ts\n            \n            controller\n            RootController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                server/seed.ts\n            \n            variable\n            initApp\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/seed.ts\n            \n            variable\n            mongodb_host\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/seed.ts\n            \n            variable\n            mongodb_name\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/server.ts\n            \n            variable\n            ServiceRunner\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/sitemap/sitemap.controller.ts\n            \n            controller\n            SitemapController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                server/sitemap/sitemap.service.ts\n            \n            injectable\n            SitemapService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                server/sitemap/sitemap.service.ts\n            \n            variable\n            axios\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/source/schemas/source.schema.ts\n            \n            class\n            Source\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                server/source/schemas/source.schema.ts\n            \n            variable\n            SourceSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/source/source.controller.ts\n            \n            controller\n            SourceController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/source/source.module.ts\n            \n            variable\n            SourceModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/source/source.service.ts\n            \n            injectable\n            SourceService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                server/stats/stats.controller.ts\n            \n            controller\n            StatsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/stats/stats.service.ts\n            \n            injectable\n            StatsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                server/users/schemas/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                server/users/schemas/user.schema.ts\n            \n            interface\n            UserDocument\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/users/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                server/users/users.module.ts\n            \n            variable\n            UserModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                server/util.ts\n            \n            injectable\n            UtilService\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                server/view/view.controller.ts\n            \n            controller\n            ViewController\n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                server/view/view.service.ts\n            \n            injectable\n            ViewService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                server/wikidata/schemas/wikidata.schema.ts\n            \n            class\n            WikidataCache\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                server/wikidata/schemas/wikidata.schema.ts\n            \n            variable\n            WikidataCacheSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/wikidata/wikidata.module.ts\n            \n            variable\n            WikidataCacheModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/wikidata/wikidata.service.ts\n            \n            injectable\n            WikidataService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                server/wikidata/wikidata.service.ts\n            \n            variable\n            axios\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/wikidata/wikidata.service.ts\n            \n            variable\n            languageVariantMap\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @ant-design/icons : ^4.6.2\n        \n            @ant-design/icons-svg : ^4.1.0\n        \n            @babel/polyfill : ^7.12.1\n        \n            @compodoc/compodoc : ^1.1.18\n        \n            @dhaiwat10/react-link-preview : ^1.9.1\n        \n            @nestjs/axios : ^0.0.1\n        \n            @nestjs/common : ^8.0.6\n        \n            @nestjs/config : ^1.0.1\n        \n            @nestjs/core : ^8.0.6\n        \n            @nestjs/mapped-types : ^1.0.1\n        \n            @nestjs/mongoose : ^8.0.0\n        \n            @nestjs/passport : ^8.0.1\n        \n            @nestjs/platform-express : ^8.0.6\n        \n            @nestjs/throttler : ^2.0.0\n        \n            @types/jest : ^27.4.0\n        \n            @typescript-eslint/eslint-plugin : ^4.29.0\n        \n            accept-language-parser : ^1.5.0\n        \n            antd : ^4.18.5\n        \n            axios : ^0.21.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            compromise : ^13.11.4\n        \n            compromise-paragraphs : ^0.0.5\n        \n            compromise-sentences : ^0.3.0\n        \n            connect-mongo : ^4.6.0\n        \n            cookie-parser : ^1.4.5\n        \n            domino : ^2.1.6\n        \n            draft-js : ^0.11.7\n        \n            draft-js-export-html : ^1.4.1\n        \n            draft-js-import-html : ^1.4.1\n        \n            express : ^4.17.1\n        \n            express-session : ^1.17.2\n        \n            handlebars : ^4.7.7\n        \n            i18next : ^21.6.10\n        \n            md5 : ^2.3.0\n        \n            mongoose : ^  5.13.5\n        \n            mongoose-softdelete-typescript : ^0.0.3\n        \n            next : ^12.1.0\n        \n            next-i18next : ^10.2.0\n        \n            next-plugin-antd-less : ^1.8.0\n        \n            nodemailer : ^6.7.0\n        \n            passport : ^0.4.1\n        \n            passport-local : ^1.0.0\n        \n            passport-local-mongoose : ^6.1.0\n        \n            react : ^17.0.2\n        \n            react-cookie-consent : ^6.4.1\n        \n            react-countdown : ^2.3.2\n        \n            react-dom : ^17.0.2\n        \n            react-google-recaptcha : ^2.1.0\n        \n            react-is : ^17.0.2\n        \n            react-markdown : ^8.0.0\n        \n            react-redux : ^7.2.4\n        \n            react-share : ^4.4.0\n        \n            react-social-icons : ^5.5.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rehype-raw : ^6.1.1\n        \n            rxjs : ^7.3.0\n        \n            service-runner : ^2.8.4\n        \n            sitemap : 5\n        \n            slugify : ^1.6.1\n        \n            styled-components : ^5.3.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ClassificationEnum   (server/.../claim-review.schema.ts)\n                        \n                        \n                            HistoryType   (server/.../history.schema.ts)\n                        \n                        \n                            TargetModel   (server/.../history.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    server/claim-review/schemas/claim-review.schema.ts\n    \n        \n            \n                \n                    \n                        \n                        ClassificationEnum\n                    \n                \n                        \n                            \n                                 not-fact\n                            \n                        \n                        \n                            \n                                 true\n                            \n                        \n                        \n                            \n                                 true-but\n                            \n                        \n                        \n                            \n                                 arguable\n                            \n                        \n                        \n                            \n                                 misleading\n                            \n                        \n                        \n                            \n                                 false\n                            \n                        \n                        \n                            \n                                 unsustainable\n                            \n                        \n                        \n                            \n                                 exaggerated\n                            \n                        \n                        \n                            \n                                 unverifiable\n                            \n                        \n            \n        \n\n    server/history/schema/history.schema.ts\n    \n        \n            \n                \n                    \n                        \n                        HistoryType\n                    \n                \n                        \n                            \n                                 Create\n                            \n                        \n                        \n                            \n                                Value : create\n                            \n                        \n                        \n                            \n                                 Update\n                            \n                        \n                        \n                            \n                                Value : update\n                            \n                        \n                        \n                            \n                                 Delete\n                            \n                        \n                        \n                            \n                                Value : delete\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        TargetModel\n                    \n                \n                        \n                            \n                                 Claim\n                            \n                        \n                        \n                            \n                                Value : claim\n                            \n                        \n                        \n                            \n                                 Personality\n                            \n                        \n                        \n                            \n                                Value : personality\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GetLanguageMiddleware   (server/.../language.middleware.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    server/middleware/language.middleware.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetLanguageMiddleware\n                        \n                    \n                \n            \n            \n                \nGetLanguageMiddleware(req, res: Response, next: NextFunction)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nAletheia\n\nPlataforma de análise de discursos de personalidades públicas e combate a Fake News.\n\nInstalação\n\nFork this repo and clone it locally:git clone https://github.com//aletheia\ncd aletheia\nStartup Mongo DB via Docker:docker-compose up -d\nInstall packages:yarn install\nTo run in dev modeyarn dev\nAccess http://localhost:3000 in your browser.\n\nDevelopment DB\n\nRun seeder:\nyarn seedBuild to production\n\nThe build step should be run as follow:\nyarn build\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\n                GNU GENERAL PUBLIC LICENSE\n                   Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n                        Preamble  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n                   TERMS AND CONDITIONS\nDefinitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\nSource Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n  The Corresponding Source for a work in source code form is that\nsame work.\n\nBasic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\nProtecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\nConveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\nConveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\na) The work must carry prominent notices stating that you modified\nit, and giving a relevant date.\n\nb) The work must carry prominent notices stating that it is\nreleased under this License and any conditions added under section\n7.  This requirement modifies the requirement in section 4 to\n\"keep intact all notices\".\n\nc) You must license the entire work, as a whole, under this\nLicense to anyone who comes into possession of a copy.  This\nLicense will therefore apply, along with any applicable section 7\nadditional terms, to the whole of the work, and all its parts,\nregardless of how they are packaged.  This License gives no\npermission to license the work in any other way, but it does not\ninvalidate such permission if you have separately received it.\n\nd) If the work has interactive user interfaces, each must display\nAppropriate Legal Notices; however, if the Program has interactive\ninterfaces that do not display Appropriate Legal Notices, your\nwork need not make them do so.  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\nConveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\na) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by the\nCorresponding Source fixed on a durable physical medium\ncustomarily used for software interchange.\n\nb) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by a\nwritten offer, valid for at least three years and valid for as\nlong as you offer spare parts or customer support for that product\nmodel, to give anyone who possesses the object code either (1) a\ncopy of the Corresponding Source for all the software in the\nproduct that is covered by this License, on a durable physical\nmedium customarily used for software interchange, for a price no\nmore than your reasonable cost of physically performing this\nconveying of source, or (2) access to copy the\nCorresponding Source from a network server at no charge.\n\nc) Convey individual copies of the object code with a copy of the\nwritten offer to provide the Corresponding Source.  This\nalternative is allowed only occasionally and noncommercially, and\nonly if you received the object code with such an offer, in accord\nwith subsection 6b.\n\nd) Convey the object code by offering access from a designated\nplace (gratis or for a charge), and offer equivalent access to the\nCorresponding Source in the same way through the same place at no\nfurther charge.  You need not require recipients to copy the\nCorresponding Source along with the object code.  If the place to\ncopy the object code is a network server, the Corresponding Source\nmay be on a different server (operated by you or a third party)\nthat supports equivalent copying facilities, provided you maintain\nclear directions next to the object code saying where to find the\nCorresponding Source.  Regardless of what server hosts the\nCorresponding Source, you remain obligated to ensure that it is\navailable for as long as needed to satisfy these requirements.\n\ne) Convey the object code using peer-to-peer transmission, provided\nyou inform other peers where the object code and Corresponding\nSource of the work are being offered to the general public at no\ncharge under subsection 6d.  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\nAdditional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\na) Disclaiming warranty or limiting liability differently from the\nterms of sections 15 and 16 of this License; or\n\nb) Requiring preservation of specified reasonable legal notices or\nauthor attributions in that material or in the Appropriate Legal\nNotices displayed by works containing it; or\n\nc) Prohibiting misrepresentation of the origin of that material, or\nrequiring that modified versions of such material be marked in\nreasonable ways as different from the original version; or\n\nd) Limiting the use for publicity purposes of names of licensors or\nauthors of the material; or\n\ne) Declining to grant rights under trademark law for use of some\ntrade names, trademarks, or service marks; or\n\nf) Requiring indemnification of licensors and authors of that\nmaterial by anyone who conveys the material (or modified versions of\nit) with contractual assumptions of liability to the recipient, for\nany liability that these contractual assumptions directly impose on\nthose licensors and authors.  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\nTermination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\nAcceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\nAutomatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\nPatents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\nNo Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\nUse with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\nRevised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\nDisclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\nLimitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\nInterpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n                 END OF TERMS AND CONDITIONS\n\n        How to Apply These Terms to Your New Programs  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\nCopyright (C)   \n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see .Also add information on how to contact you by electronic and paper mail.\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n  Copyright (C)   \nThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.The hypothetical commands show w' and show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\nhttps://www.gnu.org/licenses/.\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\nhttps://www.gnu.org/licenses/why-not-lgpl.html.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ClaimModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ClaimReviewModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ClaimRevisionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HistoryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HomeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ParserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PersonalityModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SitemapModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SourceModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StatsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ViewModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        WikidataModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ClaimModule\n\n\n\ncluster_ClaimModule_imports\n\n\n\ncluster_ClaimModule_exports\n\n\n\ncluster_ClaimModule_providers\n\n\n\ncluster_ClaimReviewModule\n\n\n\ncluster_ClaimReviewModule_exports\n\n\n\ncluster_ClaimReviewModule_providers\n\n\n\ncluster_ClaimRevisionModule\n\n\n\ncluster_ClaimRevisionModule_exports\n\n\n\ncluster_ClaimRevisionModule_providers\n\n\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_HistoryModule\n\n\n\ncluster_HistoryModule_exports\n\n\n\ncluster_HistoryModule_providers\n\n\n\ncluster_HomeModule\n\n\n\ncluster_HomeModule_imports\n\n\n\ncluster_ParserModule\n\n\n\ncluster_ParserModule_exports\n\n\n\ncluster_ParserModule_providers\n\n\n\ncluster_PersonalityModule\n\n\n\ncluster_PersonalityModule_imports\n\n\n\ncluster_PersonalityModule_exports\n\n\n\ncluster_PersonalityModule_providers\n\n\n\ncluster_SitemapModule\n\n\n\ncluster_SitemapModule_exports\n\n\n\ncluster_SitemapModule_providers\n\n\n\ncluster_SourceModule\n\n\n\ncluster_SourceModule_exports\n\n\n\ncluster_SourceModule_providers\n\n\n\ncluster_StatsModule\n\n\n\ncluster_StatsModule_exports\n\n\n\ncluster_StatsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_ViewModule\n\n\n\ncluster_ViewModule_exports\n\n\n\ncluster_ViewModule_providers\n\n\n\ncluster_WikidataModule\n\n\n\ncluster_WikidataModule_exports\n\n\n\ncluster_WikidataModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nLocalSerializer\n\nLocalSerializer\n\nAuthModule -->\n\nLocalSerializer->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nClaimReviewModule\n\nClaimReviewModule\n\n\n\nPersonalityModule\n\nPersonalityModule\n\nPersonalityModule -->\n\nClaimReviewModule->PersonalityModule\n\n\n\n\n\nClaimModule\n\nClaimModule\n\nClaimModule -->\n\nClaimReviewModule->ClaimModule\n\n\n\n\n\nClaimReviewService \n\nClaimReviewService \n\nClaimReviewService  -->\n\nClaimReviewModule->ClaimReviewService \n\n\n\n\n\nStatsModule\n\nStatsModule\n\nStatsModule -->\n\nClaimReviewModule->StatsModule\n\n\n\n\n\nSitemapModule\n\nSitemapModule\n\nSitemapModule -->\n\nClaimReviewModule->SitemapModule\n\n\n\n\n\nClaimRevisionModule\n\nClaimRevisionModule\n\nPersonalityModule -->\n\nClaimRevisionModule->PersonalityModule\n\n\n\nClaimModule -->\n\nClaimRevisionModule->ClaimModule\n\n\n\n\n\nClaimRevisionService \n\nClaimRevisionService \n\nClaimRevisionService  -->\n\nClaimRevisionModule->ClaimRevisionService \n\n\n\n\n\nHistoryModule\n\nHistoryModule\n\nPersonalityModule -->\n\nHistoryModule->PersonalityModule\n\n\n\nClaimModule -->\n\nHistoryModule->ClaimModule\n\n\n\n\n\nHistoryService \n\nHistoryService \n\nHistoryService  -->\n\nHistoryModule->HistoryService \n\n\n\n\n\nParserModule\n\nParserModule\n\nClaimRevisionModule -->\n\nParserModule->ClaimRevisionModule\n\n\n\nClaimModule -->\n\nParserModule->ClaimModule\n\n\n\n\n\nParserService \n\nParserService \n\nParserService  -->\n\nParserModule->ParserService \n\n\n\nClaimModule -->\n\nPersonalityModule->ClaimModule\n\n\n\nStatsModule -->\n\nPersonalityModule->StatsModule\n\n\n\n\n\nHomeModule\n\nHomeModule\n\nHomeModule -->\n\nPersonalityModule->HomeModule\n\n\n\n\n\nPersonalityService \n\nPersonalityService \n\nPersonalityService  -->\n\nPersonalityModule->PersonalityService \n\n\n\nSitemapModule -->\n\nPersonalityModule->SitemapModule\n\n\n\n\n\nSourceModule\n\nSourceModule\n\nClaimReviewModule -->\n\nSourceModule->ClaimReviewModule\n\n\n\nClaimRevisionModule -->\n\nSourceModule->ClaimRevisionModule\n\n\n\nClaimModule -->\n\nSourceModule->ClaimModule\n\n\n\n\n\nSourceService \n\nSourceService \n\nSourceService  -->\n\nSourceModule->SourceService \n\n\n\n\n\nViewModule\n\nViewModule\n\nUsersModule -->\n\nViewModule->UsersModule\n\n\n\nClaimRevisionModule -->\n\nViewModule->ClaimRevisionModule\n\n\n\nPersonalityModule -->\n\nViewModule->PersonalityModule\n\n\n\nClaimModule -->\n\nViewModule->ClaimModule\n\n\n\nHomeModule -->\n\nViewModule->HomeModule\n\n\n\n\n\nViewService \n\nViewService \n\nViewService  -->\n\nViewModule->ViewService \n\n\n\n\n\nClaimService \n\nClaimService \n\nClaimService  -->\n\nClaimModule->ClaimService \n\n\n\nStatsModule -->\n\nClaimModule->StatsModule\n\n\n\nSitemapModule -->\n\nClaimModule->SitemapModule\n\n\n\n\n\nClaimService\n\nClaimService\n\nClaimModule -->\n\nClaimService->ClaimModule\n\n\n\n\n\nClaimReviewService\n\nClaimReviewService\n\nClaimReviewModule -->\n\nClaimReviewService->ClaimReviewModule\n\n\n\n\n\nUtilService\n\nUtilService\n\nClaimReviewModule -->\n\nUtilService->ClaimReviewModule\n\n\n\nPersonalityModule -->\n\nUtilService->PersonalityModule\n\n\n\n\n\nClaimRevisionService\n\nClaimRevisionService\n\nClaimRevisionModule -->\n\nClaimRevisionService->ClaimRevisionModule\n\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\nHistoryService\n\nHistoryService\n\nHistoryModule -->\n\nHistoryService->HistoryModule\n\n\n\nHomeModule -->\n\nStatsModule->HomeModule\n\n\n\n\n\nStatsService \n\nStatsService \n\nStatsService  -->\n\nStatsModule->StatsService \n\n\n\n\n\nParserService\n\nParserService\n\nParserModule -->\n\nParserService->ParserModule\n\n\n\n\n\nWikidataModule\n\nWikidataModule\n\nPersonalityModule -->\n\nWikidataModule->PersonalityModule\n\n\n\n\n\nWikidataService \n\nWikidataService \n\nWikidataService  -->\n\nWikidataModule->WikidataService \n\n\n\n\n\nPersonalityService\n\nPersonalityService\n\nPersonalityModule -->\n\nPersonalityService->PersonalityModule\n\n\n\n\n\nSitemapService \n\nSitemapService \n\nSitemapService  -->\n\nSitemapModule->SitemapService \n\n\n\n\n\nSitemapService\n\nSitemapService\n\nSitemapModule -->\n\nSitemapService->SitemapModule\n\n\n\n\n\nSourceService\n\nSourceService\n\nSourceModule -->\n\nSourceService->SourceModule\n\n\n\n\n\nStatsService\n\nStatsService\n\nStatsModule -->\n\nStatsService->StatsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nViewService\n\nViewService\n\nViewModule -->\n\nViewService->ViewModule\n\n\n\n\n\nWikidataService\n\nWikidataService\n\nWikidataModule -->\n\nWikidataService->WikidataModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        16 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    10 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    17 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    17 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ClaimDocument   (server/.../claim.schema.ts)\n                        \n                        \n                            ClaimMatchParameters   (server/.../claim.service.ts)\n                        \n                        \n                            ClaimReviewDocument   (server/.../claim-review.schema.ts)\n                        \n                        \n                            ClaimRevisionDocument   (server/.../claim-revision.schema.ts)\n                        \n                        \n                            HistoryDocument   (server/.../history.schema.ts)\n                        \n                        \n                            PersonalityDocument   (server/.../personality.schema.ts)\n                        \n                        \n                            SourceDocument   (server/.../source.schema.ts)\n                        \n                        \n                            WikidataCacheDocument   (server/.../wikidata.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    server/claim/schemas/claim.schema.ts\n    \n    \n        \n            \n                \n                    \n                    ClaimDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    server/claim/claim.service.ts\n    \n    \n        \n            \n                \n                    \n                    ClaimMatchParameters\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    server/claim-review/schemas/claim-review.schema.ts\n    \n    \n        \n            \n                \n                    \n                    ClaimReviewDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    server/claim-revision/schema/claim-revision.schema.ts\n    \n    \n        \n            \n                \n                    \n                    ClaimRevisionDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    server/history/schema/history.schema.ts\n    \n    \n        \n            \n                \n                    \n                    HistoryDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    server/personality/schemas/personality.schema.ts\n    \n    \n        \n            \n                \n                    \n                    PersonalityDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    server/source/schemas/source.schema.ts\n    \n    \n        \n            \n                \n                    \n                    SourceDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    server/wikidata/schemas/wikidata.schema.ts\n    \n    \n        \n            \n                \n                    \n                    WikidataCacheDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            axios   (server/.../sitemap.service.ts)\n                        \n                        \n                            axios   (server/.../wikidata.service.ts)\n                        \n                        \n                            ClaimModel   (server/.../claim.module.ts)\n                        \n                        \n                            ClaimReviewModel   (server/.../claim-review.module.ts)\n                        \n                        \n                            ClaimReviewSchema   (server/.../claim-review.schema.ts)\n                        \n                        \n                            ClaimReviewSchemaRaw   (server/.../claim-review.schema.ts)\n                        \n                        \n                            ClaimRevisionModel   (server/.../claim-revision.module.ts)\n                        \n                        \n                            ClaimRevisionSchema   (server/.../claim-revision.schema.ts)\n                        \n                        \n                            ClaimRevisionSchemaRaw   (server/.../claim-revision.schema.ts)\n                        \n                        \n                            ClaimSchema   (server/.../claim.schema.ts)\n                        \n                        \n                            ClaimSchemaRaw   (server/.../claim.schema.ts)\n                        \n                        \n                            cookieParser   (server/.../main.ts)\n                        \n                        \n                            fs   (server/.../email.service.ts)\n                        \n                        \n                            handlebars   (server/.../email.service.ts)\n                        \n                        \n                            HistoryModel   (server/.../history.module.ts)\n                        \n                        \n                            HistorySchema   (server/.../history.schema.ts)\n                        \n                        \n                            initApp   (server/.../main.ts)\n                        \n                        \n                            initApp   (server/.../seed.ts)\n                        \n                        \n                            languageVariantMap   (server/.../wikidata.service.ts)\n                        \n                        \n                            md5   (server/.../parser.service.ts)\n                        \n                        \n                            mongodb_host   (server/.../main.ts)\n                        \n                        \n                            mongodb_host   (server/.../seed.ts)\n                        \n                        \n                            mongodb_name   (server/.../main.ts)\n                        \n                        \n                            mongodb_name   (server/.../seed.ts)\n                        \n                        \n                            MongoStore   (server/.../main.ts)\n                        \n                        \n                            nlp   (server/.../parser.service.ts)\n                        \n                        \n                            nodemailer   (server/.../email.service.ts)\n                        \n                        \n                            path   (server/.../email.service.ts)\n                        \n                        \n                            PersonalityModel   (server/.../personality.module.ts)\n                        \n                        \n                            PersonalitySchema   (server/.../personality.schema.ts)\n                        \n                        \n                            PersonalitySchemaRaw   (server/.../personality.schema.ts)\n                        \n                        \n                            phdRegex   (server/.../parser.service.ts)\n                        \n                        \n                            prefixes   (server/.../parser.service.ts)\n                        \n                        \n                            ServiceRunner   (server/.../server.ts)\n                        \n                        \n                            SourceModel   (server/.../source.module.ts)\n                        \n                        \n                            SourceSchema   (server/.../source.schema.ts)\n                        \n                        \n                            UserModel   (server/.../users.module.ts)\n                        \n                        \n                            UserSchema   (server/.../user.schema.ts)\n                        \n                        \n                            WikidataCacheModel   (server/.../wikidata.module.ts)\n                        \n                        \n                            WikidataCacheSchema   (server/.../wikidata.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    server/sitemap/sitemap.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        axios\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"axios\")\n                    \n                \n\n\n        \n    \n\n    server/wikidata/wikidata.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        axios\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"axios\")\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        languageVariantMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    \"pt-br\": \"pt\",\n}\n                    \n                \n\n\n        \n    \n\n    server/claim/claim.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ClaimModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeature([\n    {\n        name: Claim.name,\n        schema: ClaimSchema,\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/claim-review/claim-review.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ClaimReviewModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeature([\n    {\n        name: ClaimReview.name,\n        schema: ClaimReviewSchema,\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/claim-review/schemas/claim-review.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ClaimReviewSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ClaimReviewSchemaRaw\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ClaimReviewSchemaRaw\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(ClaimReview)\n                    \n                \n\n\n        \n    \n\n    server/claim-revision/claim-revision.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ClaimRevisionModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeature([\n    {\n        name: ClaimRevision.name,\n        schema: ClaimRevisionSchema,\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/claim-revision/schema/claim-revision.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ClaimRevisionSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ClaimRevisionSchemaRaw\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ClaimRevisionSchemaRaw\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(ClaimRevision)\n                    \n                \n\n\n        \n    \n\n    server/claim/schemas/claim.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ClaimSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ClaimSchemaRaw\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ClaimSchemaRaw\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Claim)\n                    \n                \n\n\n        \n    \n\n    server/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cookieParser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"cookie-parser\")\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initApp\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (options) => {\n    const corsOptions = {\n        origin: options?.config?.cors || \"*\",\n        credentials: true,\n        methods: \"GET,HEAD,PUT,PATCH,POST,DELETE, OPTIONS\",\n        allowedHeaders: [\"accept\", \"x-requested-with\", \"content-type\"],\n    };\n\n    options.db = {\n        connection_uri: `mongodb://${mongodb_host}/${mongodb_name}`,\n        options: {\n            useUnifiedTopology: true,\n            useNewUrlParser: true,\n        }\n    }\n    const app = await NestFactory.create(\n        AppModule.register(options),\n        {\n            logger: new Logger(options.logger) || undefined,\n            cors: corsOptions,\n        }\n    );\n\n    app.use(GetLanguageMiddleware);\n    app.useGlobalPipes(\n        new ValidationPipe({\n            transform: true,\n            transformOptions: {enableImplicitConversion: true},\n            whitelist: true,\n            forbidNonWhitelisted: true,\n        }),\n    )\n\n    app.use(cookieParser());\n    app.use(\n        session({\n            secret: \"replace_me\",\n            resave: false,\n            saveUninitialized: false,\n            store: MongoStore.create({\n                mongoUrl: options.db.connection_uri,\n                mongoOptions: options.db.options\n            })\n        })\n    );\n    app.use(passport.initialize());\n    app.use(passport.session());\n    app.useStaticAssets(join(__dirname, \"..\", \"public\"));\n    // app.setGlobalPrefix(\"api\");\n    await app.listen(options.config.port);\n    options.logger.log(\n        \"info\",\n        `${options.name} with PID ${process.pid} listening on ${\n            options.config.interface || \"*\"\n        }:${options.config.port}`\n    );\n    return app;\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mongodb_host\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.MONGODB_HOST || \"localhost\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mongodb_name\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.MONGODB_NAME || \"Aletheia\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MongoStore\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"connect-mongo\")\n                    \n                \n\n\n        \n    \n\n    server/email/email.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        fs\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"fs\")\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handlebars\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"handlebars\")\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nodemailer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"nodemailer\")\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"path\")\n                    \n                \n\n\n        \n    \n\n    server/history/history.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        HistoryModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeature([\n    {\n        name: \"HISTORY_MODEL\",\n        schema: HistorySchema,\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/history/schema/history.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        HistorySchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(History)\n                    \n                \n\n\n        \n    \n\n    server/seed.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        initApp\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (options) => {\n    options.db = {\n        connection_uri: `mongodb://${mongodb_host}/${mongodb_name}`,\n        options: {\n            useUnifiedTopology: true,\n            useNewUrlParser: true,\n        }\n    }\n    options.logger.log(\"info\", `Loading AppModule`);\n    const app = await NestFactory.create(\n        AppModule.register(options),\n        {\n            logger: new Logger(options.logger) || undefined\n        }\n    );\n    options.logger.log(\"info\", `AppModule loaded`);\n    const emailService = app.get(EmailService);\n    const configService = app.get(ConfigService);\n    const userService = app.get(UsersService);\n    const users = configService.get(\"users\");\n    const disableSMTP = configService.get(\"disable_smtp\");\n\n    const generatePassword = (isTestUser = false, forcePassword = null) => {\n        const buf = randomBytes(8);\n\n        if (isTestUser) {\n            return forcePassword ? `${forcePassword}` : process.env.DEVELOPMENT_PASSWORD;\n        }\n\n        return buf.toString(\"hex\");\n    };\n\n    const seedSingleUser = async (userData, password) => {\n        return userService.register({ ...userData, password})\n            .then(async (user) => {\n                options.logger.log(\"info\", `${userData.email} seeded`);\n                if (userData.sendAuthDetails && !disableSMTP) {\n                    const emailResponse = await emailService.sendEmail(\n                        userData.email,\n                        \"Bem-vinda(o) a Aletheia\",\n                        \"Você poderá acessar o sistema usando as credenciais abaixo\",\n                        { ...userData, password },\n                        \"./templates/userSeed.html\"\n                    );\n                    options.logger.log(\"info\", emailResponse);\n                    options.logger.log(\"info\", `E-mail sent to ${userData.email}`);\n                }\n                return user;\n            })\n            .catch((e) => {\n                options.logger.log(\"error\", e);\n                options.logger.log(\"info\", `Error while seeding ${userData.email}`);\n                return null;\n            });\n    };\n    // Using await Promise.all to force loop to finish before continuing\n    await Promise.all(\n        users.map(async (userData) => {\n            const password = generatePassword(userData.isTestUser, userData.password);\n            return seedSingleUser(userData, password);\n        })\n    );\n\n    options.logger.log(\n        \"info\",\n        \"Seed is finished\"\n    );\n    await app.close();\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mongodb_host\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.MONGODB_HOST || \"localhost\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mongodb_name\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.MONGODB_NAME || \"Aletheia\"\n                    \n                \n\n\n        \n    \n\n    server/parser/parser.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        md5\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"md5\")\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nlp\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('compromise')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phdRegex\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /Ph\\.D\\./g\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prefixes\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /(Mr|St|Mrs|Ms|Dr)[.]/g\n                    \n                \n\n\n        \n    \n\n    server/personality/personality.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PersonalityModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeature([\n    {\n        name: Personality.name,\n        schema: PersonalitySchema,\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/personality/schemas/personality.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PersonalitySchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : PersonalitySchemaRaw\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PersonalitySchemaRaw\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Personality)\n                    \n                \n\n\n        \n    \n\n    server/server.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ServiceRunner\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"service-runner\")\n                    \n                \n\n\n        \n    \n\n    server/source/source.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SourceModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeature([\n    {\n        name: Source.name,\n        schema: SourceSchema,\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/source/schemas/source.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SourceSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Source)\n                    \n                \n\n\n        \n    \n\n    server/users/users.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeatureAsync([\n    {\n        name: User.name,\n        useFactory: () => {\n            const schema = UserSchema;\n            schema.plugin(require(\"passport-local-mongoose\"), {\n                usernameField: \"email\",\n            });\n            return schema;\n        },\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/users/schemas/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n    server/wikidata/wikidata.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        WikidataCacheModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeatureAsync([\n    {\n        name: WikidataCache.name,\n        useFactory: () => {\n            const wikidataCacheSchema = WikidataCacheSchema;\n            wikidataCacheSchema.index(\n                { wikidataId: 1, language: 1 },\n                { unique: true }\n            );\n            wikidataCacheSchema.index(\n                { createdAt: 1 },\n                { expireAfterSeconds: 86400 }\n            );\n            return wikidataCacheSchema;\n        },\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/wikidata/schemas/wikidata.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        WikidataCacheSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(WikidataCache)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}

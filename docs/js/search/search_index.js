var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,0.725,1,2.532]],["body/modules/AppModule.html",[0,1.23,1,4.293,2,1.433,3,0.181,4,0.13,5,0.155,6,4.331,7,0.86,8,5.591,9,3.714,10,5.591,11,0.577,12,4.331,13,1.006,14,0.02,15,0.577,16,1.006,17,2.761,18,0.955,19,6.191,20,0.268,21,0.378,22,2.386,23,1.006,24,3.303,25,3.714,26,3.564,27,4.331,28,3.303,29,3.714,30,2.885,31,3.003,32,3.303,33,3.714,34,2.885,35,1.295,36,1.676,37,3.003,38,3.08,39,3.307,40,3.303,41,3.714,42,3.877,43,4.331,44,3.003,45,2.235,46,2.711,47,2.761,48,3.564,49,4.331,50,3.564,51,4.331,52,0.181,53,0.011,54,2.761,55,3.08,56,3.714,57,3.003,58,3.003,59,4.331,60,0.86,61,1.769,62,4.331,63,3.714,64,3.714,65,4.331,66,3.714,67,4.331,68,1.231,69,0.015,70,0.015]],["title/modules/AuthModule.html",[0,0.725,26,2.327]],["body/modules/AuthModule.html",[0,1.211,2,1.644,3,0.207,4,0.149,5,0.178,14,0.02,20,0.253,21,0.434,24,4.243,25,4.26,26,4.747,52,0.207,53,0.013,61,2.489,69,0.016,70,0.016,71,2.123,72,4.26,73,4.26,74,4.26,75,4.578,76,4.578,77,2.358,78,1.823,79,1.73,80,4.968,81,2.489,82,4.968,83,3.445,84,4.968,85,4.968,86,4.968,87,3.794,88,1.343]],["title/classes/Claim.html",[35,1.091,53,0.009]],["body/classes/Claim.html",[3,0.159,4,0.174,5,0.137,11,0.892,14,0.02,20,0.233,23,0.886,35,2.001,52,0.243,53,0.01,60,0.758,69,0.013,70,0.013,88,1.98,89,1.968,90,2.645,91,0.54,92,1.886,93,3.707,94,4.505,95,3.179,96,4.44,97,4.986,98,1.161,99,3.677,100,2.331,101,3.565,102,3.589,103,3.814,104,3.677,105,3.814,106,3.037,107,4.316,108,3.814,109,2.456,110,3.814,111,3.814,112,3.925,113,3.037,114,4.44,115,3.814,116,3.53,117,1.989,118,2.101,119,1.39,120,3.27,121,2.493,122,2.431,123,2.912,124,3.27,125,2.912,126,2.645,127,2.912,128,3.925,129,2.912,130,2.912,131,2.912,132,3.814,133,3.814,134,1.85,135,2.645,136,2.912,137,0.82,138,3.925,139,3.27,140,3.814,141,3.565,142,2.832,143,3.565,144,3.814,145,2.645,146,2.645]],["title/controllers/ClaimController.html",[147,1.038,148,2.532]],["body/controllers/ClaimController.html",[3,0.081,4,0.058,5,0.069,7,0.616,11,0.849,13,1.479,14,0.02,15,0.849,16,1.479,18,1.405,20,0.224,21,0.168,35,1.701,36,0.747,45,0.996,52,0.081,53,0.005,60,1.266,68,0.549,69,0.008,70,0.008,88,1.051,91,0.273,94,1.338,95,2.501,98,0.62,100,2.099,119,0.838,137,1.108,147,0.881,148,2.15,149,1.655,150,2.163,151,2.659,152,3.101,153,3.101,154,3.234,155,3.101,156,2.141,157,2.297,158,1.977,159,3.101,160,3.101,161,3.101,162,2.15,163,3.101,164,2.15,165,2.659,166,3.171,167,1.93,168,3.399,169,1.338,170,3.101,171,3.723,172,4.061,173,1.93,174,4.879,175,3.101,176,1.93,177,2.686,178,1.93,179,3.56,180,3.641,181,1.93,182,1.93,183,1.655,184,1.93,185,1.93,186,3.399,187,1.474,188,1.93,189,1.93,190,2.837,191,1.93,192,1.93,193,1.93,194,1.93,195,1.93,196,1.93,197,1.93,198,1.93,199,1.93,200,1.93,201,1.93,202,1.93,203,1.655,204,1.93,205,1.93,206,1.93,207,1.93,208,1.93,209,1.93,210,1.93,211,1.93,212,1.138,213,1.23,214,1.338,215,1.474,216,1.338,217,1.776,218,1.14,219,2.141,220,1.655,221,1.655,222,1.655,223,2.695,224,3.333,225,1.23,226,1.063,227,1.338,228,1.063,229,1.14,230,1.14,231,1.885,232,1.474,233,1.776,234,1.338,235,1.555,236,0.882,237,1.026,238,1.93,239,0.577,240,1.655,241,1.655,242,1.708,243,2.184,244,1.655,245,1.655,246,1.655,247,1.655,248,3.817,249,1.655,250,2.683,251,2.683,252,1.93,253,1.93,254,1.93,255,1.655,256,3.177,257,1.063,258,3.108,259,3.399,260,2.837,261,1.655,262,1.93,263,2.478,264,1.93,265,2.968,266,1.93,267,1.93,268,3.333,269,4.465,270,1.93,271,2.659,272,2.368,273,1.977,274,1.655,275,1.474,276,2.695,277,1.93,278,1.655,279,1.655,280,2.659,281,1.655,282,1.93,283,1.655,284,1.93,285,1.14,286,1.655,287,1.708,288,1.474,289,1.14,290,1.93,291,1.93,292,1.93,293,1.93,294,1.93,295,1.93,296,1.93,297,1.474,298,1.93,299,1.474,300,1.93,301,1.93,302,1.93,303,3.887,304,1.93,305,1.93,306,1.93,307,1.93,308,1.93,309,4.451,310,1.93,311,1.93,312,1.832,313,3.817,314,2.368,315,0.607,316,1.655,317,1.93,318,1.93,319,1.93,320,1.93,321,1.93,322,1.93,323,3.101,324,3.887,325,1.93,326,1.655,327,1.655,328,1.93,329,1.93,330,1.474,331,1.93,332,1.93,333,3.101,334,1.93,335,1.93,336,2.659,337,2.659,338,2.478,339,2.478,340,3.319,341,2.478,342,1.587,343,2.141,344,3.333,345,3.101,346,2.659,347,1.93,348,2.478,349,2.297,350,2.478,351,1.655,352,2.478,353,3.101,354,3.101,355,1.93,356,1.93,357,1.655,358,1.93,359,1.93,360,1.93,361,1.93]],["title/modules/ClaimModule.html",[0,0.725,32,2.157]],["body/modules/ClaimModule.html",[0,1.086,2,1.385,3,0.175,4,0.125,5,0.15,14,0.02,15,0.558,20,0.263,21,0.365,22,2.306,23,0.972,30,3.545,31,2.902,32,4.428,34,3.545,35,1.635,36,1.619,37,2.902,38,3.786,39,3.196,44,3.792,45,2.16,46,3.332,47,2.668,52,0.175,53,0.011,61,2.233,68,1.554,69,0.014,70,0.014,71,1.905,77,2.115,78,1.536,79,1.458,81,2.233,117,1.619,137,0.667,146,3.792,148,4.223,219,4.045,220,3.589,225,2.668,362,3.589,363,3.589,364,3.589,365,3.589,366,4.38,367,3.196,368,2.499,369,4.186,370,4.186,371,4.186,372,4.689,373,3.792,374,2.668,375,3.589]],["title/classes/ClaimReview.html",[53,0.009,121,1.77]],["body/classes/ClaimReview.html",[3,0.147,4,0.167,5,0.126,11,0.892,14,0.02,20,0.234,23,0.817,35,2.04,52,0.233,53,0.009,54,2.243,60,0.699,69,0.013,70,0.013,88,1.993,89,1.816,91,0.499,92,1.785,95,3.119,98,1.129,100,2.333,101,3.868,102,3.619,104,3.555,106,3.555,107,4.644,109,2.504,112,3.715,113,2.875,114,4.259,116,3.522,117,1.882,118,1.938,119,1.315,120,3.017,121,2.705,122,4.351,124,3.017,126,2.44,127,2.687,128,3.715,129,2.687,130,2.687,131,2.687,134,1.706,135,2.44,136,4.259,137,0.776,141,2.44,142,1.938,143,2.44,145,2.44,315,2.146,376,3.76,377,2.44,378,4.595,379,4.783,380,5.578,381,4.783,382,3.519,383,3.519,384,3.519,385,3.519,386,3.519,387,3.519,388,3.519,389,2.687,390,2.44,391,2.687,392,3.519,393,3.519,394,3.519,395,1.608,396,3.519,397,3.519,398,3.519,399,3.519,400,3.519,401,3.715,402,3.017,403,3.519,404,2.44]],["title/controllers/ClaimReviewController.html",[147,1.038,405,2.532]],["body/controllers/ClaimReviewController.html",[3,0.16,4,0.115,5,0.137,7,1.025,11,0.831,13,1.448,14,0.02,15,0.831,16,1.448,18,1.375,20,0.24,21,0.334,35,1.146,36,2.518,45,1.977,52,0.16,53,0.01,60,1.239,68,1.089,69,0.013,70,0.013,91,0.543,100,2.031,137,0.994,147,1.089,150,2.218,151,4.423,156,2.841,157,3.444,165,4.423,166,3.156,168,4.761,169,2.226,172,3.444,187,2.926,190,3.975,213,2.443,214,3.577,216,2.658,217,2.664,218,2.264,221,3.286,222,3.286,223,4.043,224,4.999,225,2.443,226,2.111,227,2.658,235,1.657,239,1.146,240,3.286,241,3.286,242,2.841,243,1.796,244,3.286,245,3.286,246,3.286,247,3.286,250,1.751,251,1.751,276,3.577,279,3.286,280,4.423,281,3.286,283,3.286,285,2.264,286,3.286,287,2.841,288,2.926,289,2.264,297,3.938,299,2.926,315,1.205,376,3.585,405,3.577,406,3.286,407,2.264,408,3.833,409,3.833,410,3.833,411,3.833,412,3.833,413,3.833,414,3.833,415,3.286,416,3.833,417,3.833,418,3.833,419,3.833,420,3.833,421,3.833,422,3.833,423,3.833,424,3.833,425,3.286,426,3.833,427,3.833,428,3.833]],["title/modules/ClaimReviewModule.html",[0,0.725,34,1.884]],["body/modules/ClaimReviewModule.html",[0,1.135,2,1.482,3,0.187,4,0.134,5,0.16,14,0.02,15,0.597,20,0.26,21,0.391,22,2.467,23,1.04,34,3.805,35,1.708,36,1.733,38,3.855,39,3.42,44,3.961,45,2.311,52,0.238,53,0.011,61,2.333,68,1.624,69,0.015,70,0.015,71,1.99,77,2.21,78,1.643,79,1.56,81,2.333,117,1.733,121,2.172,123,3.42,137,0.714,217,3.388,218,2.646,225,2.855,368,2.61,372,4.898,374,2.855,376,2.467,404,3.961,405,4.362,429,3.84,430,4.479,431,3.84,432,3.84,433,3.61,434,3.42,435,3.84,436,4.479,437,3.106,438,3.961,439,3.84]],["title/injectables/ClaimReviewService.html",[217,1.668,440,0.616]],["body/injectables/ClaimReviewService.html",[3,0.09,4,0.065,5,0.077,7,0.672,11,0.892,13,1.519,14,0.02,15,0.872,16,1.519,18,1.443,20,0.195,21,0.188,23,0.5,35,1.011,36,2.615,52,0.09,53,0.005,54,1.373,60,1.354,69,0.009,70,0.009,88,0.582,91,0.305,92,1.241,98,0.666,109,0.79,119,0.582,121,1.64,123,1.644,134,3.278,137,0.755,141,1.493,142,3.259,143,1.493,145,1.493,150,2.013,156,1.864,157,1.999,158,2.156,169,1.803,171,3.615,174,5.073,177,1.186,212,1.737,217,1.546,235,1.552,236,1.909,237,1.807,239,1.011,243,1.178,256,2.443,257,1.186,258,3.28,260,3.018,265,1.644,312,1.999,315,1.314,376,3.724,378,5.058,379,1.846,381,4.059,391,1.644,433,2.443,435,1.846,437,3.283,438,2.346,440,0.571,441,0.75,442,1.846,443,3.383,444,4.734,445,3.383,446,4.475,447,3.383,448,3.383,449,3.383,450,3.383,451,3.383,452,3.383,453,2.153,454,2.296,455,3.147,456,3.383,457,3.383,458,2.153,459,2.153,460,3.383,461,3.383,462,3.383,463,4.412,464,3.383,465,2.901,466,4.178,467,4.178,468,3.383,469,3.383,470,3.383,471,2.153,472,4.898,473,2.583,474,2.153,475,1.241,476,1.546,477,3.383,478,2.153,479,3.383,480,2.153,481,2.153,482,2.153,483,3.383,484,2.153,485,2.153,486,3.383,487,2.153,488,3.383,489,2.153,490,3.383,491,2.153,492,3.383,493,2.153,494,3.383,495,4.412,496,2.153,497,3.383,498,1.644,499,1.111,500,1.846,501,2.153,502,5.145,503,4.734,504,4.178,505,3.615,506,2.153,507,2.901,508,3.582,509,2.153,510,1.846,511,2.153,512,2.153,513,2.153,514,4.734,515,2.153,516,2.153,517,2.153,518,1.644,519,1.644,520,3.383,521,2.153,522,1.846,523,1.846,524,1.846,525,2.153,526,1.846,527,2.153,528,2.153,529,2.153,530,4.734,531,4.734,532,1.846,533,2.153,534,2.153,535,3.383,536,3.383,537,2.153,538,2.153,539,1.846,540,2.153,541,2.153,542,2.153,543,2.153,544,2.153,545,2.153,546,2.153,547,2.153,548,2.153,549,2.153,550,2.153,551,2.153,552,1.186]],["title/injectables/ClaimService.html",[219,2.011,440,0.616]],["body/injectables/ClaimService.html",[3,0.11,4,0.079,5,0.094,7,0.784,11,0.919,13,1.569,14,0.02,15,0.9,16,1.569,18,1.471,20,0.226,21,0.23,23,0.611,35,1.684,36,1.018,52,0.11,53,0.007,60,1.218,69,0.01,70,0.01,88,1.523,91,0.373,92,1.447,98,0.838,119,0.711,121,1.913,125,2.008,137,0.754,142,1.449,150,2.283,156,2.173,157,2.33,158,2.514,162,2.735,164,2.735,169,2.553,171,3.614,177,3.258,212,1.929,217,2.803,218,1.554,219,2.173,235,2.005,236,2.163,237,2.087,239,1.179,243,0.916,249,3.382,256,1.357,257,2.173,258,3.352,260,3.352,263,1.677,268,4.058,273,1.677,289,1.554,312,2.796,314,2.008,326,2.255,327,2.255,337,3.382,373,2.735,389,2.008,395,1.803,440,0.665,441,0.916,446,2.735,454,2.55,455,3.379,473,3.012,475,1.447,476,1.803,498,2.008,499,1.357,500,2.255,505,2.008,508,2.255,518,2.008,519,2.008,552,1.449,553,2.255,554,4.058,555,3.944,556,3.382,557,3.944,558,3.382,559,3.944,560,2.63,561,3.624,562,3.944,563,2.63,564,2.63,565,3.012,566,4.733,567,2.63,568,3.944,569,2.63,570,2.63,571,2.63,572,3.382,573,4.83,574,2.63,575,2.63,576,2.63,577,2.63,578,2.63,579,2.255,580,3.382,581,2.63,582,2.63,583,2.63,584,3.944,585,2.63,586,4.733,587,2.63,588,3.944,589,2.63,590,3.944,591,2.63,592,2.63,593,3.012,594,2.63,595,2.735,596,3.382,597,2.63,598,2.255,599,2.63,600,2.63,601,2.255,602,2.255,603,2.63,604,2.63,605,2.255,606,2.63,607,2.63,608,2.63,609,3.382,610,2.255,611,2.008,612,3.382,613,2.255,614,2.255,615,2.008,616,2.255,617,2.008,618,2.255,619,2.63,620,2.63,621,2.63,622,2.63,623,2.63,624,2.63,625,2.63,626,2.63,627,2.63,628,2.63,629,2.63,630,2.63,631,2.255,632,2.63,633,2.63,634,2.63,635,2.63,636,2.442]],["title/modules/EmailModule.html",[0,0.725,50,2.327]],["body/modules/EmailModule.html",[0,1.243,2,1.716,3,0.216,4,0.155,5,0.186,14,0.02,20,0.24,21,0.453,44,4.339,45,2.676,50,4.678,52,0.216,53,0.013,61,2.118,69,0.016,70,0.016,71,2.179,77,2.42,78,1.903,79,1.806,81,2.555,368,2.859,637,4.447,638,4.447,639,4.447,640,4.464,641,5.186,642,5.186]],["title/injectables/EmailService.html",[440,0.616,640,2.157]],["body/injectables/EmailService.html",[3,0.16,4,0.115,5,0.137,7,1.025,11,0.867,13,1.353,14,0.02,15,0.777,16,1.353,17,3.716,18,1.286,20,0.185,21,0.334,45,1.977,52,0.16,53,0.01,60,1.158,69,0.013,70,0.013,91,0.543,92,1.892,98,0.822,109,1.892,137,1.147,150,2.218,169,2.226,212,2.288,223,4.648,235,1.772,236,2.664,237,1.707,239,1.542,243,1.796,315,1.205,440,0.87,441,1.335,475,1.892,476,2.357,636,1.977,640,3.047,643,2.926,644,6.236,645,5.83,646,5.158,647,3.833,648,5.158,649,3.833,650,3.833,651,6.964,652,3.833,653,5.158,654,5.158,655,5.347,656,5.347,657,5.83,658,3.833,659,5.158,660,2.658,661,3.286,662,2.658,663,3.286,664,2.926,665,3.286,666,2.658,667,3.286,668,4.999,669,3.833,670,3.833,671,3.833,672,3.833,673,5.158,674,3.833,675,3.833,676,3.833,677,5.83,678,3.833,679,3.833,680,3.833,681,3.833,682,3.833,683,3.833,684,3.833,685,3.833,686,5.158,687,3.286,688,3.833,689,3.833,690,3.833,691,3.833,692,2.926,693,5.158,694,3.833,695,3.833]],["title/controllers/HomeController.html",[147,1.038,696,2.532]],["body/controllers/HomeController.html",[3,0.185,4,0.133,5,0.159,7,1.128,11,0.591,13,1.03,14,0.02,15,0.591,16,1.03,18,0.979,20,0.25,21,0.387,52,0.185,53,0.011,68,1.261,69,0.015,70,0.015,88,1.535,91,0.629,98,0.707,100,1.545,137,0.998,147,1.614,150,2.072,154,3.45,166,3.201,172,3.9,179,3.9,180,3.845,228,2.444,229,2.621,230,2.621,231,3.037,232,3.388,233,2.862,234,3.077,235,1.78,239,1.326,243,2.181,250,2.595,251,2.595,256,2.289,258,2.828,330,4.336,338,2.828,339,2.828,340,3.619,341,2.828,342,2.319,343,2.444,348,2.828,349,2.621,350,2.828,352,2.828,407,2.621,696,3.937,697,3.804,698,4.869,699,3.804,700,3.804,701,4.437,702,3.45,703,4.437,704,3.804,705,3.804,706,4.336,707,4.437,708,3.804,709,4.437,710,3.804,711,4.437]],["title/modules/HomeModule.html",[0,0.725,48,2.327]],["body/modules/HomeModule.html",[0,1.222,2,1.668,3,0.21,4,0.151,5,0.18,14,0.02,20,0.254,21,0.44,30,3.718,31,3.497,40,4.258,41,4.324,46,3.495,47,3.214,48,4.757,52,0.21,53,0.013,61,2.512,68,1.748,69,0.016,70,0.016,71,2.142,77,2.379,78,1.85,79,1.756,81,2.059,696,4.602,712,4.324,713,4.324,714,5.043,715,5.043]],["title/injectables/LocalAuthGuard.html",[440,0.616,716,2.532]],["body/injectables/LocalAuthGuard.html",[3,0.235,4,0.169,5,0.202,14,0.019,20,0.235,21,0.491,52,0.235,53,0.014,69,0.017,70,0.017,83,3.905,440,1.108,441,1.961,716,4.556,717,4.828,718,4.828,719,5.631,720,3.905,721,5.631]],["title/injectables/LocalSerializer.html",[75,2.327,440,0.616]],["body/injectables/LocalSerializer.html",[3,0.214,4,0.154,5,0.184,11,0.683,13,1.191,14,0.02,15,0.683,16,1.191,20,0.255,21,0.448,23,1.191,52,0.214,53,0.013,69,0.016,70,0.016,75,3.962,98,0.818,119,1.387,235,1.458,239,1.858,250,2.84,251,2.84,315,1.613,390,3.557,440,1.049,441,1.787,454,3.371,499,2.647,722,4.399,723,3.917,724,5.13,725,3.672,726,4.746,727,2.826,728,3.917,729,5.13,730,5.13]],["title/injectables/LocalStrategy.html",[76,2.327,440,0.616]],["body/injectables/LocalStrategy.html",[3,0.21,4,0.151,5,0.18,11,0.67,13,1.168,14,0.02,15,0.67,16,1.168,20,0.258,21,0.439,23,1.168,52,0.21,53,0.013,69,0.016,70,0.016,76,3.916,83,3.489,98,0.802,119,1.36,235,1.43,239,1.836,250,2.299,251,2.299,315,1.582,390,3.489,440,1.036,441,1.753,454,3.348,499,2.596,720,3.489,723,3.842,725,3.629,726,3.842,727,2.772,728,3.842,731,4.315,732,5.032,733,5.032,734,3.207,735,5.032,736,5.032,737,5.032,738,3.842,739,3.207,740,5.032]],["title/classes/Logger.html",[53,0.009,212,1.34]],["body/classes/Logger.html",[3,0.172,4,0.123,5,0.147,7,1.075,11,0.929,13,1.588,14,0.02,15,0.912,16,1.588,18,1.47,20,0.147,21,0.359,52,0.172,53,0.01,69,0.014,70,0.014,89,2.126,91,0.584,92,1.986,98,1.063,109,2.727,113,4.268,212,2.559,235,1.718,239,1.232,287,2.981,475,1.512,741,3.533,742,4.132,743,6.043,744,5.412,745,4.64,746,5.412,747,5.412,748,5.412,749,5.412,750,5.412,751,5.594,752,4.12,753,6.666,754,5.412,755,6.418,756,4.12,757,5.412,758,4.12,759,3.146,760,5.412,761,4.12,762,5.412,763,4.12,764,4.12,765,4.12,766,4.12,767,4.12,768,4.12,769,4.12]],["title/modules/ParserModule.html",[0,0.725,366,2.327]],["body/modules/ParserModule.html",[0,1.254,2,1.743,3,0.22,4,0.158,5,0.189,14,0.019,20,0.226,21,0.46,52,0.22,53,0.013,69,0.016,70,0.016,71,2.2,77,2.443,78,1.933,79,1.835,81,2.579,366,4.692,368,2.886,561,4.473,770,4.516,771,4.516,772,4.516,773,5.267,774,5.267]],["title/injectables/ParserService.html",[440,0.616,561,2.157]],["body/injectables/ParserService.html",[3,0.136,4,0.098,5,0.116,7,0.915,11,0.892,13,1.241,14,0.02,15,0.712,16,1.241,18,1.353,20,0.116,21,0.284,52,0.136,53,0.008,54,2.073,60,1.266,69,0.012,70,0.012,91,0.758,92,1.69,93,3.706,98,1.044,99,3.435,109,2.133,134,1.577,137,1.16,229,2.721,242,2.537,257,2.537,313,2.789,314,3.516,440,0.777,441,1.133,475,1.193,476,1.486,561,2.721,565,5.002,656,3.949,775,2.484,776,5.346,777,5.346,778,5.346,779,5.814,780,5.814,781,4.605,782,4.605,783,3.253,784,3.253,785,4.605,786,3.253,787,4.605,788,3.253,789,4.605,790,3.707,791,4.082,792,4.605,793,3.253,794,5.262,795,4.605,796,3.253,797,3.253,798,3.253,799,3.193,800,2.789,801,2.484,802,2.789,803,4.605,804,3.516,805,2.789,806,2.789,807,2.789,808,3.253,809,3.253,810,3.253,811,2.484,812,2.789,813,2.484,814,2.789,815,3.253,816,3.253,817,3.253,818,3.253,819,3.253,820,3.253,821,3.253,822,3.253,823,3.253,824,3.253,825,5.346,826,5.346,827,3.516,828,3.253,829,3.253,830,3.253,831,3.253,832,4.605,833,3.253,834,3.253,835,3.253,836,3.253,837,2.789,838,3.253,839,3.253,840,3.253,841,5.346,842,3.253,843,3.253,844,3.253,845,2.789,846,3.253,847,4.605,848,3.253,849,3.253,850,3.253,851,3.253,852,3.253,853,3.253,854,3.253,855,3.253,856,4.605,857,3.253,858,4.605,859,3.253]],["title/classes/Personality.html",[53,0.009,95,1.668]],["body/classes/Personality.html",[3,0.184,4,0.133,5,0.158,11,0.878,14,0.02,15,0.833,20,0.224,23,1.026,35,1.693,52,0.261,53,0.011,69,0.015,70,0.015,88,2,89,2.281,91,0.626,92,2.078,95,3.013,96,4.773,98,1.087,100,2.296,102,3.225,104,3.693,107,3.065,109,2.635,116,3.517,117,2.191,118,2.435,119,1.531,126,3.065,127,3.375,128,4.325,129,3.375,137,0.903,141,3.065,142,2.435,143,3.065,389,3.375,860,3.065,861,4.773,862,4.335,863,4.42,864,4.42,865,4.42,866,4.42,867,5.665,868,4.42,869,3.375,870,2.818,871,4.325,872,3.79,873,4.42,874,3.065]],["title/controllers/PersonalityController.html",[147,1.038,875,2.532]],["body/controllers/PersonalityController.html",[3,0.111,4,0.08,5,0.095,7,0.791,11,0.862,13,1.503,14,0.02,15,0.862,16,1.503,18,1.428,20,0.213,21,0.232,52,0.111,53,0.007,60,1.18,68,0.757,69,0.01,70,0.01,88,1.289,91,0.377,95,2.814,98,0.76,100,2.255,113,1.573,137,0.843,147,1.132,150,2.411,154,3.566,156,2.626,157,2.817,162,2.761,164,2.761,166,3.196,169,2.444,172,3.894,177,3.393,179,3.894,180,3.869,183,2.283,186,4.703,187,2.033,190,4.036,203,2.283,212,1.461,213,1.697,214,1.846,215,2.033,216,1.846,226,1.467,227,1.846,228,1.467,229,1.573,230,1.573,231,2.312,233,2.179,234,1.846,235,1.355,236,1.217,237,0.881,239,0.796,243,1.972,250,2.418,251,2.418,255,2.283,256,1.374,275,3.04,276,3.669,278,2.283,287,2.193,299,2.033,338,3.039,339,3.039,340,3.372,341,3.039,342,1.947,343,2.626,344,2.283,348,3.039,349,2.817,350,3.039,352,3.039,357,2.283,415,2.283,425,2.283,552,2.193,791,2.033,862,1.846,875,2.761,876,2.283,877,3.414,878,3.981,879,3.414,880,3.981,881,2.663,882,2.663,883,2.663,884,2.663,885,2.663,886,2.663,887,2.663,888,2.663,889,2.663,890,2.663,891,2.663,892,2.663,893,2.663,894,2.663,895,2.283,896,2.663,897,2.663,898,2.663,899,2.663,900,2.663,901,2.663,902,2.663,903,2.663,904,2.283,905,2.663,906,2.663,907,2.663,908,2.663,909,2.663,910,2.538,911,2.663,912,2.663,913,2.663,914,2.663,915,2.663,916,2.663,917,2.283,918,2.283,919,2.663,920,3.981,921,2.663,922,2.283,923,3.981,924,4.768,925,2.663,926,2.663,927,2.663,928,2.663,929,2.663,930,2.663,931,2.663,932,2.663,933,2.663,934,2.663,935,2.663,936,2.663,937,2.663,938,2.283,939,2.663,940,2.663,941,2.663,942,2.283,943,2.283]],["title/modules/PersonalityModule.html",[0,0.725,30,1.884]],["body/modules/PersonalityModule.html",[0,1.116,2,1.444,3,0.182,4,0.131,5,0.156,14,0.02,15,0.581,20,0.261,21,0.381,22,2.404,23,1.013,28,4.106,29,3.741,30,3.86,34,3.585,35,1.304,36,1.688,37,3.026,46,3.37,47,2.781,52,0.182,53,0.011,61,2.294,68,1.597,69,0.015,70,0.015,71,1.957,77,2.173,78,1.601,79,1.52,81,2.294,95,1.994,117,1.688,137,0.696,212,2.28,231,3.582,368,2.567,374,2.781,433,3.585,437,3.026,874,3.895,875,4.308,904,3.741,944,3.741,945,3.741,946,3.741,947,3.741,948,3.332,949,3.741,950,4.363,951,3.895,952,3.741]],["title/injectables/PersonalityService.html",[231,1.77,440,0.616]],["body/injectables/PersonalityService.html",[3,0.081,4,0.059,5,0.07,7,0.622,11,0.883,13,1.504,14,0.02,15,0.863,16,1.504,17,1.245,18,1.409,20,0.205,21,0.17,23,0.453,35,1.171,36,0.755,52,0.081,53,0.005,54,1.995,57,1.354,58,1.354,60,1.35,69,0.008,70,0.008,79,0.68,88,1.544,91,0.277,92,1.148,93,2.497,95,3.028,96,1.491,97,2.684,98,0.876,99,1.154,109,2.017,119,0.528,121,1.899,137,1.033,142,2.158,150,2.232,156,2.158,157,1.849,158,1.995,162,2.716,164,2.17,169,2.259,177,3.247,212,1.644,217,2.048,218,1.154,231,1.518,235,1.719,236,2.392,237,1.819,239,0.936,242,1.724,243,2.226,248,3.842,250,0.892,251,0.892,256,2.837,257,1.076,258,3.336,259,2.991,260,3.336,261,1.674,263,1.995,265,2.39,269,3.359,271,2.684,272,1.491,273,3.504,274,1.674,275,1.491,285,1.154,287,1.724,289,1.849,312,1.849,330,2.39,336,2.684,342,2.731,343,2.883,346,3.842,395,2.241,433,2.312,437,3.107,440,0.528,441,0.68,446,2.17,454,2.173,473,2.39,475,2.017,476,2.512,499,1.007,505,1.491,507,1.674,518,1.491,519,1.491,526,2.684,552,1.724,554,3.359,556,2.684,558,2.684,572,2.684,573,4.205,579,4.205,580,1.674,593,2.39,596,2.684,598,1.674,601,1.674,602,1.674,605,1.674,609,2.684,610,1.674,611,1.491,612,2.684,613,1.674,614,1.674,615,1.491,616,1.674,617,1.491,618,1.674,636,2.021,666,2.17,706,3.745,745,1.674,791,1.491,805,1.674,862,3.401,869,1.491,877,2.684,910,2.497,922,1.674,949,1.674,951,2.17,953,1.674,954,3.13,955,3.13,956,3.13,957,3.13,958,1.952,959,2.468,960,1.952,961,3.13,962,1.952,963,1.952,964,3.13,965,1.952,966,3.13,967,1.952,968,3.13,969,1.952,970,1.952,971,3.13,972,1.952,973,3.13,974,1.952,975,3.13,976,1.952,977,4.481,978,1.952,979,3.13,980,1.952,981,3.13,982,4.481,983,1.952,984,3.13,985,1.952,986,3.13,987,1.952,988,1.952,989,1.952,990,1.952,991,1.952,992,3.13,993,1.952,994,1.952,995,1.952,996,1.952,997,1.952,998,1.952,999,1.952,1000,4.481,1001,1.952,1002,1.674,1003,1.952,1004,1.674,1005,1.952,1006,3.13,1007,2.684,1008,3.13,1009,1.952,1010,1.674,1011,1.952,1012,1.952,1013,1.952,1014,1.952,1015,3.13,1016,1.952,1017,1.245,1018,1.952,1019,1.952,1020,1.354,1021,1.674,1022,1.952,1023,3.13,1024,1.952,1025,1.952,1026,1.952,1027,1.952,1028,1.952,1029,1.952,1030,1.952,1031,1.952,1032,1.674,1033,1.952,1034,1.952,1035,3.13,1036,1.952,1037,1.952,1038,1.952,1039,1.952,1040,1.952,1041,1.952,1042,1.952,1043,3.13,1044,1.952,1045,1.952,1046,1.952,1047,1.952,1048,1.952,1049,1.952,1050,4.481,1051,1.952]],["title/controllers/RootController.html",[42,2.532,147,1.038]],["body/controllers/RootController.html",[3,0.211,4,0.152,5,0.181,7,1.225,11,0.822,13,1.176,14,0.02,15,0.675,16,1.176,18,1.36,20,0.181,21,0.442,42,4.276,52,0.211,53,0.013,60,1.006,68,1.439,69,0.016,70,0.016,91,0.718,100,2.148,109,1.858,147,1.439,180,3.663,407,2.992,759,3.867,1052,4.342,1053,5.064,1054,6.92,1055,6.167,1056,5.064,1057,5.064,1058,5.288,1059,5.064,1060,5.064,1061,5.064,1062,5.064,1063,5.064,1064,5.064,1065,5.064,1066,5.064,1067,5.064,1068,5.064,1069,5.064,1070,5.064]],["title/guards/SessionGuard.html",[226,2.011,1071,2.788]],["body/guards/SessionGuard.html",[3,0.203,4,0.146,5,0.175,7,1.197,11,0.65,13,1.132,14,0.02,15,0.65,16,1.132,18,1.075,20,0.175,21,0.425,52,0.203,53,0.012,60,1.197,69,0.016,70,0.016,88,1.318,91,0.691,98,0.777,137,1.042,166,2.365,179,2.881,226,3.319,237,1.613,289,2.881,395,2.228,552,2.686,595,4.178,636,2.516,742,4.601,751,3.723,910,3.108,1072,4.876,1073,4.181,1074,7.018,1075,6.025,1076,6.83,1077,4.876,1078,3.56,1079,6.025,1080,4.876,1081,4.876,1082,4.876,1083,4.876,1084,6.025,1085,4.876,1086,4.876]],["title/classes/Source.html",[4,0.109,53,0.009]],["body/classes/Source.html",[3,0.165,4,0.189,5,0.142,11,0.901,14,0.02,20,0.212,23,0.918,35,1.182,52,0.247,53,0.01,60,0.786,69,0.014,70,0.014,88,1.895,89,2.04,91,0.56,92,1.933,98,1.132,100,2.356,101,3.652,102,3.49,104,3.112,106,3.731,107,4.69,109,2.573,112,3.019,113,3.112,114,4.522,116,3.618,117,2.038,118,2.178,119,1.424,121,1.918,126,2.742,130,3.019,131,4.022,134,1.918,135,2.742,136,4.822,137,0.63,145,4.107,315,2.205,378,4.822,390,2.742,861,4.522,1087,2.742,1088,4.522,1089,5.922,1090,3.954,1091,3.954,1092,3.954,1093,3.954,1094,5.267,1095,5.267,1096,3.954,1097,4.516,1098,5.267,1099,5.267,1100,5.267,1101,3.954,1102,3.954,1103,3.019,1104,3.954,1105,3.954,1106,3.954,1107,3.954,1108,2.742,1109,3.391]],["title/modules/SourceModule.html",[0,0.725,38,2.011]],["body/modules/SourceModule.html",[0,1.216,2,1.654,3,0.209,4,0.183,5,0.179,14,0.02,15,0.666,20,0.247,21,0.436,22,2.754,23,1.161,38,4.012,52,0.209,53,0.013,61,2.042,69,0.016,70,0.016,71,2.131,77,2.367,78,1.835,79,1.741,81,2.499,117,1.934,137,0.797,368,2.796,374,3.187,455,4.144,1108,4.243,1110,4.287,1111,4.287,1112,4.287,1113,3.818,1114,4.287,1115,5,1116,4.243,1117,4.287]],["title/injectables/SourceService.html",[440,0.616,455,2.011]],["body/injectables/SourceService.html",[3,0.203,4,0.205,5,0.174,7,1.195,11,0.802,13,1.397,14,0.02,15,0.802,16,1.397,18,1.073,20,0.244,21,0.425,23,1.13,52,0.203,53,0.012,60,0.967,69,0.016,70,0.016,91,0.689,98,0.776,119,1.315,137,0.776,150,2.162,156,3.315,169,2.1,235,1.383,237,2.162,239,1.799,242,2.681,243,1.695,440,1.015,441,1.695,454,3.31,455,3.315,498,3.716,499,2.511,1103,3.716,1114,4.172,1116,4.173,1118,4.172,1119,4.866,1120,4.866,1121,6.018,1122,4.866,1123,4.866,1124,4.866,1125,4.866,1126,4.866,1127,4.866,1128,4.866,1129,4.866]],["title/controllers/StatsController.html",[147,1.038,1130,2.532]],["body/controllers/StatsController.html",[3,0.223,4,0.16,5,0.191,7,1.265,11,0.711,14,0.02,18,1.177,20,0.228,21,0.466,52,0.223,53,0.014,60,1.06,68,1.517,69,0.017,70,0.017,91,0.756,100,1.859,147,1.517,235,1.517,239,1.596,407,3.154,700,4.578,702,3.747,704,4.578,710,4.578,1130,4.415,1131,4.578,1132,5.339,1133,6.04,1134,5.339,1135,4.578,1136,5.339]],["title/modules/StatsModule.html",[0,0.725,40,2.157]],["body/modules/StatsModule.html",[0,1.174,2,1.565,3,0.197,4,0.142,5,0.169,14,0.02,20,0.254,21,0.413,30,3.661,31,3.28,32,4.192,33,4.056,34,3.661,35,1.414,36,1.83,37,3.28,40,4.431,52,0.197,53,0.012,61,2.414,68,1.681,69,0.015,70,0.015,71,2.059,77,2.287,78,1.735,79,1.647,81,2.414,368,2.702,702,4.114,1130,4.473,1135,4.056,1137,4.056,1138,4.056,1139,4.056,1140,4.73,1141,4.73,1142,4.73]],["title/injectables/StatsService.html",[440,0.616,702,2.011]],["body/injectables/StatsService.html",[3,0.203,4,0.146,5,0.175,7,1.197,11,0.803,13,1.132,14,0.02,15,0.65,16,1.132,18,1.075,20,0.244,21,0.425,35,1.458,36,1.886,52,0.203,53,0.012,60,1.197,69,0.016,70,0.016,91,0.691,98,0.777,217,3.267,218,2.881,219,3.991,231,3.513,232,3.723,235,1.859,239,1.801,263,3.108,273,3.108,312,2.881,440,1.017,441,1.698,702,3.319,706,3.723,1133,5.857,1143,4.181,1144,4.876,1145,4.876,1146,4.876,1147,4.876,1148,4.876,1149,4.876,1150,4.876,1151,4.876,1152,4.876,1153,4.876,1154,4.876]],["title/classes/User.html",[53,0.009,315,1.148]],["body/classes/User.html",[3,0.199,4,0.143,5,0.171,11,0.862,14,0.02,15,0.862,20,0.213,23,1.107,52,0.27,53,0.012,55,2.627,69,0.015,70,0.015,88,1.97,89,2.46,91,0.676,92,2.18,98,1.032,100,2.255,102,3.34,104,3.825,109,2.486,116,3.496,117,2.299,118,2.627,119,1.289,137,0.76,315,2.036,395,2.715,475,2.18,595,4.12,720,3.306,727,2.627,739,4.126,870,3.788,1155,3.306,1156,5.551,1157,4.768,1158,4.768,1159,4.768,1160,4.12,1161,4.088,1162,3.039,1163,3.641]],["title/interfaces/UserDocument.html",[55,2.011,727,2.011]],["body/interfaces/UserDocument.html",[3,0.211,4,0.151,5,0.181,7,1.223,11,0.673,14,0.02,15,0.673,18,1.114,20,0.22,23,1.173,52,0.277,53,0.013,55,2.784,69,0.016,70,0.016,88,1.869,91,0.716,102,3.428,109,2.26,116,3.568,117,2.383,118,2.784,119,1.366,137,0.806,315,2.089,395,2.309,475,1.854,595,3.504,720,4.271,727,3.393,739,3.221,870,3.221,1155,3.504,1156,4.333,1160,4.271,1161,5.93,1162,3.221,1163,3.859,1164,4.333,1165,5.053]],["title/controllers/UsersController.html",[147,1.038,1166,2.532]],["body/controllers/UsersController.html",[3,0.129,4,0.093,5,0.111,7,0.885,11,0.803,13,1.399,14,0.02,15,0.803,16,1.399,18,1.329,20,0.237,21,0.271,52,0.129,53,0.008,60,1.035,68,0.882,69,0.012,70,0.012,78,1.139,88,1.629,91,0.44,98,0.71,100,2.099,113,3.077,119,1.204,137,0.83,147,1.266,150,2.365,154,3.456,166,3.133,169,1.339,172,4.164,179,3.818,180,4.017,212,1.634,214,2.152,215,2.369,216,2.152,226,1.709,227,2.152,228,1.709,229,1.833,230,1.833,233,2.38,234,2.152,235,1.481,236,2.035,237,1.027,239,0.928,243,1.551,250,2.035,251,2.035,256,1.601,276,3.612,289,2.631,297,2.369,315,1.4,316,2.661,338,2.839,339,2.839,340,2.839,341,2.839,342,1.818,343,2.453,348,2.839,349,2.631,350,2.839,352,2.839,472,2.661,522,2.661,552,1.709,636,1.601,716,2.152,879,3.819,895,2.661,910,1.978,942,2.661,1002,2.661,1004,2.661,1078,2.631,1166,3.088,1167,2.661,1168,3.819,1169,3.819,1170,6.027,1171,5.209,1172,3.103,1173,3.103,1174,3.103,1175,3.103,1176,3.103,1177,3.103,1178,3.103,1179,3.103,1180,3.103,1181,3.103,1182,3.103,1183,3.103,1184,3.103,1185,3.103,1186,3.077,1187,2.661,1188,3.103,1189,3.103,1190,3.103,1191,3.103,1192,3.103,1193,3.103,1194,3.103,1195,3.103,1196,3.103,1197,2.661,1198,3.103,1199,3.103,1200,3.819,1201,4.466,1202,4.453,1203,3.103,1204,3.103,1205,3.103,1206,2.661,1207,3.612,1208,3.103,1209,3.103,1210,3.103,1211,3.103,1212,3.103,1213,3.103,1214,3.103,1215,3.103,1216,4.453,1217,4.453,1218,4.453,1219,3.103,1220,3.103,1221,3.103]],["title/modules/UsersModule.html",[0,0.725,24,2.157]],["body/modules/UsersModule.html",[0,1.154,2,1.522,3,0.192,4,0.138,5,0.165,14,0.02,15,0.613,20,0.252,21,0.401,22,2.535,23,1.068,24,4.316,46,3.417,47,2.933,52,0.192,53,0.012,60,0.914,61,2.373,68,1.652,69,0.015,70,0.015,71,2.024,77,2.248,78,1.688,79,1.603,81,2.373,117,2.248,119,1.244,137,0.926,315,1.447,368,2.655,725,3.763,734,2.933,738,3.513,739,2.933,1162,3.704,1166,4.416,1186,4.396,1187,3.945,1222,3.945,1223,4.601,1224,3.945,1225,3.945,1226,3.513,1227,3.945,1228,4.601,1229,3.513,1230,3.945,1231,3.513,1232,3.945]],["title/injectables/UsersService.html",[440,0.616,1186,2.157]],["body/injectables/UsersService.html",[3,0.165,4,0.119,5,0.142,7,1.046,9,4.516,11,0.901,13,1.466,14,0.02,15,0.841,16,1.466,18,1.393,20,0.226,21,0.345,23,0.918,52,0.165,53,0.01,60,1.254,69,0.014,70,0.014,88,1.069,91,0.56,92,1.933,98,0.63,119,1.069,137,0.84,150,2.349,158,3.357,169,2.273,212,2.317,235,1.795,236,2.706,237,1.959,239,1.574,243,1.835,250,2.407,251,2.407,315,2.127,395,1.807,440,0.889,441,1.377,454,3.062,475,1.451,476,1.807,495,4.516,499,2.04,723,3.019,725,3.112,727,2.178,728,3.019,1007,3.391,1078,3.112,1168,4.516,1169,5.415,1186,3.112,1200,5.078,1201,5.078,1207,3.652,1227,3.391,1233,3.391,1234,5.267,1235,5.267,1236,3.954,1237,3.954,1238,5.267,1239,3.954,1240,5.267,1241,3.954,1242,5.267,1243,3.954,1244,3.954,1245,3.954,1246,3.954,1247,3.954,1248,5.922,1249,3.954,1250,3.954,1251,3.954,1252,5.267,1253,5.267,1254,4.516,1255,3.391,1256,3.954]],["title/injectables/UtilService.html",[433,1.884,440,0.616]],["body/injectables/UtilService.html",[3,0.172,4,0.124,5,0.148,7,1.076,11,0.722,13,1.404,14,0.02,15,0.722,16,1.258,18,1.195,20,0.148,21,0.36,52,0.172,53,0.011,60,1.276,69,0.014,70,0.014,91,0.585,98,0.864,137,1.063,142,2.274,213,3.454,237,1.365,257,2.274,312,3.574,351,3.539,395,2.476,433,2.795,440,0.914,441,1.437,446,2.862,465,4.646,475,1.514,476,1.886,631,3.539,827,4.137,1020,4.453,1257,3.539,1258,5.418,1259,5.418,1260,5.418,1261,6.422,1262,4.127,1263,6.422,1264,5.418,1265,6.977,1266,4.127,1267,5.418,1268,5.418,1269,5.418,1270,5.418,1271,6.422,1272,6.422,1273,5.418,1274,4.127,1275,5.418,1276,6.049,1277,4.127,1278,5.418,1279,4.127,1280,4.127,1281,4.127,1282,3.539,1283,4.127,1284,4.127,1285,4.127,1286,4.127,1287,4.127,1288,4.127,1289,5.418,1290,4.137,1291,4.127,1292,4.127]],["title/controllers/ViewController.html",[147,1.038,1293,2.532]],["body/controllers/ViewController.html",[3,0.126,4,0.09,5,0.108,7,0.865,11,0.827,13,1.441,14,0.02,15,0.827,16,1.441,18,1.369,20,0.201,21,0.263,52,0.126,53,0.008,68,0.855,69,0.011,70,0.011,88,1.678,91,0.426,98,0.99,100,2.074,137,0.99,147,1.238,150,2.393,154,3.92,166,3.522,172,4.104,179,4.292,180,4.12,228,1.657,229,1.777,230,1.777,233,2.339,243,2.162,250,2.837,251,2.837,256,2.895,338,3.957,339,3.957,340,3.957,341,3.957,342,2.535,343,3.419,348,3.957,349,3.667,352,3.576,407,1.777,698,3.734,699,2.58,705,2.58,1293,3.02,1294,2.58,1295,3.734,1296,4.355,1297,4.355,1298,4.355,1299,4.355,1300,3.008,1301,3.008,1302,3.008,1303,3.008,1304,3.008,1305,5.119,1306,3.008,1307,4.355,1308,3.008,1309,3.008,1310,3.008,1311,3.008,1312,3.008,1313,3.008,1314,3.008,1315,5.119,1316,3.008,1317,2.58,1318,2.58,1319,6.207,1320,4.355,1321,4.355,1322,3.008,1323,3.008,1324,3.008,1325,3.008,1326,3.008,1327,3.008,1328,3.008,1329,3.008,1330,2.58,1331,3.008,1332,3.008]],["title/modules/ViewModule.html",[0,0.725,46,1.77]],["body/modules/ViewModule.html",[0,1.236,2,1.701,3,0.215,4,0.154,5,0.184,14,0.02,20,0.24,21,0.449,46,3.552,52,0.215,53,0.013,61,2.099,68,1.769,69,0.016,70,0.016,71,2.168,77,2.408,78,1.886,79,1.791,81,2.541,233,3.449,368,2.844,1293,4.641,1317,4.408,1333,4.408,1334,4.408,1335,4.408,1336,5.141,1337,5.141]],["title/injectables/ViewService.html",[233,1.668,440,0.616]],["body/injectables/ViewService.html",[3,0.19,4,0.137,5,0.163,7,1.147,11,0.917,14,0.02,18,1.274,20,0.227,21,0.398,52,0.19,53,0.012,60,0.905,66,3.907,69,0.015,70,0.015,91,0.646,92,2.119,98,0.726,150,2.098,212,2.446,233,2.639,235,1.998,236,2.898,237,1.911,239,1.895,243,2.012,285,2.692,287,3.181,349,3.939,440,0.974,441,1.587,475,1.672,476,2.082,552,2.51,742,3.479,910,2.905,1078,3.412,1338,3.907,1339,5.437,1340,7.028,1341,5.775,1342,4.557,1343,7.028,1344,4.557,1345,5.775,1346,4.557,1347,5.775,1348,4.557,1349,5.775,1350,4.952,1351,4.557,1352,4.557,1353,4.557,1354,4.557,1355,4.557]],["title/classes/WikidataCache.html",[53,0.009,1356,2.327]],["body/classes/WikidataCache.html",[3,0.195,4,0.14,5,0.167,11,0.896,14,0.02,20,0.21,23,1.083,52,0.267,53,0.012,69,0.015,70,0.015,88,1.911,89,2.407,91,0.661,92,2.151,94,4.064,98,1.127,99,3.972,100,2.342,101,3.234,102,3.469,104,3.463,106,2.756,109,2.467,116,3.574,117,2.267,118,2.57,119,1.261,137,0.744,342,2.617,475,1.711,790,4.444,1017,4.085,1160,4.064,1356,4.085,1357,3.234,1358,4.894,1359,4.664,1360,4.664,1361,4.664,1362,4.664,1363,4.664,1364,3.562,1365,4.664,1366,3.234,1367,4]],["title/controllers/WikidataController.html",[147,1.038,1368,2.532]],["body/controllers/WikidataController.html",[3,0.206,4,0.148,5,0.177,7,1.208,11,0.659,13,1.149,14,0.02,15,0.659,16,1.149,18,1.091,20,0.218,21,0.432,52,0.206,53,0.013,68,1.406,69,0.016,70,0.016,91,0.701,100,1.723,147,1.406,150,2.178,166,2.948,177,3.952,180,3.626,190,4.195,213,3.875,236,2.261,407,2.923,790,3.431,959,3.626,1078,3.592,1197,4.242,1318,4.242,1368,4.216,1369,4.242,1370,4.948,1371,6.582,1372,4.948,1373,4.948,1374,4.948,1375,4.242,1376,4.948,1377,4.948,1378,4.948,1379,4.242,1380,4.948]],["title/modules/WikidataModule.html",[0,0.725,28,2.157]],["body/modules/WikidataModule.html",[0,1.156,2,1.525,3,0.192,4,0.138,5,0.165,14,0.02,15,0.614,20,0.247,21,0.402,22,2.539,23,1.07,28,4.229,52,0.192,53,0.012,60,0.916,61,1.882,68,1.654,69,0.015,70,0.015,71,2.026,77,2.251,78,1.691,79,1.606,81,2.376,88,1.246,134,3.091,137,0.927,342,1.882,368,2.659,870,2.938,959,4.1,1017,2.938,1229,3.52,1231,3.52,1356,2.938,1358,3.52,1366,4.643,1368,4.42,1375,3.953,1381,3.953,1382,3.953,1383,3.953,1384,3.52,1385,4.61,1386,3.953,1387,4.442,1388,3.953,1389,4.989,1390,3.953,1391,3.953]],["title/injectables/WikidataService.html",[440,0.616,959,2.011]],["body/injectables/WikidataService.html",[3,0.11,4,0.079,5,0.094,7,0.786,11,0.841,13,1.466,14,0.02,15,0.89,16,1.466,18,1.354,20,0.189,21,0.23,23,0.613,52,0.11,53,0.007,60,1.344,69,0.01,70,0.01,91,0.374,95,1.807,98,0.84,106,3.333,109,2.07,116,1.362,119,0.713,137,1.132,150,2.238,166,1.28,169,2.047,177,2.612,190,3.914,230,1.559,235,0.75,237,0.873,239,1.182,242,2.901,243,1.965,342,2.863,343,3.108,395,1.206,440,0.667,441,0.919,454,2.554,475,1.451,476,1.807,499,1.362,790,3.288,845,2.263,861,4.022,862,3.912,918,2.263,938,3.391,959,2.178,1017,1.682,1020,3.288,1078,2.336,1290,2.015,1356,3.596,1364,2.015,1379,3.391,1386,2.263,1392,2.015,1393,3.954,1394,3.954,1395,3.954,1396,3.954,1397,3.954,1398,3.954,1399,2.639,1400,2.639,1401,3.954,1402,2.639,1403,3.954,1404,2.639,1405,3.954,1406,2.639,1407,3.954,1408,2.639,1409,2.639,1410,3.954,1411,2.639,1412,3.954,1413,2.639,1414,3.954,1415,2.639,1416,2.742,1417,2.263,1418,2.015,1419,3.391,1420,2.263,1421,2.639,1422,2.639,1423,2.639,1424,3.954,1425,2.639,1426,2.639,1427,2.639,1428,2.639,1429,2.639,1430,2.639,1431,2.639,1432,4.742,1433,2.639,1434,2.639,1435,2.639,1436,4.066,1437,4.742,1438,3.954,1439,3.391,1440,3.954,1441,2.639,1442,2.639,1443,2.639,1444,3.954,1445,2.639,1446,3.954,1447,2.639,1448,2.639,1449,2.639,1450,2.639,1451,2.639,1452,2.639,1453,2.639,1454,2.639,1455,2.639,1456,2.639,1457,2.639,1458,3.954,1459,2.639,1460,2.639,1461,2.639,1462,2.639,1463,2.639,1464,2.639,1465,2.639,1466,2.639,1467,2.639,1468,2.639,1469,3.954,1470,2.639,1471,3.954,1472,2.639,1473,2.639,1474,2.639,1475,2.639,1476,2.639,1477,3.954,1478,2.639,1479,3.954,1480,2.639,1481,2.639,1482,2.639,1483,2.639,1484,2.639,1485,2.639,1486,2.639,1487,2.015,1488,2.639,1489,2.639,1490,2.639,1491,2.639,1492,3.954,1493,2.639,1494,2.639,1495,2.639,1496,2.639,1497,2.639,1498,2.639,1499,2.639,1500,2.639,1501,2.639,1502,2.639,1503,2.639,1504,2.639,1505,2.639]],["title/coverage.html",[1506,3.811]],["body/coverage.html",[4,0.087,5,0.104,14,0.02,35,0.868,36,1.941,42,2.014,53,0.016,55,1.6,69,0.011,70,0.011,75,1.852,76,1.852,90,3.479,95,1.328,98,0.463,121,1.409,122,3.198,138,2.218,146,2.014,147,1.882,148,2.014,149,2.491,212,1.066,217,1.328,219,1.6,226,1.6,231,1.409,233,1.328,237,0.961,257,4.23,315,0.913,367,2.218,373,2.014,376,3.378,377,3.479,401,2.218,404,2.014,405,2.014,406,2.491,433,1.499,434,2.218,438,2.014,440,1.185,442,2.491,455,1.6,553,2.491,561,1.716,640,1.716,643,4.483,660,2.014,662,2.014,664,2.218,666,2.014,696,2.014,697,2.491,702,1.6,716,2.014,717,2.491,718,2.491,722,2.491,725,1.716,727,1.6,731,2.491,741,2.491,775,4.483,799,2.014,801,2.218,811,2.218,813,2.218,860,3.479,871,2.218,874,2.014,875,2.014,876,2.491,948,2.218,951,2.014,953,2.491,959,1.6,1052,2.491,1071,2.218,1073,2.491,1087,2.944,1108,2.014,1113,2.218,1116,2.014,1118,2.491,1130,2.014,1131,2.491,1143,2.491,1155,3.479,1162,1.852,1166,2.014,1167,2.491,1186,1.716,1226,2.218,1233,2.491,1257,2.491,1293,2.014,1294,2.491,1338,2.491,1356,1.852,1357,2.944,1366,2.014,1368,2.014,1369,2.491,1384,2.218,1387,2.218,1392,3.831,1416,2.014,1418,2.218,1506,2.218,1507,2.905,1508,2.905,1509,2.905,1510,7.516,1511,6.333,1512,5.017,1513,7.505,1514,2.905,1515,4.246,1516,2.905,1517,2.905,1518,5.017,1519,5.017,1520,5.034,1521,2.491,1522,3.64,1523,3.64,1524,3.64,1525,2.491,1526,4.246,1527,2.905,1528,2.905,1529,5.017,1530,4.302,1531,2.491,1532,2.491,1533,2.491,1534,2.905,1535,2.905,1536,2.905,1537,2.905,1538,2.905,1539,2.905]],["title/dependencies.html",[71,1.53,1540,3.045]],["body/dependencies.html",[14,0.02,20,0.139,21,0.34,23,0.904,45,2.01,52,0.163,57,2.701,58,2.701,69,0.014,70,0.014,71,1.357,83,2.701,87,2.975,119,1.409,225,2.483,228,3.238,285,3.473,288,2.975,342,1.591,539,5.04,593,2.975,660,2.701,662,2.701,668,4.471,726,4.488,734,3.324,794,3.34,799,2.701,804,2.975,1088,2.975,1416,2.701,1541,5.215,1542,5.215,1543,3.896,1544,3.34,1545,3.896,1546,3.896,1547,3.896,1548,3.896,1549,3.896,1550,3.896,1551,3.896,1552,3.896,1553,3.896,1554,5.878,1555,3.896,1556,3.896,1557,5.215,1558,3.896,1559,3.896,1560,3.896,1561,3.896,1562,3.896,1563,3.896,1564,5.215,1565,3.896,1566,2.975,1567,4.471,1568,3.896,1569,5.215,1570,3.896,1571,3.896,1572,5.878,1573,3.896,1574,3.896,1575,3.896,1576,3.896,1577,2.975,1578,3.896,1579,5.215,1580,3.896,1581,3.896,1582,3.896,1583,5.878,1584,3.896,1585,5.215,1586,3.896,1587,3.896,1588,3.896,1589,5.215,1590,3.896,1591,3.896,1592,3.896,1593,3.896,1594,3.896,1595,3.896,1596,3.896,1597,3.896,1598,3.896,1599,3.896,1600,3.896,1601,7.152,1602,5.878,1603,3.896,1604,3.896,1605,3.896,1606,3.896,1607,3.896,1608,3.896,1609,3.896,1610,3.896,1611,3.896,1612,3.896,1613,3.34,1614,3.896,1615,3.896,1616,3.896,1617,3.896,1618,3.896,1619,3.896,1620,3.896,1621,3.896,1622,3.896,1623,3.896,1624,3.896,1625,3.896,1626,3.896,1627,3.896,1628,3.896,1629,3.896,1630,3.896]],["title/index.html",[91,0.431,1631,2.611,1632,2.611]],["body/index.html",[14,0.016,69,0.016,70,0.016,636,2.718,1350,5.415,1577,4.022,1633,5.415,1634,5.267,1635,6.764,1636,5.267,1637,5.267,1638,5.267,1639,5.267,1640,5.267,1641,5.267,1642,5.267,1643,5.267,1644,5.267,1645,5.267,1646,6.315,1647,5.267,1648,5.267,1649,5.267,1650,5.267,1651,6.315,1652,5.267,1653,5.267,1654,5.267,1655,5.267,1656,4.516,1657,5.415,1658,5.267,1659,5.8,1660,5.267,1661,4.516,1662,5.267,1663,4.516,1664,4.516,1665,5.267,1666,6.315,1667,5.267,1668,5.267,1669,6.315,1670,5.267,1671,4.516]],["title/license.html",[1631,2.611,1632,2.611,1672,2.611]],["body/license.html",[4,0.19,5,0.046,7,0.139,11,0.093,14,0.003,17,0.447,20,0.025,35,0.385,53,0.002,55,1.763,57,0.893,60,0.139,69,0.005,70,0.003,79,0.244,93,0.447,94,0.486,98,0.205,99,3.131,102,1.142,134,1.254,135,1.535,154,3.081,186,0.535,228,0.709,235,0.199,237,1.059,242,0.984,259,1.364,260,0.821,272,0.535,273,1.411,285,0.414,315,1.473,342,0.526,350,0.447,454,0.34,463,0.601,510,1.531,523,6.102,524,1.531,532,1.104,565,0.983,611,0.983,615,1.69,617,1.69,636,0.664,655,0.601,687,0.601,692,0.535,708,0.601,734,0.821,751,0.535,759,0.535,804,0.535,806,1.104,807,0.601,827,0.535,837,1.104,917,0.601,943,1.104,1010,0.601,1020,0.486,1021,1.531,1032,0.601,1058,0.601,1088,0.535,1097,4.738,1160,1.238,1164,1.531,1206,2.217,1207,0.486,1254,0.601,1255,1.104,1282,2.217,1290,0.535,1295,0.601,1330,5.195,1339,2.217,1436,0.601,1439,2.217,1487,0.535,1506,0.983,1566,0.983,1613,1.104,1656,1.531,1657,1.898,1659,2.964,1661,2.497,1664,0.601,1671,1.531,1672,6.143,1673,5.122,1674,5.454,1675,5.592,1676,0.701,1677,0.701,1678,1.786,1679,5.877,1680,3.457,1681,5.213,1682,5.715,1683,2.912,1684,0.701,1685,0.701,1686,1.288,1687,2.586,1688,5.592,1689,2.586,1690,1.786,1691,4.553,1692,0.701,1693,0.701,1694,0.701,1695,1.288,1696,4.253,1697,2.912,1698,0.701,1699,2.912,1700,0.701,1701,0.701,1702,3.457,1703,0.701,1704,0.701,1705,0.701,1706,4.553,1707,6.497,1708,4.553,1709,1.786,1710,1.786,1711,3.161,1712,1.288,1713,1.288,1714,3.2,1715,3.2,1716,4.553,1717,2.912,1718,0.701,1719,0.701,1720,2.214,1721,3.457,1722,1.288,1723,3.457,1724,1.786,1725,0.701,1726,1.288,1727,0.701,1728,1.786,1729,5.122,1730,2.586,1731,1.288,1732,2.214,1733,0.701,1734,0.701,1735,1.288,1736,2.214,1737,2.214,1738,1.288,1739,4.253,1740,1.288,1741,2.586,1742,5.299,1743,2.586,1744,1.288,1745,2.214,1746,3.2,1747,2.586,1748,0.701,1749,3.457,1750,2.912,1751,5.972,1752,1.786,1753,3.2,1754,0.701,1755,0.701,1756,0.701,1757,3.457,1758,1.288,1759,4.082,1760,3.894,1761,2.586,1762,1.288,1763,0.701,1764,0.701,1765,4.684,1766,1.288,1767,0.701,1768,0.701,1769,4.409,1770,1.288,1771,1.786,1772,0.701,1773,0.701,1774,1.288,1775,0.701,1776,0.701,1777,0.701,1778,0.701,1779,0.701,1780,0.701,1781,0.701,1782,0.701,1783,1.288,1784,0.701,1785,0.701,1786,0.701,1787,1.288,1788,0.701,1789,1.786,1790,1.288,1791,0.701,1792,0.701,1793,1.288,1794,1.288,1795,4.553,1796,0.701,1797,1.288,1798,1.288,1799,0.701,1800,0.701,1801,1.288,1802,1.786,1803,1.786,1804,1.288,1805,0.701,1806,0.701,1807,2.912,1808,0.701,1809,0.701,1810,2.586,1811,0.701,1812,0.701,1813,0.701,1814,0.701,1815,1.288,1816,1.786,1817,0.701,1818,4.253,1819,3.687,1820,0.701,1821,4.553,1822,2.214,1823,2.586,1824,2.912,1825,0.701,1826,1.786,1827,5.024,1828,1.288,1829,0.701,1830,0.701,1831,0.701,1832,1.786,1833,6.395,1834,3.894,1835,0.701,1836,0.701,1837,1.288,1838,1.288,1839,0.701,1840,3.894,1841,0.701,1842,2.214,1843,3.457,1844,0.701,1845,1.786,1846,1.786,1847,1.288,1848,2.912,1849,6.308,1850,1.786,1851,3.687,1852,2.214,1853,3.2,1854,1.288,1855,0.701,1856,1.288,1857,1.786,1858,3.687,1859,3.894,1860,0.701,1861,1.288,1862,1.288,1863,2.214,1864,2.214,1865,3.161,1866,0.701,1867,1.786,1868,0.701,1869,5.655,1870,1.288,1871,0.701,1872,3.457,1873,0.701,1874,1.786,1875,2.214,1876,3.457,1877,0.701,1878,4.684,1879,2.214,1880,1.288,1881,3.457,1882,4.082,1883,2.912,1884,0.701,1885,0.701,1886,0.701,1887,0.701,1888,3.457,1889,0.701,1890,1.288,1891,4.409,1892,0.701,1893,0.701,1894,1.786,1895,0.701,1896,1.786,1897,0.701,1898,0.701,1899,0.701,1900,4.082,1901,1.786,1902,1.786,1903,0.701,1904,0.701,1905,0.701,1906,1.288,1907,3.894,1908,0.701,1909,2.912,1910,0.701,1911,0.701,1912,2.586,1913,1.786,1914,1.786,1915,2.912,1916,1.786,1917,1.786,1918,0.701,1919,0.701,1920,2.586,1921,2.586,1922,2.912,1923,0.701,1924,0.701,1925,0.701,1926,1.288,1927,1.786,1928,0.701,1929,0.701,1930,1.786,1931,0.701,1932,0.701,1933,0.701,1934,1.288,1935,0.701,1936,5.454,1937,0.701,1938,3.457,1939,0.701,1940,2.912,1941,1.288,1942,0.701,1943,0.701,1944,1.288,1945,1.288,1946,2.214,1947,0.701,1948,0.701,1949,0.701,1950,0.701,1951,1.288,1952,1.786,1953,2.586,1954,0.701,1955,1.288,1956,0.701,1957,0.701,1958,2.912,1959,0.701,1960,2.214,1961,0.701,1962,3.894,1963,3.2,1964,2.214,1965,0.701,1966,2.586,1967,0.701,1968,1.288,1969,0.701,1970,0.701,1971,1.786,1972,1.786,1973,1.786,1974,0.701,1975,0.701,1976,0.701,1977,1.786,1978,1.786,1979,2.912,1980,0.601,1981,0.701,1982,1.288,1983,1.288,1984,2.586,1985,1.288,1986,0.701,1987,4.409,1988,1.288,1989,0.701,1990,0.701,1991,0.701,1992,0.701,1993,0.701,1994,0.701,1995,1.786,1996,0.701,1997,0.701,1998,4.684,1999,0.701,2000,0.701,2001,0.701,2002,2.586,2003,2.586,2004,0.701,2005,0.701,2006,1.786,2007,0.701,2008,0.701,2009,2.214,2010,0.701,2011,1.288,2012,0.701,2013,0.701,2014,0.701,2015,0.701,2016,0.701,2017,0.701,2018,1.288,2019,1.288,2020,0.701,2021,1.786,2022,0.701,2023,0.701,2024,1.288,2025,0.701,2026,0.701,2027,0.701,2028,0.701,2029,1.288,2030,1.288,2031,1.288,2032,1.288,2033,3.687,2034,1.288,2035,2.912,2036,0.701,2037,0.701,2038,1.288,2039,1.786,2040,1.786,2041,2.214,2042,2.214,2043,1.786,2044,2.214,2045,1.531,2046,0.701,2047,2.586,2048,2.586,2049,1.531,2050,1.786,2051,0.701,2052,1.288,2053,1.288,2054,2.586,2055,1.288,2056,2.214,2057,2.214,2058,1.288,2059,1.786,2060,4.553,2061,2.586,2062,0.701,2063,0.701,2064,0.701,2065,1.786,2066,1.288,2067,1.288,2068,0.701,2069,0.701,2070,0.701,2071,0.701,2072,1.288,2073,0.701,2074,0.701,2075,0.701,2076,0.701,2077,0.701,2078,1.288,2079,1.786,2080,0.701,2081,1.288,2082,0.701,2083,1.786,2084,0.701,2085,0.701,2086,1.288,2087,1.288,2088,2.912,2089,5.299,2090,1.786,2091,1.288,2092,1.288,2093,1.288,2094,1.288,2095,2.214,2096,1.288,2097,0.701,2098,0.701,2099,0.701,2100,0.701,2101,3.2,2102,2.912,2103,1.288,2104,0.701,2105,0.701,2106,0.701,2107,0.701,2108,1.288,2109,0.701,2110,1.288,2111,0.701,2112,2.586,2113,3.457,2114,2.214,2115,0.701,2116,4.082,2117,0.701,2118,0.701,2119,0.701,2120,0.701,2121,0.701,2122,0.701,2123,0.701,2124,0.701,2125,1.288,2126,1.786,2127,2.586,2128,1.898,2129,2.214,2130,1.288,2131,0.701,2132,0.701,2133,1.288,2134,0.701,2135,0.701,2136,0.701,2137,1.288,2138,0.701,2139,0.701,2140,1.786,2141,2.214,2142,0.701,2143,1.288,2144,1.288,2145,0.701,2146,0.701,2147,1.786,2148,0.701,2149,0.701,2150,0.701,2151,0.701,2152,0.701,2153,1.288,2154,0.701,2155,0.701,2156,0.701,2157,0.701,2158,0.701,2159,1.786,2160,0.701,2161,0.701,2162,0.701,2163,0.701,2164,0.701,2165,2.586,2166,0.701,2167,0.701,2168,1.288,2169,2.214,2170,3.457,2171,0.701,2172,0.701,2173,0.701,2174,0.701,2175,0.701,2176,0.701,2177,0.701,2178,0.701,2179,0.701,2180,1.288,2181,3.2,2182,1.786,2183,0.701,2184,2.214,2185,0.701,2186,0.701,2187,1.786,2188,0.701,2189,0.701,2190,1.786,2191,0.701,2192,1.288,2193,0.701,2194,0.701,2195,0.701,2196,0.701,2197,0.701,2198,0.701,2199,0.701,2200,0.701,2201,1.288,2202,0.701,2203,0.701,2204,0.701,2205,0.701,2206,1.288,2207,1.288,2208,0.701,2209,0.701,2210,1.786,2211,0.701,2212,1.288,2213,0.701,2214,1.288,2215,2.214,2216,0.701,2217,1.288,2218,0.701,2219,1.786,2220,3.2,2221,0.701,2222,1.288,2223,1.288,2224,0.701,2225,1.288,2226,0.701,2227,0.701,2228,0.701,2229,0.701,2230,1.288,2231,0.701,2232,1.288,2233,2.214,2234,0.701,2235,2.586,2236,0.701,2237,0.701,2238,0.701,2239,0.701,2240,0.701,2241,0.701,2242,1.288,2243,1.288,2244,1.288,2245,1.786,2246,0.701,2247,1.288,2248,1.288,2249,0.701,2250,1.288,2251,1.786,2252,0.701,2253,1.288,2254,0.701,2255,1.288,2256,0.701,2257,1.786,2258,1.288,2259,0.701,2260,0.701,2261,1.288,2262,5.454,2263,0.701,2264,2.586,2265,3.894,2266,1.786,2267,0.701,2268,0.701,2269,0.701,2270,2.214,2271,0.701,2272,0.701,2273,1.786,2274,0.701,2275,1.288,2276,0.701,2277,0.701,2278,0.701,2279,2.214,2280,0.701,2281,0.701,2282,0.701,2283,0.701,2284,0.701,2285,2.214,2286,0.701,2287,0.701,2288,1.786,2289,0.701,2290,1.288,2291,1.786,2292,0.701,2293,1.288,2294,0.701,2295,0.701,2296,0.701,2297,0.701,2298,1.288,2299,1.786,2300,0.701,2301,0.701,2302,1.288,2303,0.701,2304,1.288,2305,0.701,2306,0.701,2307,0.701,2308,0.701,2309,1.786,2310,1.288,2311,0.701,2312,0.701,2313,2.214,2314,0.701,2315,1.786,2316,0.701,2317,0.701,2318,0.701,2319,0.701,2320,0.701,2321,0.701,2322,1.786,2323,1.288,2324,1.288,2325,0.701,2326,3.2,2327,1.288,2328,1.786,2329,0.701,2330,0.701,2331,1.288,2332,0.701,2333,1.786,2334,0.701,2335,1.288,2336,0.701,2337,0.701,2338,0.701,2339,0.701,2340,1.786,2341,1.786,2342,1.288,2343,0.701,2344,1.288,2345,0.701,2346,0.701,2347,1.288,2348,1.288,2349,0.701,2350,0.701,2351,1.288,2352,0.701,2353,0.701,2354,0.701,2355,0.701,2356,0.701,2357,1.786,2358,0.701,2359,0.701,2360,0.701,2361,0.701,2362,0.701,2363,2.214,2364,1.288,2365,1.786,2366,0.701,2367,0.701,2368,0.701,2369,0.701,2370,0.701,2371,1.288,2372,0.701,2373,0.701,2374,0.701,2375,0.701,2376,0.701,2377,0.701,2378,0.701,2379,0.701,2380,0.701,2381,0.701,2382,0.701,2383,0.701,2384,0.701,2385,0.701,2386,0.701,2387,2.214,2388,0.701,2389,1.288,2390,0.701,2391,0.701,2392,0.701,2393,0.701,2394,0.701,2395,0.701,2396,0.701,2397,0.701,2398,0.701,2399,0.701,2400,1.786,2401,0.701,2402,0.601,2403,0.701,2404,0.701,2405,1.288,2406,0.701,2407,0.701,2408,0.701,2409,0.701,2410,0.701,2411,0.701,2412,0.701,2413,1.288,2414,1.288,2415,2.586,2416,1.786,2417,0.701,2418,1.288,2419,0.701,2420,0.701,2421,0.701,2422,0.701,2423,1.786,2424,1.288,2425,0.701,2426,1.288,2427,1.288,2428,1.288,2429,0.701,2430,0.701,2431,0.701,2432,0.701,2433,0.701,2434,0.701,2435,1.288,2436,0.701,2437,0.701,2438,0.701,2439,1.288,2440,0.701,2441,0.701,2442,1.786,2443,0.701,2444,0.701,2445,0.701,2446,0.701,2447,0.701,2448,0.701,2449,0.701,2450,0.701,2451,0.701,2452,0.701,2453,0.701,2454,1.288,2455,0.701,2456,0.701,2457,0.701,2458,0.701,2459,0.701,2460,0.701,2461,0.701,2462,0.701,2463,0.701,2464,0.701,2465,0.701,2466,0.701,2467,0.701,2468,0.701,2469,0.701,2470,0.701,2471,0.701,2472,0.701,2473,0.701,2474,0.701,2475,1.786,2476,1.288,2477,0.701,2478,0.701,2479,0.701,2480,0.701,2481,0.701,2482,0.701,2483,0.701,2484,1.288,2485,1.786,2486,1.288,2487,0.701,2488,0.701,2489,0.701,2490,0.701,2491,0.701,2492,0.701,2493,0.701,2494,1.288,2495,0.701,2496,0.701,2497,0.701,2498,0.701,2499,0.701,2500,0.701,2501,0.701,2502,0.701,2503,0.701,2504,0.701,2505,0.701,2506,0.701,2507,0.701,2508,0.701,2509,0.701,2510,0.701,2511,0.701,2512,0.701,2513,0.701,2514,0.701,2515,0.701,2516,0.701]],["title/modules.html",[2,1.651]],["body/modules.html",[1,3.557,2,1.697,14,0.016,24,3.031,26,3.27,28,3.031,30,2.647,32,3.031,34,2.647,38,2.826,40,3.031,46,2.488,48,3.27,50,3.27,69,0.016,70,0.016,366,3.27,1544,6.47,1663,6.47,1865,4.399,2049,6.47,2517,5.13,2518,7.571]],["title/overview.html",[2519,4.279]],["body/overview.html",[2,1.14,14,0.02,24,4.012,26,4.329,28,3.835,30,3.765,32,4.311,34,3.674,38,3.668,40,4.207,46,3.345,48,4.329,50,3.997,55,1.899,68,0.98,69,0.012,70,0.012,71,1.671,72,2.956,73,2.956,74,2.956,75,3.517,76,3.517,77,1.856,78,1.265,79,1.201,89,1.779,134,2.326,217,3.043,219,3.668,231,3.229,233,3.043,362,2.956,363,2.956,364,2.956,365,2.956,366,4.138,429,2.956,431,2.956,432,2.956,433,3.077,441,1.201,455,3.668,561,3.934,637,2.956,638,2.956,639,2.956,640,3.934,702,3.668,712,2.956,713,2.956,770,2.956,771,2.956,772,2.956,944,2.956,945,2.956,946,2.956,947,2.956,959,3.668,1071,2.632,1110,2.956,1111,2.956,1112,2.956,1137,2.956,1138,2.956,1139,2.956,1186,3.934,1222,2.956,1224,2.956,1225,2.956,1333,2.956,1334,2.956,1335,2.956,1381,2.956,1382,2.956,1383,2.956,1533,2.956,2045,2.956,2402,2.956,2519,2.956,2520,3.447]],["title/miscellaneous/typealiases.html",[2521,2.111,2522,4.393]],["body/miscellaneous/typealiases.html",[14,0.017,69,0.017,70,0.017,90,3.877,91,0.792,98,0.891,122,3.564,125,4.995,376,3.08,377,4.537,391,4.995,860,3.877,869,4.995,1087,3.877,1103,4.995,1357,3.877,1364,4.995,2521,3.877,2523,5.591,2524,4.794,2525,4.794,2526,4.794,2527,4.794,2528,4.794]],["title/miscellaneous/variables.html",[2521,2.111,2529,3.767]],["body/miscellaneous/variables.html",[1,2.417,3,0.145,7,0.444,14,0.02,15,0.739,17,3.339,36,0.865,56,3.671,58,1.551,60,1.223,63,1.918,64,1.918,69,0.009,70,0.009,87,1.708,88,1.62,90,1.551,91,0.317,93,1.426,98,0.556,99,1.322,106,2.059,117,2.147,119,0.605,122,1.426,134,2.076,137,1.076,138,3.269,139,1.918,146,2.969,150,1.416,154,1.232,168,1.708,212,1.279,223,1.551,237,1.153,243,2.018,263,2.221,287,1.232,315,1.096,342,0.913,367,1.708,373,2.417,374,3.081,375,1.918,376,1.92,377,2.969,395,2.394,401,3.269,402,1.918,404,2.969,434,2.661,438,2.417,439,1.918,475,2.693,476,3.354,636,1.798,640,1.322,643,1.708,660,2.417,661,1.918,662,2.417,663,1.918,664,2.661,665,1.918,666,2.417,667,1.918,692,1.708,725,2.059,734,1.426,738,1.708,739,1.426,775,1.708,799,2.417,800,1.918,801,2.661,802,1.918,811,2.661,812,1.918,813,2.661,814,1.918,860,1.551,870,1.426,871,3.269,872,1.918,874,2.969,948,1.708,951,2.417,952,1.918,1017,1.426,1087,1.551,1108,2.969,1109,1.918,1113,1.708,1116,2.417,1117,1.918,1155,1.551,1162,2.729,1163,1.708,1207,3.633,1226,1.708,1229,2.661,1230,1.918,1231,2.661,1232,1.918,1357,1.551,1358,1.708,1366,3.633,1367,1.918,1384,1.708,1387,2.661,1388,1.918,1389,2.988,1390,1.918,1391,1.918,1392,1.708,1416,2.417,1417,1.918,1418,2.661,1419,2.988,1420,1.918,1487,1.708,1520,1.918,1521,2.988,1522,4.144,1523,4.144,1524,4.144,1525,2.988,1530,1.918,1531,1.918,1532,2.988,1566,1.708,1567,1.918,1577,1.708,1633,3.671,1711,1.918,1980,1.918,2128,1.918,2521,1.551,2524,2.988,2525,3.671,2526,2.988,2527,1.918,2528,1.918,2529,1.918,2530,3.485,2531,2.237,2532,5.239,2533,4.833,2534,4.281,2535,4.833,2536,2.237,2537,2.237,2538,2.237,2539,2.237,2540,2.237,2541,2.237,2542,2.237,2543,3.485,2544,2.237,2545,2.237,2546,2.237,2547,2.237,2548,2.237,2549,2.237,2550,3.485,2551,3.485,2552,3.485,2553,3.485,2554,3.485,2555,3.485,2556,3.485,2557,3.485,2558,3.485,2559,3.485,2560,2.237,2561,2.237,2562,2.237,2563,2.237,2564,2.237,2565,2.237,2566,2.237,2567,2.237,2568,2.237,2569,2.237,2570,2.237,2571,2.237,2572,2.237,2573,2.237,2574,2.237,2575,3.485,2576,2.237,2577,2.237,2578,2.237,2579,2.237,2580,2.237,2581,2.237,2582,3.485,2583,3.485,2584,3.485,2585,2.237,2586,5.549,2587,2.237,2588,2.237,2589,2.237,2590,2.237,2591,2.237,2592,2.237,2593,2.237,2594,3.485,2595,2.237,2596,2.237,2597,3.485,2598,4.281,2599,3.485,2600,2.237,2601,2.237,2602,2.237,2603,2.237,2604,2.237,2605,4.833,2606,2.237,2607,2.237,2608,4.833,2609,2.237,2610,2.237,2611,3.485,2612,2.237,2613,2.237,2614,2.237,2615,2.237,2616,2.237,2617,2.237,2618,2.237,2619,2.237,2620,2.237,2621,2.237,2622,2.237,2623,2.237,2624,2.237,2625,2.237,2626,2.237,2627,2.237,2628,2.237,2629,2.237,2630,2.237,2631,2.237,2632,2.237,2633,2.237,2634,2.237,2635,2.237,2636,2.237,2637,2.237,2638,2.237,2639,2.237]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"classes/Source.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"controllers/WikidataController.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":257,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"injectables/UtilService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1553,"title":{},"body":{"dependencies.html":{}}}],["0.0.5",{"_index":1574,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":1620,"title":{},"body":{"dependencies.html":{}}}],["0.11.7",{"_index":1584,"title":{},"body":{"dependencies.html":{}}}],["0.21.2",{"_index":1571,"title":{},"body":{"dependencies.html":{}}}],["0.3.0",{"_index":1575,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":1598,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1510,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1527,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1516,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1517,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":1514,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":1528,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1511,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1529,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1535,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1512,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1519,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1518,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1515,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1526,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":134,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"injectables/ParserService.html":{},"classes/Source.html":{},"modules/WikidataModule.html":{},"license.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":1599,"title":{},"body":{"dependencies.html":{}}}],["1.0.1",{"_index":1555,"title":{},"body":{"dependencies.html":{}}}],["1.1.18",{"_index":1549,"title":{},"body":{"dependencies.html":{}}}],["1.17.2",{"_index":1587,"title":{},"body":{"dependencies.html":{}}}],["1.4.1",{"_index":1585,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":1580,"title":{},"body":{"dependencies.html":{}}}],["1.5.0",{"_index":1568,"title":{},"body":{"dependencies.html":{}}}],["1.6.1",{"_index":1627,"title":{},"body":{"dependencies.html":{}}}],["1.8.0",{"_index":1596,"title":{},"body":{"dependencies.html":{}}}],["1.9.1",{"_index":1552,"title":{},"body":{"dependencies.html":{}}}],["1/3",{"_index":1537,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":1534,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":259,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/PersonalityService.html":{},"license.html":{}}}],["10.2.0",{"_index":1594,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1279,"title":{},"body":{"injectables/UtilService.html":{}}}],["11",{"_index":2011,"title":{},"body":{"license.html":{}}}],["12.0.10",{"_index":1593,"title":{},"body":{"dependencies.html":{}}}],["13",{"_index":2402,"title":{},"body":{"license.html":{},"overview.html":{}}}],["13.11.4",{"_index":1573,"title":{},"body":{"dependencies.html":{}}}],["14",{"_index":1533,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["15",{"_index":2222,"title":{},"body":{"license.html":{}}}],["16",{"_index":2223,"title":{},"body":{"license.html":{}}}],["17.0.2",{"_index":1602,"title":{},"body":{"dependencies.html":{}}}],["1996",{"_index":2017,"title":{},"body":{"license.html":{}}}],["2",{"_index":1439,"title":{},"body":{"injectables/WikidataService.html":{},"license.html":{}}}],["2.1.0",{"_index":1609,"title":{},"body":{"dependencies.html":{}}}],["2.1.6",{"_index":1582,"title":{},"body":{"dependencies.html":{}}}],["2.3.0",{"_index":1591,"title":{},"body":{"dependencies.html":{}}}],["2.3.2",{"_index":1606,"title":{},"body":{"dependencies.html":{}}}],["2.8.4",{"_index":1626,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":2015,"title":{},"body":{"license.html":{}}}],["2007",{"_index":1678,"title":{},"body":{"license.html":{}}}],["21.6.10",{"_index":1590,"title":{},"body":{"dependencies.html":{}}}],["27.4.0",{"_index":1561,"title":{},"body":{"dependencies.html":{}}}],["28",{"_index":2383,"title":{},"body":{"license.html":{}}}],["29",{"_index":1676,"title":{},"body":{"license.html":{}}}],["3",{"_index":1282,"title":{},"body":{"injectables/UtilService.html":{},"license.html":{}}}],["30",{"_index":2281,"title":{},"body":{"license.html":{}}}],["33",{"_index":1536,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":2050,"title":{},"body":{"license.html":{}}}],["4.1.0",{"_index":1545,"title":{},"body":{"dependencies.html":{}}}],["4.17.1",{"_index":1586,"title":{},"body":{"dependencies.html":{}}}],["4.18.5",{"_index":1570,"title":{},"body":{"dependencies.html":{}}}],["4.29.0",{"_index":1565,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":1614,"title":{},"body":{"dependencies.html":{}}}],["4.6.0",{"_index":1578,"title":{},"body":{"dependencies.html":{}}}],["4.6.2",{"_index":1543,"title":{},"body":{"dependencies.html":{}}}],["4.7.7",{"_index":1588,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":1502,"title":{},"body":{"injectables/WikidataService.html":{}}}],["5",{"_index":708,"title":{},"body":{"controllers/HomeController.html":{},"license.html":{}}}],["5.13.5",{"_index":1592,"title":{},"body":{"dependencies.html":{}}}],["5.3.0",{"_index":1630,"title":{},"body":{"dependencies.html":{}}}],["5.5.1",{"_index":1617,"title":{},"body":{"dependencies.html":{}}}],["6.1.0",{"_index":1600,"title":{},"body":{"dependencies.html":{}}}],["6.1.1",{"_index":1623,"title":{},"body":{"dependencies.html":{}}}],["6.4.1",{"_index":1604,"title":{},"body":{"dependencies.html":{}}}],["6.7.0",{"_index":1597,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":2274,"title":{},"body":{"license.html":{}}}],["6b",{"_index":2109,"title":{},"body":{"license.html":{}}}],["6d",{"_index":2135,"title":{},"body":{"license.html":{}}}],["7",{"_index":2045,"title":{},"body":{"license.html":{},"overview.html":{}}}],["7.12.1",{"_index":1547,"title":{},"body":{"dependencies.html":{}}}],["7.2.4",{"_index":1612,"title":{},"body":{"dependencies.html":{}}}],["7.3.0",{"_index":1625,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":672,"title":{},"body":{"injectables/EmailService.html":{}}}],["8.0.0",{"_index":1557,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":1558,"title":{},"body":{"dependencies.html":{}}}],["8.0.6",{"_index":1554,"title":{},"body":{"dependencies.html":{}}}],["86400",{"_index":1391,"title":{},"body":{"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["9",{"_index":2520,"title":{},"body":{"overview.html":{}}}],["9a76c3a1c35c",{"_index":1273,"title":{},"body":{"injectables/UtilService.html":{}}}],["_",{"_index":1475,"title":{},"body":{"injectables/WikidataService.html":{}}}],["_checkcaptcharesponse",{"_index":151,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["_checkcaptcharesponse(secret",{"_index":165,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["_getsentencebyhashandclaimid",{"_index":152,"title":{},"body":{"controllers/ClaimController.html":{}}}],["_getsentencebyhashandclaimid(sentencehash",{"_index":170,"title":{},"body":{"controllers/ClaimController.html":{}}}],["_id",{"_index":142,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"classes/Personality.html":{},"injectables/PersonalityService.html":{},"injectables/UtilService.html":{}}}],["_reviewsbysentencehashaggregated",{"_index":443,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["_reviewsbysentencehashaggregated(sentencehash",{"_index":457,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["_topclassificationaccumulator",{"_index":444,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["_verifyinputsquery",{"_index":153,"title":{},"body":{"controllers/ClaimController.html":{}}}],["_verifyinputsquery(query",{"_index":175,"title":{},"body":{"controllers/ClaimController.html":{}}}],["abaixo",{"_index":2622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ability",{"_index":2189,"title":{},"body":{"license.html":{}}}],["above",{"_index":2257,"title":{},"body":{"license.html":{}}}],["absence",{"_index":2046,"title":{},"body":{"license.html":{}}}],["absolute",{"_index":2464,"title":{},"body":{"license.html":{}}}],["absolutely",{"_index":2493,"title":{},"body":{"license.html":{}}}],["abuse",{"_index":1786,"title":{},"body":{"license.html":{}}}],["acc",{"_index":535,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["accept",{"_index":1566,"title":{},"body":{"dependencies.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["acceptance",{"_index":2285,"title":{},"body":{"license.html":{}}}],["access",{"_index":1661,"title":{},"body":{"index.html":{},"license.html":{}}}],["accessible",{"_index":2350,"title":{},"body":{"license.html":{}}}],["accompanied",{"_index":2090,"title":{},"body":{"license.html":{}}}],["accompanies",{"_index":2468,"title":{},"body":{"license.html":{}}}],["accord",{"_index":2044,"title":{},"body":{"license.html":{}}}],["according",{"_index":2459,"title":{},"body":{"license.html":{}}}],["accumulate",{"_index":462,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["accumulateargs",{"_index":464,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["accumulator",{"_index":460,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["acessar",{"_index":2617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["achieve",{"_index":2474,"title":{},"body":{"license.html":{}}}],["acknowledges",{"_index":1975,"title":{},"body":{"license.html":{}}}],["acquired",{"_index":2331,"title":{},"body":{"license.html":{}}}],["acronyms",{"_index":819,"title":{},"body":{"injectables/ParserService.html":{}}}],["action",{"_index":1432,"title":{},"body":{"injectables/WikidataService.html":{}}}],["actions",{"_index":2292,"title":{},"body":{"license.html":{}}}],["activities",{"_index":1867,"title":{},"body":{"license.html":{}}}],["activity",{"_index":2378,"title":{},"body":{"license.html":{}}}],["actual",{"_index":2355,"title":{},"body":{"license.html":{}}}],["actually",{"_index":2158,"title":{},"body":{"license.html":{}}}],["adapt",{"_index":1839,"title":{},"body":{"license.html":{}}}],["add",{"_index":2215,"title":{},"body":{"license.html":{}}}],["added",{"_index":2043,"title":{},"body":{"license.html":{}}}],["additional",{"_index":2060,"title":{},"body":{"license.html":{}}}],["address",{"_index":2410,"title":{},"body":{"license.html":{}}}],["addressed",{"_index":1836,"title":{},"body":{"license.html":{}}}],["adopted",{"_index":2014,"title":{},"body":{"license.html":{}}}],["adversely",{"_index":2197,"title":{},"body":{"license.html":{}}}],["advised",{"_index":2455,"title":{},"body":{"license.html":{}}}],["affects",{"_index":2198,"title":{},"body":{"license.html":{}}}],["affero",{"_index":2400,"title":{},"body":{"license.html":{}}}],["affirmed",{"_index":2314,"title":{},"body":{"license.html":{}}}],["affirms",{"_index":1969,"title":{},"body":{"license.html":{}}}],["against",{"_index":2032,"title":{},"body":{"license.html":{}}}],["agent",{"_index":1066,"title":{},"body":{"controllers/RootController.html":{}}}],["agg",{"_index":1275,"title":{},"body":{"injectables/UtilService.html":{}}}],["aggregate",{"_index":524,"title":{},"body":{"injectables/ClaimReviewService.html":{},"license.html":{}}}],["aggregates",{"_index":527,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["agree",{"_index":2395,"title":{},"body":{"license.html":{}}}],["agreed",{"_index":2441,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":2341,"title":{},"body":{"license.html":{}}}],["agreggateclassification",{"_index":445,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["agreggateclassification(match",{"_index":470,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["aim",{"_index":1782,"title":{},"body":{"license.html":{}}}],["aletheia",{"_index":1633,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["aliases",{"_index":2523,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alleging",{"_index":2321,"title":{},"body":{"license.html":{}}}],["allow",{"_index":1010,"title":{},"body":{"injectables/PersonalityService.html":{},"license.html":{}}}],["allowed",{"_index":1021,"title":{},"body":{"injectables/PersonalityService.html":{},"license.html":{}}}],["allowedheaders",{"_index":2547,"title":{},"body":{"miscellaneous/variables.html":{}}}],["along",{"_index":2048,"title":{},"body":{"license.html":{}}}],["alphabets",{"_index":808,"title":{},"body":{"injectables/ParserService.html":{}}}],["already",{"_index":917,"title":{},"body":{"controllers/PersonalityController.html":{},"license.html":{}}}],["alternative",{"_index":2105,"title":{},"body":{"license.html":{}}}],["although",{"_index":1778,"title":{},"body":{"license.html":{}}}],["ancillary",{"_index":2286,"title":{},"body":{"license.html":{}}}],["and/or",{"_index":1761,"title":{},"body":{"license.html":{}}}],["ant",{"_index":1541,"title":{},"body":{"dependencies.html":{}}}],["antd",{"_index":1569,"title":{},"body":{"dependencies.html":{}}}],["anti",{"_index":2001,"title":{},"body":{"license.html":{}}}],["anyone",{"_index":2057,"title":{},"body":{"license.html":{}}}],["anything",{"_index":1852,"title":{},"body":{"license.html":{}}}],["análise",{"_index":1636,"title":{},"body":{"index.html":{}}}],["api",{"_index":1053,"title":{},"body":{"controllers/RootController.html":{}}}],["api/claimreview",{"_index":408,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["api/stats",{"_index":1132,"title":{},"body":{"controllers/StatsController.html":{}}}],["api/wikidata",{"_index":1370,"title":{},"body":{"controllers/WikidataController.html":{}}}],["api\\n",{"_index":1068,"title":{},"body":{"controllers/RootController.html":{}}}],["app",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["app.close",{"_index":2638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.get(configservice",{"_index":2590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.get(emailservice",{"_index":2589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.get(usersservice",{"_index":2592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.listen(options.config.port",{"_index":2574,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.logger.log(\"error/recaptcha",{"_index":421,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["app.setglobalprefix(\"api",{"_index":2573,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.use",{"_index":2562,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.use(cookieparser",{"_index":2561,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.use(passport.initialize",{"_index":2570,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.use(passport.session",{"_index":2571,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.usestaticassets(join(__dirname",{"_index":2572,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applicable",{"_index":1858,"title":{},"body":{"license.html":{}}}],["applications",{"_index":2510,"title":{},"body":{"license.html":{}}}],["applied",{"_index":1814,"title":{},"body":{"license.html":{}}}],["applies",{"_index":1712,"title":{},"body":{"license.html":{}}}],["apply",{"_index":1716,"title":{},"body":{"license.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["appmodule.register(options",{"_index":2558,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appropriate",{"_index":1881,"title":{},"body":{"license.html":{}}}],["appropriately",{"_index":2037,"title":{},"body":{"license.html":{}}}],["approximates",{"_index":2463,"title":{},"body":{"license.html":{}}}],["area",{"_index":1788,"title":{},"body":{"license.html":{}}}],["arguable",{"_index":393,"title":{},"body":{"classes/ClaimReview.html":{}}}],["arise",{"_index":1796,"title":{},"body":{"license.html":{}}}],["arising",{"_index":2445,"title":{},"body":{"license.html":{}}}],["arrange",{"_index":2351,"title":{},"body":{"license.html":{}}}],["arrangement",{"_index":2365,"title":{},"body":{"license.html":{}}}],["array",{"_index":1272,"title":{},"body":{"injectables/UtilService.html":{}}}],["array.foreach((item",{"_index":1285,"title":{},"body":{"injectables/UtilService.html":{}}}],["array.from(newarray.values",{"_index":1292,"title":{},"body":{"injectables/UtilService.html":{}}}],["array.isarray(claim.sources",{"_index":624,"title":{},"body":{"injectables/ClaimService.html":{}}}],["array.isarray(claimreview.sources",{"_index":551,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["array.isarray(claims",{"_index":1040,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["article",{"_index":2010,"title":{},"body":{"license.html":{}}}],["asc",{"_index":261,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/PersonalityService.html":{}}}],["asking",{"_index":1734,"title":{},"body":{"license.html":{}}}],["assert",{"_index":1756,"title":{},"body":{"license.html":{}}}],["assets",{"_index":1295,"title":{},"body":{"controllers/ViewController.html":{},"license.html":{}}}],["assets(@req",{"_index":1332,"title":{},"body":{"controllers/ViewController.html":{}}}],["assets(req",{"_index":1300,"title":{},"body":{"controllers/ViewController.html":{}}}],["associated",{"_index":1947,"title":{},"body":{"license.html":{}}}],["assume",{"_index":2434,"title":{},"body":{"license.html":{}}}],["assumption",{"_index":2467,"title":{},"body":{"license.html":{}}}],["assumptions",{"_index":2244,"title":{},"body":{"license.html":{}}}],["assures",{"_index":1817,"title":{},"body":{"license.html":{}}}],["async",{"_index":150,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"injectables/SourceService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{},"controllers/WikidataController.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["attach",{"_index":2476,"title":{},"body":{"license.html":{}}}],["attempt",{"_index":2260,"title":{},"body":{"license.html":{}}}],["attempting",{"_index":1002,"title":{},"body":{"injectables/PersonalityService.html":{},"controllers/UsersController.html":{}}}],["attributed",{"_index":1772,"title":{},"body":{"license.html":{}}}],["attributions",{"_index":2226,"title":{},"body":{"license.html":{}}}],["auth",{"_index":685,"title":{},"body":{"injectables/EmailService.html":{}}}],["auth.guard",{"_index":1189,"title":{},"body":{"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":718,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth/auth.module",{"_index":27,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/local",{"_index":1188,"title":{},"body":{"controllers/UsersController.html":{}}}],["auth/session.guard",{"_index":227,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{}}}],["authenticate",{"_index":1161,"title":{},"body":{"classes/User.html":{},"interfaces/UserDocument.html":{}}}],["authguard",{"_index":719,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authguard(\"local",{"_index":721,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":26,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":2225,"title":{},"body":{"license.html":{}}}],["authorization",{"_index":2172,"title":{},"body":{"license.html":{}}}],["authorized",{"_index":2216,"title":{},"body":{"license.html":{}}}],["authorizes",{"_index":2327,"title":{},"body":{"license.html":{}}}],["authorizing",{"_index":2369,"title":{},"body":{"license.html":{}}}],["authors",{"_index":1715,"title":{},"body":{"license.html":{}}}],["automatic",{"_index":2296,"title":{},"body":{"license.html":{}}}],["automatically",{"_index":1960,"title":{},"body":{"license.html":{}}}],["available",{"_index":1865,"title":{},"body":{"license.html":{},"modules.html":{}}}],["avoid",{"_index":1812,"title":{},"body":{"license.html":{}}}],["await",{"_index":243,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"injectables/SourceService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["away",{"_index":1701,"title":{},"body":{"license.html":{}}}],["axios",{"_index":1416,"title":{},"body":{"injectables/WikidataService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["axios.get",{"_index":1495,"title":{},"body":{"injectables/WikidataService.html":{}}}],["axios.get(\"https://www.wikidata.org/w/api.php",{"_index":1431,"title":{},"body":{"injectables/WikidataService.html":{}}}],["b",{"_index":1922,"title":{},"body":{"license.html":{}}}],["babel/polyfill",{"_index":1546,"title":{},"body":{"dependencies.html":{}}}],["bail",{"_index":1019,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["based",{"_index":1848,"title":{},"body":{"license.html":{}}}],["baseurl",{"_index":675,"title":{},"body":{"injectables/EmailService.html":{}}}],["basic",{"_index":1961,"title":{},"body":{"license.html":{}}}],["batches",{"_index":1014,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["before",{"_index":2630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["behalf",{"_index":1989,"title":{},"body":{"license.html":{}}}],["being",{"_index":2133,"title":{},"body":{"license.html":{}}}],["believe",{"_index":2361,"title":{},"body":{"license.html":{}}}],["below",{"_index":1996,"title":{},"body":{"license.html":{}}}],["bem",{"_index":2613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["benefit",{"_index":2354,"title":{},"body":{"license.html":{}}}],["best",{"_index":2473,"title":{},"body":{"license.html":{}}}],["between",{"_index":1957,"title":{},"body":{"license.html":{}}}],["beyond",{"_index":2077,"title":{},"body":{"license.html":{}}}],["bigger",{"_index":533,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["body",{"_index":186,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{},"license.html":{}}}],["body).catch((err",{"_index":928,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["body.recaptcha",{"_index":282,"title":{},"body":{"controllers/ClaimController.html":{}}}],["boolean",{"_index":595,"title":{},"body":{"injectables/ClaimService.html":{},"guards/SessionGuard.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{}}}],["both",{"_index":1766,"title":{},"body":{"license.html":{}}}],["box",{"_index":2500,"title":{},"body":{"license.html":{}}}],["br",{"_index":1420,"title":{},"body":{"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["browse",{"_index":2518,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1663,"title":{},"body":{"index.html":{},"modules.html":{}}}],["buf",{"_index":2600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buf.tostring(\"hex",{"_index":2603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["build",{"_index":1669,"title":{},"body":{"index.html":{}}}],["business",{"_index":2375,"title":{},"body":{"license.html":{}}}],["c",{"_index":1680,"title":{},"body":{"license.html":{}}}],["calculateoverallstats",{"_index":555,"title":{},"body":{"injectables/ClaimService.html":{}}}],["calculateoverallstats(claim",{"_index":563,"title":{},"body":{"injectables/ClaimService.html":{}}}],["called",{"_index":1846,"title":{},"body":{"license.html":{}}}],["canactivate",{"_index":1074,"title":{},"body":{"guards/SessionGuard.html":{}}}],["canactivate(context",{"_index":1075,"title":{},"body":{"guards/SessionGuard.html":{}}}],["carry",{"_index":2052,"title":{},"body":{"license.html":{}}}],["case",{"_index":611,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"license.html":{}}}],["cases",{"_index":2153,"title":{},"body":{"license.html":{}}}],["cast",{"_index":540,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["catch",{"_index":910,"title":{},"body":{"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"controllers/UsersController.html":{},"injectables/ViewService.html":{}}}],["catch((e",{"_index":2625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["catch((err",{"_index":923,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["catch((error",{"_index":274,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/PersonalityService.html":{}}}],["catch(e",{"_index":1215,"title":{},"body":{"controllers/UsersController.html":{}}}],["cause",{"_index":2081,"title":{},"body":{"license.html":{}}}],["cd",{"_index":1649,"title":{},"body":{"index.html":{}}}],["cease",{"_index":2263,"title":{},"body":{"license.html":{}}}],["certain",{"_index":1737,"title":{},"body":{"license.html":{}}}],["cessation",{"_index":2276,"title":{},"body":{"license.html":{}}}],["change",{"_index":1206,"title":{},"body":{"controllers/UsersController.html":{},"license.html":{}}}],["changed",{"_index":1254,"title":{},"body":{"injectables/UsersService.html":{},"license.html":{}}}],["changepassword",{"_index":1168,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["changepassword(@req",{"_index":1199,"title":{},"body":{"controllers/UsersController.html":{}}}],["changepassword(new",{"_index":1210,"title":{},"body":{"controllers/UsersController.html":{}}}],["changepassword(req",{"_index":1172,"title":{},"body":{"controllers/UsersController.html":{}}}],["changepassword(userid",{"_index":1235,"title":{},"body":{"injectables/UsersService.html":{}}}],["changing",{"_index":1692,"title":{},"body":{"license.html":{}}}],["characterized",{"_index":2186,"title":{},"body":{"license.html":{}}}],["characters",{"_index":616,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["charge",{"_index":1721,"title":{},"body":{"license.html":{}}}],["choose",{"_index":2418,"title":{},"body":{"license.html":{}}}],["choosing",{"_index":2422,"title":{},"body":{"license.html":{}}}],["circumstances",{"_index":1994,"title":{},"body":{"license.html":{}}}],["circumvention",{"_index":2002,"title":{},"body":{"license.html":{}}}],["civil",{"_index":2466,"title":{},"body":{"license.html":{}}}],["claim",{"_index":35,"title":{"classes/Claim.html":{}},"body":{"modules/AppModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"classes/Personality.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"classes/Source.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"coverage.html":{},"license.html":{}}}],["claim._id",{"_index":347,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claim.content",{"_index":605,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["claim.content.text",{"_index":1041,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["claim.controller",{"_index":370,"title":{},"body":{"modules/ClaimModule.html":{}}}],["claim.name",{"_index":375,"title":{},"body":{"modules/ClaimModule.html":{},"miscellaneous/variables.html":{}}}],["claim.personality",{"_index":619,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claim.service",{"_index":220,"title":{},"body":{"controllers/ClaimController.html":{},"modules/ClaimModule.html":{}}}],["claim.slug",{"_index":607,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claim.sources",{"_index":623,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claim/claim.module",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/StatsModule.html":{}}}],["claim/claim.service",{"_index":1147,"title":{},"body":{"injectables/StatsService.html":{}}}],["claim/schemas/claim.schema",{"_index":389,"title":{},"body":{"classes/ClaimReview.html":{},"injectables/ClaimService.html":{},"classes/Personality.html":{}}}],["claimbody",{"_index":588,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claimcontent",{"_index":586,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claimcontent[paragraphindex].content[sentenceindex].props",{"_index":632,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claimcontroller",{"_index":148,"title":{"controllers/ClaimController.html":{}},"body":{"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"coverage.html":{}}}],["claimcreatepage",{"_index":155,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claimcreatepage(@req",{"_index":356,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claimcreatepage(req",{"_index":178,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claimdocument",{"_index":125,"title":{},"body":{"classes/Claim.html":{},"injectables/ClaimService.html":{},"miscellaneous/typealiases.html":{}}}],["claimid",{"_index":171,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{}}}],["claimmodel",{"_index":373,"title":{},"body":{"modules/ClaimModule.html":{},"injectables/ClaimService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimmodule",{"_index":32,"title":{"modules/ClaimModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/StatsModule.html":{},"modules.html":{},"overview.html":{}}}],["claimobj",{"_index":322,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claimobj.content.object.foreach((p",{"_index":325,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claimobj.date",{"_index":328,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claimobj.personality",{"_index":329,"title":{},"body":{"controllers/ClaimController.html":{}}}],["claimreview",{"_index":121,"title":{"classes/ClaimReview.html":{}},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"classes/Source.html":{},"coverage.html":{}}}],["claimreview.claim",{"_index":544,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["claimreview.name",{"_index":439,"title":{},"body":{"modules/ClaimReviewModule.html":{},"miscellaneous/variables.html":{}}}],["claimreview.personality",{"_index":542,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["claimreview.sources",{"_index":550,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["claimreview.topclassification",{"_index":634,"title":{},"body":{"injectables/ClaimService.html":{}}}],["claimreview.user",{"_index":546,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["claimreviewcontroller",{"_index":405,"title":{"controllers/ClaimReviewController.html":{}},"body":{"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"coverage.html":{}}}],["claimreviewdocument",{"_index":391,"title":{},"body":{"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"miscellaneous/typealiases.html":{}}}],["claimreviewid",{"_index":483,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["claimreviewmodel",{"_index":438,"title":{},"body":{"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimreviewmodule",{"_index":34,"title":{"modules/ClaimReviewModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/PersonalityModule.html":{},"modules/StatsModule.html":{},"modules.html":{},"overview.html":{}}}],["claimreviewschema",{"_index":404,"title":{},"body":{"classes/ClaimReview.html":{},"modules/ClaimReviewModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimreviewschemaraw",{"_index":401,"title":{},"body":{"classes/ClaimReview.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimreviewschemaraw.virtual('sources",{"_index":403,"title":{},"body":{"classes/ClaimReview.html":{}}}],["claimreviewservice",{"_index":217,"title":{"injectables/ClaimReviewService.html":{}},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/StatsService.html":{},"coverage.html":{},"overview.html":{}}}],["claims",{"_index":273,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/StatsService.html":{},"license.html":{}}}],["claims.map((claim",{"_index":602,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["claimschema",{"_index":146,"title":{},"body":{"classes/Claim.html":{},"modules/ClaimModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimschemaraw",{"_index":138,"title":{},"body":{"classes/Claim.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["claimschemaraw.virtual('reviews",{"_index":140,"title":{},"body":{"classes/Claim.html":{}}}],["claimschemaraw.virtual('sources",{"_index":144,"title":{},"body":{"classes/Claim.html":{}}}],["claimservice",{"_index":219,"title":{"injectables/ClaimService.html":{}},"body":{"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"injectables/ClaimService.html":{},"injectables/StatsService.html":{},"coverage.html":{},"overview.html":{}}}],["claimslug",{"_index":337,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{}}}],["class",{"_index":53,"title":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/Logger.html":{},"classes/Personality.html":{},"classes/Source.html":{},"classes/User.html":{},"classes/WikidataCache.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"classes/Source.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"controllers/WikidataController.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"license.html":{}}}],["classes",{"_index":89,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/Logger.html":{},"classes/Personality.html":{},"classes/Source.html":{},"classes/User.html":{},"classes/WikidataCache.html":{},"overview.html":{}}}],["classification",{"_index":378,"title":{},"body":{"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/Source.html":{}}}],["clear",{"_index":2119,"title":{},"body":{"license.html":{}}}],["clearly",{"_index":1763,"title":{},"body":{"license.html":{}}}],["clone",{"_index":1646,"title":{},"body":{"index.html":{}}}],["closely",{"_index":2462,"title":{},"body":{"license.html":{}}}],["cluster_authmodule",{"_index":72,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":73,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":74,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_claimmodule",{"_index":362,"title":{},"body":{"modules/ClaimModule.html":{},"overview.html":{}}}],["cluster_claimmodule_exports",{"_index":365,"title":{},"body":{"modules/ClaimModule.html":{},"overview.html":{}}}],["cluster_claimmodule_imports",{"_index":363,"title":{},"body":{"modules/ClaimModule.html":{},"overview.html":{}}}],["cluster_claimmodule_providers",{"_index":364,"title":{},"body":{"modules/ClaimModule.html":{},"overview.html":{}}}],["cluster_claimreviewmodule",{"_index":429,"title":{},"body":{"modules/ClaimReviewModule.html":{},"overview.html":{}}}],["cluster_claimreviewmodule_exports",{"_index":431,"title":{},"body":{"modules/ClaimReviewModule.html":{},"overview.html":{}}}],["cluster_claimreviewmodule_imports",{"_index":430,"title":{},"body":{"modules/ClaimReviewModule.html":{}}}],["cluster_claimreviewmodule_providers",{"_index":432,"title":{},"body":{"modules/ClaimReviewModule.html":{},"overview.html":{}}}],["cluster_emailmodule",{"_index":637,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_exports",{"_index":638,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_providers",{"_index":639,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_homemodule",{"_index":712,"title":{},"body":{"modules/HomeModule.html":{},"overview.html":{}}}],["cluster_homemodule_imports",{"_index":713,"title":{},"body":{"modules/HomeModule.html":{},"overview.html":{}}}],["cluster_parsermodule",{"_index":770,"title":{},"body":{"modules/ParserModule.html":{},"overview.html":{}}}],["cluster_parsermodule_exports",{"_index":771,"title":{},"body":{"modules/ParserModule.html":{},"overview.html":{}}}],["cluster_parsermodule_providers",{"_index":772,"title":{},"body":{"modules/ParserModule.html":{},"overview.html":{}}}],["cluster_personalitymodule",{"_index":944,"title":{},"body":{"modules/PersonalityModule.html":{},"overview.html":{}}}],["cluster_personalitymodule_exports",{"_index":946,"title":{},"body":{"modules/PersonalityModule.html":{},"overview.html":{}}}],["cluster_personalitymodule_imports",{"_index":947,"title":{},"body":{"modules/PersonalityModule.html":{},"overview.html":{}}}],["cluster_personalitymodule_providers",{"_index":945,"title":{},"body":{"modules/PersonalityModule.html":{},"overview.html":{}}}],["cluster_sourcemodule",{"_index":1110,"title":{},"body":{"modules/SourceModule.html":{},"overview.html":{}}}],["cluster_sourcemodule_exports",{"_index":1111,"title":{},"body":{"modules/SourceModule.html":{},"overview.html":{}}}],["cluster_sourcemodule_providers",{"_index":1112,"title":{},"body":{"modules/SourceModule.html":{},"overview.html":{}}}],["cluster_statsmodule",{"_index":1137,"title":{},"body":{"modules/StatsModule.html":{},"overview.html":{}}}],["cluster_statsmodule_exports",{"_index":1139,"title":{},"body":{"modules/StatsModule.html":{},"overview.html":{}}}],["cluster_statsmodule_imports",{"_index":1140,"title":{},"body":{"modules/StatsModule.html":{}}}],["cluster_statsmodule_providers",{"_index":1138,"title":{},"body":{"modules/StatsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1222,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1225,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":1223,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1224,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_viewmodule",{"_index":1333,"title":{},"body":{"modules/ViewModule.html":{},"overview.html":{}}}],["cluster_viewmodule_exports",{"_index":1334,"title":{},"body":{"modules/ViewModule.html":{},"overview.html":{}}}],["cluster_viewmodule_providers",{"_index":1335,"title":{},"body":{"modules/ViewModule.html":{},"overview.html":{}}}],["cluster_wikidatamodule",{"_index":1381,"title":{},"body":{"modules/WikidataModule.html":{},"overview.html":{}}}],["cluster_wikidatamodule_exports",{"_index":1382,"title":{},"body":{"modules/WikidataModule.html":{},"overview.html":{}}}],["cluster_wikidatamodule_providers",{"_index":1383,"title":{},"body":{"modules/WikidataModule.html":{},"overview.html":{}}}],["code",{"_index":1330,"title":{},"body":{"controllers/ViewController.html":{},"license.html":{}}}],["codeofconductpage",{"_index":1296,"title":{},"body":{"controllers/ViewController.html":{}}}],["codeofconductpage(@req",{"_index":1329,"title":{},"body":{"controllers/ViewController.html":{}}}],["codeofconductpage(req",{"_index":1303,"title":{},"body":{"controllers/ViewController.html":{}}}],["collect",{"_index":2397,"title":{},"body":{"license.html":{}}}],["combate",{"_index":1640,"title":{},"body":{"index.html":{}}}],["combination",{"_index":2404,"title":{},"body":{"license.html":{}}}],["combine",{"_index":2401,"title":{},"body":{"license.html":{}}}],["combined",{"_index":2072,"title":{},"body":{"license.html":{}}}],["combinedlistall",{"_index":954,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["combinedlistall(query",{"_index":961,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["comes",{"_index":2058,"title":{},"body":{"license.html":{}}}],["commands",{"_index":1894,"title":{},"body":{"license.html":{}}}],["commercial",{"_index":2163,"title":{},"body":{"license.html":{}}}],["commitment",{"_index":2342,"title":{},"body":{"license.html":{}}}],["common",{"_index":2157,"title":{},"body":{"license.html":{}}}],["communication",{"_index":1955,"title":{},"body":{"license.html":{}}}],["compilation",{"_index":2067,"title":{},"body":{"license.html":{}}}],["compilation's",{"_index":2076,"title":{},"body":{"license.html":{}}}],["compilations",{"_index":2380,"title":{},"body":{"license.html":{}}}],["compiler",{"_index":1933,"title":{},"body":{"license.html":{}}}],["compliance",{"_index":2301,"title":{},"body":{"license.html":{}}}],["comply",{"_index":1986,"title":{},"body":{"license.html":{}}}],["compodoc/compodoc",{"_index":1548,"title":{},"body":{"dependencies.html":{}}}],["component",{"_index":1921,"title":{},"body":{"license.html":{}}}],["components",{"_index":1629,"title":{},"body":{"dependencies.html":{}}}],["compose",{"_index":1654,"title":{},"body":{"index.html":{}}}],["compromise",{"_index":1572,"title":{},"body":{"dependencies.html":{}}}],["computer",{"_index":1861,"title":{},"body":{"license.html":{}}}],["computers",{"_index":1811,"title":{},"body":{"license.html":{}}}],["com|net|org|io|gov)/g",{"_index":824,"title":{},"body":{"injectables/ParserService.html":{}}}],["concerning",{"_index":2403,"title":{},"body":{"license.html":{}}}],["concerns",{"_index":2411,"title":{},"body":{"license.html":{}}}],["conditioned",{"_index":2374,"title":{},"body":{"license.html":{}}}],["conditions",{"_index":1821,"title":{},"body":{"license.html":{}}}],["conduct",{"_index":1305,"title":{},"body":{"controllers/ViewController.html":{}}}],["configmodule",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/EmailModule.html":{}}}],["configmodule.forroot",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":223,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/EmailService.html":{},"miscellaneous/variables.html":{}}}],["configservice.get(\"disable_smtp",{"_index":2595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get(\"users",{"_index":2593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connect",{"_index":1576,"title":{},"body":{"dependencies.html":{}}}],["connection",{"_index":2363,"title":{},"body":{"license.html":{}}}],["connection_uri",{"_index":2551,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consent",{"_index":1603,"title":{},"body":{"dependencies.html":{}}}],["consequence",{"_index":2288,"title":{},"body":{"license.html":{}}}],["consequential",{"_index":2444,"title":{},"body":{"license.html":{}}}],["consider",{"_index":2508,"title":{},"body":{"license.html":{}}}],["considered",{"_index":2246,"title":{},"body":{"license.html":{}}}],["consistent",{"_index":2335,"title":{},"body":{"license.html":{}}}],["conspicuously",{"_index":2036,"title":{},"body":{"license.html":{}}}],["const",{"_index":137,"title":{},"body":{"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HomeController.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"classes/Source.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["constantly",{"_index":1806,"title":{},"body":{"license.html":{}}}],["constitutes",{"_index":1974,"title":{},"body":{"license.html":{}}}],["constructor",{"_index":239,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HomeController.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{}}}],["constructor(claimmodel",{"_index":560,"title":{},"body":{"injectables/ClaimService.html":{}}}],["constructor(claimreviewmodel",{"_index":453,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["constructor(claimreviewservice",{"_index":1144,"title":{},"body":{"injectables/StatsService.html":{}}}],["constructor(configservice",{"_index":647,"title":{},"body":{"injectables/EmailService.html":{}}}],["constructor(logger",{"_index":748,"title":{},"body":{"classes/Logger.html":{}}}],["constructor(personalitymodel",{"_index":958,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["constructor(private",{"_index":1318,"title":{},"body":{"controllers/ViewController.html":{},"controllers/WikidataController.html":{}}}],["constructor(sourcemodel",{"_index":1119,"title":{},"body":{"injectables/SourceService.html":{}}}],["constructor(usermodel",{"_index":723,"title":{},"body":{"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["constructor(wikidatacache",{"_index":1399,"title":{},"body":{"injectables/WikidataService.html":{}}}],["construed",{"_index":2385,"title":{},"body":{"license.html":{}}}],["consumer",{"_index":2141,"title":{},"body":{"license.html":{}}}],["contact",{"_index":2487,"title":{},"body":{"license.html":{}}}],["contain",{"_index":2381,"title":{},"body":{"license.html":{}}}],["containing",{"_index":2228,"title":{},"body":{"license.html":{}}}],["contains",{"_index":2250,"title":{},"body":{"license.html":{}}}],["content",{"_index":93,"title":{},"body":{"classes/Claim.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["contents",{"_index":2339,"title":{},"body":{"license.html":{}}}],["context",{"_index":751,"title":{},"body":{"classes/Logger.html":{},"guards/SessionGuard.html":{},"license.html":{}}}],["context.switchtohttp",{"_index":1081,"title":{},"body":{"guards/SessionGuard.html":{}}}],["continue",{"_index":2192,"title":{},"body":{"license.html":{}}}],["continued",{"_index":2176,"title":{},"body":{"license.html":{}}}],["continuing",{"_index":2631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contractual",{"_index":2243,"title":{},"body":{"license.html":{}}}],["contradict",{"_index":2391,"title":{},"body":{"license.html":{}}}],["contrast",{"_index":1703,"title":{},"body":{"license.html":{}}}],["contributor",{"_index":2326,"title":{},"body":{"license.html":{}}}],["contributor's",{"_index":2328,"title":{},"body":{"license.html":{}}}],["control",{"_index":1940,"title":{},"body":{"license.html":{}}}],["controlled",{"_index":2330,"title":{},"body":{"license.html":{}}}],["controller",{"_index":147,"title":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/RootController.html":{},"controllers/StatsController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"controllers/WikidataController.html":{}},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/RootController.html":{},"controllers/StatsController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"controllers/WikidataController.html":{},"coverage.html":{}}}],["controller(\"api",{"_index":1062,"title":{},"body":{"controllers/RootController.html":{}}}],["controller(\"api/claimreview",{"_index":418,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["controller(\"api/stats",{"_index":1136,"title":{},"body":{"controllers/StatsController.html":{}}}],["controller(\"api/wikidata",{"_index":1376,"title":{},"body":{"controllers/WikidataController.html":{}}}],["controllers",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"controllers/RootController.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"controllers/WikidataController.html":{},"modules/WikidataModule.html":{},"overview.html":{}}}],["convenient",{"_index":1884,"title":{},"body":{"license.html":{}}}],["convert",{"_index":610,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["convey",{"_index":1869,"title":{},"body":{"license.html":{}}}],["conveyance",{"_index":2367,"title":{},"body":{"license.html":{}}}],["conveyed",{"_index":2187,"title":{},"body":{"license.html":{}}}],["conveying",{"_index":1878,"title":{},"body":{"license.html":{}}}],["conveys",{"_index":2242,"title":{},"body":{"license.html":{}}}],["cookie",{"_index":1579,"title":{},"body":{"dependencies.html":{}}}],["cookieparser",{"_index":1521,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["copies",{"_index":1691,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1688,"title":{},"body":{"license.html":{}}}],["copying",{"_index":1822,"title":{},"body":{"license.html":{}}}],["copyleft",{"_index":1694,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1679,"title":{},"body":{"license.html":{}}}],["copyrightable",{"_index":1831,"title":{},"body":{"license.html":{}}}],["copyrighted",{"_index":1991,"title":{},"body":{"license.html":{}}}],["correction",{"_index":2438,"title":{},"body":{"license.html":{}}}],["corresponding",{"_index":1936,"title":{},"body":{"license.html":{}}}],["cors",{"_index":2560,"title":{},"body":{"miscellaneous/variables.html":{}}}],["corsoptions",{"_index":2543,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cost",{"_index":2103,"title":{},"body":{"license.html":{}}}],["count",{"_index":446,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/UtilService.html":{}}}],["count(query",{"_index":473,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["countdown",{"_index":1605,"title":{},"body":{"dependencies.html":{}}}],["counterclaim",{"_index":2319,"title":{},"body":{"license.html":{}}}],["countreviewsbysentencehash",{"_index":447,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["countreviewsbysentencehash(sentencehash",{"_index":477,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["countries",{"_index":1866,"title":{},"body":{"license.html":{}}}],["country",{"_index":2357,"title":{},"body":{"license.html":{}}}],["course",{"_index":2498,"title":{},"body":{"license.html":{}}}],["court",{"_index":2390,"title":{},"body":{"license.html":{}}}],["courts",{"_index":2461,"title":{},"body":{"license.html":{}}}],["covenant",{"_index":2345,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":1506,"title":{"coverage.html":{}},"body":{"coverage.html":{},"license.html":{}}}],["covered",{"_index":1849,"title":{},"body":{"license.html":{}}}],["create",{"_index":156,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"injectables/SourceService.html":{}}}],["create(@body",{"_index":278,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{}}}],["create(@req",{"_index":419,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["create(body",{"_index":183,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{}}}],["create(claim",{"_index":568,"title":{},"body":{"injectables/ClaimService.html":{}}}],["create(claimreview",{"_index":479,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["create(data",{"_index":1121,"title":{},"body":{"injectables/SourceService.html":{}}}],["create(personality",{"_index":964,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["create(req",{"_index":410,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["createdat",{"_index":1358,"title":{},"body":{"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["createparagraphid",{"_index":779,"title":{},"body":{"injectables/ParserService.html":{}}}],["createsentenceid",{"_index":780,"title":{},"body":{"injectables/ParserService.html":{}}}],["createserver",{"_index":1347,"title":{},"body":{"injectables/ViewService.html":{}}}],["createtransport",{"_index":644,"title":{},"body":{"injectables/EmailService.html":{}}}],["credenciais",{"_index":2621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["credentials",{"_index":2545,"title":{},"body":{"miscellaneous/variables.html":{}}}],["criterion",{"_index":1898,"title":{},"body":{"license.html":{}}}],["cross",{"_index":2318,"title":{},"body":{"license.html":{}}}],["cure",{"_index":2280,"title":{},"body":{"license.html":{}}}],["currentpassword",{"_index":1200,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["customarily",{"_index":2093,"title":{},"body":{"license.html":{}}}],["customer",{"_index":2099,"title":{},"body":{"license.html":{}}}],["d",{"_index":1656,"title":{},"body":{"index.html":{},"license.html":{}}}],["damages",{"_index":2442,"title":{},"body":{"license.html":{}}}],["danger",{"_index":1813,"title":{},"body":{"license.html":{}}}],["data",{"_index":242,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"injectables/SourceService.html":{},"injectables/WikidataService.html":{},"license.html":{}}}],["data.entities",{"_index":1441,"title":{},"body":{"injectables/WikidataService.html":{}}}],["data.query",{"_index":1504,"title":{},"body":{"injectables/WikidataService.html":{}}}],["data.targetid",{"_index":1124,"title":{},"body":{"injectables/SourceService.html":{}}}],["data.user",{"_index":1126,"title":{},"body":{"injectables/SourceService.html":{}}}],["date",{"_index":94,"title":{},"body":{"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/WikidataCache.html":{},"license.html":{}}}],["date.now",{"_index":1365,"title":{},"body":{"classes/WikidataCache.html":{}}}],["days",{"_index":2275,"title":{},"body":{"license.html":{}}}],["db",{"_index":1651,"title":{},"body":{"index.html":{}}}],["de",{"_index":1635,"title":{},"body":{"index.html":{}}}],["debug",{"_index":744,"title":{},"body":{"classes/Logger.html":{}}}],["debug(message",{"_index":750,"title":{},"body":{"classes/Logger.html":{}}}],["december",{"_index":2016,"title":{},"body":{"license.html":{}}}],["decide",{"_index":2420,"title":{},"body":{"license.html":{}}}],["declining",{"_index":2234,"title":{},"body":{"license.html":{}}}],["decorators",{"_index":100,"title":{},"body":{"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"controllers/HomeController.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"controllers/RootController.html":{},"classes/Source.html":{},"controllers/StatsController.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"classes/WikidataCache.html":{},"controllers/WikidataController.html":{}}}],["deemed",{"_index":2004,"title":{},"body":{"license.html":{}}}],["default",{"_index":475,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"classes/Logger.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":612,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["defective",{"_index":2433,"title":{},"body":{"license.html":{}}}],["defenses",{"_index":2388,"title":{},"body":{"license.html":{}}}],["defined",{"_index":11,"title":{},"body":{"modules/AppModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HomeController.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"classes/Source.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"controllers/WikidataController.html":{},"injectables/WikidataService.html":{},"license.html":{}}}],["definition",{"_index":1945,"title":{},"body":{"license.html":{}}}],["definitions",{"_index":1825,"title":{},"body":{"license.html":{}}}],["delete",{"_index":157,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["delete(\":id",{"_index":427,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["delete(\"api/claim/:id",{"_index":298,"title":{},"body":{"controllers/ClaimController.html":{}}}],["delete(\"api/personality/:id",{"_index":929,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["delete(@param",{"_index":299,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/PersonalityController.html":{}}}],["delete(claimid",{"_index":570,"title":{},"body":{"injectables/ClaimService.html":{}}}],["delete(claimreviewid",{"_index":481,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["delete(params",{"_index":187,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/PersonalityController.html":{}}}],["delete(personalityid",{"_index":966,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["deleted",{"_index":932,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["denied",{"_index":2194,"title":{},"body":{"license.html":{}}}],["denominated",{"_index":2343,"title":{},"body":{"license.html":{}}}],["deny",{"_index":1776,"title":{},"body":{"license.html":{}}}],["denying",{"_index":1733,"title":{},"body":{"license.html":{}}}],["dependencies",{"_index":71,"title":{"dependencies.html":{}},"body":{"modules/AuthModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/EmailModule.html":{},"modules/HomeModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deprive",{"_index":2352,"title":{},"body":{"license.html":{}}}],["desc",{"_index":306,"title":{},"body":{"controllers/ClaimController.html":{}}}],["description",{"_index":861,"title":{},"body":{"classes/Personality.html":{},"classes/Source.html":{},"injectables/WikidataService.html":{}}}],["descriptions",{"_index":1454,"title":{},"body":{"injectables/WikidataService.html":{}}}],["design/icons",{"_index":1542,"title":{},"body":{"dependencies.html":{}}}],["designated",{"_index":2111,"title":{},"body":{"license.html":{}}}],["designed",{"_index":1699,"title":{},"body":{"license.html":{}}}],["detail",{"_index":2409,"title":{},"body":{"license.html":{}}}],["details",{"_index":2486,"title":{},"body":{"license.html":{}}}],["details.the",{"_index":2496,"title":{},"body":{"license.html":{}}}],["determining",{"_index":2151,"title":{},"body":{"license.html":{}}}],["dev",{"_index":1350,"title":{},"body":{"injectables/ViewService.html":{},"index.html":{}}}],["develop",{"_index":2470,"title":{},"body":{"license.html":{}}}],["developers",{"_index":1752,"title":{},"body":{"license.html":{}}}],["development",{"_index":1664,"title":{},"body":{"index.html":{},"license.html":{}}}],["devices",{"_index":1775,"title":{},"body":{"license.html":{}}}],["dhaiwat10/react",{"_index":1550,"title":{},"body":{"dependencies.html":{}}}],["differ",{"_index":2408,"title":{},"body":{"license.html":{}}}],["different",{"_index":2114,"title":{},"body":{"license.html":{}}}],["differently",{"_index":2221,"title":{},"body":{"license.html":{}}}],["dir",{"_index":1353,"title":{},"body":{"injectables/ViewService.html":{}}}],["direction",{"_index":1990,"title":{},"body":{"license.html":{}}}],["directions",{"_index":2120,"title":{},"body":{"license.html":{}}}],["directly",{"_index":1854,"title":{},"body":{"license.html":{}}}],["disable",{"_index":1031,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["disablesmtp",{"_index":2594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["disclaim",{"_index":2027,"title":{},"body":{"license.html":{}}}],["disclaimer",{"_index":2423,"title":{},"body":{"license.html":{}}}],["disclaiming",{"_index":2218,"title":{},"body":{"license.html":{}}}],["discriminatory",{"_index":2371,"title":{},"body":{"license.html":{}}}],["discursos",{"_index":1637,"title":{},"body":{"index.html":{}}}],["display",{"_index":2066,"title":{},"body":{"license.html":{}}}],["displayed",{"_index":2227,"title":{},"body":{"license.html":{}}}],["displays",{"_index":1880,"title":{},"body":{"license.html":{}}}],["distinguishing",{"_index":2412,"title":{},"body":{"license.html":{}}}],["distribute",{"_index":1689,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":2482,"title":{},"body":{"license.html":{}}}],["distributing",{"_index":2376,"title":{},"body":{"license.html":{}}}],["distribution",{"_index":1823,"title":{},"body":{"license.html":{}}}],["docker:docker",{"_index":1653,"title":{},"body":{"index.html":{}}}],["document",{"_index":1160,"title":{},"body":{"classes/User.html":{},"interfaces/UserDocument.html":{},"classes/WikidataCache.html":{},"license.html":{}}}],["documentation",{"_index":1507,"title":{},"body":{"coverage.html":{}}}],["documented",{"_index":2202,"title":{},"body":{"license.html":{}}}],["doesn't",{"_index":522,"title":{},"body":{"injectables/ClaimReviewService.html":{},"controllers/UsersController.html":{}}}],["dom",{"_index":1607,"title":{},"body":{"dependencies.html":{}}}],["domains",{"_index":1798,"title":{},"body":{"license.html":{}}}],["domino",{"_index":1581,"title":{},"body":{"dependencies.html":{}}}],["doubtful",{"_index":2152,"title":{},"body":{"license.html":{}}}],["downstream",{"_index":2298,"title":{},"body":{"license.html":{}}}],["draft",{"_index":1583,"title":{},"body":{"dependencies.html":{}}}],["duplicate",{"_index":1270,"title":{},"body":{"injectables/UtilService.html":{}}}],["durable",{"_index":2092,"title":{},"body":{"license.html":{}}}],["dwelling",{"_index":2150,"title":{},"body":{"license.html":{}}}],["dynamic",{"_index":1098,"title":{},"body":{"classes/Source.html":{}}}],["dynamically",{"_index":1949,"title":{},"body":{"license.html":{}}}],["dynamicmodule",{"_index":19,"title":{},"body":{"modules/AppModule.html":{}}}],["e",{"_index":636,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"controllers/UsersController.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["e.message",{"_index":1218,"title":{},"body":{"controllers/UsersController.html":{}}}],["each",{"_index":1834,"title":{},"body":{"license.html":{}}}],["earlier",{"_index":1847,"title":{},"body":{"license.html":{}}}],["effect",{"_index":2458,"title":{},"body":{"license.html":{}}}],["effected",{"_index":2025,"title":{},"body":{"license.html":{}}}],["effective",{"_index":2005,"title":{},"body":{"license.html":{}}}],["effectively",{"_index":1815,"title":{},"body":{"license.html":{}}}],["efforts",{"_index":2312,"title":{},"body":{"license.html":{}}}],["electronic",{"_index":2488,"title":{},"body":{"license.html":{}}}],["email",{"_index":739,"title":{},"body":{"injectables/LocalStrategy.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["email.service",{"_index":642,"title":{},"body":{"modules/EmailModule.html":{}}}],["email/email.module",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["emailmodule",{"_index":50,"title":{"modules/EmailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EmailModule.html":{},"modules.html":{},"overview.html":{}}}],["emailresponse",{"_index":2611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["emailresult",{"_index":693,"title":{},"body":{"injectables/EmailService.html":{}}}],["emailservice",{"_index":640,"title":{"injectables/EmailService.html":{}},"body":{"modules/EmailModule.html":{},"injectables/EmailService.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["emailservice.sendemail",{"_index":2612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["embodied",{"_index":2087,"title":{},"body":{"license.html":{}}}],["employer",{"_index":2501,"title":{},"body":{"license.html":{}}}],["en",{"_index":343,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"injectables/WikidataService.html":{}}}],["enable",{"_index":1924,"title":{},"body":{"license.html":{}}}],["enables",{"_index":1871,"title":{},"body":{"license.html":{}}}],["encodeuricomponent(params.wikidataid",{"_index":1435,"title":{},"body":{"injectables/WikidataService.html":{}}}],["encoding",{"_index":670,"title":{},"body":{"injectables/EmailService.html":{}}}],["end",{"_index":2469,"title":{},"body":{"license.html":{}}}],["enforce",{"_index":2344,"title":{},"body":{"license.html":{}}}],["enforcing",{"_index":2031,"title":{},"body":{"license.html":{}}}],["english/javascript",{"_index":1269,"title":{},"body":{"injectables/UtilService.html":{}}}],["ensure",{"_index":2125,"title":{},"body":{"license.html":{}}}],["entered",{"_index":2382,"title":{},"body":{"license.html":{}}}],["entire",{"_index":2056,"title":{},"body":{"license.html":{}}}],["entirely",{"_index":2399,"title":{},"body":{"license.html":{}}}],["entities",{"_index":1440,"title":{},"body":{"injectables/WikidataService.html":{}}}],["entities[params.wikidataid",{"_index":1443,"title":{},"body":{"injectables/WikidataService.html":{}}}],["entity",{"_index":2302,"title":{},"body":{"license.html":{}}}],["enum",{"_index":1100,"title":{},"body":{"classes/Source.html":{}}}],["equivalent",{"_index":1977,"title":{},"body":{"license.html":{}}}],["err",{"_index":1004,"title":{},"body":{"injectables/PersonalityService.html":{},"controllers/UsersController.html":{}}}],["erroneously",{"_index":1773,"title":{},"body":{"license.html":{}}}],["error",{"_index":287,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"classes/Logger.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"injectables/ViewService.html":{},"miscellaneous/variables.html":{}}}],["error(\"invalid",{"_index":1205,"title":{},"body":{"controllers/UsersController.html":{}}}],["error(\"repeated",{"_index":1208,"title":{},"body":{"controllers/UsersController.html":{}}}],["error(message",{"_index":754,"title":{},"body":{"classes/Logger.html":{}}}],["error.keypattern",{"_index":913,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["error.keypattern.wikidata",{"_index":914,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["error.keyvalue.wikidata",{"_index":916,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["error.message",{"_index":915,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["error.name",{"_index":911,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["errorformat",{"_index":1485,"title":{},"body":{"injectables/WikidataService.html":{}}}],["eslint",{"_index":1030,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["eslint/eslint",{"_index":1563,"title":{},"body":{"dependencies.html":{}}}],["essential",{"_index":1927,"title":{},"body":{"license.html":{}}}],["even",{"_index":2454,"title":{},"body":{"license.html":{}}}],["event",{"_index":2440,"title":{},"body":{"license.html":{}}}],["everyone",{"_index":1686,"title":{},"body":{"license.html":{}}}],["exact",{"_index":1844,"title":{},"body":{"license.html":{}}}],["exaggerated",{"_index":397,"title":{},"body":{"classes/ClaimReview.html":{}}}],["example",{"_index":1741,"title":{},"body":{"license.html":{}}}],["except",{"_index":617,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"license.html":{}}}],["exceptions",{"_index":2207,"title":{},"body":{"license.html":{}}}],["excluded",{"_index":2139,"title":{},"body":{"license.html":{}}}],["excluding",{"_index":2386,"title":{},"body":{"license.html":{}}}],["exclusion",{"_index":2479,"title":{},"body":{"license.html":{}}}],["exclusive",{"_index":2336,"title":{},"body":{"license.html":{}}}],["exclusively",{"_index":1983,"title":{},"body":{"license.html":{}}}],["excuse",{"_index":2392,"title":{},"body":{"license.html":{}}}],["exec",{"_index":1425,"title":{},"body":{"injectables/WikidataService.html":{}}}],["executable",{"_index":1914,"title":{},"body":{"license.html":{}}}],["execute",{"_index":2174,"title":{},"body":{"license.html":{}}}],["executing",{"_index":1860,"title":{},"body":{"license.html":{}}}],["executioncontext",{"_index":1076,"title":{},"body":{"guards/SessionGuard.html":{}}}],["exercise",{"_index":2313,"title":{},"body":{"license.html":{}}}],["exercising",{"_index":2026,"title":{},"body":{"license.html":{}}}],["exists",{"_index":918,"title":{},"body":{"controllers/PersonalityController.html":{},"injectables/WikidataService.html":{}}}],["expected",{"_index":2161,"title":{},"body":{"license.html":{}}}],["expects",{"_index":2160,"title":{},"body":{"license.html":{}}}],["expireafterseconds",{"_index":1390,"title":{},"body":{"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["explains",{"_index":1764,"title":{},"body":{"license.html":{}}}],["explicitly",{"_index":1968,"title":{},"body":{"license.html":{}}}],["export",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"classes/Source.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"controllers/WikidataController.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"dependencies.html":{}}}],["exports",{"_index":368,"title":{},"body":{"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/EmailModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{}}}],["express",{"_index":228,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"dependencies.html":{},"license.html":{}}}],["expressed",{"_index":2425,"title":{},"body":{"license.html":{}}}],["expressly",{"_index":2259,"title":{},"body":{"license.html":{}}}],["extend",{"_index":1801,"title":{},"body":{"license.html":{}}}],["extended",{"_index":2370,"title":{},"body":{"license.html":{}}}],["extends",{"_index":720,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{}}}],["extensions",{"_index":2071,"title":{},"body":{"license.html":{}}}],["extent",{"_index":1883,"title":{},"body":{"license.html":{}}}],["extract",{"_index":845,"title":{},"body":{"injectables/ParserService.html":{},"injectables/WikidataService.html":{}}}],["extractclaimwithtextsummary",{"_index":955,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["extractclaimwithtextsummary(claims",{"_index":968,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["extractproperties",{"_index":1393,"title":{},"body":{"injectables/WikidataService.html":{}}}],["extractproperties(wikidata",{"_index":1401,"title":{},"body":{"injectables/WikidataService.html":{}}}],["extractvalue",{"_index":1394,"title":{},"body":{"injectables/WikidataService.html":{}}}],["extractvalue(wikidata",{"_index":1403,"title":{},"body":{"injectables/WikidataService.html":{}}}],["f",{"_index":2240,"title":{},"body":{"license.html":{}}}],["facilities",{"_index":1985,"title":{},"body":{"license.html":{}}}],["fact",{"_index":392,"title":{},"body":{"classes/ClaimReview.html":{}}}],["fails",{"_index":2271,"title":{},"body":{"license.html":{}}}],["failure",{"_index":2452,"title":{},"body":{"license.html":{}}}],["fair",{"_index":1976,"title":{},"body":{"license.html":{}}}],["fake",{"_index":1641,"title":{},"body":{"index.html":{}}}],["fake\"].indexof",{"_index":1107,"title":{},"body":{"classes/Source.html":{}}}],["false",{"_index":395,"title":{},"body":{"classes/ClaimReview.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["family",{"_index":2145,"title":{},"body":{"license.html":{}}}],["fashion",{"_index":1841,"title":{},"body":{"license.html":{}}}],["favor",{"_index":2155,"title":{},"body":{"license.html":{}}}],["feature",{"_index":1887,"title":{},"body":{"license.html":{}}}],["fee",{"_index":1745,"title":{},"body":{"license.html":{}}}],["fetch",{"_index":1013,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["fetchonly",{"_index":709,"title":{},"body":{"controllers/HomeController.html":{}}}],["fetchproperties",{"_index":1379,"title":{},"body":{"controllers/WikidataController.html":{},"injectables/WikidataService.html":{}}}],["fetchproperties(params",{"_index":1405,"title":{},"body":{"injectables/WikidataService.html":{}}}],["file",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"classes/Source.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"controllers/WikidataController.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"license.html":{}}}],["file:${imagetitle",{"_index":1498,"title":{},"body":{"injectables/WikidataService.html":{}}}],["filename",{"_index":1462,"title":{},"body":{"injectables/WikidataService.html":{}}}],["files",{"_index":1946,"title":{},"body":{"license.html":{}}}],["finalize",{"_index":468,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["finally",{"_index":1804,"title":{},"body":{"license.html":{}}}],["find",{"_index":532,"title":{},"body":{"injectables/ClaimReviewService.html":{},"license.html":{}}}],["findall",{"_index":1169,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findall(@req",{"_index":1192,"title":{},"body":{"controllers/UsersController.html":{}}}],["findall(req",{"_index":1175,"title":{},"body":{"controllers/UsersController.html":{}}}],["findoneandupdate",{"_index":556,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["findoneandupdate(query",{"_index":572,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["finish",{"_index":2629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["finished",{"_index":2637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["first",{"_index":1255,"title":{},"body":{"injectables/UsersService.html":{},"license.html":{}}}],["firstpasswordchanged",{"_index":1156,"title":{},"body":{"classes/User.html":{},"interfaces/UserDocument.html":{}}}],["fitness",{"_index":2428,"title":{},"body":{"license.html":{}}}],["fixed",{"_index":2091,"title":{},"body":{"license.html":{}}}],["flow",{"_index":1956,"title":{},"body":{"license.html":{}}}],["follow",{"_index":1671,"title":{},"body":{"index.html":{},"license.html":{}}}],["following",{"_index":2340,"title":{},"body":{"license.html":{}}}],["forbid",{"_index":2024,"title":{},"body":{"license.html":{}}}],["force",{"_index":1980,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["forcepassword",{"_index":2598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["foreignfield",{"_index":143,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/Personality.html":{}}}],["fork",{"_index":1644,"title":{},"body":{"index.html":{}}}],["form",{"_index":1900,"title":{},"body":{"license.html":{}}}],["format",{"_index":1436,"title":{},"body":{"injectables/WikidataService.html":{},"license.html":{}}}],["formatstats",{"_index":1258,"title":{},"body":{"injectables/UtilService.html":{}}}],["formatstats(reviews",{"_index":1260,"title":{},"body":{"injectables/UtilService.html":{}}}],["formatversion",{"_index":1438,"title":{},"body":{"injectables/WikidataService.html":{}}}],["forms",{"_index":2082,"title":{},"body":{"license.html":{}}}],["found",{"_index":272,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/PersonalityService.html":{},"license.html":{}}}],["foundation",{"_index":1683,"title":{},"body":{"license.html":{}}}],["free",{"_index":1681,"title":{},"body":{"license.html":{}}}],["freedom",{"_index":1702,"title":{},"body":{"license.html":{}}}],["freedoms",{"_index":1748,"title":{},"body":{"license.html":{}}}],["fs",{"_index":664,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["fs.readfilesync(path.resolve(__dirname",{"_index":669,"title":{},"body":{"injectables/EmailService.html":{}}}],["fulfilling",{"_index":2008,"title":{},"body":{"license.html":{}}}],["full",{"_index":2481,"title":{},"body":{"license.html":{}}}],["function",{"_index":530,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["functioning",{"_index":2177,"title":{},"body":{"license.html":{}}}],["fundamentally",{"_index":1780,"title":{},"body":{"license.html":{}}}],["further",{"_index":2113,"title":{},"body":{"license.html":{}}}],["future",{"_index":806,"title":{},"body":{"injectables/ParserService.html":{},"license.html":{}}}],["general",{"_index":1674,"title":{},"body":{"license.html":{}}}],["generally",{"_index":1943,"title":{},"body":{"license.html":{}}}],["generate",{"_index":1937,"title":{},"body":{"license.html":{}}}],["generatepassword",{"_index":2596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["generatepassword(userdata.istestuser",{"_index":2633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get(\":id",{"_index":424,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["get(\":wikidataid",{"_index":1377,"title":{},"body":{"controllers/WikidataController.html":{}}}],["get(\"_next",{"_index":1331,"title":{},"body":{"controllers/ViewController.html":{}}}],["get(\"about",{"_index":1323,"title":{},"body":{"controllers/ViewController.html":{}}}],["get(\"api/claim",{"_index":254,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get(\"api/claim/:claimid/sentence/:sentencehash",{"_index":331,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get(\"api/claim/:claimid/sentence/:sentencehash/reviews",{"_index":301,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get(\"api/claim/:id",{"_index":291,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get(\"api/personality",{"_index":906,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get(\"api/personality/:id",{"_index":919,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get(\"api/personality/:id/reviews",{"_index":933,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get(\"api/user/validate",{"_index":1191,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(\"code",{"_index":1328,"title":{},"body":{"controllers/ViewController.html":{}}}],["get(\"health",{"_index":1069,"title":{},"body":{"controllers/RootController.html":{}}}],["get(\"home",{"_index":704,"title":{},"body":{"controllers/HomeController.html":{},"controllers/StatsController.html":{}}}],["get(\"login",{"_index":1219,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(\"personality",{"_index":941,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get(\"personality/:personalityslug/claim/:claimslug",{"_index":358,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get(\"personality/:personalityslug/claim/:claimslug/sentence/:sentencehash",{"_index":334,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get(\"personality/:slug",{"_index":939,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get(\"personality/:slug/claim/create",{"_index":355,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get(\"personality/search",{"_index":936,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get(\"privacy",{"_index":1325,"title":{},"body":{"controllers/ViewController.html":{}}}],["get(\"profile",{"_index":1220,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(\"robots.txt",{"_index":1063,"title":{},"body":{"controllers/RootController.html":{}}}],["get(':id",{"_index":416,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["get(':wikidataid",{"_index":1373,"title":{},"body":{"controllers/WikidataController.html":{}}}],["get('_next",{"_index":1301,"title":{},"body":{"controllers/ViewController.html":{}}}],["get('about",{"_index":1310,"title":{},"body":{"controllers/ViewController.html":{}}}],["get('api/claim",{"_index":204,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get('api/claim/:claimid/sentence/:sentencehash",{"_index":198,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get('api/claim/:claimid/sentence/:sentencehash/reviews",{"_index":201,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get('api/claim/:id",{"_index":192,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get('api/personality",{"_index":890,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get('api/personality/:id",{"_index":885,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get('api/personality/:id/reviews",{"_index":888,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get('code",{"_index":1304,"title":{},"body":{"controllers/ViewController.html":{}}}],["get('health",{"_index":1056,"title":{},"body":{"controllers/RootController.html":{}}}],["get('home",{"_index":700,"title":{},"body":{"controllers/HomeController.html":{},"controllers/StatsController.html":{}}}],["get('login",{"_index":1181,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('personality",{"_index":896,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get('personality/:personalityslug/claim/:claimslug",{"_index":207,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get('personality/:personalityslug/claim/:claimslug/sentence/:sentencehash",{"_index":195,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get('personality/:slug",{"_index":899,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["get('personality/:slug/claim/create",{"_index":181,"title":{},"body":{"controllers/ClaimController.html":{}}}],["get('privacy",{"_index":1314,"title":{},"body":{"controllers/ViewController.html":{}}}],["get('robots.txt",{"_index":1060,"title":{},"body":{"controllers/RootController.html":{}}}],["get(@param",{"_index":425,"title":{},"body":{"controllers/ClaimReviewController.html":{},"controllers/PersonalityController.html":{}}}],["get(`https://www.wikidata.org/w/api.php",{"_index":1488,"title":{},"body":{"injectables/WikidataService.html":{}}}],["get(params",{"_index":415,"title":{},"body":{"controllers/ClaimReviewController.html":{},"controllers/PersonalityController.html":{}}}],["get,head,put,patch,post,delete",{"_index":2546,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getbyid",{"_index":158,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/UsersService.html":{}}}],["getbyid(@param",{"_index":292,"title":{},"body":{"controllers/ClaimController.html":{}}}],["getbyid(claimid",{"_index":575,"title":{},"body":{"injectables/ClaimService.html":{}}}],["getbyid(claimreviewid",{"_index":484,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getbyid(params",{"_index":191,"title":{},"body":{"controllers/ClaimController.html":{}}}],["getbyid(params.id",{"_index":921,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["getbyid(personalityid",{"_index":971,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["getbyid(userid",{"_index":1238,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbypersonalityidandclaimslug",{"_index":557,"title":{},"body":{"injectables/ClaimService.html":{}}}],["getbypersonalityidandclaimslug(personalityid",{"_index":577,"title":{},"body":{"injectables/ClaimService.html":{}}}],["getbyslug",{"_index":956,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["getbyslug(personalityslug",{"_index":973,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["getclaimreviewpage",{"_index":159,"title":{},"body":{"controllers/ClaimController.html":{}}}],["getclaimreviewpage(@req",{"_index":335,"title":{},"body":{"controllers/ClaimController.html":{}}}],["getclaimreviewpage(req",{"_index":194,"title":{},"body":{"controllers/ClaimController.html":{}}}],["getcommonsthumburl",{"_index":1395,"title":{},"body":{"injectables/WikidataService.html":{}}}],["getcommonsthumburl(imagetitle",{"_index":1407,"title":{},"body":{"injectables/WikidataService.html":{}}}],["getemailbody",{"_index":645,"title":{},"body":{"injectables/EmailService.html":{}}}],["getemailbody(options",{"_index":650,"title":{},"body":{"injectables/EmailService.html":{}}}],["gethomestats",{"_index":1133,"title":{},"body":{"controllers/StatsController.html":{},"injectables/StatsService.html":{}}}],["getnextserver",{"_index":349,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{}}}],["getreviewsbyclaimid",{"_index":448,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getreviewsbyclaimid(claimid",{"_index":486,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getreviewsbysentencehash",{"_index":449,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getreviewsbysentencehash(sentencehash",{"_index":488,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getreviewstats",{"_index":877,"title":{},"body":{"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["getreviewstats(@param",{"_index":934,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["getreviewstats(id",{"_index":975,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["getreviewstats(params",{"_index":887,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["getreviewstats(params.id",{"_index":935,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["getreviewstatsbyclaimid",{"_index":450,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getreviewstatsbyclaimid(claimid",{"_index":490,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getreviewstatsbysentencehash",{"_index":451,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getreviewstatsbysentencehash(sentencehash",{"_index":492,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getsentencebyhash",{"_index":160,"title":{},"body":{"controllers/ClaimController.html":{}}}],["getsentencebyhash(@req",{"_index":332,"title":{},"body":{"controllers/ClaimController.html":{}}}],["getsentencebyhash(req",{"_index":197,"title":{},"body":{"controllers/ClaimController.html":{}}}],["getsentencereviewsbyhash",{"_index":161,"title":{},"body":{"controllers/ClaimController.html":{}}}],["getsentencereviewsbyhash(@req",{"_index":302,"title":{},"body":{"controllers/ClaimController.html":{}}}],["getsentencereviewsbyhash(req",{"_index":200,"title":{},"body":{"controllers/ClaimController.html":{}}}],["getsitelinkname",{"_index":1396,"title":{},"body":{"injectables/WikidataService.html":{}}}],["getsitelinkname(language",{"_index":1410,"title":{},"body":{"injectables/WikidataService.html":{}}}],["getting",{"_index":1631,"title":{"index.html":{},"license.html":{}},"body":{}}],["getuserreviewbysentencehash",{"_index":452,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getuserreviewbysentencehash(sentencehash",{"_index":494,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["getwikidata",{"_index":1371,"title":{},"body":{"controllers/WikidataController.html":{}}}],["getwikidata(params",{"_index":1372,"title":{},"body":{"controllers/WikidataController.html":{}}}],["give",{"_index":2047,"title":{},"body":{"license.html":{}}}],["given",{"_index":1973,"title":{},"body":{"license.html":{}}}],["gives",{"_index":2063,"title":{},"body":{"license.html":{}}}],["giving",{"_index":1758,"title":{},"body":{"license.html":{}}}],["gnu",{"_index":1673,"title":{},"body":{"license.html":{}}}],["google",{"_index":1608,"title":{},"body":{"dependencies.html":{}}}],["governed",{"_index":2210,"title":{},"body":{"license.html":{}}}],["gpl",{"_index":1753,"title":{},"body":{"license.html":{}}}],["grant",{"_index":2235,"title":{},"body":{"license.html":{}}}],["granted",{"_index":1963,"title":{},"body":{"license.html":{}}}],["grants",{"_index":2291,"title":{},"body":{"license.html":{}}}],["graph",{"_index":2517,"title":{},"body":{"modules.html":{}}}],["gratis",{"_index":1744,"title":{},"body":{"license.html":{}}}],["greatest",{"_index":2471,"title":{},"body":{"license.html":{}}}],["group",{"_index":503,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["guarantee",{"_index":1705,"title":{},"body":{"license.html":{}}}],["guard",{"_index":1071,"title":{"guards/SessionGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":1072,"title":{},"body":{"guards/SessionGuard.html":{}}}],["gui",{"_index":2499,"title":{},"body":{"license.html":{}}}],["handlebars",{"_index":662,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["handlebars.compile(html",{"_index":674,"title":{},"body":{"injectables/EmailService.html":{}}}],["handler",{"_index":1297,"title":{},"body":{"controllers/ViewController.html":{}}}],["handler(req",{"_index":1307,"title":{},"body":{"controllers/ViewController.html":{}}}],["hash",{"_index":314,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{},"injectables/ParserService.html":{}}}],["having",{"_index":1982,"title":{},"body":{"license.html":{}}}],["health",{"_index":1054,"title":{},"body":{"controllers/RootController.html":{}}}],["hereafter",{"_index":2332,"title":{},"body":{"license.html":{}}}],["holder",{"_index":2265,"title":{},"body":{"license.html":{}}}],["holders",{"_index":2217,"title":{},"body":{"license.html":{}}}],["home",{"_index":711,"title":{},"body":{"controllers/HomeController.html":{}}}],["home.controller",{"_index":715,"title":{},"body":{"modules/HomeModule.html":{}}}],["home/home.module",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["homecontroller",{"_index":696,"title":{"controllers/HomeController.html":{}},"body":{"controllers/HomeController.html":{},"modules/HomeModule.html":{},"coverage.html":{}}}],["homemodule",{"_index":48,"title":{"modules/HomeModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HomeModule.html":{},"modules.html":{},"overview.html":{}}}],["hope",{"_index":2483,"title":{},"body":{"license.html":{}}}],["host",{"_index":679,"title":{},"body":{"injectables/EmailService.html":{}}}],["hosts",{"_index":2122,"title":{},"body":{"license.html":{}}}],["household",{"_index":2146,"title":{},"body":{"license.html":{}}}],["html",{"_index":668,"title":{},"body":{"injectables/EmailService.html":{},"dependencies.html":{}}}],["http://localhost:3000",{"_index":1662,"title":{},"body":{"index.html":{}}}],["httpcontext",{"_index":1080,"title":{},"body":{"guards/SessionGuard.html":{}}}],["httpcontext.getrequest",{"_index":1082,"title":{},"body":{"guards/SessionGuard.html":{}}}],["httpcontext.getresponse",{"_index":1083,"title":{},"body":{"guards/SessionGuard.html":{}}}],["httpmodule",{"_index":372,"title":{},"body":{"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{}}}],["https://${wikilang.replace",{"_index":1474,"title":{},"body":{"injectables/WikidataService.html":{}}}],["https://commons.wikimedia.org/w/api.php",{"_index":1496,"title":{},"body":{"injectables/WikidataService.html":{}}}],["https://fsf.org",{"_index":1685,"title":{},"body":{"license.html":{}}}],["https://github.com//aletheia",{"_index":1648,"title":{},"body":{"index.html":{}}}],["https://medium.com/javascript",{"_index":1267,"title":{},"body":{"injectables/UtilService.html":{}}}],["https://mongoosejs.com/docs/populate.html#dynamic",{"_index":1099,"title":{},"body":{"classes/Source.html":{}}}],["https://stackoverflow.com/questions/47669178/mongoose",{"_index":525,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["https://www.gnu.org/licenses",{"_index":2505,"title":{},"body":{"license.html":{}}}],["https://www.gnu.org/licenses/why",{"_index":2515,"title":{},"body":{"license.html":{}}}],["https://www.google.com/recaptcha/api",{"_index":241,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["httpservice",{"_index":224,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["hypothetical",{"_index":2497,"title":{},"body":{"license.html":{}}}],["i18next",{"_index":1589,"title":{},"body":{"dependencies.html":{}}}],["icons",{"_index":1616,"title":{},"body":{"dependencies.html":{}}}],["id",{"_index":791,"title":{},"body":{"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["identifiable",{"_index":2359,"title":{},"body":{"license.html":{}}}],["identifier",{"_index":1508,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":1434,"title":{},"body":{"injectables/WikidataService.html":{}}}],["ignore",{"_index":251,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/HomeController.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/ViewController.html":{}}}],["iiprop",{"_index":1500,"title":{},"body":{"injectables/WikidataService.html":{}}}],["iiurlwidth",{"_index":1501,"title":{},"body":{"injectables/WikidataService.html":{}}}],["image",{"_index":1446,"title":{},"body":{"injectables/WikidataService.html":{}}}],["imageinfo",{"_index":1499,"title":{},"body":{"injectables/WikidataService.html":{}}}],["imagetitle",{"_index":1409,"title":{},"body":{"injectables/WikidataService.html":{}}}],["implement",{"_index":1925,"title":{},"body":{"license.html":{}}}],["implementation",{"_index":1926,"title":{},"body":{"license.html":{}}}],["implements",{"_index":742,"title":{},"body":{"classes/Logger.html":{},"guards/SessionGuard.html":{},"injectables/ViewService.html":{}}}],["implied",{"_index":2387,"title":{},"body":{"license.html":{}}}],["import",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"classes/Source.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"controllers/WikidataController.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"dependencies.html":{},"license.html":{}}}],["importing",{"_index":2325,"title":{},"body":{"license.html":{}}}],["imports",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/EmailModule.html":{},"modules/HomeModule.html":{},"modules/PersonalityModule.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{}}}],["impose",{"_index":2245,"title":{},"body":{"license.html":{}}}],["imposed",{"_index":2389,"title":{},"body":{"license.html":{}}}],["inability",{"_index":2446,"title":{},"body":{"license.html":{}}}],["inaccurate",{"_index":2449,"title":{},"body":{"license.html":{}}}],["inc",{"_index":1684,"title":{},"body":{"license.html":{}}}],["incidental",{"_index":2443,"title":{},"body":{"license.html":{}}}],["include",{"_index":1915,"title":{},"body":{"license.html":{}}}],["included",{"_index":1917,"title":{},"body":{"license.html":{}}}],["includes",{"_index":1864,"title":{},"body":{"license.html":{}}}],["including",{"_index":1938,"title":{},"body":{"license.html":{}}}],["inclusion",{"_index":2080,"title":{},"body":{"license.html":{}}}],["incompatible",{"_index":1781,"title":{},"body":{"license.html":{}}}],["incorporating",{"_index":2506,"title":{},"body":{"license.html":{}}}],["incorporation",{"_index":2149,"title":{},"body":{"license.html":{}}}],["inc|ltd|jr|sr|co",{"_index":816,"title":{},"body":{"injectables/ParserService.html":{}}}],["indemnification",{"_index":2241,"title":{},"body":{"license.html":{}}}],["independent",{"_index":2069,"title":{},"body":{"license.html":{}}}],["index",{"_index":91,"title":{"index.html":{}},"body":{"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HomeController.html":{},"classes/Logger.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"classes/Source.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"controllers/WikidataController.html":{},"injectables/WikidataService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexof(v",{"_index":399,"title":{},"body":{"classes/ClaimReview.html":{}}}],["indicate",{"_index":2295,"title":{},"body":{"license.html":{}}}],["indicating",{"_index":2256,"title":{},"body":{"license.html":{}}}],["individual",{"_index":2078,"title":{},"body":{"license.html":{}}}],["individuals",{"_index":1790,"title":{},"body":{"license.html":{}}}],["industrial",{"_index":2164,"title":{},"body":{"license.html":{}}}],["info",{"_index":3,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"classes/Source.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"controllers/WikidataController.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["inform",{"_index":2131,"title":{},"body":{"license.html":{}}}],["information",{"_index":2170,"title":{},"body":{"license.html":{}}}],["infringe",{"_index":2293,"title":{},"body":{"license.html":{}}}],["infringed",{"_index":2322,"title":{},"body":{"license.html":{}}}],["infringement",{"_index":1857,"title":{},"body":{"license.html":{}}}],["init",{"_index":461,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["initapp",{"_index":1522,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["initiate",{"_index":2316,"title":{},"body":{"license.html":{}}}],["injectable",{"_index":440,"title":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"injectables/SourceService.html":{},"injectables/StatsService.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{}},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"injectables/SourceService.html":{},"injectables/StatsService.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{},"coverage.html":{}}}],["injectables",{"_index":441,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"injectables/SourceService.html":{},"injectables/StatsService.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{},"overview.html":{}}}],["injectmodel",{"_index":499,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"injectables/PersonalityService.html":{},"injectables/SourceService.html":{},"injectables/UsersService.html":{},"injectables/WikidataService.html":{}}}],["injectmodel(claim.name",{"_index":597,"title":{},"body":{"injectables/ClaimService.html":{}}}],["injectmodel(claimreview.name",{"_index":501,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["injectmodel(personality.name",{"_index":990,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["injectmodel(source.name",{"_index":1123,"title":{},"body":{"injectables/SourceService.html":{}}}],["injectmodel(user.name",{"_index":728,"title":{},"body":{"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["injectmodel(wikidatacache.name",{"_index":1421,"title":{},"body":{"injectables/WikidataService.html":{}}}],["inside",{"_index":1777,"title":{},"body":{"license.html":{}}}],["instalação",{"_index":1643,"title":{},"body":{"index.html":{}}}],["install",{"_index":1657,"title":{},"body":{"index.html":{},"license.html":{}}}],["installation",{"_index":2169,"title":{},"body":{"license.html":{}}}],["installed",{"_index":2190,"title":{},"body":{"license.html":{}}}],["instead",{"_index":2512,"title":{},"body":{"license.html":{}}}],["intact",{"_index":2040,"title":{},"body":{"license.html":{}}}],["intended",{"_index":1704,"title":{},"body":{"license.html":{}}}],["intention",{"_index":2028,"title":{},"body":{"license.html":{}}}],["interaction",{"_index":1874,"title":{},"body":{"license.html":{}}}],["interactive",{"_index":1879,"title":{},"body":{"license.html":{}}}],["interchange",{"_index":2094,"title":{},"body":{"license.html":{}}}],["interest",{"_index":2310,"title":{},"body":{"license.html":{}}}],["interface",{"_index":55,"title":{"interfaces/UserDocument.html":{}},"body":{"modules/AppModule.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"coverage.html":{},"license.html":{},"overview.html":{}}}],["interfaces",{"_index":1164,"title":{},"body":{"interfaces/UserDocument.html":{},"license.html":{}}}],["interfered",{"_index":2179,"title":{},"body":{"license.html":{}}}],["interpretation",{"_index":2457,"title":{},"body":{"license.html":{}}}],["interpreter",{"_index":1935,"title":{},"body":{"license.html":{}}}],["intimate",{"_index":1954,"title":{},"body":{"license.html":{}}}],["invalidate",{"_index":2064,"title":{},"body":{"license.html":{}}}],["irrevocable",{"_index":1965,"title":{},"body":{"license.html":{}}}],["isallowedprop",{"_index":1445,"title":{},"body":{"injectables/WikidataService.html":{}}}],["istestuser",{"_index":2597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["item",{"_index":1290,"title":{},"body":{"injectables/UtilService.html":{},"injectables/WikidataService.html":{},"license.html":{}}}],["item[property",{"_index":1287,"title":{},"body":{"injectables/UtilService.html":{}}}],["itself",{"_index":2195,"title":{},"body":{"license.html":{}}}],["js",{"_index":539,"title":{},"body":{"injectables/ClaimReviewService.html":{},"dependencies.html":{}}}],["json",{"_index":1437,"title":{},"body":{"injectables/WikidataService.html":{}}}],["june",{"_index":1677,"title":{},"body":{"license.html":{}}}],["keep",{"_index":2039,"title":{},"body":{"license.html":{}}}],["kernel",{"_index":1928,"title":{},"body":{"license.html":{}}}],["key",{"_index":2203,"title":{},"body":{"license.html":{}}}],["keys",{"_index":2173,"title":{},"body":{"license.html":{}}}],["kind",{"_index":1870,"title":{},"body":{"license.html":{}}}],["kinds",{"_index":1695,"title":{},"body":{"license.html":{}}}],["know",{"_index":1726,"title":{},"body":{"license.html":{}}}],["knowingly",{"_index":2347,"title":{},"body":{"license.html":{}}}],["knowledge",{"_index":2356,"title":{},"body":{"license.html":{}}}],["label",{"_index":1448,"title":{},"body":{"injectables/WikidataService.html":{}}}],["labels",{"_index":1451,"title":{},"body":{"injectables/WikidataService.html":{}}}],["landing",{"_index":1322,"title":{},"body":{"controllers/ViewController.html":{}}}],["lang",{"_index":469,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["language",{"_index":342,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"dependencies.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["languagefallback",{"_index":1480,"title":{},"body":{"injectables/WikidataService.html":{}}}],["languagevariantmap",{"_index":1418,"title":{},"body":{"injectables/WikidataService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["languagevariantmap[language",{"_index":1477,"title":{},"body":{"injectables/WikidataService.html":{}}}],["language}wiki",{"_index":1478,"title":{},"body":{"injectables/WikidataService.html":{}}}],["larger",{"_index":2073,"title":{},"body":{"license.html":{}}}],["later",{"_index":2415,"title":{},"body":{"license.html":{}}}],["law",{"_index":1859,"title":{},"body":{"license.html":{}}}],["laws",{"_index":1828,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":2320,"title":{},"body":{"license.html":{}}}],["lean",{"_index":601,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["legal",{"_index":1759,"title":{},"body":{"license.html":{}}}],["less",{"_index":1595,"title":{},"body":{"dependencies.html":{}}}],["lesser",{"_index":2511,"title":{},"body":{"license.html":{}}}],["lgpl.html",{"_index":2516,"title":{},"body":{"license.html":{}}}],["liability",{"_index":2220,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1856,"title":{},"body":{"license.html":{}}}],["libraries",{"_index":1913,"title":{},"body":{"license.html":{}}}],["library",{"_index":2140,"title":{},"body":{"license.html":{}}}],["license",{"_index":1672,"title":{"license.html":{}},"body":{"license.html":{}}}],["licensed",{"_index":1832,"title":{},"body":{"license.html":{}}}],["licensee",{"_index":1835,"title":{},"body":{"license.html":{}}}],["licensees",{"_index":1837,"title":{},"body":{"license.html":{}}}],["licenses",{"_index":1697,"title":{},"body":{"license.html":{}}}],["licensing",{"_index":2297,"title":{},"body":{"license.html":{}}}],["licensors",{"_index":2233,"title":{},"body":{"license.html":{}}}],["likewise",{"_index":2289,"title":{},"body":{"license.html":{}}}],["limit",{"_index":2029,"title":{},"body":{"license.html":{}}}],["limit(pagesize",{"_index":519,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["limitation",{"_index":2439,"title":{},"body":{"license.html":{}}}],["limited",{"_index":2426,"title":{},"body":{"license.html":{}}}],["limiting",{"_index":2219,"title":{},"body":{"license.html":{}}}],["line",{"_index":1032,"title":{},"body":{"injectables/PersonalityService.html":{},"license.html":{}}}],["link",{"_index":1088,"title":{},"body":{"classes/Source.html":{},"dependencies.html":{},"license.html":{}}}],["linked",{"_index":1950,"title":{},"body":{"license.html":{}}}],["linking",{"_index":2509,"title":{},"body":{"license.html":{}}}],["list",{"_index":943,"title":{},"body":{"controllers/PersonalityController.html":{},"license.html":{}}}],["listall",{"_index":162,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["listall(@query",{"_index":255,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{}}}],["listall(page",{"_index":580,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["listall(query",{"_index":203,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{}}}],["listening",{"_index":2579,"title":{},"body":{"miscellaneous/variables.html":{}}}],["literal",{"_index":591,"title":{},"body":{"injectables/ClaimService.html":{}}}],["litigation",{"_index":2317,"title":{},"body":{"license.html":{}}}],["load",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"injectables/ViewService.html":{}}}],["loaded",{"_index":2588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["loading",{"_index":2587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["local",{"_index":734,"title":{},"body":{"injectables/LocalStrategy.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["local.serializer",{"_index":85,"title":{},"body":{"modules/AuthModule.html":{}}}],["local.strategy",{"_index":84,"title":{},"body":{"modules/AuthModule.html":{}}}],["localauthguard",{"_index":716,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"injectables/LocalAuthGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["localfield",{"_index":141,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/Personality.html":{}}}],["localhost",{"_index":2583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["locally:git",{"_index":1647,"title":{},"body":{"index.html":{}}}],["localserializer",{"_index":75,"title":{"injectables/LocalSerializer.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalSerializer.html":{},"coverage.html":{},"overview.html":{}}}],["localstrategy",{"_index":76,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["log",{"_index":745,"title":{},"body":{"classes/Logger.html":{},"injectables/PersonalityService.html":{}}}],["log(message",{"_index":757,"title":{},"body":{"classes/Logger.html":{}}}],["logger",{"_index":212,"title":{"classes/Logger.html":{}},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"classes/Logger.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ViewService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger(\"claimcontroller",{"_index":238,"title":{},"body":{"controllers/ClaimController.html":{}}}],["logger(\"claimreviewservice",{"_index":497,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["logger(\"claimservice",{"_index":590,"title":{},"body":{"injectables/ClaimService.html":{}}}],["logger(\"emailservice",{"_index":659,"title":{},"body":{"injectables/EmailService.html":{}}}],["logger(\"personalitycontroller",{"_index":905,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["logger(\"personalityservice",{"_index":986,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["logger(\"usercontroller",{"_index":1190,"title":{},"body":{"controllers/UsersController.html":{}}}],["logger(\"userservice",{"_index":1242,"title":{},"body":{"injectables/UsersService.html":{}}}],["logger(\"viewservice",{"_index":1345,"title":{},"body":{"injectables/ViewService.html":{}}}],["logger(options.logger",{"_index":2559,"title":{},"body":{"miscellaneous/variables.html":{}}}],["loggerservice",{"_index":743,"title":{},"body":{"classes/Logger.html":{}}}],["login",{"_index":1170,"title":{},"body":{"controllers/UsersController.html":{}}}],["login(@req",{"_index":1195,"title":{},"body":{"controllers/UsersController.html":{}}}],["login(req",{"_index":1178,"title":{},"body":{"controllers/UsersController.html":{}}}],["long",{"_index":1978,"title":{},"body":{"license.html":{}}}],["lookup",{"_index":528,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["loop",{"_index":2628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["loss",{"_index":2447,"title":{},"body":{"license.html":{}}}],["losses",{"_index":2450,"title":{},"body":{"license.html":{}}}],["lower",{"_index":609,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["machine",{"_index":2084,"title":{},"body":{"license.html":{}}}],["made",{"_index":2180,"title":{},"body":{"license.html":{}}}],["mail",{"_index":692,"title":{},"body":{"injectables/EmailService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["maintain",{"_index":2118,"title":{},"body":{"license.html":{}}}],["major",{"_index":1920,"title":{},"body":{"license.html":{}}}],["make",{"_index":1708,"title":{},"body":{"license.html":{}}}],["makes",{"_index":1999,"title":{},"body":{"license.html":{}}}],["making",{"_index":1843,"title":{},"body":{"license.html":{}}}],["manner",{"_index":2333,"title":{},"body":{"license.html":{}}}],["manufacturer",{"_index":1779,"title":{},"body":{"license.html":{}}}],["map",{"_index":1284,"title":{},"body":{"injectables/UtilService.html":{}}}],["march",{"_index":2384,"title":{},"body":{"license.html":{}}}],["markdown",{"_index":1610,"title":{},"body":{"dependencies.html":{}}}],["marked",{"_index":1770,"title":{},"body":{"license.html":{}}}],["marks",{"_index":2239,"title":{},"body":{"license.html":{}}}],["masks",{"_index":1830,"title":{},"body":{"license.html":{}}}],["match",{"_index":472,"title":{},"body":{"injectables/ClaimReviewService.html":{},"controllers/UsersController.html":{}}}],["matching",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"classes/Source.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"controllers/WikidataController.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":1987,"title":{},"body":{"license.html":{}}}],["materially",{"_index":2196,"title":{},"body":{"license.html":{}}}],["math.ceil",{"_index":1051,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["math.ceil(totalclaims",{"_index":270,"title":{},"body":{"controllers/ClaimController.html":{}}}],["math.ceil(totalreviews",{"_index":311,"title":{},"body":{"controllers/ClaimController.html":{}}}],["md5",{"_index":799,"title":{},"body":{"injectables/ParserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["meaning",{"_index":2249,"title":{},"body":{"license.html":{}}}],["means",{"_index":1827,"title":{},"body":{"license.html":{}}}],["measure",{"_index":2007,"title":{},"body":{"license.html":{}}}],["measures",{"_index":2021,"title":{},"body":{"license.html":{}}}],["medium",{"_index":2035,"title":{},"body":{"license.html":{}}}],["meet",{"_index":2051,"title":{},"body":{"license.html":{}}}],["meets",{"_index":1897,"title":{},"body":{"license.html":{}}}],["menu",{"_index":1895,"title":{},"body":{"license.html":{}}}],["merchantability",{"_index":2427,"title":{},"body":{"license.html":{}}}],["mere",{"_index":1873,"title":{},"body":{"license.html":{}}}],["merge",{"_index":465,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/UtilService.html":{}}}],["mergeobjectsinunique",{"_index":1259,"title":{},"body":{"injectables/UtilService.html":{}}}],["mergeobjectsinunique(array",{"_index":1264,"title":{},"body":{"injectables/UtilService.html":{}}}],["merging",{"_index":2306,"title":{},"body":{"license.html":{}}}],["message",{"_index":113,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/Logger.html":{},"controllers/PersonalityController.html":{},"classes/Source.html":{},"controllers/UsersController.html":{}}}],["met",{"_index":1967,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":1619,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HomeController.html":{},"classes/Logger.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{},"controllers/WikidataController.html":{},"injectables/WikidataService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["metrics",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["miscellaneous",{"_index":2521,"title":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["misleading",{"_index":394,"title":{},"body":{"classes/ClaimReview.html":{}}}],["misrepresentation",{"_index":2229,"title":{},"body":{"license.html":{}}}],["mode",{"_index":2168,"title":{},"body":{"license.html":{}}}],["model",{"_index":454,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"injectables/PersonalityService.html":{},"injectables/SourceService.html":{},"injectables/UsersService.html":{},"injectables/WikidataService.html":{},"license.html":{}}}],["modeyarn",{"_index":1660,"title":{},"body":{"index.html":{}}}],["modification",{"_index":1824,"title":{},"body":{"license.html":{}}}],["modifications",{"_index":1901,"title":{},"body":{"license.html":{}}}],["modified",{"_index":1769,"title":{},"body":{"license.html":{}}}],["modifies",{"_index":2055,"title":{},"body":{"license.html":{}}}],["modify",{"_index":1739,"title":{},"body":{"license.html":{}}}],["modifying",{"_index":1862,"title":{},"body":{"license.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/EmailModule.html":{},"modules/HomeModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/EmailModule.html":{},"modules/HomeModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/EmailModule.html":{},"modules/HomeModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{},"modules.html":{},"overview.html":{}}}],["mongo",{"_index":1577,"title":{},"body":{"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["mongodb://${mongodb_host}/${mongodb_name",{"_index":2552,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongodb_host",{"_index":1523,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mongodb_name",{"_index":1524,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mongoerror",{"_index":912,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["mongooptions",{"_index":2569,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongoose",{"_index":119,"title":{},"body":{"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Personality.html":{},"injectables/PersonalityService.html":{},"classes/Source.html":{},"injectables/SourceService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["mongoose.document",{"_index":126,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/Personality.html":{},"classes/Source.html":{}}}],["mongoose.types.objectid",{"_index":136,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/Source.html":{}}}],["mongoose.types.objectid(query.personality",{"_index":253,"title":{},"body":{"controllers/ClaimController.html":{}}}],["mongoose.types.objectid(req.params.id",{"_index":1211,"title":{},"body":{"controllers/UsersController.html":{}}}],["mongoosemodule",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/PersonalityModule.html":{},"modules/SourceModule.html":{},"modules/UsersModule.html":{},"modules/WikidataModule.html":{}}}],["mongoosemodule.forfeature",{"_index":374,"title":{},"body":{"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/PersonalityModule.html":{},"modules/SourceModule.html":{},"miscellaneous/variables.html":{}}}],["mongoosemodule.forfeatureasync",{"_index":1229,"title":{},"body":{"modules/UsersModule.html":{},"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["mongoosemodule.forroot",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["mongostore",{"_index":1525,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mongostore.create",{"_index":2567,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongourl",{"_index":2568,"title":{},"body":{"miscellaneous/variables.html":{}}}],["more",{"_index":2101,"title":{},"body":{"license.html":{}}}],["moreover",{"_index":2277,"title":{},"body":{"license.html":{}}}],["mr|mrs|ms|dr|he\\s|she\\s|it\\s|they\\s|their\\s|our\\s|we\\s|but\\s|however\\s|that\\s|this\\s|wherever)/g",{"_index":818,"title":{},"body":{"injectables/ParserService.html":{}}}],["mr|st|mrs|ms|dr)[.]/g",{"_index":812,"title":{},"body":{"injectables/ParserService.html":{},"miscellaneous/variables.html":{}}}],["name",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HomeController.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"injectables/StatsService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"controllers/WikidataController.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["names",{"_index":2232,"title":{},"body":{"license.html":{}}}],["nature",{"_index":2070,"title":{},"body":{"license.html":{}}}],["ndisallow",{"_index":1067,"title":{},"body":{"controllers/RootController.html":{}}}],["necessary",{"_index":2435,"title":{},"body":{"license.html":{}}}],["need",{"_index":1730,"title":{},"body":{"license.html":{}}}],["needed",{"_index":1803,"title":{},"body":{"license.html":{}}}],["nestfactory.create",{"_index":2557,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nestjs/axios",{"_index":225,"title":{},"body":{"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"controllers/WikidataController.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1556,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mongoose",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"classes/Claim.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Personality.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"classes/Source.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":83,"title":{},"body":{"modules/AuthModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1559,"title":{},"body":{"dependencies.html":{}}}],["network",{"_index":1876,"title":{},"body":{"license.html":{}}}],["new",{"_index":237,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"injectables/SourceService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["newarray",{"_index":1283,"title":{},"body":{"injectables/UtilService.html":{}}}],["newarray.get(propertyvalue",{"_index":1291,"title":{},"body":{"injectables/UtilService.html":{}}}],["newarray.has(propertyvalue",{"_index":1288,"title":{},"body":{"injectables/UtilService.html":{}}}],["newarray.set(propertyvalue",{"_index":1289,"title":{},"body":{"injectables/UtilService.html":{}}}],["newclaim",{"_index":621,"title":{},"body":{"injectables/ClaimService.html":{}}}],["newclaimreview",{"_index":548,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["newpassword",{"_index":1201,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["newpassword).then",{"_index":1251,"title":{},"body":{"injectables/UsersService.html":{}}}],["newpersonality",{"_index":1000,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["newpersonality.save",{"_index":1003,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["news",{"_index":1642,"title":{},"body":{"index.html":{}}}],["newsentences",{"_index":841,"title":{},"body":{"injectables/ParserService.html":{}}}],["newsentences.concat(semicolonsentences",{"_index":855,"title":{},"body":{"injectables/ParserService.html":{}}}],["newwikidatacache",{"_index":1427,"title":{},"body":{"injectables/WikidataService.html":{}}}],["newwikidatacache.save",{"_index":1429,"title":{},"body":{"injectables/WikidataService.html":{}}}],["next",{"_index":285,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/PersonalityService.html":{},"injectables/ViewService.html":{},"dependencies.html":{},"license.html":{}}}],["next/dist/server/next",{"_index":1348,"title":{},"body":{"injectables/ViewService.html":{}}}],["nextserver",{"_index":1343,"title":{},"body":{"injectables/ViewService.html":{}}}],["nlp",{"_index":801,"title":{},"body":{"injectables/ParserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["nlp(content",{"_index":829,"title":{},"body":{"injectables/ParserService.html":{}}}],["nlp.extend(require('compromise",{"_index":803,"title":{},"body":{"injectables/ParserService.html":{}}}],["nlpcontent",{"_index":828,"title":{},"body":{"injectables/ParserService.html":{}}}],["nlpcontent.paragraphs",{"_index":830,"title":{},"body":{"injectables/ParserService.html":{}}}],["nlpcontent.text(this.nlpoptions",{"_index":840,"title":{},"body":{"injectables/ParserService.html":{}}}],["nlpoptions",{"_index":776,"title":{},"body":{"injectables/ParserService.html":{}}}],["nodemailer",{"_index":660,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["nodemailer.createtransport",{"_index":678,"title":{},"body":{"injectables/EmailService.html":{}}}],["non",{"_index":1819,"title":{},"body":{"license.html":{}}}],["noncommercially",{"_index":2107,"title":{},"body":{"license.html":{}}}],["normal",{"_index":1918,"title":{},"body":{"license.html":{}}}],["normally",{"_index":2144,"title":{},"body":{"license.html":{}}}],["nothing",{"_index":2290,"title":{},"body":{"license.html":{}}}],["notice",{"_index":1888,"title":{},"body":{"license.html":{}}}],["notices",{"_index":1882,"title":{},"body":{"license.html":{}}}],["notifies",{"_index":2278,"title":{},"body":{"license.html":{}}}],["notify",{"_index":2272,"title":{},"body":{"license.html":{}}}],["notwithstanding",{"_index":2214,"title":{},"body":{"license.html":{}}}],["null",{"_index":2599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number",{"_index":565,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/ParserService.html":{},"license.html":{}}}],["numbered",{"_index":2414,"title":{},"body":{"license.html":{}}}],["o",{"_index":2618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object",{"_index":99,"title":{},"body":{"classes/Claim.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"classes/WikidataCache.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["object.assign(parsedurl.query",{"_index":352,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["object.assign(personality",{"_index":1023,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["object.assign(sentence.props",{"_index":633,"title":{},"body":{"injectables/ClaimService.html":{}}}],["object.keys(state).reduce",{"_index":534,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["objectid",{"_index":541,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["objects",{"_index":1271,"title":{},"body":{"injectables/UtilService.html":{}}}],["obligate",{"_index":2396,"title":{},"body":{"license.html":{}}}],["obligated",{"_index":2124,"title":{},"body":{"license.html":{}}}],["obligations",{"_index":2009,"title":{},"body":{"license.html":{}}}],["occasionally",{"_index":2106,"title":{},"body":{"license.html":{}}}],["occurring",{"_index":2287,"title":{},"body":{"license.html":{}}}],["occurs",{"_index":1787,"title":{},"body":{"license.html":{}}}],["offer",{"_index":1757,"title":{},"body":{"license.html":{}}}],["offered",{"_index":2134,"title":{},"body":{"license.html":{}}}],["offering",{"_index":2110,"title":{},"body":{"license.html":{}}}],["official",{"_index":1903,"title":{},"body":{"license.html":{}}}],["ok",{"_index":1070,"title":{},"body":{"controllers/RootController.html":{}}}],["one",{"_index":1909,"title":{},"body":{"license.html":{}}}],["onmodel",{"_index":1095,"title":{},"body":{"classes/Source.html":{}}}],["onmoduleinit",{"_index":1340,"title":{},"body":{"injectables/ViewService.html":{}}}],["operate",{"_index":2453,"title":{},"body":{"license.html":{}}}],["operated",{"_index":2115,"title":{},"body":{"license.html":{}}}],["operating",{"_index":1931,"title":{},"body":{"license.html":{}}}],["operation",{"_index":2030,"title":{},"body":{"license.html":{}}}],["option",{"_index":510,"title":{},"body":{"injectables/ClaimReviewService.html":{},"license.html":{}}}],["optional",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HomeController.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"injectables/SourceService.html":{},"injectables/StatsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"controllers/WikidataController.html":{},"injectables/WikidataService.html":{}}}],["options",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailService.html":{},"injectables/PersonalityService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["options.config",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["options.config.interface",{"_index":2580,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.config.port",{"_index":2581,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.db",{"_index":2550,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.db.connection_uri",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["options.db.options",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["options.logger.log",{"_index":2575,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.logger.log(\"error",{"_index":2626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.logger.log(\"info",{"_index":2586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.name",{"_index":2576,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options?.config?.cors",{"_index":2544,"title":{},"body":{"miscellaneous/variables.html":{}}}],["optionstoupdate",{"_index":554,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["order",{"_index":260,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"license.html":{}}}],["organization",{"_index":2304,"title":{},"body":{"license.html":{}}}],["organizations",{"_index":1838,"title":{},"body":{"license.html":{}}}],["origin",{"_index":1487,"title":{},"body":{"injectables/WikidataService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["original",{"_index":2230,"title":{},"body":{"license.html":{}}}],["others",{"_index":1732,"title":{},"body":{"license.html":{}}}],["otherwise",{"_index":1979,"title":{},"body":{"license.html":{}}}],["out",{"_index":79,"title":{},"body":{"modules/AuthModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/EmailModule.html":{},"modules/HomeModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{},"license.html":{},"overview.html":{}}}],["output",{"_index":1971,"title":{},"body":{"license.html":{}}}],["outside",{"_index":1992,"title":{},"body":{"license.html":{}}}],["overview",{"_index":2519,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owned",{"_index":2329,"title":{},"body":{"license.html":{}}}],["p.content.foreach((sentence",{"_index":326,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{}}}],["p.content.length",{"_index":625,"title":{},"body":{"injectables/ClaimService.html":{}}}],["package",{"_index":1540,"title":{"dependencies.html":{}},"body":{}}],["packaged",{"_index":2062,"title":{},"body":{"license.html":{}}}],["packages:yarn",{"_index":1658,"title":{},"body":{"index.html":{}}}],["packaging",{"_index":1919,"title":{},"body":{"license.html":{}}}],["page",{"_index":256,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["pages",{"_index":1503,"title":{},"body":{"injectables/WikidataService.html":{}}}],["pages.length",{"_index":1505,"title":{},"body":{"injectables/WikidataService.html":{}}}],["pagesize",{"_index":258,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"controllers/HomeController.html":{},"injectables/PersonalityService.html":{}}}],["paper",{"_index":2489,"title":{},"body":{"license.html":{}}}],["paragraph",{"_index":837,"title":{},"body":{"injectables/ParserService.html":{},"license.html":{}}}],["paragraph.content.foreach((sentence",{"_index":628,"title":{},"body":{"injectables/ClaimService.html":{}}}],["paragraphid",{"_index":832,"title":{},"body":{"injectables/ParserService.html":{}}}],["paragraphs",{"_index":804,"title":{},"body":{"injectables/ParserService.html":{},"dependencies.html":{},"license.html":{}}}],["paragraphs.foreach((paragraph",{"_index":831,"title":{},"body":{"injectables/ParserService.html":{}}}],["paragraphsequence",{"_index":777,"title":{},"body":{"injectables/ParserService.html":{}}}],["param",{"_index":213,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/PersonalityController.html":{},"injectables/UtilService.html":{},"controllers/WikidataController.html":{}}}],["parameters",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HomeController.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"injectables/SourceService.html":{},"injectables/StatsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"controllers/WikidataController.html":{},"injectables/WikidataService.html":{}}}],["params",{"_index":190,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/PersonalityController.html":{},"controllers/WikidataController.html":{},"injectables/WikidataService.html":{}}}],["params.language",{"_index":1424,"title":{},"body":{"injectables/WikidataService.html":{}}}],["params.wikidataid",{"_index":1423,"title":{},"body":{"injectables/WikidataService.html":{}}}],["parse",{"_index":229,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["parse(content",{"_index":785,"title":{},"body":{"injectables/ParserService.html":{}}}],["parse(req.url",{"_index":339,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["parsedurl",{"_index":338,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["parsedurl.pathname",{"_index":1320,"title":{},"body":{"controllers/ViewController.html":{}}}],["parsedurl.query",{"_index":1321,"title":{},"body":{"controllers/ViewController.html":{}}}],["parseint(page",{"_index":516,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["parseint(pagesize",{"_index":265,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/PersonalityService.html":{}}}],["parser",{"_index":1567,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["parser.service",{"_index":774,"title":{},"body":{"modules/ParserModule.html":{}}}],["parser/parser.module",{"_index":371,"title":{},"body":{"modules/ClaimModule.html":{}}}],["parser/parser.service",{"_index":594,"title":{},"body":{"injectables/ClaimService.html":{}}}],["parsermodule",{"_index":366,"title":{"modules/ParserModule.html":{}},"body":{"modules/ClaimModule.html":{},"modules/ParserModule.html":{},"modules.html":{},"overview.html":{}}}],["parserservice",{"_index":561,"title":{"injectables/ParserService.html":{}},"body":{"injectables/ClaimService.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"coverage.html":{},"overview.html":{}}}],["parsesentence",{"_index":781,"title":{},"body":{"injectables/ParserService.html":{}}}],["parsesentence(sentencecontent",{"_index":787,"title":{},"body":{"injectables/ParserService.html":{}}}],["part",{"_index":1840,"title":{},"body":{"license.html":{}}}],["particular",{"_index":1907,"title":{},"body":{"license.html":{}}}],["parties",{"_index":1872,"title":{},"body":{"license.html":{}}}],["parts",{"_index":1958,"title":{},"body":{"license.html":{}}}],["party",{"_index":2116,"title":{},"body":{"license.html":{}}}],["party's",{"_index":2308,"title":{},"body":{"license.html":{}}}],["pass",{"_index":687,"title":{},"body":{"injectables/EmailService.html":{},"license.html":{}}}],["passport",{"_index":726,"title":{},"body":{"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passport.deserializeuser(this.usermodel.deserializeuser",{"_index":730,"title":{},"body":{"injectables/LocalSerializer.html":{}}}],["passport.serializeuser(this.usermodel.serializeuser",{"_index":729,"title":{},"body":{"injectables/LocalSerializer.html":{}}}],["passportmodule",{"_index":82,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":86,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":735,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":736,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["password",{"_index":1207,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["patent",{"_index":2262,"title":{},"body":{"license.html":{}}}],["patents",{"_index":1807,"title":{},"body":{"license.html":{}}}],["path",{"_index":666,"title":{},"body":{"injectables/EmailService.html":{},"injectables/PersonalityService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["pattern",{"_index":1785,"title":{},"body":{"license.html":{}}}],["payment",{"_index":2377,"title":{},"body":{"license.html":{}}}],["peer",{"_index":2129,"title":{},"body":{"license.html":{}}}],["peers",{"_index":2132,"title":{},"body":{"license.html":{}}}],["percentage",{"_index":1278,"title":{},"body":{"injectables/UtilService.html":{}}}],["percentage.tofixed(0",{"_index":1280,"title":{},"body":{"injectables/UtilService.html":{}}}],["performance",{"_index":2431,"title":{},"body":{"license.html":{}}}],["performing",{"_index":1944,"title":{},"body":{"license.html":{}}}],["permanently",{"_index":2270,"title":{},"body":{"license.html":{}}}],["permission",{"_index":1760,"title":{},"body":{"license.html":{}}}],["permissions",{"_index":1962,"title":{},"body":{"license.html":{}}}],["permissive",{"_index":2042,"title":{},"body":{"license.html":{}}}],["permit",{"_index":2079,"title":{},"body":{"license.html":{}}}],["permits",{"_index":2252,"title":{},"body":{"license.html":{}}}],["permitted",{"_index":1687,"title":{},"body":{"license.html":{}}}],["perpetuity",{"_index":2185,"title":{},"body":{"license.html":{}}}],["personal",{"_index":2143,"title":{},"body":{"license.html":{}}}],["personalidades",{"_index":1638,"title":{},"body":{"index.html":{}}}],["personalities",{"_index":706,"title":{},"body":{"controllers/HomeController.html":{},"injectables/PersonalityService.html":{},"injectables/StatsService.html":{}}}],["personalities.map(async",{"_index":996,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["personality",{"_index":95,"title":{"classes/Personality.html":{}},"body":{"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"injectables/WikidataService.html":{},"coverage.html":{}}}],["personality._id",{"_index":346,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/PersonalityService.html":{}}}],["personality.claims",{"_index":1025,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["personality.controller",{"_index":950,"title":{},"body":{"modules/PersonalityModule.html":{}}}],["personality.name",{"_index":952,"title":{},"body":{"modules/PersonalityModule.html":{},"miscellaneous/variables.html":{}}}],["personality.service",{"_index":904,"title":{},"body":{"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{}}}],["personality.slug",{"_index":998,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["personality.wikidata",{"_index":1018,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["personality/personality.module",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/HomeModule.html":{},"modules/StatsModule.html":{}}}],["personality/personality.service",{"_index":232,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"injectables/StatsService.html":{}}}],["personality/schemas/personality.schema",{"_index":120,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{}}}],["personalitybody",{"_index":982,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["personalityclaimpage",{"_index":163,"title":{},"body":{"controllers/ClaimController.html":{}}}],["personalityclaimpage(@req",{"_index":359,"title":{},"body":{"controllers/ClaimController.html":{}}}],["personalityclaimpage(req",{"_index":206,"title":{},"body":{"controllers/ClaimController.html":{}}}],["personalitycontroller",{"_index":875,"title":{"controllers/PersonalityController.html":{}},"body":{"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"coverage.html":{}}}],["personalitycreatesearch",{"_index":878,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["personalitycreatesearch(@req",{"_index":937,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["personalitycreatesearch(req",{"_index":892,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["personalitydocument",{"_index":869,"title":{},"body":{"classes/Personality.html":{},"injectables/PersonalityService.html":{},"miscellaneous/typealiases.html":{}}}],["personalityid",{"_index":579,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["personalitylist",{"_index":879,"title":{},"body":{"controllers/PersonalityController.html":{},"controllers/UsersController.html":{}}}],["personalitylist(@req",{"_index":942,"title":{},"body":{"controllers/PersonalityController.html":{},"controllers/UsersController.html":{}}}],["personalitylist(req",{"_index":895,"title":{},"body":{"controllers/PersonalityController.html":{},"controllers/UsersController.html":{}}}],["personalitymodel",{"_index":951,"title":{},"body":{"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["personalitymodule",{"_index":30,"title":{"modules/PersonalityModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/HomeModule.html":{},"modules/PersonalityModule.html":{},"modules/StatsModule.html":{},"modules.html":{},"overview.html":{}}}],["personalitypage",{"_index":880,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["personalitypage(@req",{"_index":940,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["personalitypage(req",{"_index":898,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["personalityschema",{"_index":874,"title":{},"body":{"classes/Personality.html":{},"modules/PersonalityModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["personalityschemaraw",{"_index":871,"title":{},"body":{"classes/Personality.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["personalityschemaraw.virtual('claims",{"_index":873,"title":{},"body":{"classes/Personality.html":{}}}],["personalityservice",{"_index":231,"title":{"injectables/PersonalityService.html":{}},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"injectables/StatsService.html":{},"coverage.html":{},"overview.html":{}}}],["personalityslug",{"_index":336,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/PersonalityService.html":{}}}],["personalityupdate",{"_index":1035,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["pertinent",{"_index":2394,"title":{},"body":{"license.html":{}}}],["ph\\.d\\./g",{"_index":814,"title":{},"body":{"injectables/ParserService.html":{},"miscellaneous/variables.html":{}}}],["phdregex",{"_index":813,"title":{},"body":{"injectables/ParserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["physical",{"_index":2088,"title":{},"body":{"license.html":{}}}],["physically",{"_index":2104,"title":{},"body":{"license.html":{}}}],["pid",{"_index":2577,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pieces",{"_index":1725,"title":{},"body":{"license.html":{}}}],["place",{"_index":2112,"title":{},"body":{"license.html":{}}}],["plain",{"_index":1268,"title":{},"body":{"injectables/UtilService.html":{}}}],["plaintext",{"_index":1486,"title":{},"body":{"injectables/WikidataService.html":{}}}],["plataforma",{"_index":1634,"title":{},"body":{"index.html":{}}}],["please",{"_index":2513,"title":{},"body":{"license.html":{}}}],["plugin",{"_index":1564,"title":{},"body":{"dependencies.html":{}}}],["plus",{"_index":2311,"title":{},"body":{"license.html":{}}}],["poder",{"_index":2616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pointer",{"_index":2480,"title":{},"body":{"license.html":{}}}],["policy",{"_index":1315,"title":{},"body":{"controllers/ViewController.html":{}}}],["populate",{"_index":526,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/PersonalityService.html":{}}}],["populates",{"_index":521,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["port",{"_index":681,"title":{},"body":{"injectables/EmailService.html":{}}}],["portion",{"_index":2137,"title":{},"body":{"license.html":{}}}],["possesses",{"_index":2100,"title":{},"body":{"license.html":{}}}],["possession",{"_index":2059,"title":{},"body":{"license.html":{}}}],["possibility",{"_index":2456,"title":{},"body":{"license.html":{}}}],["possible",{"_index":2472,"title":{},"body":{"license.html":{}}}],["post",{"_index":214,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{}}}],["post(\"api/claim",{"_index":277,"title":{},"body":{"controllers/ClaimController.html":{}}}],["post(\"api/personality",{"_index":908,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["post(\"api/user/signin",{"_index":1194,"title":{},"body":{"controllers/UsersController.html":{}}}],["postprocess",{"_index":558,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["postprocess(claim",{"_index":582,"title":{},"body":{"injectables/ClaimService.html":{}}}],["postprocess(personality",{"_index":979,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["postprocesssentences",{"_index":782,"title":{},"body":{"injectables/ParserService.html":{}}}],["postprocesssentences(sentences",{"_index":792,"title":{},"body":{"injectables/ParserService.html":{}}}],["power",{"_index":2023,"title":{},"body":{"license.html":{}}}],["practical",{"_index":1698,"title":{},"body":{"license.html":{}}}],["practice",{"_index":1794,"title":{},"body":{"license.html":{}}}],["preamble",{"_index":1693,"title":{},"body":{"license.html":{}}}],["precise",{"_index":1820,"title":{},"body":{"license.html":{}}}],["precisely",{"_index":1791,"title":{},"body":{"license.html":{}}}],["predecessor",{"_index":2309,"title":{},"body":{"license.html":{}}}],["preferred",{"_index":1899,"title":{},"body":{"license.html":{}}}],["prefix",{"_index":407,"title":{},"body":{"controllers/ClaimReviewController.html":{},"controllers/HomeController.html":{},"controllers/RootController.html":{},"controllers/StatsController.html":{},"controllers/ViewController.html":{},"controllers/WikidataController.html":{}}}],["prefixes",{"_index":811,"title":{},"body":{"injectables/ParserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["present",{"_index":2407,"title":{},"body":{"license.html":{}}}],["presents",{"_index":1893,"title":{},"body":{"license.html":{}}}],["preservation",{"_index":2224,"title":{},"body":{"license.html":{}}}],["prevent",{"_index":1731,"title":{},"body":{"license.html":{}}}],["prevented",{"_index":2178,"title":{},"body":{"license.html":{}}}],["preview",{"_index":1551,"title":{},"body":{"dependencies.html":{}}}],["previous",{"_index":1774,"title":{},"body":{"license.html":{}}}],["price",{"_index":1720,"title":{},"body":{"license.html":{}}}],["primarily",{"_index":2379,"title":{},"body":{"license.html":{}}}],["prior",{"_index":2273,"title":{},"body":{"license.html":{}}}],["privacy",{"_index":1327,"title":{},"body":{"controllers/ViewController.html":{}}}],["private",{"_index":235,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HomeController.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{},"license.html":{}}}],["problems",{"_index":1771,"title":{},"body":{"license.html":{}}}],["procedures",{"_index":2171,"title":{},"body":{"license.html":{}}}],["process.env.development_password",{"_index":2602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.environment",{"_index":1351,"title":{},"body":{"injectables/ViewService.html":{}}}],["process.env.mongodb_host",{"_index":2582,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.mongodb_name",{"_index":2584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.pid",{"_index":2578,"title":{},"body":{"miscellaneous/variables.html":{}}}],["procuring",{"_index":2366,"title":{},"body":{"license.html":{}}}],["produce",{"_index":1934,"title":{},"body":{"license.html":{}}}],["product",{"_index":2089,"title":{},"body":{"license.html":{}}}],["production",{"_index":1668,"title":{},"body":{"index.html":{}}}],["products",{"_index":1789,"title":{},"body":{"license.html":{}}}],["profile",{"_index":1171,"title":{},"body":{"controllers/UsersController.html":{}}}],["profile(@req",{"_index":1221,"title":{},"body":{"controllers/UsersController.html":{}}}],["profile(req",{"_index":1183,"title":{},"body":{"controllers/UsersController.html":{}}}],["program",{"_index":1707,"title":{},"body":{"license.html":{}}}],["program's",{"_index":2034,"title":{},"body":{"license.html":{}}}],["programmer",{"_index":2502,"title":{},"body":{"license.html":{}}}],["programming",{"_index":1908,"title":{},"body":{"license.html":{}}}],["programs",{"_index":1717,"title":{},"body":{"license.html":{}}}],["prohibit",{"_index":1793,"title":{},"body":{"license.html":{}}}],["prohibiting",{"_index":2019,"title":{},"body":{"license.html":{}}}],["prohibits",{"_index":2373,"title":{},"body":{"license.html":{}}}],["project",{"_index":529,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["prominent",{"_index":1896,"title":{},"body":{"license.html":{}}}],["prominently",{"_index":1885,"title":{},"body":{"license.html":{}}}],["promise",{"_index":1078,"title":{},"body":{"guards/SessionGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ViewService.html":{},"controllers/WikidataController.html":{},"injectables/WikidataService.html":{}}}],["promise.all",{"_index":263,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/StatsService.html":{},"miscellaneous/variables.html":{}}}],["promise.resolve(undefined",{"_index":512,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["prop",{"_index":116,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/Personality.html":{},"classes/Source.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{}}}],["prop({default",{"_index":1359,"title":{},"body":{"classes/WikidataCache.html":{}}}],["prop({required",{"_index":104,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/Personality.html":{},"classes/Source.html":{},"classes/User.html":{},"classes/WikidataCache.html":{}}}],["prop({type",{"_index":101,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/Source.html":{},"classes/WikidataCache.html":{}}}],["prop({unique",{"_index":866,"title":{},"body":{"classes/Personality.html":{}}}],["prop({validate",{"_index":1090,"title":{},"body":{"classes/Source.html":{}}}],["propagate",{"_index":1851,"title":{},"body":{"license.html":{}}}],["propagating",{"_index":2294,"title":{},"body":{"license.html":{}}}],["propagation",{"_index":1863,"title":{},"body":{"license.html":{}}}],["properties",{"_index":92,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"classes/Logger.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"injectables/PersonalityService.html":{},"classes/Source.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{}}}],["property",{"_index":1020,"title":{},"body":{"injectables/PersonalityService.html":{},"injectables/UtilService.html":{},"injectables/WikidataService.html":{},"license.html":{}}}],["propertyvalue",{"_index":1286,"title":{},"body":{"injectables/UtilService.html":{}}}],["proprietary",{"_index":1816,"title":{},"body":{"license.html":{}}}],["props",{"_index":790,"title":{},"body":{"injectables/ParserService.html":{},"classes/WikidataCache.html":{},"controllers/WikidataController.html":{},"injectables/WikidataService.html":{}}}],["protect",{"_index":1728,"title":{},"body":{"license.html":{}}}],["protecting",{"_index":1783,"title":{},"body":{"license.html":{}}}],["protection",{"_index":1762,"title":{},"body":{"license.html":{}}}],["protocols",{"_index":2200,"title":{},"body":{"license.html":{}}}],["prove",{"_index":2432,"title":{},"body":{"license.html":{}}}],["provide",{"_index":1984,"title":{},"body":{"license.html":{}}}],["provided",{"_index":1891,"title":{},"body":{"license.html":{}}}],["providers",{"_index":81,"title":{},"body":{"modules/AuthModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/EmailModule.html":{},"modules/HomeModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{}}}],["provision",{"_index":1802,"title":{},"body":{"license.html":{}}}],["provisionally",{"_index":2267,"title":{},"body":{"license.html":{}}}],["proxy",{"_index":2419,"title":{},"body":{"license.html":{}}}],["proxy's",{"_index":2421,"title":{},"body":{"license.html":{}}}],["pt",{"_index":1419,"title":{},"body":{"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["public",{"_index":154,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["publicity",{"_index":2231,"title":{},"body":{"license.html":{}}}],["publicly",{"_index":2201,"title":{},"body":{"license.html":{}}}],["publish",{"_index":2038,"title":{},"body":{"license.html":{}}}],["published",{"_index":2416,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":1810,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":2147,"title":{},"body":{"license.html":{}}}],["pursuant",{"_index":2362,"title":{},"body":{"license.html":{}}}],["push",{"_index":573,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["put",{"_index":215,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{}}}],["put(\"api/claim/:id",{"_index":294,"title":{},"body":{"controllers/ClaimController.html":{}}}],["put(\"api/personality/:id",{"_index":925,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["put(\"api/user/:id/password",{"_index":1198,"title":{},"body":{"controllers/UsersController.html":{}}}],["públicas",{"_index":1639,"title":{},"body":{"index.html":{}}}],["q5",{"_index":1460,"title":{},"body":{"injectables/WikidataService.html":{}}}],["qs",{"_index":221,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["qs.stringify",{"_index":246,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["qualify",{"_index":2284,"title":{},"body":{"license.html":{}}}],["quality",{"_index":2430,"title":{},"body":{"license.html":{}}}],["query",{"_index":177,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/WikidataController.html":{},"injectables/WikidataService.html":{}}}],["query.language",{"_index":922,"title":{},"body":{"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["query.name",{"_index":1043,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["query.name.$regex",{"_index":994,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["query.personality",{"_index":249,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{}}}],["query.withsuggestions",{"_index":1047,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["queryinputs",{"_index":248,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/PersonalityService.html":{}}}],["queryinputs.name",{"_index":1044,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["queryinputs.personality",{"_index":252,"title":{},"body":{"controllers/ClaimController.html":{}}}],["querystring",{"_index":222,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["querywikibaseentities",{"_index":1397,"title":{},"body":{"injectables/WikidataService.html":{}}}],["querywikibaseentities(query",{"_index":1412,"title":{},"body":{"injectables/WikidataService.html":{}}}],["randombytes(8",{"_index":2601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["raw",{"_index":1622,"title":{},"body":{"dependencies.html":{}}}],["react",{"_index":1601,"title":{},"body":{"dependencies.html":{}}}],["read",{"_index":2514,"title":{},"body":{"license.html":{}}}],["readable",{"_index":2085,"title":{},"body":{"license.html":{}}}],["readily",{"_index":2349,"title":{},"body":{"license.html":{}}}],["reading",{"_index":2205,"title":{},"body":{"license.html":{}}}],["readonly",{"_index":236,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ViewService.html":{},"controllers/WikidataController.html":{}}}],["ready",{"_index":1800,"title":{},"body":{"license.html":{}}}],["reason",{"_index":2360,"title":{},"body":{"license.html":{}}}],["reasonable",{"_index":2102,"title":{},"body":{"license.html":{}}}],["recaptcha",{"_index":288,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"dependencies.html":{}}}],["recaptcha_api_url",{"_index":240,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["recaptcha_api_url}/siteverify",{"_index":245,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["recaptchacheck",{"_index":280,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["recaptchacheck.success",{"_index":283,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["receipt",{"_index":2282,"title":{},"body":{"license.html":{}}}],["receive",{"_index":1723,"title":{},"body":{"license.html":{}}}],["received",{"_index":1749,"title":{},"body":{"license.html":{}}}],["receives",{"_index":2299,"title":{},"body":{"license.html":{}}}],["receiving",{"_index":2368,"title":{},"body":{"license.html":{}}}],["recipient",{"_index":2184,"title":{},"body":{"license.html":{}}}],["recipient's",{"_index":2358,"title":{},"body":{"license.html":{}}}],["recipients",{"_index":1746,"title":{},"body":{"license.html":{}}}],["recognized",{"_index":1904,"title":{},"body":{"license.html":{}}}],["redistribute",{"_index":2475,"title":{},"body":{"license.html":{}}}],["redux",{"_index":1611,"title":{},"body":{"dependencies.html":{}}}],["ref",{"_index":107,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/Personality.html":{},"classes/Source.html":{}}}],["referring",{"_index":1719,"title":{},"body":{"license.html":{}}}],["refers",{"_index":1826,"title":{},"body":{"license.html":{}}}],["reflect",{"_index":1618,"title":{},"body":{"dependencies.html":{}}}],["refpath",{"_index":1094,"title":{},"body":{"classes/Source.html":{}}}],["refrain",{"_index":2398,"title":{},"body":{"license.html":{}}}],["regard",{"_index":2211,"title":{},"body":{"license.html":{}}}],["regardless",{"_index":2061,"title":{},"body":{"license.html":{}}}],["regenerate",{"_index":1959,"title":{},"body":{"license.html":{}}}],["regex",{"_index":805,"title":{},"body":{"injectables/ParserService.html":{},"injectables/PersonalityService.html":{}}}],["register",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"injectables/UsersService.html":{}}}],["register(options",{"_index":10,"title":{},"body":{"modules/AppModule.html":{}}}],["register(user",{"_index":1240,"title":{},"body":{"injectables/UsersService.html":{}}}],["rehype",{"_index":1621,"title":{},"body":{"dependencies.html":{}}}],["reinstated",{"_index":2266,"title":{},"body":{"license.html":{}}}],["relationship",{"_index":1993,"title":{},"body":{"license.html":{}}}],["released",{"_index":1713,"title":{},"body":{"license.html":{}}}],["relevant",{"_index":2053,"title":{},"body":{"license.html":{}}}],["reliable",{"_index":1105,"title":{},"body":{"classes/Source.html":{}}}],["relicensing",{"_index":2253,"title":{},"body":{"license.html":{}}}],["relying",{"_index":2348,"title":{},"body":{"license.html":{}}}],["remain",{"_index":2123,"title":{},"body":{"license.html":{}}}],["remains",{"_index":1710,"title":{},"body":{"license.html":{}}}],["removal",{"_index":2213,"title":{},"body":{"license.html":{}}}],["remove",{"_index":2212,"title":{},"body":{"license.html":{}}}],["render",{"_index":350,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"license.html":{}}}],["render(req",{"_index":1319,"title":{},"body":{"controllers/ViewController.html":{}}}],["rendered",{"_index":2448,"title":{},"body":{"license.html":{}}}],["repair",{"_index":2437,"title":{},"body":{"license.html":{}}}],["repeatednewpassword",{"_index":1202,"title":{},"body":{"controllers/UsersController.html":{}}}],["replace_me",{"_index":2563,"title":{},"body":{"miscellaneous/variables.html":{}}}],["replacement",{"_index":618,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["repo",{"_index":1645,"title":{},"body":{"index.html":{}}}],["report",{"_index":379,"title":{},"body":{"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{}}}],["represent",{"_index":2166,"title":{},"body":{"license.html":{}}}],["req",{"_index":172,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["req.body",{"_index":297,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/UsersController.html":{}}}],["req.body.recaptcha",{"_index":420,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["req.headers[\"accept",{"_index":341,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["req.language",{"_index":340,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["req.login(req.user",{"_index":1196,"title":{},"body":{"controllers/UsersController.html":{}}}],["req.params",{"_index":303,"title":{},"body":{"controllers/ClaimController.html":{}}}],["req.params.claimslug",{"_index":361,"title":{},"body":{"controllers/ClaimController.html":{}}}],["req.params.id",{"_index":1203,"title":{},"body":{"controllers/UsersController.html":{}}}],["req.params.personalityslug",{"_index":360,"title":{},"body":{"controllers/ClaimController.html":{}}}],["req.params.slug",{"_index":357,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{}}}],["req.query",{"_index":304,"title":{},"body":{"controllers/ClaimController.html":{}}}],["req.user",{"_index":316,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/UsersController.html":{}}}],["req.user._id.tostring",{"_index":1204,"title":{},"body":{"controllers/UsersController.html":{}}}],["req?.user?._id",{"_index":423,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["request",{"_index":179,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"guards/SessionGuard.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["request.isauthenticated",{"_index":1084,"title":{},"body":{"guards/SessionGuard.html":{}}}],["request.url.startswith(\"/api",{"_index":1085,"title":{},"body":{"guards/SessionGuard.html":{}}}],["requested",{"_index":2549,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requester.internalerror(res",{"_index":286,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["requestproperties",{"_index":1398,"title":{},"body":{"injectables/WikidataService.html":{}}}],["requestproperties(params",{"_index":1414,"title":{},"body":{"injectables/WikidataService.html":{}}}],["require",{"_index":1953,"title":{},"body":{"license.html":{}}}],["require(\"axios",{"_index":1417,"title":{},"body":{"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["require(\"connect",{"_index":2585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require(\"cookie",{"_index":2542,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require(\"fs",{"_index":665,"title":{},"body":{"injectables/EmailService.html":{},"miscellaneous/variables.html":{}}}],["require(\"handlebars",{"_index":663,"title":{},"body":{"injectables/EmailService.html":{},"miscellaneous/variables.html":{}}}],["require(\"md5",{"_index":800,"title":{},"body":{"injectables/ParserService.html":{},"miscellaneous/variables.html":{}}}],["require(\"nodemailer",{"_index":661,"title":{},"body":{"injectables/EmailService.html":{},"miscellaneous/variables.html":{}}}],["require(\"path",{"_index":667,"title":{},"body":{"injectables/EmailService.html":{},"miscellaneous/variables.html":{}}}],["require(\"service",{"_index":2639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('compromise",{"_index":802,"title":{},"body":{"injectables/ParserService.html":{},"miscellaneous/variables.html":{}}}],["required",{"_index":102,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/Personality.html":{},"classes/Source.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"classes/WikidataCache.html":{},"license.html":{}}}],["requirement",{"_index":2054,"title":{},"body":{"license.html":{}}}],["requirements",{"_index":2127,"title":{},"body":{"license.html":{}}}],["requires",{"_index":1768,"title":{},"body":{"license.html":{}}}],["requiring",{"_index":1842,"title":{},"body":{"license.html":{}}}],["res",{"_index":180,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/RootController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"controllers/WikidataController.html":{}}}],["res.send",{"_index":1197,"title":{},"body":{"controllers/UsersController.html":{},"controllers/WikidataController.html":{}}}],["res.status(200).json",{"_index":1212,"title":{},"body":{"controllers/UsersController.html":{}}}],["res.status(500).json",{"_index":1217,"title":{},"body":{"controllers/UsersController.html":{}}}],["res.type(\"text/plain\").end(\"user",{"_index":1065,"title":{},"body":{"controllers/RootController.html":{}}}],["resave",{"_index":2564,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reset",{"_index":78,"title":{},"body":{"modules/AuthModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/EmailModule.html":{},"modules/HomeModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{},"overview.html":{}}}],["resolved",{"_index":2154,"title":{},"body":{"license.html":{}}}],["resolver",{"_index":1012,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["respect",{"_index":1740,"title":{},"body":{"license.html":{}}}],["response",{"_index":166,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"guards/SessionGuard.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"controllers/WikidataController.html":{},"injectables/WikidataService.html":{}}}],["response.data",{"_index":1490,"title":{},"body":{"injectables/WikidataService.html":{}}}],["response.redirect(\"/login",{"_index":1086,"title":{},"body":{"guards/SessionGuard.html":{}}}],["responsibilities",{"_index":1738,"title":{},"body":{"license.html":{}}}],["responsible",{"_index":2300,"title":{},"body":{"license.html":{}}}],["restrict",{"_index":1809,"title":{},"body":{"license.html":{}}}],["restricting",{"_index":2020,"title":{},"body":{"license.html":{}}}],["restriction",{"_index":2251,"title":{},"body":{"license.html":{}}}],["restrictions",{"_index":2247,"title":{},"body":{"license.html":{}}}],["result",{"_index":827,"title":{},"body":{"injectables/ParserService.html":{},"injectables/UtilService.html":{},"license.html":{}}}],["result.push",{"_index":836,"title":{},"body":{"injectables/ParserService.html":{}}}],["result.slice(0",{"_index":1281,"title":{},"body":{"injectables/UtilService.html":{}}}],["resulting",{"_index":1845,"title":{},"body":{"license.html":{}}}],["results",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"classes/Source.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"controllers/WikidataController.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retains",{"_index":2188,"title":{},"body":{"license.html":{}}}],["return",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"classes/Source.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/ViewService.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HomeController.html":{},"classes/Logger.html":{},"injectables/ParserService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{},"controllers/WikidataController.html":{},"injectables/WikidataService.html":{}}}],["review",{"_index":351,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/UtilService.html":{}}}],["review._id",{"_index":631,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/UtilService.html":{}}}],["review.controller",{"_index":436,"title":{},"body":{"modules/ClaimReviewModule.html":{}}}],["review.controller.ts",{"_index":406,"title":{},"body":{"controllers/ClaimReviewController.html":{},"coverage.html":{}}}],["review.controller.ts:16",{"_index":409,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["review.controller.ts:31",{"_index":412,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["review.controller.ts:54",{"_index":417,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["review.controller.ts:60",{"_index":414,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["review.count",{"_index":1276,"title":{},"body":{"injectables/UtilService.html":{}}}],["review.module",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/PersonalityModule.html":{},"modules/StatsModule.html":{}}}],["review.module.ts",{"_index":434,"title":{},"body":{"modules/ClaimReviewModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["review.schema",{"_index":123,"title":{},"body":{"classes/Claim.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{}}}],["review.schema.ts",{"_index":377,"title":{},"body":{"classes/ClaimReview.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["review.schema.ts:33",{"_index":383,"title":{},"body":{"classes/ClaimReview.html":{}}}],["review.schema.ts:40",{"_index":382,"title":{},"body":{"classes/ClaimReview.html":{}}}],["review.schema.ts:47",{"_index":384,"title":{},"body":{"classes/ClaimReview.html":{}}}],["review.schema.ts:50",{"_index":387,"title":{},"body":{"classes/ClaimReview.html":{}}}],["review.schema.ts:53",{"_index":386,"title":{},"body":{"classes/ClaimReview.html":{}}}],["review.schema.ts:56",{"_index":385,"title":{},"body":{"classes/ClaimReview.html":{}}}],["review.schema.ts:63",{"_index":388,"title":{},"body":{"classes/ClaimReview.html":{}}}],["review.service",{"_index":218,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/StatsService.html":{}}}],["review.service.ts",{"_index":442,"title":{},"body":{"injectables/ClaimReviewService.html":{},"coverage.html":{}}}],["review.service.ts:119",{"_index":459,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:13",{"_index":456,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:163",{"_index":480,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:187",{"_index":485,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:21",{"_index":471,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:210",{"_index":482,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:29",{"_index":474,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:33",{"_index":493,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:42",{"_index":491,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:51",{"_index":487,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:63",{"_index":496,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:78",{"_index":478,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:84",{"_index":489,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review.service.ts:94",{"_index":458,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["review/claim",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["review/schemas/claim",{"_index":122,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["reviewing",{"_index":2460,"title":{},"body":{"license.html":{}}}],["reviews",{"_index":312,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"injectables/StatsService.html":{},"injectables/UtilService.html":{}}}],["reviews.find((review",{"_index":630,"title":{},"body":{"injectables/ClaimService.html":{}}}],["reviews.length",{"_index":627,"title":{},"body":{"injectables/ClaimService.html":{}}}],["reviews.map((review",{"_index":1277,"title":{},"body":{"injectables/UtilService.html":{}}}],["reviews.reduce((agg",{"_index":1274,"title":{},"body":{"injectables/UtilService.html":{}}}],["revised",{"_index":2405,"title":{},"body":{"license.html":{}}}],["revision_id",{"_index":400,"title":{},"body":{"classes/ClaimReview.html":{}}}],["right",{"_index":2182,"title":{},"body":{"license.html":{}}}],["rights",{"_index":1729,"title":{},"body":{"license.html":{}}}],["risk",{"_index":2429,"title":{},"body":{"license.html":{}}}],["robots",{"_index":1055,"title":{},"body":{"controllers/RootController.html":{}}}],["robots(@res",{"_index":1064,"title":{},"body":{"controllers/RootController.html":{}}}],["robots(res",{"_index":1059,"title":{},"body":{"controllers/RootController.html":{}}}],["rom",{"_index":2191,"title":{},"body":{"license.html":{}}}],["root/root.controller",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["rootcontroller",{"_index":42,"title":{"controllers/RootController.html":{}},"body":{"modules/AppModule.html":{},"controllers/RootController.html":{},"coverage.html":{}}}],["royalty",{"_index":2315,"title":{},"body":{"license.html":{}}}],["rules",{"_index":807,"title":{},"body":{"injectables/ParserService.html":{},"license.html":{}}}],["run",{"_index":1659,"title":{},"body":{"index.html":{},"license.html":{}}}],["runner",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"injectables/PersonalityService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["running",{"_index":1972,"title":{},"body":{"license.html":{}}}],["runs",{"_index":1932,"title":{},"body":{"license.html":{}}}],["rxjs",{"_index":1624,"title":{},"body":{"dependencies.html":{}}}],["safest",{"_index":2477,"title":{},"body":{"license.html":{}}}],["sake",{"_index":1767,"title":{},"body":{"license.html":{}}}],["sale",{"_index":2324,"title":{},"body":{"license.html":{}}}],["same",{"_index":1747,"title":{},"body":{"license.html":{}}}],["satisfy",{"_index":2126,"title":{},"body":{"license.html":{}}}],["saveuninitialized",{"_index":2565,"title":{},"body":{"miscellaneous/variables.html":{}}}],["saying",{"_index":2121,"title":{},"body":{"license.html":{}}}],["schema",{"_index":117,"title":{},"body":{"classes/Claim.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"modules/ClaimReviewModule.html":{},"classes/Personality.html":{},"modules/PersonalityModule.html":{},"classes/Source.html":{},"modules/SourceModule.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"modules/UsersModule.html":{},"classes/WikidataCache.html":{},"miscellaneous/variables.html":{}}}],["schema.plugin(require(\"passport",{"_index":1232,"title":{},"body":{"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["schemafactory",{"_index":118,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/Personality.html":{},"classes/Source.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"classes/WikidataCache.html":{}}}],["schemafactory.createforclass(claim",{"_index":139,"title":{},"body":{"classes/Claim.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(claimreview",{"_index":402,"title":{},"body":{"classes/ClaimReview.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(personality",{"_index":872,"title":{},"body":{"classes/Personality.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(source",{"_index":1109,"title":{},"body":{"classes/Source.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":1163,"title":{},"body":{"classes/User.html":{},"interfaces/UserDocument.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(wikidatacache",{"_index":1367,"title":{},"body":{"classes/WikidataCache.html":{},"miscellaneous/variables.html":{}}}],["schemas/claim",{"_index":435,"title":{},"body":{"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{}}}],["schemas/claim.schema",{"_index":369,"title":{},"body":{"modules/ClaimModule.html":{}}}],["schemas/personality.schema",{"_index":949,"title":{},"body":{"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{}}}],["schemas/source.schema",{"_index":1114,"title":{},"body":{"modules/SourceModule.html":{},"injectables/SourceService.html":{}}}],["schemas/user.schema",{"_index":1227,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["schemas/wikidata.schema",{"_index":1386,"title":{},"body":{"modules/WikidataModule.html":{},"injectables/WikidataService.html":{}}}],["school",{"_index":2503,"title":{},"body":{"license.html":{}}}],["scope",{"_index":2372,"title":{},"body":{"license.html":{}}}],["scripts",{"_index":1939,"title":{},"body":{"license.html":{}}}],["search",{"_index":938,"title":{},"body":{"controllers/PersonalityController.html":{},"injectables/WikidataService.html":{}}}],["search.map((wbentity",{"_index":1491,"title":{},"body":{"injectables/WikidataService.html":{}}}],["secondarily",{"_index":1855,"title":{},"body":{"license.html":{}}}],["secret",{"_index":168,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"miscellaneous/variables.html":{}}}],["section",{"_index":1998,"title":{},"body":{"license.html":{}}}],["sections",{"_index":2083,"title":{},"body":{"license.html":{}}}],["secure",{"_index":683,"title":{},"body":{"injectables/EmailService.html":{}}}],["see",{"_index":2485,"title":{},"body":{"license.html":{}}}],["seed",{"_index":2636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seedbuild",{"_index":1667,"title":{},"body":{"index.html":{}}}],["seeded",{"_index":2609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seeder",{"_index":1665,"title":{},"body":{"index.html":{}}}],["seeding",{"_index":2627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seedsingleuser",{"_index":2604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seedsingleuser(userdata",{"_index":2635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["select",{"_index":1006,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["sell",{"_index":2338,"title":{},"body":{"license.html":{}}}],["selling",{"_index":2323,"title":{},"body":{"license.html":{}}}],["semicolon",{"_index":846,"title":{},"body":{"injectables/ParserService.html":{}}}],["semicolonsentence",{"_index":851,"title":{},"body":{"injectables/ParserService.html":{}}}],["semicolonsentence.trim",{"_index":854,"title":{},"body":{"injectables/ParserService.html":{}}}],["semicolonsentences",{"_index":847,"title":{},"body":{"injectables/ParserService.html":{}}}],["semicolonsentences.length",{"_index":852,"title":{},"body":{"injectables/ParserService.html":{}}}],["semicolonsentences.map",{"_index":850,"title":{},"body":{"injectables/ParserService.html":{}}}],["semicolonsentence};`.trim",{"_index":853,"title":{},"body":{"injectables/ParserService.html":{}}}],["semiconductor",{"_index":1829,"title":{},"body":{"license.html":{}}}],["sendemail",{"_index":646,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendemail(to",{"_index":654,"title":{},"body":{"injectables/EmailService.html":{}}}],["sent",{"_index":2624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sentence",{"_index":313,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ParserService.html":{}}}],["sentence.props.topclassification",{"_index":626,"title":{},"body":{"injectables/ClaimService.html":{}}}],["sentence.props[\"data",{"_index":327,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{}}}],["sentence.text(this.nlpoptions",{"_index":844,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentence_content",{"_index":380,"title":{},"body":{"classes/ClaimReview.html":{}}}],["sentence_hash",{"_index":381,"title":{},"body":{"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{}}}],["sentencecontent",{"_index":789,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentencedatahash",{"_index":858,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentencehash",{"_index":174,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimReviewService.html":{}}}],["sentenceid",{"_index":856,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentenceindex",{"_index":629,"title":{},"body":{"injectables/ClaimService.html":{}}}],["sentenceobj",{"_index":324,"title":{},"body":{"controllers/ClaimController.html":{}}}],["sentences",{"_index":794,"title":{},"body":{"injectables/ParserService.html":{},"dependencies.html":{}}}],["sentences.foreach(sentence",{"_index":842,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentences.length",{"_index":835,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentences.map((sentence",{"_index":838,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentencesequence",{"_index":778,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentencetext",{"_index":843,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentencetext.includes",{"_index":849,"title":{},"body":{"injectables/ParserService.html":{}}}],["sentencetext.split",{"_index":848,"title":{},"body":{"injectables/ParserService.html":{}}}],["separable",{"_index":2136,"title":{},"body":{"license.html":{}}}],["separate",{"_index":2068,"title":{},"body":{"license.html":{}}}],["separately",{"_index":2065,"title":{},"body":{"license.html":{}}}],["serializefunctions",{"_index":511,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["server",{"_index":1339,"title":{},"body":{"injectables/ViewService.html":{},"license.html":{}}}],["server/.../claim",{"_index":2525,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/.../claim.module.ts",{"_index":2531,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../claim.schema.ts",{"_index":2524,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/.../email.service.ts",{"_index":2533,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../main.ts",{"_index":2532,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../parser.service.ts",{"_index":2535,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../personality.module.ts",{"_index":2536,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../personality.schema.ts",{"_index":2526,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/.../seed.ts",{"_index":2534,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../server.ts",{"_index":2537,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../source.module.ts",{"_index":2538,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../source.schema.ts",{"_index":2527,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/.../user.schema.ts",{"_index":2540,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../users.module.ts",{"_index":2539,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../wikidata.module.ts",{"_index":2541,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../wikidata.schema.ts",{"_index":2528,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/.../wikidata.service.ts",{"_index":2530,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/app.module.ts",{"_index":6,"title":{},"body":{"modules/AppModule.html":{}}}],["server/app.module.ts:19",{"_index":12,"title":{},"body":{"modules/AppModule.html":{}}}],["server/auth/auth.module.ts",{"_index":80,"title":{},"body":{"modules/AuthModule.html":{}}}],["server/auth/local",{"_index":717,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["server/auth/local.serializer.ts",{"_index":722,"title":{},"body":{"injectables/LocalSerializer.html":{},"coverage.html":{}}}],["server/auth/local.serializer.ts:8",{"_index":724,"title":{},"body":{"injectables/LocalSerializer.html":{}}}],["server/auth/local.strategy.ts",{"_index":731,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["server/auth/local.strategy.ts:9",{"_index":732,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["server/auth/session.guard.ts",{"_index":1073,"title":{},"body":{"guards/SessionGuard.html":{},"coverage.html":{}}}],["server/auth/session.guard.ts:8",{"_index":1077,"title":{},"body":{"guards/SessionGuard.html":{}}}],["server/claim",{"_index":376,"title":{},"body":{"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/claim/claim.controller.ts",{"_index":149,"title":{},"body":{"controllers/ClaimController.html":{},"coverage.html":{}}}],["server/claim/claim.controller.ts:110",{"_index":193,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:116",{"_index":211,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:122",{"_index":189,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:127",{"_index":202,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:158",{"_index":173,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:188",{"_index":199,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:194",{"_index":196,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:229",{"_index":182,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:254",{"_index":208,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:38",{"_index":167,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:50",{"_index":176,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:61",{"_index":205,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.controller.ts:91",{"_index":185,"title":{},"body":{"controllers/ClaimController.html":{}}}],["server/claim/claim.module.ts",{"_index":367,"title":{},"body":{"modules/ClaimModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/claim/claim.service.ts",{"_index":553,"title":{},"body":{"injectables/ClaimService.html":{},"coverage.html":{}}}],["server/claim/claim.service.ts:107",{"_index":578,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:12",{"_index":592,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:122",{"_index":583,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:13",{"_index":562,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:145",{"_index":564,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:164",{"_index":585,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:184",{"_index":574,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:28",{"_index":581,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:44",{"_index":567,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:48",{"_index":569,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:73",{"_index":589,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:91",{"_index":571,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/claim.service.ts:95",{"_index":576,"title":{},"body":{"injectables/ClaimService.html":{}}}],["server/claim/schemas/claim.schema.ts",{"_index":90,"title":{},"body":{"classes/Claim.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/claim/schemas/claim.schema.ts:12",{"_index":111,"title":{},"body":{"classes/Claim.html":{}}}],["server/claim/schemas/claim.schema.ts:15",{"_index":110,"title":{},"body":{"classes/Claim.html":{}}}],["server/claim/schemas/claim.schema.ts:18",{"_index":103,"title":{},"body":{"classes/Claim.html":{}}}],["server/claim/schemas/claim.schema.ts:29",{"_index":115,"title":{},"body":{"classes/Claim.html":{}}}],["server/claim/schemas/claim.schema.ts:32",{"_index":105,"title":{},"body":{"classes/Claim.html":{}}}],["server/claim/schemas/claim.schema.ts:39",{"_index":108,"title":{},"body":{"classes/Claim.html":{}}}],["server/email/email.module.ts",{"_index":641,"title":{},"body":{"modules/EmailModule.html":{}}}],["server/email/email.service.ts",{"_index":643,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/email/email.service.ts:10",{"_index":648,"title":{},"body":{"injectables/EmailService.html":{}}}],["server/email/email.service.ts:16",{"_index":652,"title":{},"body":{"injectables/EmailService.html":{}}}],["server/email/email.service.ts:27",{"_index":649,"title":{},"body":{"injectables/EmailService.html":{}}}],["server/email/email.service.ts:40",{"_index":658,"title":{},"body":{"injectables/EmailService.html":{}}}],["server/home/home.controller.ts",{"_index":697,"title":{},"body":{"controllers/HomeController.html":{},"coverage.html":{}}}],["server/home/home.controller.ts:17",{"_index":701,"title":{},"body":{"controllers/HomeController.html":{}}}],["server/home/home.module.ts",{"_index":714,"title":{},"body":{"modules/HomeModule.html":{}}}],["server/logger.ts",{"_index":741,"title":{},"body":{"classes/Logger.html":{},"coverage.html":{}}}],["server/logger.ts:13",{"_index":752,"title":{},"body":{"classes/Logger.html":{}}}],["server/logger.ts:17",{"_index":756,"title":{},"body":{"classes/Logger.html":{}}}],["server/logger.ts:21",{"_index":761,"title":{},"body":{"classes/Logger.html":{}}}],["server/logger.ts:25",{"_index":763,"title":{},"body":{"classes/Logger.html":{}}}],["server/logger.ts:4",{"_index":749,"title":{},"body":{"classes/Logger.html":{}}}],["server/logger.ts:9",{"_index":758,"title":{},"body":{"classes/Logger.html":{}}}],["server/main.ts",{"_index":1520,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/parser/parser.module.ts",{"_index":773,"title":{},"body":{"modules/ParserModule.html":{}}}],["server/parser/parser.service.ts",{"_index":775,"title":{},"body":{"injectables/ParserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/parser/parser.service.ts:18",{"_index":797,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/parser/parser.service.ts:19",{"_index":798,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/parser/parser.service.ts:20",{"_index":796,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/parser/parser.service.ts:22",{"_index":786,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/parser/parser.service.ts:50",{"_index":793,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/parser/parser.service.ts:70",{"_index":788,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/parser/parser.service.ts:86",{"_index":783,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/parser/parser.service.ts:91",{"_index":784,"title":{},"body":{"injectables/ParserService.html":{}}}],["server/personality/personality.controller.ts",{"_index":876,"title":{},"body":{"controllers/PersonalityController.html":{},"coverage.html":{}}}],["server/personality/personality.controller.ts:106",{"_index":900,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:127",{"_index":897,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:30",{"_index":891,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:36",{"_index":882,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:52",{"_index":886,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:62",{"_index":903,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:70",{"_index":884,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:80",{"_index":889,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.controller.ts:90",{"_index":894,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["server/personality/personality.module.ts",{"_index":948,"title":{},"body":{"modules/PersonalityModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/personality/personality.service.ts",{"_index":953,"title":{},"body":{"injectables/PersonalityService.html":{},"coverage.html":{}}}],["server/personality/personality.service.ts:118",{"_index":976,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:12",{"_index":987,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:127",{"_index":983,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:13",{"_index":988,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:146",{"_index":967,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:150",{"_index":963,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:154",{"_index":969,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:16",{"_index":960,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:164",{"_index":970,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:177",{"_index":985,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:186",{"_index":962,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:26",{"_index":978,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:56",{"_index":965,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:70",{"_index":972,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:81",{"_index":974,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/personality.service.ts:92",{"_index":980,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["server/personality/schemas/personality.schema.ts",{"_index":860,"title":{},"body":{"classes/Personality.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/personality/schemas/personality.schema.ts:10",{"_index":864,"title":{},"body":{"classes/Personality.html":{}}}],["server/personality/schemas/personality.schema.ts:13",{"_index":865,"title":{},"body":{"classes/Personality.html":{}}}],["server/personality/schemas/personality.schema.ts:16",{"_index":863,"title":{},"body":{"classes/Personality.html":{}}}],["server/personality/schemas/personality.schema.ts:19",{"_index":868,"title":{},"body":{"classes/Personality.html":{}}}],["server/root/root.controller.ts",{"_index":1052,"title":{},"body":{"controllers/RootController.html":{},"coverage.html":{}}}],["server/root/root.controller.ts:11",{"_index":1057,"title":{},"body":{"controllers/RootController.html":{}}}],["server/root/root.controller.ts:6",{"_index":1061,"title":{},"body":{"controllers/RootController.html":{}}}],["server/seed.ts",{"_index":1530,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/server.ts",{"_index":1531,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/source/schemas/source.schema.ts",{"_index":1087,"title":{},"body":{"classes/Source.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/source/schemas/source.schema.ts:10",{"_index":1093,"title":{},"body":{"classes/Source.html":{}}}],["server/source/schemas/source.schema.ts:24",{"_index":1091,"title":{},"body":{"classes/Source.html":{}}}],["server/source/schemas/source.schema.ts:27",{"_index":1092,"title":{},"body":{"classes/Source.html":{}}}],["server/source/schemas/source.schema.ts:37",{"_index":1096,"title":{},"body":{"classes/Source.html":{}}}],["server/source/schemas/source.schema.ts:43",{"_index":1101,"title":{},"body":{"classes/Source.html":{}}}],["server/source/schemas/source.schema.ts:50",{"_index":1102,"title":{},"body":{"classes/Source.html":{}}}],["server/source/source.module.ts",{"_index":1113,"title":{},"body":{"modules/SourceModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/source/source.service.ts",{"_index":1118,"title":{},"body":{"injectables/SourceService.html":{},"coverage.html":{}}}],["server/source/source.service.ts:12",{"_index":1122,"title":{},"body":{"injectables/SourceService.html":{}}}],["server/source/source.service.ts:7",{"_index":1120,"title":{},"body":{"injectables/SourceService.html":{}}}],["server/stats/stats.controller.ts",{"_index":1131,"title":{},"body":{"controllers/StatsController.html":{},"coverage.html":{}}}],["server/stats/stats.controller.ts:10",{"_index":1134,"title":{},"body":{"controllers/StatsController.html":{}}}],["server/stats/stats.module.ts",{"_index":1141,"title":{},"body":{"modules/StatsModule.html":{}}}],["server/stats/stats.service.ts",{"_index":1143,"title":{},"body":{"injectables/StatsService.html":{},"coverage.html":{}}}],["server/stats/stats.service.ts:14",{"_index":1146,"title":{},"body":{"injectables/StatsService.html":{}}}],["server/stats/stats.service.ts:7",{"_index":1145,"title":{},"body":{"injectables/StatsService.html":{}}}],["server/users/schemas/user.schema.ts",{"_index":1155,"title":{},"body":{"classes/User.html":{},"interfaces/UserDocument.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/users/schemas/user.schema.ts:11",{"_index":1159,"title":{},"body":{"classes/User.html":{}}}],["server/users/schemas/user.schema.ts:14",{"_index":1157,"title":{},"body":{"classes/User.html":{}}}],["server/users/schemas/user.schema.ts:17",{"_index":1158,"title":{},"body":{"classes/User.html":{}}}],["server/users/schemas/user.schema.ts:5",{"_index":1165,"title":{},"body":{"interfaces/UserDocument.html":{}}}],["server/users/users.controller.ts",{"_index":1167,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["server/users/users.controller.ts:26",{"_index":1177,"title":{},"body":{"controllers/UsersController.html":{}}}],["server/users/users.controller.ts:32",{"_index":1180,"title":{},"body":{"controllers/UsersController.html":{}}}],["server/users/users.controller.ts:40",{"_index":1174,"title":{},"body":{"controllers/UsersController.html":{}}}],["server/users/users.controller.ts:68",{"_index":1182,"title":{},"body":{"controllers/UsersController.html":{}}}],["server/users/users.controller.ts:85",{"_index":1185,"title":{},"body":{"controllers/UsersController.html":{}}}],["server/users/users.module.ts",{"_index":1226,"title":{},"body":{"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/users/users.service.ts",{"_index":1233,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["server/users/users.service.ts:13",{"_index":1237,"title":{},"body":{"injectables/UsersService.html":{}}}],["server/users/users.service.ts:17",{"_index":1241,"title":{},"body":{"injectables/UsersService.html":{}}}],["server/users/users.service.ts:25",{"_index":1239,"title":{},"body":{"injectables/UsersService.html":{}}}],["server/users/users.service.ts:31",{"_index":1236,"title":{},"body":{"injectables/UsersService.html":{}}}],["server/users/users.service.ts:8",{"_index":1234,"title":{},"body":{"injectables/UsersService.html":{}}}],["server/util.ts",{"_index":1257,"title":{},"body":{"injectables/UtilService.html":{},"coverage.html":{}}}],["server/util.ts:26",{"_index":1266,"title":{},"body":{"injectables/UtilService.html":{}}}],["server/util.ts:5",{"_index":1262,"title":{},"body":{"injectables/UtilService.html":{}}}],["server/view/view.controller.ts",{"_index":1294,"title":{},"body":{"controllers/ViewController.html":{},"coverage.html":{}}}],["server/view/view.controller.ts:10",{"_index":1308,"title":{},"body":{"controllers/ViewController.html":{}}}],["server/view/view.controller.ts:21",{"_index":1312,"title":{},"body":{"controllers/ViewController.html":{}}}],["server/view/view.controller.ts:32",{"_index":1311,"title":{},"body":{"controllers/ViewController.html":{}}}],["server/view/view.controller.ts:43",{"_index":1316,"title":{},"body":{"controllers/ViewController.html":{}}}],["server/view/view.controller.ts:54",{"_index":1306,"title":{},"body":{"controllers/ViewController.html":{}}}],["server/view/view.controller.ts:65",{"_index":1302,"title":{},"body":{"controllers/ViewController.html":{}}}],["server/view/view.module.ts",{"_index":1336,"title":{},"body":{"modules/ViewModule.html":{}}}],["server/view/view.service.ts",{"_index":1338,"title":{},"body":{"injectables/ViewService.html":{},"coverage.html":{}}}],["server/view/view.service.ts:12",{"_index":1344,"title":{},"body":{"injectables/ViewService.html":{}}}],["server/view/view.service.ts:24",{"_index":1342,"title":{},"body":{"injectables/ViewService.html":{}}}],["server/view/view.service.ts:7",{"_index":1346,"title":{},"body":{"injectables/ViewService.html":{}}}],["server/view/view.service.ts:8",{"_index":1341,"title":{},"body":{"injectables/ViewService.html":{}}}],["server/wikidata/schemas/wikidata.schema.ts",{"_index":1357,"title":{},"body":{"classes/WikidataCache.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server/wikidata/schemas/wikidata.schema.ts:12",{"_index":1361,"title":{},"body":{"classes/WikidataCache.html":{}}}],["server/wikidata/schemas/wikidata.schema.ts:15",{"_index":1362,"title":{},"body":{"classes/WikidataCache.html":{}}}],["server/wikidata/schemas/wikidata.schema.ts:18",{"_index":1360,"title":{},"body":{"classes/WikidataCache.html":{}}}],["server/wikidata/schemas/wikidata.schema.ts:9",{"_index":1363,"title":{},"body":{"classes/WikidataCache.html":{}}}],["server/wikidata/wikidata.controller.ts",{"_index":1369,"title":{},"body":{"controllers/WikidataController.html":{},"coverage.html":{}}}],["server/wikidata/wikidata.controller.ts:9",{"_index":1374,"title":{},"body":{"controllers/WikidataController.html":{}}}],["server/wikidata/wikidata.module.ts",{"_index":1384,"title":{},"body":{"modules/WikidataModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/wikidata/wikidata.service.ts",{"_index":1392,"title":{},"body":{"injectables/WikidataService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/wikidata/wikidata.service.ts:104",{"_index":1411,"title":{},"body":{"injectables/WikidataService.html":{}}}],["server/wikidata/wikidata.service.ts:111",{"_index":1404,"title":{},"body":{"injectables/WikidataService.html":{}}}],["server/wikidata/wikidata.service.ts:125",{"_index":1413,"title":{},"body":{"injectables/WikidataService.html":{}}}],["server/wikidata/wikidata.service.ts:153",{"_index":1408,"title":{},"body":{"injectables/WikidataService.html":{}}}],["server/wikidata/wikidata.service.ts:16",{"_index":1400,"title":{},"body":{"injectables/WikidataService.html":{}}}],["server/wikidata/wikidata.service.ts:22",{"_index":1406,"title":{},"body":{"injectables/WikidataService.html":{}}}],["server/wikidata/wikidata.service.ts:39",{"_index":1415,"title":{},"body":{"injectables/WikidataService.html":{}}}],["server/wikidata/wikidata.service.ts:55",{"_index":1402,"title":{},"body":{"injectables/WikidataService.html":{}}}],["serves",{"_index":1923,"title":{},"body":{"license.html":{}}}],["service",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"injectables/PersonalityService.html":{},"dependencies.html":{},"license.html":{}}}],["servicerunner",{"_index":1532,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["servicing",{"_index":2436,"title":{},"body":{"license.html":{}}}],["session",{"_index":87,"title":{},"body":{"modules/AuthModule.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["sessionguard",{"_index":226,"title":{"guards/SessionGuard.html":{}},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/PersonalityController.html":{},"guards/SessionGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["shall",{"_index":2003,"title":{},"body":{"license.html":{}}}],["share",{"_index":1613,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["shared",{"_index":1948,"title":{},"body":{"license.html":{}}}],["short",{"_index":2491,"title":{},"body":{"license.html":{}}}],["show",{"_index":1750,"title":{},"body":{"license.html":{}}}],["showaboutpage",{"_index":1298,"title":{},"body":{"controllers/ViewController.html":{}}}],["showaboutpage(@req",{"_index":1324,"title":{},"body":{"controllers/ViewController.html":{}}}],["showaboutpage(req",{"_index":1309,"title":{},"body":{"controllers/ViewController.html":{}}}],["showhome",{"_index":698,"title":{},"body":{"controllers/HomeController.html":{},"controllers/ViewController.html":{}}}],["showhome(@req",{"_index":705,"title":{},"body":{"controllers/HomeController.html":{},"controllers/ViewController.html":{}}}],["showhome(req",{"_index":699,"title":{},"body":{"controllers/HomeController.html":{},"controllers/ViewController.html":{}}}],["showprivacypolicypage",{"_index":1299,"title":{},"body":{"controllers/ViewController.html":{}}}],["showprivacypolicypage(@req",{"_index":1326,"title":{},"body":{"controllers/ViewController.html":{}}}],["showprivacypolicypage(req",{"_index":1313,"title":{},"body":{"controllers/ViewController.html":{}}}],["sign",{"_index":2504,"title":{},"body":{"license.html":{}}}],["significant",{"_index":2167,"title":{},"body":{"license.html":{}}}],["similar",{"_index":2018,"title":{},"body":{"license.html":{}}}],["simultaneously",{"_index":2393,"title":{},"body":{"license.html":{}}}],["single",{"_index":2364,"title":{},"body":{"license.html":{}}}],["sistema",{"_index":2619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sitekey",{"_index":353,"title":{},"body":{"controllers/ClaimController.html":{}}}],["sitelinkname",{"_index":1466,"title":{},"body":{"injectables/WikidataService.html":{}}}],["sitelinkname.match(/^(.*)wiki$/)[1",{"_index":1470,"title":{},"body":{"injectables/WikidataService.html":{}}}],["skip(page",{"_index":518,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["slice",{"_index":1261,"title":{},"body":{"injectables/UtilService.html":{}}}],["slug",{"_index":96,"title":{},"body":{"classes/Claim.html":{},"classes/Personality.html":{},"injectables/PersonalityService.html":{}}}],["slugify",{"_index":593,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"dependencies.html":{}}}],["slugify(claim.title",{"_index":608,"title":{},"body":{"injectables/ClaimService.html":{}}}],["slugify(personality.name",{"_index":999,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["social",{"_index":1615,"title":{},"body":{"dependencies.html":{}}}],["software",{"_index":1682,"title":{},"body":{"license.html":{}}}],["sold",{"_index":2148,"title":{},"body":{"license.html":{}}}],["sole",{"_index":1981,"title":{},"body":{"license.html":{}}}],["solely",{"_index":1995,"title":{},"body":{"license.html":{}}}],["sort",{"_index":505,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["source",{"_index":4,"title":{"classes/Source.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"modules/ClaimModule.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/HomeController.html":{},"modules/HomeModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"guards/SessionGuard.html":{},"classes/Source.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"controllers/WikidataController.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"license.html":{}}}],["source.name",{"_index":1117,"title":{},"body":{"modules/SourceModule.html":{},"miscellaneous/variables.html":{}}}],["source.save",{"_index":1129,"title":{},"body":{"injectables/SourceService.html":{}}}],["source.service",{"_index":1115,"title":{},"body":{"modules/SourceModule.html":{}}}],["source/schemas/source.schema",{"_index":124,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{}}}],["source/source.module",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{}}}],["source/source.service",{"_index":500,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{}}}],["sourcedocument",{"_index":1103,"title":{},"body":{"classes/Source.html":{},"injectables/SourceService.html":{},"miscellaneous/typealiases.html":{}}}],["sourcemodel",{"_index":1116,"title":{},"body":{"modules/SourceModule.html":{},"injectables/SourceService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sourcemodule",{"_index":38,"title":{"modules/SourceModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/SourceModule.html":{},"modules.html":{},"overview.html":{}}}],["sources",{"_index":514,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["sourceschema",{"_index":1108,"title":{},"body":{"classes/Source.html":{},"modules/SourceModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sourceservice",{"_index":455,"title":{"injectables/SourceService.html":{}},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"modules/SourceModule.html":{},"injectables/SourceService.html":{},"coverage.html":{},"overview.html":{}}}],["spare",{"_index":2098,"title":{},"body":{"license.html":{}}}],["sparse",{"_index":867,"title":{},"body":{"classes/Personality.html":{}}}],["speak",{"_index":1718,"title":{},"body":{"license.html":{}}}],["special",{"_index":615,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"license.html":{}}}],["specific",{"_index":1930,"title":{},"body":{"license.html":{}}}],["specifically",{"_index":1952,"title":{},"body":{"license.html":{}}}],["specified",{"_index":1906,"title":{},"body":{"license.html":{}}}],["specifies",{"_index":2413,"title":{},"body":{"license.html":{}}}],["specify",{"_index":2417,"title":{},"body":{"license.html":{}}}],["speech",{"_index":132,"title":{},"body":{"classes/Claim.html":{}}}],["spirit",{"_index":2406,"title":{},"body":{"license.html":{}}}],["stand",{"_index":1799,"title":{},"body":{"license.html":{}}}],["standard",{"_index":1902,"title":{},"body":{"license.html":{}}}],["standards",{"_index":1905,"title":{},"body":{"license.html":{}}}],["start",{"_index":2478,"title":{},"body":{"license.html":{}}}],["started",{"_index":1632,"title":{"index.html":{},"license.html":{}},"body":{}}],["starters",{"_index":817,"title":{},"body":{"injectables/ParserService.html":{}}}],["starts",{"_index":2492,"title":{},"body":{"license.html":{}}}],["startup",{"_index":1650,"title":{},"body":{"index.html":{}}}],["state",{"_index":463,"title":{},"body":{"injectables/ClaimReviewService.html":{},"license.html":{}}}],["state1",{"_index":466,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["state2",{"_index":467,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["state[acc",{"_index":536,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["state[classification",{"_index":531,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["state[topclassification",{"_index":538,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["stated",{"_index":1966,"title":{},"body":{"license.html":{}}}],["statement",{"_index":2255,"title":{},"body":{"license.html":{}}}],["statements",{"_index":1509,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":1808,"title":{},"body":{"license.html":{}}}],["static",{"_index":8,"title":{},"body":{"modules/AppModule.html":{}}}],["stating",{"_index":2041,"title":{},"body":{"license.html":{}}}],["stats",{"_index":330,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"injectables/PersonalityService.html":{}}}],["stats.controller",{"_index":1142,"title":{},"body":{"modules/StatsModule.html":{}}}],["stats.service",{"_index":1135,"title":{},"body":{"controllers/StatsController.html":{},"modules/StatsModule.html":{}}}],["stats/stats.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/HomeModule.html":{}}}],["stats/stats.service",{"_index":703,"title":{},"body":{"controllers/HomeController.html":{}}}],["statscontroller",{"_index":1130,"title":{"controllers/StatsController.html":{}},"body":{"controllers/StatsController.html":{},"modules/StatsModule.html":{},"coverage.html":{}}}],["statsmodule",{"_index":40,"title":{"modules/StatsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HomeModule.html":{},"modules/StatsModule.html":{},"modules.html":{},"overview.html":{}}}],["statsservice",{"_index":702,"title":{"injectables/StatsService.html":{}},"body":{"controllers/HomeController.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"coverage.html":{},"overview.html":{}}}],["status",{"_index":1058,"title":{},"body":{"controllers/RootController.html":{},"license.html":{}}}],["step",{"_index":1670,"title":{},"body":{"index.html":{}}}],["steps",{"_index":1755,"title":{},"body":{"license.html":{}}}],["storage",{"_index":2075,"title":{},"body":{"license.html":{}}}],["store",{"_index":2566,"title":{},"body":{"miscellaneous/variables.html":{}}}],["strategy",{"_index":733,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["strict",{"_index":613,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["string",{"_index":109,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"injectables/EmailService.html":{},"classes/Logger.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"injectables/PersonalityService.html":{},"controllers/RootController.html":{},"classes/Source.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{}}}],["strip",{"_index":614,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["styled",{"_index":1628,"title":{},"body":{"dependencies.html":{}}}],["subdividing",{"_index":2305,"title":{},"body":{"license.html":{}}}],["subject",{"_index":655,"title":{},"body":{"injectables/EmailService.html":{},"license.html":{}}}],["sublicenses",{"_index":2334,"title":{},"body":{"license.html":{}}}],["sublicensing",{"_index":1997,"title":{},"body":{"license.html":{}}}],["subprograms",{"_index":1951,"title":{},"body":{"license.html":{}}}],["subroutine",{"_index":2507,"title":{},"body":{"license.html":{}}}],["subsection",{"_index":2108,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":2162,"title":{},"body":{"license.html":{}}}],["substantially",{"_index":1797,"title":{},"body":{"license.html":{}}}],["success",{"_index":1213,"title":{},"body":{"controllers/UsersController.html":{}}}],["successful",{"_index":1214,"title":{},"body":{"controllers/UsersController.html":{}}}],["successfully",{"_index":931,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["such",{"_index":1742,"title":{},"body":{"license.html":{}}}],["sue",{"_index":2346,"title":{},"body":{"license.html":{}}}],["suffice",{"_index":2175,"title":{},"body":{"license.html":{}}}],["suffixes",{"_index":815,"title":{},"body":{"injectables/ParserService.html":{}}}],["sum",{"_index":504,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["super",{"_index":737,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["supplement",{"_index":2206,"title":{},"body":{"license.html":{}}}],["support",{"_index":2049,"title":{},"body":{"license.html":{},"modules.html":{}}}],["supports",{"_index":2117,"title":{},"body":{"license.html":{}}}],["sure",{"_index":1709,"title":{},"body":{"license.html":{}}}],["surrender",{"_index":1735,"title":{},"body":{"license.html":{}}}],["survive",{"_index":2254,"title":{},"body":{"license.html":{}}}],["sustained",{"_index":2451,"title":{},"body":{"license.html":{}}}],["svg",{"_index":1544,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["system",{"_index":1912,"title":{},"body":{"license.html":{}}}],["systematic",{"_index":1784,"title":{},"body":{"license.html":{}}}],["t",{"_index":1265,"title":{},"body":{"injectables/UtilService.html":{}}}],["table",{"_index":1539,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1538,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":114,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/Source.html":{}}}],["take",{"_index":1700,"title":{},"body":{"license.html":{}}}],["tangible",{"_index":2142,"title":{},"body":{"license.html":{}}}],["targetid",{"_index":145,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"classes/Source.html":{}}}],["targetmodel",{"_index":1089,"title":{},"body":{"classes/Source.html":{}}}],["technological",{"_index":2006,"title":{},"body":{"license.html":{}}}],["tells",{"_index":1889,"title":{},"body":{"license.html":{}}}],["template",{"_index":673,"title":{},"body":{"injectables/EmailService.html":{}}}],["template/email.html",{"_index":653,"title":{},"body":{"injectables/EmailService.html":{}}}],["templateoptions",{"_index":657,"title":{},"body":{"injectables/EmailService.html":{}}}],["templatepath",{"_index":651,"title":{},"body":{"injectables/EmailService.html":{}}}],["templates/userseed.html",{"_index":2623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["term",{"_index":1964,"title":{},"body":{"license.html":{}}}],["terminal",{"_index":2490,"title":{},"body":{"license.html":{}}}],["terminate",{"_index":2261,"title":{},"body":{"license.html":{}}}],["terminated",{"_index":2283,"title":{},"body":{"license.html":{}}}],["terminates",{"_index":2269,"title":{},"body":{"license.html":{}}}],["termination",{"_index":2258,"title":{},"body":{"license.html":{}}}],["terms",{"_index":1751,"title":{},"body":{"license.html":{}}}],["text",{"_index":656,"title":{},"body":{"injectables/EmailService.html":{},"injectables/ParserService.html":{}}}],["then(([claims",{"_index":267,"title":{},"body":{"controllers/ClaimController.html":{}}}],["then(([personalities",{"_index":1049,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["then(([reviews",{"_index":308,"title":{},"body":{"controllers/ClaimController.html":{}}}],["then(([stats",{"_index":321,"title":{},"body":{"controllers/ClaimController.html":{}}}],["then((props",{"_index":1380,"title":{},"body":{"controllers/WikidataController.html":{}}}],["then((response",{"_index":1489,"title":{},"body":{"injectables/WikidataService.html":{}}}],["then((values",{"_index":1151,"title":{},"body":{"injectables/StatsService.html":{}}}],["then(async",{"_index":2607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["therefore",{"_index":1736,"title":{},"body":{"license.html":{}}}],["things",{"_index":1727,"title":{},"body":{"license.html":{}}}],["third",{"_index":2033,"title":{},"body":{"license.html":{}}}],["this._checkcaptcharesponse",{"_index":281,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["this._getsentencebyhashandclaimid(sentencehash",{"_index":333,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this._reviewsbysentencehashaggregated(sentencehash",{"_index":517,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["this._reviewsbysentencehashaggregated(sentencehash).count",{"_index":515,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["this._topclassificationaccumulator",{"_index":509,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["this._verifyinputsquery(query",{"_index":262,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimmodel(claim",{"_index":622,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimmodel.countdocuments().where(query",{"_index":604,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimmodel.find(query",{"_index":600,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimmodel.findoneandupdate",{"_index":635,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.claimreview.agreggateclassification",{"_index":1028,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.claimreviewmodel(claimreview",{"_index":549,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["this.claimreviewmodel.aggregate",{"_index":502,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["this.claimreviewmodel.countdocuments().where(query",{"_index":506,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["this.claimreviewmodel.findone",{"_index":513,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["this.claimreviewservice.count",{"_index":1150,"title":{},"body":{"injectables/StatsService.html":{}}}],["this.claimreviewservice.countreviewsbysentencehash(sentencehash",{"_index":307,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimreviewservice.create",{"_index":422,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["this.claimreviewservice.delete(params.id",{"_index":428,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["this.claimreviewservice.getbyid(params.id",{"_index":426,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["this.claimreviewservice.getreviewsbysentencehash",{"_index":305,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimreviewservice.getreviewstatsbysentencehash(sentencehash",{"_index":317,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimreviewservice.getuserreviewbysentencehash",{"_index":319,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimservice.count",{"_index":1148,"title":{},"body":{"injectables/StatsService.html":{}}}],["this.claimservice.count(queryinputs",{"_index":266,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimservice.create(body",{"_index":290,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimservice.delete(params.id",{"_index":300,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimservice.getbyid(claimid",{"_index":318,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimservice.getbyid(params.id",{"_index":293,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimservice.getbypersonalityidandclaimslug",{"_index":345,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimservice.listall",{"_index":264,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.claimservice.update(req.params.id",{"_index":296,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.configservice.get(\"recaptcha_secret",{"_index":279,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["this.configservice.get(\"recaptcha_sitekey",{"_index":354,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.configservice.get(\"smtp_email_pass",{"_index":688,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get(\"smtp_email_user",{"_index":686,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get(\"smtp_host",{"_index":680,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get(\"smtp_port",{"_index":682,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get(\"smtp_secure",{"_index":684,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get(\"web_url",{"_index":676,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.count(queryinputs",{"_index":1048,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.createparagraphid",{"_index":833,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.createsentenceid",{"_index":857,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.createtransport",{"_index":689,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.extractclaimwithtextsummary(personality.claims",{"_index":1026,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.extractproperties",{"_index":1442,"title":{},"body":{"injectables/WikidataService.html":{}}}],["this.extractvalue",{"_index":1453,"title":{},"body":{"injectables/WikidataService.html":{}}}],["this.extractvalue(wikidata",{"_index":1450,"title":{},"body":{"injectables/WikidataService.html":{}}}],["this.getbyid(personalityid",{"_index":1034,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.getbyid(userid",{"_index":1249,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getcommonsthumburl(filename",{"_index":1465,"title":{},"body":{"injectables/WikidataService.html":{}}}],["this.getemailbody(templateoptions",{"_index":690,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.getreviewstats(personality._id",{"_index":1024,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.getsitelinkname(language",{"_index":1467,"title":{},"body":{"injectables/WikidataService.html":{}}}],["this.httpservice.post",{"_index":244,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["this.listall",{"_index":1046,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.logger",{"_index":764,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.error(\"failed",{"_index":1355,"title":{},"body":{"injectables/ViewService.html":{}}}],["this.logger.error(`error/recaptcha",{"_index":284,"title":{},"body":{"controllers/ClaimController.html":{}}}],["this.logger.error(e",{"_index":1216,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.logger.error(err",{"_index":924,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["this.logger.error(error",{"_index":275,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["this.logger.log",{"_index":271,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/PersonalityService.html":{}}}],["this.logger.log(\"debug",{"_index":766,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.log(\"error",{"_index":767,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.log(\"info",{"_index":765,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.log(\"verbose",{"_index":768,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.log(\"warn",{"_index":769,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.log(`found",{"_index":1007,"title":{},"body":{"injectables/PersonalityService.html":{},"injectables/UsersService.html":{}}}],["this.logger.log(`got",{"_index":1029,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.logger.log(`sending",{"_index":691,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.logger.log(`updated",{"_index":1037,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.logger.log(`user",{"_index":1253,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.optionstoupdate",{"_index":598,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["this.paragraphsequence",{"_index":825,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.paragraphsequence}${this.sentencesequence}${sentencecontent",{"_index":859,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.parserservice.parse(claim.content",{"_index":606,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.parsesentence(sentence",{"_index":839,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.personalitymodel(personality",{"_index":1001,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.countdocuments().where(query",{"_index":1039,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.find(query",{"_index":991,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.findbyid",{"_index":1005,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.findbyid(id",{"_index":1027,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.findbyidandremove(personalityid",{"_index":1038,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.findbyidandupdate",{"_index":1036,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.findone",{"_index":1009,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalitymodel.findoneandupdate",{"_index":1042,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.personalityservice",{"_index":920,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["this.personalityservice.combinedlistall",{"_index":707,"title":{},"body":{"controllers/HomeController.html":{}}}],["this.personalityservice.combinedlistall(query",{"_index":907,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["this.personalityservice.count",{"_index":1149,"title":{},"body":{"injectables/StatsService.html":{}}}],["this.personalityservice.create(body",{"_index":909,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["this.personalityservice.delete(params.id",{"_index":930,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["this.personalityservice.getbyslug",{"_index":344,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/PersonalityController.html":{}}}],["this.personalityservice.update(params.id",{"_index":927,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["this.postprocess(claim",{"_index":603,"title":{},"body":{"injectables/ClaimService.html":{}}}],["this.postprocess(personality",{"_index":997,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.postprocess(personality.toobject",{"_index":1008,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.postprocesssentences(paragraph.sentences",{"_index":834,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.requestproperties(params",{"_index":1426,"title":{},"body":{"injectables/WikidataService.html":{}}}],["this.sentencesequence",{"_index":826,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.server",{"_index":1349,"title":{},"body":{"injectables/ViewService.html":{}}}],["this.server.prepare",{"_index":1354,"title":{},"body":{"injectables/ViewService.html":{}}}],["this.sourcemodel(data",{"_index":1128,"title":{},"body":{"injectables/SourceService.html":{}}}],["this.statsservice.gethomestats",{"_index":710,"title":{},"body":{"controllers/HomeController.html":{},"controllers/StatsController.html":{}}}],["this.usermodel(user",{"_index":1245,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.find().exec",{"_index":1243,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyid(userid",{"_index":1247,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.register",{"_index":1244,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice",{"_index":1209,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.util.formatstats(reviews",{"_index":507,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/PersonalityService.html":{}}}],["this.util.mergeobjectsinunique",{"_index":995,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.verifyinputsquery(query",{"_index":1045,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.viewservice",{"_index":348,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{}}}],["this.wikidata.fetchproperties",{"_index":1016,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.wikidata.querywikibaseentities",{"_index":993,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["this.wikidatacache",{"_index":1428,"title":{},"body":{"injectables/WikidataService.html":{}}}],["this.wikidatacache.findone",{"_index":1422,"title":{},"body":{"injectables/WikidataService.html":{}}}],["this.wikidataservice",{"_index":1378,"title":{},"body":{"controllers/WikidataController.html":{}}}],["those",{"_index":1795,"title":{},"body":{"license.html":{}}}],["though",{"_index":2209,"title":{},"body":{"license.html":{}}}],["threatened",{"_index":1805,"title":{},"body":{"license.html":{}}}],["three",{"_index":2096,"title":{},"body":{"license.html":{}}}],["through",{"_index":1875,"title":{},"body":{"license.html":{}}}],["throw",{"_index":289,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"controllers/UsersController.html":{}}}],["thus",{"_index":1988,"title":{},"body":{"license.html":{}}}],["ties",{"_index":537,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["time",{"_index":2279,"title":{},"body":{"license.html":{}}}],["title",{"_index":97,"title":{},"body":{"classes/Claim.html":{},"injectables/PersonalityService.html":{}}}],["titles",{"_index":1497,"title":{},"body":{"injectables/WikidataService.html":{}}}],["todo",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{}}}],["tojson",{"_index":129,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/Personality.html":{}}}],["toobject",{"_index":127,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/Personality.html":{}}}],["tools",{"_index":1942,"title":{},"body":{"license.html":{}}}],["topclassification",{"_index":508,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{}}}],["topromise",{"_index":247,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{}}}],["total",{"_index":1263,"title":{},"body":{"injectables/UtilService.html":{}}}],["totalclaims",{"_index":268,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{}}}],["totalclaimsreviewed",{"_index":566,"title":{},"body":{"injectables/ClaimService.html":{}}}],["totalpages",{"_index":269,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/PersonalityService.html":{}}}],["totalpersonalities",{"_index":1050,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["totalreviews",{"_index":309,"title":{},"body":{"controllers/ClaimController.html":{}}}],["totalreviews[0]?.count",{"_index":310,"title":{},"body":{"controllers/ClaimController.html":{}}}],["trace",{"_index":755,"title":{},"body":{"classes/Logger.html":{}}}],["trade",{"_index":2237,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":2236,"title":{},"body":{"license.html":{}}}],["trademarks",{"_index":2238,"title":{},"body":{"license.html":{}}}],["transaction",{"_index":2181,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":1877,"title":{},"body":{"license.html":{}}}],["transferred",{"_index":2183,"title":{},"body":{"license.html":{}}}],["transferring",{"_index":2303,"title":{},"body":{"license.html":{}}}],["transformcontentobject",{"_index":559,"title":{},"body":{"injectables/ClaimService.html":{}}}],["transformcontentobject(claimcontent",{"_index":584,"title":{},"body":{"injectables/ClaimService.html":{}}}],["transmission",{"_index":2130,"title":{},"body":{"license.html":{}}}],["transporter",{"_index":677,"title":{},"body":{"injectables/EmailService.html":{}}}],["transporter.close",{"_index":695,"title":{},"body":{"injectables/EmailService.html":{}}}],["transporter.sendmail",{"_index":694,"title":{},"body":{"injectables/EmailService.html":{}}}],["treated",{"_index":2208,"title":{},"body":{"license.html":{}}}],["treaty",{"_index":2013,"title":{},"body":{"license.html":{}}}],["trim:true",{"_index":795,"title":{},"body":{"injectables/ParserService.html":{}}}],["true",{"_index":88,"title":{},"body":{"modules/AuthModule.html":{},"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"controllers/HomeController.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"classes/Source.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/ViewController.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":552,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"controllers/UsersController.html":{},"injectables/ViewService.html":{}}}],["ts",{"_index":250,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/HomeController.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/ViewController.html":{}}}],["twitter\"].indexof(v",{"_index":133,"title":{},"body":{"classes/Claim.html":{}}}],["two",{"_index":1754,"title":{},"body":{"license.html":{}}}],["type",{"_index":98,"title":{},"body":{"classes/Claim.html":{},"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/HomeController.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Logger.html":{},"injectables/ParserService.html":{},"classes/Personality.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"guards/SessionGuard.html":{},"classes/Source.html":{},"injectables/SourceService.html":{},"injectables/StatsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"controllers/ViewController.html":{},"injectables/ViewService.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"license.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":2522,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":498,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/SourceService.html":{}}}],["types.objectid(claim.personality",{"_index":620,"title":{},"body":{"injectables/ClaimService.html":{}}}],["types.objectid(claimreview.claim",{"_index":545,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["types.objectid(claimreview.personality",{"_index":543,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["types.objectid(claimreview.user",{"_index":547,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["types.objectid(data.targetid",{"_index":1125,"title":{},"body":{"injectables/SourceService.html":{}}}],["types.objectid(data.user",{"_index":1127,"title":{},"body":{"injectables/SourceService.html":{}}}],["types.objectid(query.personality",{"_index":599,"title":{},"body":{"injectables/ClaimService.html":{}}}],["types/jest",{"_index":1560,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":1562,"title":{},"body":{"dependencies.html":{}}}],["typical",{"_index":2156,"title":{},"body":{"license.html":{}}}],["unacceptable",{"_index":1792,"title":{},"body":{"license.html":{}}}],["unauthorizedexception",{"_index":1079,"title":{},"body":{"guards/SessionGuard.html":{}}}],["unclassified",{"_index":1104,"title":{},"body":{"classes/Source.html":{}}}],["undefined",{"_index":106,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/Source.html":{},"classes/WikidataCache.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["under",{"_index":1833,"title":{},"body":{"license.html":{}}}],["unique",{"_index":870,"title":{},"body":{"classes/Personality.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["unknown",{"_index":169,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"injectables/SourceService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WikidataService.html":{}}}],["unless",{"_index":2165,"title":{},"body":{"license.html":{}}}],["unlimited",{"_index":1970,"title":{},"body":{"license.html":{}}}],["unmodified",{"_index":1850,"title":{},"body":{"license.html":{}}}],["unnecessary",{"_index":2000,"title":{},"body":{"license.html":{}}}],["unpacking",{"_index":2204,"title":{},"body":{"license.html":{}}}],["unreliable",{"_index":1106,"title":{},"body":{"classes/Source.html":{}}}],["unsustainable",{"_index":396,"title":{},"body":{"classes/ClaimReview.html":{}}}],["until",{"_index":2268,"title":{},"body":{"license.html":{}}}],["unverifiable",{"_index":398,"title":{},"body":{"classes/ClaimReview.html":{}}}],["up",{"_index":1655,"title":{},"body":{"index.html":{}}}],["update",{"_index":164,"title":{},"body":{"controllers/ClaimController.html":{},"injectables/ClaimService.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{}}}],["update(@param",{"_index":926,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["update(@req",{"_index":295,"title":{},"body":{"controllers/ClaimController.html":{}}}],["update(claimid",{"_index":587,"title":{},"body":{"injectables/ClaimService.html":{}}}],["update(params",{"_index":901,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["update(personalityid",{"_index":981,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["update(req",{"_index":209,"title":{},"body":{"controllers/ClaimController.html":{}}}],["updates",{"_index":2193,"title":{},"body":{"license.html":{}}}],["upsert",{"_index":596,"title":{},"body":{"injectables/ClaimService.html":{},"injectables/PersonalityService.html":{}}}],["url",{"_index":230,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"injectables/WikidataService.html":{}}}],["usando",{"_index":2620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["use",{"_index":1097,"title":{},"body":{"classes/Source.html":{},"license.html":{}}}],["usecreateindex",{"_index":2555,"title":{},"body":{"miscellaneous/variables.html":{}}}],["used",{"_index":1818,"title":{},"body":{"license.html":{}}}],["usefactory",{"_index":1231,"title":{},"body":{"modules/UsersModule.html":{},"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["usefindandmodify",{"_index":2556,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useful",{"_index":2484,"title":{},"body":{"license.html":{}}}],["useguards",{"_index":216,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{}}}],["useguards(localauthguard",{"_index":1193,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(localauthguard)@post('api/user/signin",{"_index":1179,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(sessionguard",{"_index":276,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/ClaimReviewController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{}}}],["useguards(sessionguard)@delete(':id",{"_index":413,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["useguards(sessionguard)@delete('api/claim/:id",{"_index":188,"title":{},"body":{"controllers/ClaimController.html":{}}}],["useguards(sessionguard)@delete('api/personality/:id",{"_index":883,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["useguards(sessionguard)@get('api/user/validate",{"_index":1176,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(sessionguard)@get('personality/search",{"_index":893,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["useguards(sessionguard)@get('profile",{"_index":1184,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(sessionguard)@post",{"_index":411,"title":{},"body":{"controllers/ClaimReviewController.html":{}}}],["useguards(sessionguard)@post('api/claim",{"_index":184,"title":{},"body":{"controllers/ClaimController.html":{}}}],["useguards(sessionguard)@post('api/personality",{"_index":881,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["useguards(sessionguard)@put('api/claim/:id",{"_index":210,"title":{},"body":{"controllers/ClaimController.html":{}}}],["useguards(sessionguard)@put('api/personality/:id",{"_index":902,"title":{},"body":{"controllers/PersonalityController.html":{}}}],["useguards(sessionguard)@put('api/user/:id/password",{"_index":1173,"title":{},"body":{"controllers/UsersController.html":{}}}],["useless",{"_index":1033,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["usenewurlparser",{"_index":2554,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user",{"_index":315,"title":{"classes/User.html":{}},"body":{"controllers/ClaimController.html":{},"classes/ClaimReview.html":{},"controllers/ClaimReviewController.html":{},"injectables/ClaimReviewService.html":{},"injectables/EmailService.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Source.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["user._id",{"_index":1248,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.changepassword(currentpassword",{"_index":1250,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.firstpasswordchanged",{"_index":1252,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.name",{"_index":1230,"title":{},"body":{"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["user.password",{"_index":1246,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.save",{"_index":1256,"title":{},"body":{"injectables/UsersService.html":{}}}],["user?._id",{"_index":320,"title":{},"body":{"controllers/ClaimController.html":{}}}],["userdata",{"_index":2605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdata.email",{"_index":2608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdata.password",{"_index":2634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdata.sendauthdetails",{"_index":2610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdocument",{"_index":727,"title":{"interfaces/UserDocument.html":{}},"body":{"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"interfaces/UserDocument.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userid",{"_index":495,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/UsersService.html":{}}}],["usermodel",{"_index":725,"title":{},"body":{"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["usermodel.authenticate",{"_index":740,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["usernamefield",{"_index":738,"title":{},"body":{"injectables/LocalStrategy.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["userreview",{"_index":323,"title":{},"body":{"controllers/ClaimController.html":{}}}],["users",{"_index":1711,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["users.controller",{"_index":1228,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.map(async",{"_index":2632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["users.service",{"_index":1187,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/schemas/user.schema",{"_index":390,"title":{},"body":{"classes/ClaimReview.html":{},"injectables/LocalSerializer.html":{},"injectables/LocalStrategy.html":{},"classes/Source.html":{}}}],["users/users.module",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["userschema",{"_index":1162,"title":{},"body":{"classes/User.html":{},"interfaces/UserDocument.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":1166,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":2591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userservice.register",{"_index":2606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usersmodule",{"_index":24,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":1186,"title":{"injectables/UsersService.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":2159,"title":{},"body":{"license.html":{}}}],["useunifiedtopology",{"_index":2553,"title":{},"body":{"miscellaneous/variables.html":{}}}],["using",{"_index":2128,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["utf",{"_index":671,"title":{},"body":{"injectables/EmailService.html":{}}}],["util",{"_index":437,"title":{},"body":{"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{}}}],["utilservice",{"_index":433,"title":{"injectables/UtilService.html":{}},"body":{"modules/ClaimReviewModule.html":{},"injectables/ClaimReviewService.html":{},"modules/PersonalityModule.html":{},"injectables/PersonalityService.html":{},"injectables/UtilService.html":{},"coverage.html":{},"overview.html":{}}}],["v",{"_index":131,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/Source.html":{}}}],["valid",{"_index":135,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/Source.html":{},"license.html":{}}}],["validate",{"_index":112,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/Source.html":{}}}],["validator",{"_index":130,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/Source.html":{}}}],["value",{"_index":476,"title":{},"body":{"injectables/ClaimReviewService.html":{},"injectables/ClaimService.html":{},"injectables/EmailService.html":{},"injectables/ParserService.html":{},"injectables/PersonalityService.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"injectables/ViewService.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["values[0",{"_index":1152,"title":{},"body":{"injectables/StatsService.html":{}}}],["values[1",{"_index":1153,"title":{},"body":{"injectables/StatsService.html":{}}}],["values[2",{"_index":1154,"title":{},"body":{"injectables/StatsService.html":{}}}],["variable",{"_index":1513,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2529,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verbatim",{"_index":1690,"title":{},"body":{"license.html":{}}}],["verbose",{"_index":746,"title":{},"body":{"classes/Logger.html":{}}}],["verbose(message",{"_index":760,"title":{},"body":{"classes/Logger.html":{}}}],["verifyinputsquery",{"_index":957,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["verifyinputsquery(query",{"_index":984,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["version",{"_index":1675,"title":{},"body":{"license.html":{}}}],["versions",{"_index":1706,"title":{},"body":{"license.html":{}}}],["via",{"_index":1652,"title":{},"body":{"index.html":{}}}],["view",{"_index":1892,"title":{},"body":{"license.html":{}}}],["view.controller",{"_index":1337,"title":{},"body":{"modules/ViewModule.html":{}}}],["view.service",{"_index":1317,"title":{},"body":{"controllers/ViewController.html":{},"modules/ViewModule.html":{}}}],["view/view.module",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/HomeModule.html":{},"modules/PersonalityModule.html":{},"modules/UsersModule.html":{}}}],["view/view.service",{"_index":234,"title":{},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{}}}],["viewcontroller",{"_index":1293,"title":{"controllers/ViewController.html":{}},"body":{"controllers/ViewController.html":{},"modules/ViewModule.html":{},"coverage.html":{}}}],["viewmodule",{"_index":46,"title":{"modules/ViewModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimModule.html":{},"modules/HomeModule.html":{},"modules/PersonalityModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules.html":{},"overview.html":{}}}],["viewservice",{"_index":233,"title":{"injectables/ViewService.html":{}},"body":{"controllers/ClaimController.html":{},"controllers/HomeController.html":{},"controllers/PersonalityController.html":{},"controllers/UsersController.html":{},"controllers/ViewController.html":{},"modules/ViewModule.html":{},"injectables/ViewService.html":{},"coverage.html":{},"overview.html":{}}}],["vinda(o",{"_index":2614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["violates",{"_index":2199,"title":{},"body":{"license.html":{}}}],["violation",{"_index":2264,"title":{},"body":{"license.html":{}}}],["virtual",{"_index":520,"title":{},"body":{"injectables/ClaimReviewService.html":{}}}],["virtuals",{"_index":128,"title":{},"body":{"classes/Claim.html":{},"classes/ClaimReview.html":{},"classes/Personality.html":{}}}],["visible",{"_index":1886,"title":{},"body":{"license.html":{}}}],["voc",{"_index":2615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":759,"title":{},"body":{"classes/Logger.html":{},"controllers/RootController.html":{},"license.html":{}}}],["volume",{"_index":2074,"title":{},"body":{"license.html":{}}}],["w",{"_index":2494,"title":{},"body":{"license.html":{}}}],["waive",{"_index":2022,"title":{},"body":{"license.html":{}}}],["waiver",{"_index":2465,"title":{},"body":{"license.html":{}}}],["want",{"_index":1724,"title":{},"body":{"license.html":{}}}],["warn",{"_index":747,"title":{},"body":{"classes/Logger.html":{}}}],["warn(message",{"_index":762,"title":{},"body":{"classes/Logger.html":{}}}],["warranties",{"_index":1890,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1765,"title":{},"body":{"license.html":{}}}],["watch",{"_index":1352,"title":{},"body":{"injectables/ViewService.html":{}}}],["way",{"_index":1714,"title":{},"body":{"license.html":{}}}],["ways",{"_index":2086,"title":{},"body":{"license.html":{}}}],["wbentities",{"_index":992,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["wbentity.description",{"_index":1493,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wbentity.id",{"_index":1494,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wbentity.label",{"_index":1492,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wbgetentities",{"_index":1433,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wbsearchentities",{"_index":1484,"title":{},"body":{"injectables/WikidataService.html":{}}}],["websites",{"_index":823,"title":{},"body":{"injectables/ParserService.html":{}}}],["welcome",{"_index":2495,"title":{},"body":{"license.html":{}}}],["well",{"_index":1868,"title":{},"body":{"license.html":{}}}],["whatever",{"_index":2307,"title":{},"body":{"license.html":{}}}],["whether",{"_index":1743,"title":{},"body":{"license.html":{}}}],["whole",{"_index":1916,"title":{},"body":{"license.html":{}}}],["whose",{"_index":2138,"title":{},"body":{"license.html":{}}}],["widely",{"_index":1910,"title":{},"body":{"license.html":{}}}],["wikdiata",{"_index":1011,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["wikidata",{"_index":862,"title":{},"body":{"classes/Personality.html":{},"controllers/PersonalityController.html":{},"injectables/PersonalityService.html":{},"injectables/WikidataService.html":{}}}],["wikidata.claims.p18",{"_index":1461,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata.claims.p18[0].mainsnak.datavalue.value",{"_index":1463,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata.claims.p31",{"_index":1455,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata.claims.p31[0].mainsnak.datavalue.value",{"_index":1457,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata.controller",{"_index":1385,"title":{},"body":{"modules/WikidataModule.html":{}}}],["wikidata.service",{"_index":1375,"title":{},"body":{"controllers/WikidataController.html":{},"modules/WikidataModule.html":{}}}],["wikidata.sitelinks[sitelinkname",{"_index":1468,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata.sitelinks[sitelinkname].title",{"_index":1472,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata/wikidata.module",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"modules/PersonalityModule.html":{}}}],["wikidata/wikidata.service",{"_index":989,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["wikidata[property",{"_index":1479,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata[property][language",{"_index":1481,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata[property][languagefallback",{"_index":1482,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidata[property][languagefallback].value",{"_index":1483,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidatacache",{"_index":1356,"title":{"classes/WikidataCache.html":{}},"body":{"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{}}}],["wikidatacache.name",{"_index":1388,"title":{},"body":{"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["wikidatacache.props",{"_index":1430,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidatacachedocument",{"_index":1364,"title":{},"body":{"classes/WikidataCache.html":{},"injectables/WikidataService.html":{},"miscellaneous/typealiases.html":{}}}],["wikidatacachemodel",{"_index":1387,"title":{},"body":{"modules/WikidataModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["wikidatacacheschema",{"_index":1366,"title":{},"body":{"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["wikidatacacheschema.index",{"_index":1389,"title":{},"body":{"modules/WikidataModule.html":{},"miscellaneous/variables.html":{}}}],["wikidatacontroller",{"_index":1368,"title":{"controllers/WikidataController.html":{}},"body":{"controllers/WikidataController.html":{},"modules/WikidataModule.html":{},"coverage.html":{}}}],["wikidataextract",{"_index":1015,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["wikidataextract.isallowedprop",{"_index":1022,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["wikidataid",{"_index":1017,"title":{},"body":{"injectables/PersonalityService.html":{},"classes/WikidataCache.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"miscellaneous/variables.html":{}}}],["wikidatainstanceof",{"_index":1456,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidatainstanceof.id",{"_index":1459,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidatamodule",{"_index":28,"title":{"modules/WikidataModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PersonalityModule.html":{},"modules/WikidataModule.html":{},"modules.html":{},"overview.html":{}}}],["wikidataprops",{"_index":1444,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidataprops.description",{"_index":1452,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidataprops.image",{"_index":1464,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidataprops.isallowedprop",{"_index":1458,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidataprops.name",{"_index":1449,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidataprops.wikipedia",{"_index":1473,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikidataservice",{"_index":959,"title":{"injectables/WikidataService.html":{}},"body":{"injectables/PersonalityService.html":{},"controllers/WikidataController.html":{},"modules/WikidataModule.html":{},"injectables/WikidataService.html":{},"coverage.html":{},"overview.html":{}}}],["wikilang",{"_index":1469,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikipedia",{"_index":1447,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikipedia.org/wiki/${encodeuri(wikititle",{"_index":1476,"title":{},"body":{"injectables/WikidataService.html":{}}}],["wikititle",{"_index":1471,"title":{},"body":{"injectables/WikidataService.html":{}}}],["window",{"_index":1929,"title":{},"body":{"license.html":{}}}],["wipo",{"_index":2012,"title":{},"body":{"license.html":{}}}],["wish",{"_index":1722,"title":{},"body":{"license.html":{}}}],["within",{"_index":2248,"title":{},"body":{"license.html":{}}}],["without",{"_index":1853,"title":{},"body":{"license.html":{}}}],["withsuggestions",{"_index":977,"title":{},"body":{"injectables/PersonalityService.html":{}}}],["work",{"_index":523,"title":{},"body":{"injectables/ClaimReviewService.html":{},"license.html":{}}}],["work's",{"_index":1941,"title":{},"body":{"license.html":{}}}],["working",{"_index":1911,"title":{},"body":{"license.html":{}}}],["works",{"_index":1696,"title":{},"body":{"license.html":{}}}],["worldwide",{"_index":2337,"title":{},"body":{"license.html":{}}}],["writing",{"_index":2424,"title":{},"body":{"license.html":{}}}],["written",{"_index":2095,"title":{},"body":{"license.html":{}}}],["x",{"_index":2548,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yarn",{"_index":1666,"title":{},"body":{"index.html":{}}}],["years",{"_index":2097,"title":{},"body":{"license.html":{}}}],["yes",{"_index":753,"title":{},"body":{"classes/Logger.html":{}}}],["yourself",{"_index":2353,"title":{},"body":{"license.html":{}}}],["z])/g",{"_index":810,"title":{},"body":{"injectables/ParserService.html":{}}}],["z][.](?:[a",{"_index":821,"title":{},"body":{"injectables/ParserService.html":{}}}],["z][.])?)/g",{"_index":822,"title":{},"body":{"injectables/ParserService.html":{}}}],["z][.][a",{"_index":820,"title":{},"body":{"injectables/ParserService.html":{}}}],["za",{"_index":809,"title":{},"body":{"injectables/ParserService.html":{}}}],["zoom",{"_index":77,"title":{},"body":{"modules/AuthModule.html":{},"modules/ClaimModule.html":{},"modules/ClaimReviewModule.html":{},"modules/EmailModule.html":{},"modules/HomeModule.html":{},"modules/ParserModule.html":{},"modules/PersonalityModule.html":{},"modules/SourceModule.html":{},"modules/StatsModule.html":{},"modules/UsersModule.html":{},"modules/ViewModule.html":{},"modules/WikidataModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/app.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(options)\n                \n            \n\n\n            \n                \n                    Defined in server/app.module.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { DynamicModule, Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { UsersModule } from \"./users/users.module\";\nimport { AuthModule } from \"./auth/auth.module\";\nimport { WikidataModule } from \"./wikidata/wikidata.module\";\nimport { PersonalityModule } from \"./personality/personality.module\";\nimport { ClaimModule } from \"./claim/claim.module\";\nimport { ClaimReviewModule } from \"./claim-review/claim-review.module\";\nimport { SourceModule } from \"./source/source.module\";\nimport { StatsModule } from \"./stats/stats.module\";\nimport { RootController } from \"./root/root.controller\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { ViewModule } from \"./view/view.module\";\nimport { HomeModule } from \"./home/home.module\";\nimport { EmailModule } from \"./email/email.module\";\n\n@Module({})\nexport class AppModule {\n    static register(options): DynamicModule {\n        // TODO: interface app with service-runner metrics interface\n        return {\n            module: AppModule,\n            imports: [\n                MongooseModule.forRoot(\n                    options.db.connection_uri,\n                    options.db.options\n                ),\n                ConfigModule.forRoot({\n                    load: [() => options.config || {}],\n                }),\n                UsersModule,\n                AuthModule,\n                WikidataModule,\n                PersonalityModule,\n                ClaimModule,\n                ClaimReviewModule,\n                SourceModule,\n                StatsModule,\n                ViewModule,\n                HomeModule,\n                EmailModule\n            ],\n            controllers: [RootController],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nLocalSerializer\n\nLocalSerializer\n\nAuthModule -->\n\nLocalSerializer->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            LocalSerializer\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { UsersModule } from \"../users/users.module\";\nimport { PassportModule } from \"@nestjs/passport\";\nimport { LocalStrategy } from \"./local.strategy\";\nimport { LocalSerializer } from \"./local.serializer\";\n\n@Module({\n    imports: [UsersModule, PassportModule.register({ session: true })],\n    providers: [LocalStrategy, LocalSerializer],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Claim.html":{"url":"classes/Claim.html","title":"class - Claim","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Claim\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim/schemas/claim.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                date\n                            \n                            \n                                personality\n                            \n                            \n                                slug\n                            \n                            \n                                title\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/schemas/claim.schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/schemas/claim.schema.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        personality\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Personality\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'Personality'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/schemas/claim.schema.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/schemas/claim.schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/schemas/claim.schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, validate: undefined, message: tag => })\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim/schemas/claim.schema.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport * as mongoose from \"mongoose\";\nimport { Personality } from \"../../personality/schemas/personality.schema\";\nimport { ClaimReview } from \"../../claim-review/schemas/claim-review.schema\";\nimport { Source } from \"../../source/schemas/source.schema\";\n\nexport type ClaimDocument = Claim & mongoose.Document;\n\n@Schema({ toObject: {virtuals: true}, toJSON: {virtuals: true} })\nexport class Claim {\n    @Prop({ required: true })\n    title: string;\n\n    @Prop({ required: true })\n    slug: string;\n\n    @Prop({ type: Object, required: true })\n    content: object;\n\n    @Prop({\n        required: true,\n        validate: {\n            validator: (v) => {\n                return [\"speech\", \"twitter\"].indexOf(v) !== -1;\n            },\n        },\n        message: (tag) => `${tag} is not a valid claim type.`,\n    })\n    type: string;\n\n    @Prop({ required: true })\n    date: Date;\n\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"Personality\",\n    })\n    personality: Personality;\n}\nconst ClaimSchemaRaw = SchemaFactory.createForClass(Claim);\n\nClaimSchemaRaw.virtual('reviews', {\n    ref: 'ClaimReview',\n    localField: '_id',\n    foreignField: 'claim'\n});\n\nClaimSchemaRaw.virtual('sources', {\n    ref: 'Source',\n    localField: '_id',\n    foreignField: 'targetId'\n});\n\nexport const ClaimSchema = ClaimSchemaRaw;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ClaimController.html":{"url":"controllers/ClaimController.html","title":"controller - ClaimController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ClaimController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim/claim.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                _checkCaptchaResponse\n                            \n                            \n                                _getSentenceByHashAndClaimId\n                            \n                            \n                                _verifyInputsQuery\n                            \n                            \n                                    Public\n                                    Async\n                                claimCreatePage\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                getById\n                            \n                            \n                                    Public\n                                    Async\n                                getClaimReviewPage\n                            \n                            \n                                getSentenceByHash\n                            \n                            \n                                getSentenceReviewsByHash\n                            \n                            \n                                listAll\n                            \n                            \n                                    Public\n                                    Async\n                                personalityClaimPage\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        _checkCaptchaResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    _checkCaptchaResponse(secret, response)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    secret\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _getSentenceByHashAndClaimId\n                        \n                    \n                \n            \n            \n                \n_getSentenceByHashAndClaimId(sentenceHash, claimId, req)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.controller.ts:158\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentenceHash\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _verifyInputsQuery\n                        \n                    \n                \n            \n            \n                \n_verifyInputsQuery(query)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        claimCreatePage\n                        \n                    \n                \n            \n            \n                \n                    \n                    claimCreatePage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('personality/:slug/claim/create/')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:229\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(body)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Post('api/claim')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(params)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Delete('api/claim/:id')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getById\n                        \n                    \n                \n            \n            \n                \ngetById(params)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('api/claim/:id')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getClaimReviewPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    getClaimReviewPage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('personality/:personalitySlug/claim/:claimSlug/sentence/:sentenceHash')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:194\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSentenceByHash\n                        \n                    \n                \n            \n            \n                \ngetSentenceByHash(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('api/claim/:claimId/sentence/:sentenceHash')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:188\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSentenceReviewsByHash\n                        \n                    \n                \n            \n            \n                \ngetSentenceReviewsByHash(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('api/claim/:claimId/sentence/:sentenceHash/reviews')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        listAll\n                        \n                    \n                \n            \n            \n                \nlistAll(query)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('api/claim')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        personalityClaimPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    personalityClaimPage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('personality/:personalitySlug/claim/:claimSlug')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:254\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Put('api/claim/:id')\n                \n            \n\n            \n                \n                    Defined in server/claim/claim.controller.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get, Logger,\n    Param,\n    Post,\n    Put,\n    Query,\n    Req,\n    Res,\n    UseGuards,\n} from \"@nestjs/common\";\nimport { ClaimReviewService } from \"../claim-review/claim-review.service\";\nimport { ClaimService } from \"./claim.service\";\nimport * as qs from \"querystring\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { HttpService } from \"@nestjs/axios\";\nimport { SessionGuard } from \"../auth/session.guard\";\nimport {Request, Response} from \"express\";\nimport {parse} from \"url\";\nimport {PersonalityService} from \"../personality/personality.service\";\nimport {ViewService} from \"../view/view.service\";\nimport * as mongoose from \"mongoose\";\n\n@Controller()\nexport class ClaimController {\n    private readonly logger = new Logger(\"ClaimController\");\n    constructor(\n        private claimReviewService: ClaimReviewService,\n        private personalityService: PersonalityService,\n        private claimService: ClaimService,\n        private configService: ConfigService,\n        private httpService: HttpService,\n        private viewService: ViewService,\n    ) {}\n\n    async _checkCaptchaResponse(secret, response) {\n        const RECAPTCHA_API_URL = \"https://www.google.com/recaptcha/api\";\n        const { data } = await this.httpService.post(\n            `${RECAPTCHA_API_URL}/siteverify`,\n            qs.stringify({\n                secret,\n                response,\n            })\n        ).toPromise();\n\n        return data;\n    }\n    _verifyInputsQuery(query) {\n        const queryInputs = {};\n        if (query.personality) {\n            // @ts-ignore\n            queryInputs.personality = new mongoose.Types.ObjectId(query.personality);\n        }\n\n        return queryInputs;\n    }\n\n    @Get(\"api/claim\")\n    listAll(@Query() query) {\n        const { page = 0, pageSize = 10, order = \"asc\" } = query;\n        const queryInputs = this._verifyInputsQuery(query);\n        return Promise.all([\n            this.claimService.listAll(\n                page,\n                parseInt(pageSize, 10),\n                order,\n                queryInputs\n            ),\n            this.claimService.count(queryInputs),\n        ]).then(([claims, totalClaims]) => {\n            const totalPages = Math.ceil(totalClaims / parseInt(pageSize, 10));\n\n            this.logger.log(\n                `Found ${totalClaims} claims. Page ${page} of ${totalPages}`\n            );\n\n            return {\n                claims,\n                totalClaims,\n                totalPages,\n                page,\n                pageSize,\n            };\n        }).catch((error) => this.logger.error(error));\n    }\n\n    @UseGuards(SessionGuard)\n    @Post(\"api/claim\")\n    async create(@Body() body) {\n        const secret = this.configService.get(\"recaptcha_secret\");\n        const recaptchaCheck = await this._checkCaptchaResponse(\n            secret,\n            body && body.recaptcha\n        );\n\n        // @ts-ignore\n        if (!recaptchaCheck.success) {\n            this.logger.error(`error/recaptcha ${recaptchaCheck}`);\n            // next(\n            //     Requester.internalError(res, \"Error with your reCaptcha response\")\n            // );\n            throw Error();\n        }\n        return await this.claimService.create(body);\n    }\n\n    @Get(\"api/claim/:id\")\n    getById(@Param() params) {\n        return this.claimService.getById(params.id);\n    }\n\n    @UseGuards(SessionGuard)\n    @Put(\"api/claim/:id\")\n    update(@Req() req) {\n        return this.claimService.update(req.params.id, req.body);\n    }\n\n    @UseGuards(SessionGuard)\n    @Delete(\"api/claim/:id\")\n    delete(@Param() params) {\n        return this.claimService.delete(params.id);\n    }\n\n    @Get(\"api/claim/:claimId/sentence/:sentenceHash/reviews\")\n    getSentenceReviewsByHash(@Req() req) {\n        const { sentenceHash } = req.params;\n        const { page, pageSize, order } = req.query;\n\n        return Promise.all([\n            this.claimReviewService.getReviewsBySentenceHash(\n                sentenceHash,\n                page,\n                pageSize,\n                order || \"desc\"\n            ),\n            this.claimReviewService.countReviewsBySentenceHash(sentenceHash),\n        ]).then(([reviews, totalReviews]) => {\n            totalReviews = totalReviews[0]?.count;\n            // @ts-ignore\n            const totalPages = Math.ceil(totalReviews / parseInt(pageSize, 10));\n\n            this.logger.log(\n                `Found ${totalReviews} reviews for sentence hash ${sentenceHash}. Page ${page} of ${totalPages}`\n            );\n\n            return {\n                reviews,\n                totalReviews,\n                totalPages,\n                page,\n                pageSize,\n            };\n        });\n    }\n\n    _getSentenceByHashAndClaimId(sentenceHash, claimId, req) {\n        const user = req.user;\n        return Promise.all([\n            this.claimReviewService.getReviewStatsBySentenceHash(sentenceHash),\n            this.claimService.getById(claimId),\n            this.claimReviewService.getUserReviewBySentenceHash(\n                sentenceHash,\n                user?._id\n            ),\n        ]).then(([stats, claimObj, userReview]) => {\n            let sentenceObj;\n\n            claimObj.content.object.forEach((p) => {\n                p.content.forEach((sentence) => {\n                    if (sentence.props[\"data-hash\"] === sentenceHash) {\n                        sentenceObj = sentence;\n                    }\n                });\n            });\n            return {\n                userReview,\n                date: claimObj.date,\n                personality: claimObj.personality,\n                stats,\n                ...sentenceObj,\n            };\n        });\n    }\n\n    @Get(\"api/claim/:claimId/sentence/:sentenceHash\")\n    getSentenceByHash(@Req() req) {\n        const { sentenceHash, claimId } = req.params;\n        return this._getSentenceByHashAndClaimId(sentenceHash, claimId, req);\n    }\n\n    @Get(\"personality/:personalitySlug/claim/:claimSlug/sentence/:sentenceHash\")\n    public async getClaimReviewPage(@Req() req: Request, @Res() res: Response) {\n        const { sentenceHash, personalitySlug, claimSlug } = req.params;\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n        req.language = req.headers[\"accept-language\"] || \"en\";\n\n        const personality = await this.personalityService.getBySlug(\n            personalitySlug,\n            // @ts-ignore\n            req.language\n        );\n\n        const claim = await this.claimService.getByPersonalityIdAndClaimSlug(\n            personality._id,\n            claimSlug\n        );\n\n        const sentence = await this._getSentenceByHashAndClaimId(sentenceHash, claim._id, req);\n\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/claim-review\",\n                Object.assign(parsedUrl.query, {\n                    personality,\n                    claim,\n                    sentence,\n                    sitekey: this.configService.get(\"recaptcha_sitekey\"),\n                })\n            );\n    }\n\n    @Get(\"personality/:slug/claim/create/\")\n    public async claimCreatePage(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n        req.language = req.headers[\"accept-language\"] || \"en\";\n\n        const personality = await this.personalityService.getBySlug(\n            req.params.slug,\n            // @ts-ignore\n            req.language\n        );\n\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/claim-create\",\n                Object.assign(parsedUrl.query, {\n                    personality,\n                    sitekey: this.configService.get(\"recaptcha_sitekey\"),\n                })\n            );\n    }\n\n    @Get(\"personality/:personalitySlug/claim/:claimSlug\")\n    public async personalityClaimPage(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n        req.language = req.headers[\"accept-language\"] || \"en\";\n\n        const personality = await this.personalityService.getBySlug(\n            req.params.personalitySlug,\n            // @ts-ignore\n            req.language\n        );\n\n        const claim = await this.claimService.getByPersonalityIdAndClaimSlug(\n            personality._id,\n            req.params.claimSlug\n        );\n\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/claim-page\",\n                Object.assign(parsedUrl.query, { personality, claim })\n            );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ClaimModule.html":{"url":"modules/ClaimModule.html","title":"module - ClaimModule","body":"\n                   \n\n\n\n\n    Modules\n    ClaimModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ClaimModule\n\n\n\ncluster_ClaimModule_imports\n\n\n\ncluster_ClaimModule_providers\n\n\n\ncluster_ClaimModule_exports\n\n\n\n\nClaimReviewModule\n\nClaimReviewModule\n\n\n\nClaimModule\n\nClaimModule\n\nClaimModule -->\n\nClaimReviewModule->ClaimModule\n\n\n\n\n\nParserModule\n\nParserModule\n\nClaimModule -->\n\nParserModule->ClaimModule\n\n\n\n\n\nPersonalityModule\n\nPersonalityModule\n\nClaimModule -->\n\nPersonalityModule->ClaimModule\n\n\n\n\n\nSourceModule\n\nSourceModule\n\nClaimModule -->\n\nSourceModule->ClaimModule\n\n\n\n\n\nViewModule\n\nViewModule\n\nClaimModule -->\n\nViewModule->ClaimModule\n\n\n\n\n\nClaimService \n\nClaimService \n\nClaimService  -->\n\nClaimModule->ClaimService \n\n\n\n\n\nClaimService\n\nClaimService\n\nClaimModule -->\n\nClaimService->ClaimModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/claim/claim.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ClaimService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ClaimController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClaimReviewModule\n                        \n                        \n                            ParserModule\n                        \n                        \n                            PersonalityModule\n                        \n                        \n                            SourceModule\n                        \n                        \n                            ViewModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ClaimService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { Claim, ClaimSchema } from \"./schemas/claim.schema\";\nimport { ClaimService } from \"./claim.service\";\nimport { ClaimController } from \"./claim.controller\";\nimport { ClaimReviewModule } from \"../claim-review/claim-review.module\";\nimport { ParserModule } from \"../parser/parser.module\";\nimport { PersonalityModule } from \"../personality/personality.module\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { HttpModule } from \"@nestjs/axios\";\nimport { ViewModule } from \"../view/view.module\";\nimport { SourceModule } from \"../source/source.module\";\n\nconst ClaimModel = MongooseModule.forFeature([\n    {\n        name: Claim.name,\n        schema: ClaimSchema,\n    },\n]);\n\n@Module({\n    imports: [\n        ClaimModel,\n        ClaimReviewModule,\n        ParserModule,\n        PersonalityModule,\n        ConfigModule,\n        HttpModule,\n        ViewModule,\n        SourceModule,\n    ],\n    exports: [ClaimService],\n    providers: [ClaimService],\n    controllers: [ClaimController],\n})\nexport class ClaimModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClaimReview.html":{"url":"classes/ClaimReview.html","title":"class - ClaimReview","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClaimReview\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim-review/schemas/claim-review.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                claim\n                            \n                            \n                                classification\n                            \n                            \n                                personality\n                            \n                            \n                                report\n                            \n                            \n                                sentence_content\n                            \n                            \n                                sentence_hash\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        claim\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Claim\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'Claim'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/schemas/claim-review.schema.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        classification\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, validate: undefined, message: tag => })\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/schemas/claim-review.schema.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        personality\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Personality\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'Personality'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/schemas/claim-review.schema.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        report\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/schemas/claim-review.schema.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sentence_content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/schemas/claim-review.schema.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sentence_hash\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/schemas/claim-review.schema.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/claim-review/schemas/claim-review.schema.ts:63\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { Claim } from \"../../claim/schemas/claim.schema\";\nimport { Personality } from \"../../personality/schemas/personality.schema\";\nimport * as mongoose from \"mongoose\";\nimport { User } from \"../../users/schemas/user.schema\";\nimport { Source } from \"../../source/schemas/source.schema\";\n\nexport type ClaimReviewDocument = ClaimReview & mongoose.Document;\n\n@Schema({ toObject: {virtuals: true}, toJSON: {virtuals: true} })\nexport class ClaimReview {\n    @Prop({\n        required: true,\n        validate: {\n            validator: (v) => {\n                return (\n                    [\n                        \"not-fact\",\n                        \"true\",\n                        \"true-but\",\n                        \"arguable\",\n                        \"misleading\",\n                        \"false\",\n                        \"unsustainable\",\n                        \"exaggerated\",\n                        \"unverifiable\",\n                    ].indexOf(v) !== -1\n                );\n            },\n        },\n        message: (tag) => `${tag} is not a valid classification.`,\n    })\n    classification: string;\n\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"Claim\",\n    })\n    claim: Claim;\n\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"Personality\",\n    })\n    personality: Personality;\n\n    @Prop({ required: true })\n    sentence_hash: string;\n\n    @Prop({ required: true })\n    sentence_content: string;\n\n    @Prop({ required: true })\n    report: string;\n\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"User\",\n    })\n    user: User;\n\n    // TODO: revision_id\n}\n\nconst ClaimReviewSchemaRaw = SchemaFactory.createForClass(ClaimReview);\n\nClaimReviewSchemaRaw.virtual('sources', {\n    ref: 'Source',\n    localField: '_id',\n    foreignField: 'targetId'\n});\n\nexport const ClaimReviewSchema = ClaimReviewSchemaRaw;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ClaimReviewController.html":{"url":"controllers/ClaimReviewController.html","title":"controller - ClaimReviewController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ClaimReviewController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim-review/claim-review.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/claimreview\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                _checkCaptchaResponse\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        _checkCaptchaResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    _checkCaptchaResponse(secret, response)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    secret\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in server/claim-review/claim-review.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(params)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in server/claim-review/claim-review.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(params)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in server/claim-review/claim-review.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {Controller, Delete, Get, Param, Post, Req, UseGuards} from \"@nestjs/common\";\nimport { ClaimReviewService } from \"./claim-review.service\";\nimport * as qs from \"querystring\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { HttpService } from \"@nestjs/axios\";\nimport {SessionGuard} from \"../auth/session.guard\";\n\n@Controller(\"api/claimreview\")\nexport class ClaimReviewController {\n    constructor(\n        private claimReviewService: ClaimReviewService,\n        private configService: ConfigService,\n        private httpService: HttpService\n    ) {}\n\n    async _checkCaptchaResponse(secret, response) {\n        const RECAPTCHA_API_URL = \"https://www.google.com/recaptcha/api\";\n        const { data } = await this.httpService.post(\n            `${RECAPTCHA_API_URL}/siteverify`,\n            qs.stringify({\n                secret,\n                response,\n            })\n        ).toPromise();\n\n        return data;\n    }\n\n    @UseGuards(SessionGuard)\n    @Post()\n    async create(@Req() req) {\n        const secret = this.configService.get(\"recaptcha_secret\");\n        const recaptchaCheck = await this._checkCaptchaResponse(\n            secret,\n            req.body && req.body.recaptcha\n        );\n\n        // @ts-ignore\n        if (!recaptchaCheck.success) {\n            throw Error();\n            // app.logger.log(\"error/recaptcha\", recaptchaCheck);\n            // next(\n            //     Requester.internalError(res, \"Error with your reCaptcha response\")\n            // );\n        } else {\n            return this.claimReviewService.create({\n                ...req.body,\n                user: req?.user?._id,\n            });\n        }\n    }\n\n    @Get(\":id\")\n    get(@Param() params) {\n        return this.claimReviewService.getById(params.id);\n    }\n\n    @UseGuards(SessionGuard)\n    @Delete(\":id\")\n    delete(@Param() params) {\n        return this.claimReviewService.delete(params.id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ClaimReviewModule.html":{"url":"modules/ClaimReviewModule.html","title":"module - ClaimReviewModule","body":"\n                   \n\n\n\n\n    Modules\n    ClaimReviewModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ClaimReviewModule\n\n\n\ncluster_ClaimReviewModule_imports\n\n\n\ncluster_ClaimReviewModule_exports\n\n\n\ncluster_ClaimReviewModule_providers\n\n\n\n\nSourceModule\n\nSourceModule\n\n\n\nClaimReviewModule\n\nClaimReviewModule\n\nClaimReviewModule -->\n\nSourceModule->ClaimReviewModule\n\n\n\n\n\nClaimReviewService \n\nClaimReviewService \n\nClaimReviewService  -->\n\nClaimReviewModule->ClaimReviewService \n\n\n\n\n\nClaimReviewService\n\nClaimReviewService\n\nClaimReviewModule -->\n\nClaimReviewService->ClaimReviewModule\n\n\n\n\n\nUtilService\n\nUtilService\n\nClaimReviewModule -->\n\nUtilService->ClaimReviewModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/claim-review/claim-review.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ClaimReviewService\n                        \n                        \n                            UtilService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ClaimReviewController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SourceModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ClaimReviewService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ClaimReview, ClaimReviewSchema } from \"./schemas/claim-review.schema\";\nimport { ClaimReviewService } from \"./claim-review.service\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { ClaimReviewController } from \"./claim-review.controller\";\nimport { UtilService } from \"../util\";\nimport { SourceModule } from \"../source/source.module\";\nimport { HttpModule } from \"@nestjs/axios\";\nimport { ConfigModule } from \"@nestjs/config\";\n\nexport const ClaimReviewModel = MongooseModule.forFeature([\n    {\n        name: ClaimReview.name,\n        schema: ClaimReviewSchema,\n    },\n]);\n\n@Module({\n    imports: [ClaimReviewModel, SourceModule, HttpModule, ConfigModule],\n    providers: [UtilService, ClaimReviewService],\n    exports: [ClaimReviewService],\n    controllers: [ClaimReviewController],\n})\nexport class ClaimReviewModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClaimReviewService.html":{"url":"injectables/ClaimReviewService.html","title":"injectable - ClaimReviewService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClaimReviewService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim-review/claim-review.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                _reviewsBySentenceHashAggregated\n                            \n                            \n                                _topClassificationAccumulator\n                            \n                            \n                                agreggateClassification\n                            \n                            \n                                count\n                            \n                            \n                                countReviewsBySentenceHash\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                getById\n                            \n                            \n                                getReviewsByClaimId\n                            \n                            \n                                getReviewsBySentenceHash\n                            \n                            \n                                    Async\n                                getReviewStatsByClaimId\n                            \n                            \n                                    Async\n                                getReviewStatsBySentenceHash\n                            \n                            \n                                getUserReviewBySentenceHash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ClaimReviewModel: Model, sourceService: SourceService, util: UtilService)\n                    \n                \n                        \n                            \n                                Defined in server/claim-review/claim-review.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ClaimReviewModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sourceService\n                                                  \n                                                        \n                                                                        SourceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        util\n                                                  \n                                                        \n                                                                        UtilService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        _reviewsBySentenceHashAggregated\n                        \n                    \n                \n            \n            \n                \n_reviewsBySentenceHashAggregated(sentenceHash)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentenceHash\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _topClassificationAccumulator\n                        \n                    \n                \n            \n            \n                \n_topClassificationAccumulator()\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { $accumulator: { init: () => {}; accumulate: (state: any, classification: any) => any; accumulateArgs: {}; merge: (state1: any, state2: any) => any; finalize: (state: any) => { classification: any; count: any; }; lang: string; }; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        agreggateClassification\n                        \n                    \n                \n            \n            \n                \nagreggateClassification(match: any)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    match\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        count\n                        \n                    \n                \n            \n            \n                \ncount(query: any)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        countReviewsBySentenceHash\n                        \n                    \n                \n            \n            \n                \ncountReviewsBySentenceHash(sentenceHash)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentenceHash\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(claimReview)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:163\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimReview\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(claimReviewId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:210\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimReviewId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getById\n                        \n                    \n                \n            \n            \n                \ngetById(claimReviewId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:187\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimReviewId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getReviewsByClaimId\n                        \n                    \n                \n            \n            \n                \ngetReviewsByClaimId(claimId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getReviewsBySentenceHash\n                        \n                    \n                \n            \n            \n                \ngetReviewsBySentenceHash(sentenceHash, page, pageSize, order)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentenceHash\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    page\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageSize\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    order\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getReviewStatsByClaimId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getReviewStatsByClaimId(claimId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getReviewStatsBySentenceHash\n                        \n                    \n                \n            \n            \n                \n                    \n                    getReviewStatsBySentenceHash(sentenceHash)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentenceHash\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserReviewBySentenceHash\n                        \n                    \n                \n            \n            \n                \ngetUserReviewBySentenceHash(sentenceHash, userId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim-review/claim-review.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentenceHash\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"ClaimReviewService\")\n                    \n                \n                    \n                        \n                                Defined in server/claim-review/claim-review.service.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {Injectable, Logger} from \"@nestjs/common\";\nimport { Model, Types } from \"mongoose\";\nimport {\n    ClaimReview,\n    ClaimReviewDocument,\n} from \"./schemas/claim-review.schema\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport { UtilService } from \"../util\";\nimport { SourceService } from \"../source/source.service\";\n\n@Injectable()\nexport class ClaimReviewService {\n    private readonly logger = new Logger(\"ClaimReviewService\");\n    constructor(\n        @InjectModel(ClaimReview.name)\n        private ClaimReviewModel: Model,\n        private sourceService: SourceService,\n        private util: UtilService\n    ) {}\n\n    agreggateClassification(match: any) {\n        return this.ClaimReviewModel.aggregate([\n            { $match: match },\n            { $group: { _id: \"$classification\", count: { $sum: 1 } } },\n            { $sort: { count: -1 } },\n        ]);\n    }\n\n    count(query: any = {}) {\n        return this.ClaimReviewModel.countDocuments().where(query);\n    }\n\n    async getReviewStatsBySentenceHash(sentenceHash) {\n        const reviews = await this.ClaimReviewModel.aggregate([\n            { $match: { sentence_hash: sentenceHash } },\n            { $group: { _id: \"$classification\", count: { $sum: 1 } } },\n            { $sort: { count: -1 } },\n        ]);\n        return this.util.formatStats(reviews);\n    }\n\n    async getReviewStatsByClaimId(claimId) {\n        const reviews = await this.ClaimReviewModel.aggregate([\n            { $match: { claim: claimId } },\n            { $group: { _id: \"$classification\", count: { $sum: 1 } } },\n            { $sort: { count: -1 } },\n        ]);\n        return this.util.formatStats(reviews);\n    }\n\n    getReviewsByClaimId(claimId) {\n        return this.ClaimReviewModel.aggregate([\n            { $match: { claim: claimId } },\n            {\n                $group: {\n                    _id: \"$sentence_hash\",\n                    topClassification: this._topClassificationAccumulator(),\n                },\n            },\n        ]).option({ serializeFunctions: true });\n    }\n\n    getUserReviewBySentenceHash(sentenceHash, userId) {\n        if (!userId) {\n            return Promise.resolve(undefined);\n        }\n        return this.ClaimReviewModel.findOne(\n            { sentence_hash: sentenceHash, user: userId },\n            {\n                sources: 1,\n                _id: 1,\n                classification: 1,\n                user: 1,\n            }\n        );\n    }\n\n    countReviewsBySentenceHash(sentenceHash) {\n        return this._reviewsBySentenceHashAggregated(sentenceHash).count(\n            \"count\"\n        );\n    }\n\n    getReviewsBySentenceHash(sentenceHash, page, pageSize, order) {\n        pageSize = parseInt(pageSize);\n        page = parseInt(page);\n\n        return this._reviewsBySentenceHashAggregated(sentenceHash)\n            .skip(page * pageSize)\n            .limit(pageSize)\n            .sort({ _id: order });\n    }\n\n    _reviewsBySentenceHashAggregated(sentenceHash) {\n        return this.ClaimReviewModel.aggregate([\n            { $match: { sentence_hash: sentenceHash } },\n            // Virtual Populates doesn't work with aggregate\n            // https://stackoverflow.com/questions/47669178/mongoose-virtual-populate-and-aggregates\n            {\n                $lookup: {\n                    from: 'sources',\n                    localField: '_id',\n                    foreignField: 'targetId',\n                    as: 'sources'\n                }\n            },\n            {\n                $project: {\n                    _id: 1,\n                    sources: 1,\n                    report: 1,\n                    classification: 1,\n                    user: 1,\n                },\n            },\n        ]);\n    }\n\n    _topClassificationAccumulator() {\n        return {\n            $accumulator: {\n                init: function () {\n                    return {};\n                },\n                accumulate: function (state, classification) {\n                    if (!state[classification]) {\n                        state[classification] = 1;\n                    } else {\n                        state[classification]++;\n                    }\n\n                    return state;\n                },\n                accumulateArgs: [\"$classification\"],\n                merge: function (state1, state2) {\n                    return { ...state1, ...state2 };\n                },\n                finalize: function (state) {\n                    // Find the classification with bigger count\n                    const topClassification = Object.keys(state).reduce(\n                        (acc, classification) => {\n                            if (!state[acc]) {\n                                return classification;\n                            } else {\n                                return state[acc] >= state[classification]\n                                    ? acc\n                                    : classification;\n                            }\n                        },\n                        \"\"\n                    );\n                    // TODO: what can we do about ties?\n                    return {\n                        classification: topClassification,\n                        count: state[topClassification],\n                    };\n                },\n                lang: \"js\",\n            },\n        };\n    }\n\n    async create(claimReview) {\n        // Cast ObjectId\n        claimReview.personality = new Types.ObjectId(claimReview.personality);\n        claimReview.claim = new Types.ObjectId(claimReview.claim);\n        claimReview.user = new Types.ObjectId(claimReview.user);\n        const newClaimReview = new this.ClaimReviewModel(claimReview);\n        if (claimReview.sources && Array.isArray(claimReview.sources)) {\n            try {\n                for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClaimService.html":{"url":"injectables/ClaimService.html","title":"injectable - ClaimService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClaimService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/claim/claim.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                optionsToUpdate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                calculateOverallStats\n                            \n                            \n                                count\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findOneAndUpdate\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getByPersonalityIdAndClaimSlug\n                            \n                            \n                                    Async\n                                listAll\n                            \n                            \n                                    Private\n                                    Async\n                                postProcess\n                            \n                            \n                                    Private\n                                transformContentObject\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ClaimModel: Model, claimReviewService: ClaimReviewService, sourceService: SourceService, parserService: ParserService)\n                    \n                \n                        \n                            \n                                Defined in server/claim/claim.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ClaimModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        claimReviewService\n                                                  \n                                                        \n                                                                        ClaimReviewService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sourceService\n                                                  \n                                                        \n                                                                        SourceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        parserService\n                                                  \n                                                        \n                                                                        ParserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        calculateOverallStats\n                        \n                    \n                \n            \n            \n                \n                    \n                    calculateOverallStats(claim)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:145\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claim\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         { totalClaims: number; totalClaimsReviewed: number; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        count\n                        \n                    \n                \n            \n            \n                \ncount(query: any)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(claim)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claim\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(claimId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneAndUpdate\n                        \n                    \n                \n            \n            \n                \nfindOneAndUpdate(query, push)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:184\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    push\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(claimId)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByPersonalityIdAndClaimSlug\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByPersonalityIdAndClaimSlug(personalityId, claimSlug)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    personalityId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    claimSlug\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAll(page, pageSize, order, query)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    page\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageSize\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    order\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        postProcess\n                        \n                    \n                \n            \n            \n                \n                    \n                    postProcess(claim)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claim\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        transformContentObject\n                        \n                    \n                \n            \n            \n                \n                    \n                    transformContentObject(claimContent, reviews)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:164\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimContent\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    reviews\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(claimId, claimBody)\n                \n            \n\n\n            \n                \n                    Defined in server/claim/claim.service.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claimId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    claimBody\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"ClaimService\")\n                    \n                \n                    \n                        \n                                Defined in server/claim/claim.service.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        optionsToUpdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in server/claim/claim.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {Injectable, Logger} from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport { Model, Types } from \"mongoose\";\nimport slugify from 'slugify'\nimport { Claim, ClaimDocument } from \"../claim/schemas/claim.schema\";\nimport { ClaimReviewService } from \"../claim-review/claim-review.service\";\nimport { ParserService } from \"../parser/parser.service\";\nimport { SourceService } from \"../source/source.service\";\n\n@Injectable()\nexport class ClaimService {\n    private optionsToUpdate: { new: boolean; upsert: boolean };\n    private readonly logger = new Logger(\"ClaimService\");\n\n    constructor(\n        @InjectModel(Claim.name)\n        private ClaimModel: Model,\n        private claimReviewService: ClaimReviewService,\n        private sourceService: SourceService,\n        private parserService: ParserService\n    ) {\n        this.optionsToUpdate = {\n            new: true,\n            upsert: true,\n        };\n    }\n\n    async listAll(page, pageSize, order, query) {\n        if (query.personality) {\n            query.personality = new Types.ObjectId(query.personality)\n        }\n        const claims = await this.ClaimModel.find(query)\n            .skip(page * pageSize)\n            .limit(pageSize)\n            .sort({ _id: order })\n            .lean();\n        return Promise.all(\n            claims.map((claim) => {\n                return this.postProcess(claim);\n            })\n        );\n    }\n\n    count(query: any = {}) {\n        return this.ClaimModel.countDocuments().where(query);\n    }\n\n    async create(claim) {\n        claim.content = this.parserService.parse(claim.content);\n        claim.slug = slugify(claim.title, {\n            lower: true,     // convert to lower case, defaults to `false`\n            strict: true     // strip special characters except replacement, defaults to `false`\n        })\n        claim.personality = new Types.ObjectId(claim.personality);\n        const newClaim = new this.ClaimModel(claim);\n        if (claim.sources && Array.isArray(claim.sources)) {\n            try {\n                for (let i = 0; i  {\n                totalClaims += p.content.length;\n                p.content.forEach((sentence) => {\n                    if (sentence.props.topClassification) {\n                        totalClaimsReviewed++;\n                    }\n                });\n            }, 0);\n        }\n        return {\n            totalClaims,\n            totalClaimsReviewed,\n        };\n    }\n\n    private transformContentObject(claimContent, reviews) {\n        if (!claimContent || reviews.length  {\n            paragraph.content.forEach((sentence, sentenceIndex) => {\n                const claimReview = reviews.find((review) => {\n                    return review._id === sentence.props[\"data-hash\"];\n                });\n                if (claimReview) {\n                    claimContent[paragraphIndex].content[sentenceIndex].props =\n                        Object.assign(sentence.props, {\n                            topClassification: claimReview.topClassification,\n                        });\n                }\n            });\n        });\n        return claimContent;\n    }\n\n    findOneAndUpdate(query, push) {\n        return this.ClaimModel.findOneAndUpdate(\n            { ...query },\n            { $push: { ...push } },\n            { new: true },\n            (e) => {\n                if (e) {\n                    throw e;\n                }\n            }\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailModule.html":{"url":"modules/EmailModule.html","title":"module - EmailModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/email/email.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { EmailService } from \"./email.service\";\nimport { ConfigModule } from \"@nestjs/config\";\n\n\n@Module({\n    exports: [EmailService],\n    imports: [ConfigModule],\n    providers: [EmailService],\n})\nexport class EmailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/email/email.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTransport\n                            \n                            \n                                getEmailBody\n                            \n                            \n                                    Async\n                                sendEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in server/email/email.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createTransport\n                        \n                    \n                \n            \n            \n                \n                    \n                    createTransport()\n                \n            \n\n\n            \n                \n                    Defined in server/email/email.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEmailBody\n                        \n                    \n                \n            \n            \n                \ngetEmailBody(options, templatePath: string)\n                \n            \n\n\n            \n                \n                    Defined in server/email/email.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    templatePath\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"./template/email.html\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendEmail(to, subject, text, templateOptions, templatePath)\n                \n            \n\n\n            \n                \n                    Defined in server/email/email.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    to\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    subject\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    text\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    templateOptions\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    templatePath\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"EmailService\")\n                    \n                \n                    \n                        \n                                Defined in server/email/email.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nconst nodemailer = require(\"nodemailer\");\nconst handlebars = require(\"handlebars\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\n@Injectable()\nexport class EmailService {\n    private readonly logger = new Logger(\"EmailService\");\n\n    constructor(\n        private configService: ConfigService,\n    ) {}\n\n    getEmailBody (options, templatePath = \"./template/email.html\") {\n        const html = fs.readFileSync(path.resolve(__dirname, templatePath), {\n            encoding: \"utf-8\",\n        });\n        const template = handlebars.compile(html);\n        return template({\n            ...options,\n            baseUrl: this.configService.get(\"web_url\"),\n        });\n    }\n\n    async createTransport() {\n        const transporter = nodemailer.createTransport({\n            host: this.configService.get(\"smtp_host\"),\n            port: this.configService.get(\"smtp_port\"),\n            secure: this.configService.get(\"smtp_secure\"),\n            auth: {\n                user: this.configService.get(\"smtp_email_user\"),\n                pass: this.configService.get(\"smtp_email_pass\")\n            },\n        });\n        return transporter;\n    }\n\n    async sendEmail(to, subject, text, templateOptions, templatePath) {\n        const transporter = await this.createTransport();\n        const html = this.getEmailBody(templateOptions, templatePath);\n        const from = this.configService.get(\"smtp_email_user\")\n        this.logger.log(`Sending e-mail to ${to} ...`);\n        const emailResult = await transporter.sendMail({ from, to, subject, text, html })//.then(() => transporter.close());\n        return emailResult;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HomeController.html":{"url":"controllers/HomeController.html","title":"controller - HomeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HomeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/home/home.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                showHome\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        showHome\n                        \n                    \n                \n            \n            \n                \n                    \n                    showHome(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('home')\n                \n            \n\n            \n                \n                    Defined in server/home/home.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {Controller, Get, Req, Res} from \"@nestjs/common\";\nimport {ViewService} from \"../view/view.service\";\nimport {Request, Response} from \"express\";\nimport {parse} from \"url\";\nimport {PersonalityService} from \"../personality/personality.service\";\nimport {StatsService} from \"../stats/stats.service\";\n\n@Controller(\"/\")\nexport class HomeController {\n    constructor(\n        private viewService: ViewService,\n        private personalityService: PersonalityService,\n        private statsService: StatsService\n    ) {}\n\n    @Get(\"home\")\n    public async showHome(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n        req.language = req.headers[\"accept-language\"] || \"en\";\n        const { personalities } = await this.personalityService.combinedListAll({\n            // @ts-ignore\n            language: req.language,\n            pageSize: 5,\n            fetchOnly: true\n        });\n        const stats = await this.statsService.getHomeStats();\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/home-page\",\n                Object.assign(parsedUrl.query, { personalities, stats })\n            );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HomeModule.html":{"url":"modules/HomeModule.html","title":"module - HomeModule","body":"\n                   \n\n\n\n\n    Modules\n    HomeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HomeModule\n\n\n\ncluster_HomeModule_imports\n\n\n\n\nPersonalityModule\n\nPersonalityModule\n\n\n\nHomeModule\n\nHomeModule\n\nHomeModule -->\n\nPersonalityModule->HomeModule\n\n\n\n\n\nStatsModule\n\nStatsModule\n\nHomeModule -->\n\nStatsModule->HomeModule\n\n\n\n\n\nViewModule\n\nViewModule\n\nHomeModule -->\n\nViewModule->HomeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/home/home.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HomeController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PersonalityModule\n                        \n                        \n                            StatsModule\n                        \n                        \n                            ViewModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { HomeController } from \"./home.controller\";\nimport {PersonalityModule} from \"../personality/personality.module\";\nimport {StatsModule} from \"../stats/stats.module\";\nimport {ViewModule} from \"../view/view.module\";\n\n@Module({\n    imports: [PersonalityModule, StatsModule, ViewModule],\n    providers: [],\n    controllers: [HomeController],\n})\nexport class HomeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/auth/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard(\"local\") {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalSerializer.html":{"url":"injectables/LocalSerializer.html","title":"injectable - LocalSerializer","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalSerializer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/auth/local.serializer.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in server/auth/local.serializer.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Model } from \"mongoose\";\nimport * as passport from \"passport\";\nimport { User, UserDocument } from \"../users/schemas/user.schema\";\nimport { InjectModel } from \"@nestjs/mongoose\";\n\n@Injectable()\nexport class LocalSerializer {\n    constructor(\n        @InjectModel(User.name) private userModel: Model\n    ) {\n        // @ts-ignore\n        passport.serializeUser(this.userModel.serializeUser());\n        // @ts-ignore\n        passport.deserializeUser(this.userModel.deserializeUser());\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/auth/local.strategy.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in server/auth/local.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import { Strategy } from \"passport-local\";\nimport { Model } from \"mongoose\";\nimport { Injectable } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { User, UserDocument } from \"../users/schemas/user.schema\";\nimport { InjectModel } from \"@nestjs/mongoose\";\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n    constructor(\n        @InjectModel(User.name) private userModel: Model\n    ) {\n        // @ts-ignore\n        super({ usernameField: \"email\" }, userModel.authenticate());\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Logger.html":{"url":"classes/Logger.html","title":"class - Logger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Logger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/logger.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            LoggerService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                log\n                            \n                            \n                                verbose\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger)\n                    \n                \n                        \n                            \n                                Defined in server/logger.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in server/logger.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(message: any, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in server/logger.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: any, trace?: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in server/logger.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    trace\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(message)\n                \n            \n\n\n            \n                \n                    Defined in server/logger.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verbose\n                        \n                    \n                \n            \n            \n                \nverbose(message: any, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in server/logger.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(message: any, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in server/logger.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { LoggerService } from \"@nestjs/common\";\n\nexport default class Logger implements LoggerService {\n    private logger: any;\n    constructor(logger) {\n        this.logger = logger;\n    }\n\n    log(message) {\n        this.logger.log(\"info\", message);\n    }\n\n    debug(message: any, context?: string): any {\n        this.logger.log(\"debug\", message);\n    }\n\n    error(message: any, trace?: string, context?: string): any {\n        this.logger.log(\"error\", message + trace);\n    }\n\n    verbose(message: any, context?: string): any {\n        this.logger.log(\"verbose\", message);\n    }\n\n    warn(message: any, context?: string): any {\n        this.logger.log(\"warn\", message);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ParserModule.html":{"url":"modules/ParserModule.html","title":"module - ParserModule","body":"\n                   \n\n\n\n\n    Modules\n    ParserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ParserModule\n\n\n\ncluster_ParserModule_exports\n\n\n\ncluster_ParserModule_providers\n\n\n\n\nParserService \n\nParserService \n\n\n\nParserModule\n\nParserModule\n\nParserService  -->\n\nParserModule->ParserService \n\n\n\n\n\nParserService\n\nParserService\n\nParserModule -->\n\nParserService->ParserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/parser/parser.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ParserService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ParserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ParserService } from \"./parser.service\";\nimport { Module } from \"@nestjs/common\";\n\n@Module({\n    exports: [ParserService],\n    providers: [ParserService],\n})\nexport class ParserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParserService.html":{"url":"injectables/ParserService.html","title":"injectable - ParserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/parser/parser.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                nlpOptions\n                            \n                            \n                                paragraphSequence\n                            \n                            \n                                sentenceSequence\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createParagraphId\n                            \n                            \n                                createSentenceId\n                            \n                            \n                                parse\n                            \n                            \n                                parseSentence\n                            \n                            \n                                postProcessSentences\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createParagraphId\n                        \n                    \n                \n            \n            \n                \ncreateParagraphId()\n                \n            \n\n\n            \n                \n                    Defined in server/parser/parser.service.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createSentenceId\n                        \n                    \n                \n            \n            \n                \ncreateSentenceId()\n                \n            \n\n\n            \n                \n                    Defined in server/parser/parser.service.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parse\n                        \n                    \n                \n            \n            \n                \nparse(content: string)\n                \n            \n\n\n            \n                \n                    Defined in server/parser/parser.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { object: {}; text: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parseSentence\n                        \n                    \n                \n            \n            \n                \nparseSentence(sentenceContent)\n                \n            \n\n\n            \n                \n                    Defined in server/parser/parser.service.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentenceContent\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { type: string; props: { id: number; \"data-hash\": any; }; content: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postProcessSentences\n                        \n                    \n                \n            \n            \n                \npostProcessSentences(sentences)\n                \n            \n\n\n            \n                \n                    Defined in server/parser/parser.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sentences\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        nlpOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : { trim:true }\n                    \n                \n                    \n                        \n                                Defined in server/parser/parser.service.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        paragraphSequence\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in server/parser/parser.service.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sentenceSequence\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in server/parser/parser.service.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nconst md5 = require(\"md5\");\nconst nlp = require('compromise')\nnlp.extend(require('compromise-sentences'))\nnlp.extend(require('compromise-paragraphs'))\n\n// TODO: regex for future rules\n// const alphabets = /([A-Za-z])/g;\nconst prefixes = /(Mr|St|Mrs|Ms|Dr)[.]/g;\nconst phdRegex = /Ph\\.D\\./g;\n// const suffixes = \"(Inc|Ltd|Jr|Sr|Co)\";\n// const starters = /(Mr|Mrs|Ms|Dr|He\\s|She\\s|It\\s|They\\s|Their\\s|Our\\s|We\\s|But\\s|However\\s|That\\s|This\\s|Wherever)/g;\n// const acronyms = /([A-Z][.][A-Z][.](?:[A-Z][.])?)/g;\n// const websites = /[.](com|net|org|io|gov)/g;\n\n@Injectable()\nexport class ParserService {\n    paragraphSequence: number;\n    sentenceSequence: number;\n    nlpOptions: object = { trim:true };\n\n    parse(content: string) {\n        this.paragraphSequence = 0;\n        this.sentenceSequence = 0;\n        const result = [];\n        const nlpContent = nlp(content);\n        const paragraphs = nlpContent.paragraphs();\n\n        paragraphs.forEach((paragraph) => {\n            const paragraphId = this.createParagraphId();\n            const sentences = this.postProcessSentences(paragraph.sentences());\n\n            if (sentences && sentences.length) {\n                result.push({\n                    type: \"paragraph\",\n                    props: {\n                        id: paragraphId,\n                    },\n                    content: sentences.map((sentence) => this.parseSentence(sentence)),\n                });\n            }\n        });\n\n        return {\n            object: result,\n            text: nlpContent.text(this.nlpOptions),\n        };\n    }\n\n    postProcessSentences(sentences) {\n        let newSentences = [];\n        sentences.forEach(sentence => {\n            const sentenceText = sentence.text(this.nlpOptions);\n            // Extract semicolon sentences\n            let semicolonSentences = sentenceText.split(\";\");\n            if (sentenceText.includes(\";\")) {\n                semicolonSentences = semicolonSentences.map(\n                    (semicolonSentence, index) => {\n                        return index !== (semicolonSentences.length - 1)\n                            ? `${semicolonSentence};`.trim()\n                            : semicolonSentence.trim();\n                    }\n                );\n            }\n            newSentences = newSentences.concat(semicolonSentences);\n        });\n        return newSentences;\n    }\n\n    parseSentence(sentenceContent) {\n        const sentenceId = this.createSentenceId();\n        const sentenceDataHash = md5(\n            `${this.paragraphSequence}${this.sentenceSequence}${sentenceContent}`\n        );\n\n        return {\n            type: \"sentence\",\n            props: {\n                id: sentenceId,\n                \"data-hash\": sentenceDataHash,\n            },\n            content: sentenceContent,\n        };\n    }\n\n    createParagraphId() {\n        this.paragraphSequence++;\n        return this.paragraphSequence;\n    }\n\n    createSentenceId() {\n        this.sentenceSequence++;\n        return this.sentenceSequence;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Personality.html":{"url":"classes/Personality.html","title":"class - Personality","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Personality\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/personality/schemas/personality.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                name\n                            \n                            \n                                slug\n                            \n                            \n                                wikidata\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/schemas/personality.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/schemas/personality.schema.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/schemas/personality.schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wikidata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true, sparse: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/personality/schemas/personality.schema.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport * as mongoose from \"mongoose\";\nimport { Claim } from \"../../claim/schemas/claim.schema\";\n\nexport type PersonalityDocument = Personality & mongoose.Document;\n\n@Schema({ toJSON: { virtuals: true }, toObject: { virtuals: true } })\nexport class Personality {\n    @Prop({ required: true })\n    name: string;\n\n    @Prop({ required: true })\n    slug: string;\n\n    @Prop({ required: true })\n    description: string;\n\n    @Prop({ unique: true, sparse: true })\n    wikidata: string;\n}\n\n\nconst PersonalitySchemaRaw = SchemaFactory.createForClass(Personality);\n\nPersonalitySchemaRaw.virtual('claims', {\n    ref: 'Claim',\n    localField: '_id',\n    foreignField: 'personality'\n});\n\nexport const PersonalitySchema = PersonalitySchemaRaw;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PersonalityController.html":{"url":"controllers/PersonalityController.html","title":"controller - PersonalityController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PersonalityController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/personality/personality.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                getReviewStats\n                            \n                            \n                                    Async\n                                listAll\n                            \n                            \n                                    Public\n                                    Async\n                                personalityCreateSearch\n                            \n                            \n                                    Public\n                                    Async\n                                personalityList\n                            \n                            \n                                    Public\n                                    Async\n                                personalityPage\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(body)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Post('api/personality')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(params)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Delete('api/personality/:id')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(params, query)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('api/personality/:id')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getReviewStats\n                        \n                    \n                \n            \n            \n                \ngetReviewStats(params)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('api/personality/:id/reviews')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAll(query)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('api/personality')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        personalityCreateSearch\n                        \n                    \n                \n            \n            \n                \n                    \n                    personalityCreateSearch(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Get('personality/search')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        personalityList\n                        \n                    \n                \n            \n            \n                \n                    \n                    personalityList(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('personality')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        personalityPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    personalityPage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('personality/:slug')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(params, body)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Put('api/personality/:id')\n                \n            \n\n            \n                \n                    Defined in server/personality/personality.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Logger,\n    Param,\n    Post,\n    Put,\n    Query,\n    UseGuards,\n    Req,\n    Res\n} from \"@nestjs/common\";\nimport { parse } from \"url\";\nimport { Request, Response } from \"express\";\nimport { ViewService } from \"../view/view.service\";\nimport { PersonalityService } from \"./personality.service\";\nimport { SessionGuard } from \"../auth/session.guard\";\n\n@Controller()\nexport class PersonalityController {\n    private readonly logger = new Logger(\"PersonalityController\");\n    constructor(\n        private personalityService: PersonalityService,\n        private viewService: ViewService\n    ) {}\n\n    @Get(\"api/personality\")\n    async listAll(@Query() query) {\n        return this.personalityService.combinedListAll(query);\n    }\n\n    @UseGuards(SessionGuard)\n    @Post(\"api/personality\")\n    async create(@Body() body) {\n        try {\n            return this.personalityService.create(body);\n        } catch (error) {\n            if (\n                error.name === \"MongoError\" &&\n                error.keyPattern &&\n                error.keyPattern.wikidata\n            ) {\n                error.message = `Personality with wikidata id ${error.keyValue.wikidata} already exists`;\n            }\n            this.logger.error(error);\n        }\n    }\n\n    @Get(\"api/personality/:id\")\n    async get(@Param() params, @Query() query) {\n        return this.personalityService\n            .getById(params.id, query.language)\n            .catch((err) => {\n                this.logger.error(err);\n            });\n    }\n\n    @UseGuards(SessionGuard)\n    @Put(\"api/personality/:id\")\n    async update(@Param() params, @Body() body) {\n        return this.personalityService.update(params.id, body).catch((err) => {\n            this.logger.error(err);\n        });\n    }\n\n    @UseGuards(SessionGuard)\n    @Delete(\"api/personality/:id\")\n    async delete(@Param() params) {\n        try {\n            await this.personalityService.delete(params.id);\n            return { message: \"Personality successfully deleted\" };\n        } catch (error) {\n            this.logger.error(error);\n        }\n    }\n\n    @Get(\"api/personality/:id/reviews\")\n    getReviewStats(@Param() params) {\n        return this.personalityService\n            .getReviewStats(params.id)\n            .catch((err) => {\n                this.logger.error(err);\n            });\n    }\n\n    @UseGuards(SessionGuard)\n    @Get(\"personality/search\")\n    public async personalityCreateSearch(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n        req.language = req.headers[\"accept-language\"] || \"en\";\n\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/personality-create-search\",\n                Object.assign(parsedUrl.query)\n            );\n    }\n\n    @Get(\"personality/:slug\")\n    public async personalityPage(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n        req.language = req.headers[\"accept-language\"] || \"en\";\n\n        const personality = await this.personalityService.getBySlug(\n            req.params.slug,\n            // @ts-ignore\n            req.language\n        );\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/personality-page\",\n                Object.assign(parsedUrl.query, { personality })\n            );\n    }\n\n    @Get(\"personality\")\n    public async personalityList(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n        req.language = req.headers[\"accept-language\"] || \"en\";\n\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/personality-list\",\n                Object.assign(parsedUrl.query, {})\n            );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PersonalityModule.html":{"url":"modules/PersonalityModule.html","title":"module - PersonalityModule","body":"\n                   \n\n\n\n\n    Modules\n    PersonalityModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PersonalityModule\n\n\n\ncluster_PersonalityModule_providers\n\n\n\ncluster_PersonalityModule_exports\n\n\n\ncluster_PersonalityModule_imports\n\n\n\n\nClaimReviewModule\n\nClaimReviewModule\n\n\n\nPersonalityModule\n\nPersonalityModule\n\nPersonalityModule -->\n\nClaimReviewModule->PersonalityModule\n\n\n\n\n\nViewModule\n\nViewModule\n\nPersonalityModule -->\n\nViewModule->PersonalityModule\n\n\n\n\n\nWikidataModule\n\nWikidataModule\n\nPersonalityModule -->\n\nWikidataModule->PersonalityModule\n\n\n\n\n\nPersonalityService \n\nPersonalityService \n\nPersonalityService  -->\n\nPersonalityModule->PersonalityService \n\n\n\n\n\nPersonalityService\n\nPersonalityService\n\nPersonalityModule -->\n\nPersonalityService->PersonalityModule\n\n\n\n\n\nUtilService\n\nUtilService\n\nPersonalityModule -->\n\nUtilService->PersonalityModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/personality/personality.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PersonalityService\n                        \n                        \n                            UtilService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PersonalityController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClaimReviewModule\n                        \n                        \n                            ViewModule\n                        \n                        \n                            WikidataModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PersonalityService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PersonalityService } from \"./personality.service\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { Personality, PersonalitySchema } from \"./schemas/personality.schema\";\nimport { UtilService } from \"../util\";\nimport { WikidataModule } from \"../wikidata/wikidata.module\";\nimport { ClaimReviewModule } from \"../claim-review/claim-review.module\";\nimport { PersonalityController } from \"./personality.controller\";\nimport Logger from \"../logger\";\nimport { ViewModule } from \"../view/view.module\";\n\nconst PersonalityModel = MongooseModule.forFeature([\n    {\n        name: Personality.name,\n        schema: PersonalitySchema,\n    },\n]);\n\n@Module({\n    imports: [PersonalityModel, WikidataModule, ClaimReviewModule, ViewModule],\n    exports: [PersonalityService],\n    providers: [UtilService, PersonalityService, Logger],\n    controllers: [PersonalityController],\n})\nexport class PersonalityModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PersonalityService.html":{"url":"injectables/PersonalityService.html","title":"injectable - PersonalityService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PersonalityService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/personality/personality.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                    Readonly\n                                optionsToUpdate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                combinedListAll\n                            \n                            \n                                count\n                            \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                extractClaimWithTextSummary\n                            \n                            \n                                findOneAndUpdate\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getBySlug\n                            \n                            \n                                    Async\n                                getReviewStats\n                            \n                            \n                                    Async\n                                listAll\n                            \n                            \n                                    Async\n                                postProcess\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                verifyInputsQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(PersonalityModel: Model, claimReview: ClaimReviewService, wikidata: WikidataService, util: UtilService)\n                    \n                \n                        \n                            \n                                Defined in server/personality/personality.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        PersonalityModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        claimReview\n                                                  \n                                                        \n                                                                        ClaimReviewService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        wikidata\n                                                  \n                                                        \n                                                                        WikidataService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        util\n                                                  \n                                                        \n                                                                        UtilService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        combinedListAll\n                        \n                    \n                \n            \n            \n                \ncombinedListAll(query)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:186\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        count\n                        \n                    \n                \n            \n            \n                \ncount(query: any)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(personality)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    personality\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(personalityId)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:146\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    personalityId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        extractClaimWithTextSummary\n                        \n                    \n                \n            \n            \n                \nextractClaimWithTextSummary(claims: any)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    claims\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneAndUpdate\n                        \n                    \n                \n            \n            \n                \nfindOneAndUpdate(query, push)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:164\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    push\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(personalityId, language: string)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    personalityId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"en\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getBySlug\n                        \n                    \n                \n            \n            \n                \n                    \n                    getBySlug(personalitySlug, language: string)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    personalitySlug\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"en\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getReviewStats\n                        \n                    \n                \n            \n            \n                \n                    \n                    getReviewStats(id)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAll(page, pageSize, order, query, language, withSuggestions)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    page\n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    pageSize\n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    order\n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    language\n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    withSuggestions\n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postProcess\n                        \n                    \n                \n            \n            \n                \n                    \n                    postProcess(personality, language: string)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    personality\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"en\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(personalityId, personalityBody)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    personalityId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    personalityBody\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifyInputsQuery\n                        \n                    \n                \n            \n            \n                \nverifyInputsQuery(query)\n                \n            \n\n\n            \n                \n                    Defined in server/personality/personality.service.ts:177\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"PersonalityService\")\n                    \n                \n                    \n                        \n                                Defined in server/personality/personality.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        optionsToUpdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n        new: true,\n        upsert: true,\n    }\n                    \n                \n                    \n                        \n                                Defined in server/personality/personality.service.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Model } from \"mongoose\";\nimport { Injectable, Logger } from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport slugify from 'slugify'\nimport { Personality, PersonalityDocument } from \"./schemas/personality.schema\";\nimport { WikidataService } from \"../wikidata/wikidata.service\";\nimport { UtilService } from \"../util\";\nimport { ClaimReviewService } from \"../claim-review/claim-review.service\";\n\n@Injectable()\nexport class PersonalityService {\n    private readonly logger = new Logger(\"PersonalityService\");\n    private readonly optionsToUpdate = {\n        new: true,\n        upsert: true,\n    };\n\n    constructor(\n        @InjectModel(Personality.name)\n        private PersonalityModel: Model,\n        private claimReview: ClaimReviewService,\n        private wikidata: WikidataService,\n        private util: UtilService\n    ) {}\n\n    async listAll(\n        page,\n        pageSize,\n        order,\n        query,\n        language,\n        withSuggestions = false\n    ) {\n        let personalities = await this.PersonalityModel.find(query)\n            .skip(page * pageSize)\n            .limit(pageSize)\n            .sort({ _id: order })\n            .lean();\n        if (withSuggestions) {\n            const wbentities = await this.wikidata.queryWikibaseEntities(\n                query.name.$regex,\n                language\n            );\n            personalities = this.util.mergeObjectsInUnique(\n                [...wbentities, ...personalities],\n                \"wikidata\"\n            );\n        }\n        return Promise.all(\n            personalities.map(async (personality) => {\n                return await this.postProcess(personality, language);\n            })\n        );\n    }\n\n    create(personality) {\n        try {\n            personality.slug = slugify(personality.name, {\n                lower: true,     // convert to lower case, defaults to `false`\n                strict: true     // strip special characters except replacement, defaults to `false`\n            })\n            const newPersonality = new this.PersonalityModel(personality);\n            this.logger.log(\n                `Attempting to create new personality with data ${personality}`\n            );\n            return newPersonality.save();\n        } catch (err) {}\n    }\n\n    async getById(personalityId, language = \"en\") {\n        const personality = await this.PersonalityModel.findById(\n            personalityId\n        ).populate({\n            path: \"claims\",\n            select: \"_id title content\",\n        });\n        this.logger.log(`Found personality ${personality._id}`);\n        return await this.postProcess(personality.toObject(), language);\n    }\n\n    async getBySlug(personalitySlug, language = \"en\") {\n        const personality = await this.PersonalityModel.findOne({\n            slug: personalitySlug\n        }).populate({\n            path: \"claims\",\n            select: \"_id title content\",\n        });\n        this.logger.log(`Found personality ${personality._id}`);\n        return await this.postProcess(personality.toObject(), language);\n    }\n\n    async postProcess(personality, language: string = \"en\") {\n        if (personality) {\n            // TODO: allow wikdiata resolver to fetch in batches\n            const wikidataExtract = await this.wikidata.fetchProperties({\n                wikidataId: personality.wikidata,\n                language,\n            });\n\n            // bail out if wikidata property is not allowed\n            if (wikidataExtract.isAllowedProp === false) {\n                return;\n            }\n            return Object.assign(personality, {\n                stats:\n                    personality._id &&\n                    (await this.getReviewStats(personality._id)),\n                ...wikidataExtract,\n                claims:\n                    personality.claims &&\n                    this.extractClaimWithTextSummary(personality.claims),\n            });\n        }\n\n        return personality;\n    }\n\n    async getReviewStats(id) {\n        const personality = await this.PersonalityModel.findById(id);\n        const reviews = await this.claimReview.agreggateClassification({\n            personality: personality._id,\n        });\n        this.logger.log(`Got stats ${reviews}`);\n        return this.util.formatStats(reviews, true);\n    }\n\n    async update(personalityId, personalityBody) {\n        // eslint-disable-next-line no-useless-catch\n        try {\n            const personality = await this.getById(personalityId);\n            const newPersonality = Object.assign(personality, personalityBody);\n            const personalityUpdate =\n                await this.PersonalityModel.findByIdAndUpdate(\n                    personalityId,\n                    newPersonality,\n                    this.optionsToUpdate\n                );\n            this.logger.log(`Updated personality with data ${newPersonality}`);\n            return personalityUpdate;\n        } catch (error) {\n            // TODO: log to service-runner\n            throw error;\n        }\n    }\n\n    delete(personalityId) {\n        return this.PersonalityModel.findByIdAndRemove(personalityId);\n    }\n\n    count(query: any = {}) {\n        return this.PersonalityModel.countDocuments().where(query);\n    }\n\n    extractClaimWithTextSummary(claims: any) {\n        claims = Array.isArray(claims) ? claims : [claims];\n        return claims.map((claim) => {\n            if (!claim.content) {\n                return claim;\n            }\n            return { ...claim, content: claim.content.text };\n        });\n    }\n\n    findOneAndUpdate(query, push) {\n        return this.PersonalityModel.findOneAndUpdate(\n            { ...query },\n            { $push: { ...push } },\n            { new: true },\n            (e) => {\n                if (e) {\n                    throw e;\n                }\n            }\n        );\n    }\n\n    verifyInputsQuery(query) {\n        const queryInputs = {};\n        if (query.name) {\n            // @ts-ignore\n            queryInputs.name = { $regex: query.name, $options: \"i\" };\n        }\n        return queryInputs;\n    }\n\n    combinedListAll(query) : any {\n        const { page = 0, pageSize = 10, order = \"asc\" } = query;\n        const queryInputs = this.verifyInputsQuery(query);\n\n        return Promise.all([\n            this.listAll(\n                page,\n                parseInt(pageSize, 10),\n                order,\n                queryInputs,\n                query.language,\n                query.withSuggestions\n            ),\n            this.count(queryInputs),\n        ])\n            .then(([personalities, totalPersonalities]) => {\n                const totalPages = Math.ceil(\n                    totalPersonalities / parseInt(pageSize, 10)\n                );\n\n                this.logger.log(\n                    `Found ${totalPersonalities} personalities. Page ${page} of ${totalPages}`\n                );\n\n                return {\n                    personalities,\n                    totalPersonalities,\n                    totalPages,\n                    page,\n                    pageSize,\n                };\n            })\n            .catch((error) => this.logger.error(error));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RootController.html":{"url":"controllers/RootController.html","title":"controller - RootController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RootController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/root/root.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                health\n                            \n                            \n                                robots\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        health\n                        \n                    \n                \n            \n            \n                \nhealth()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('health')\n                \n            \n\n            \n                \n                    Defined in server/root/root.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { status: string; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        robots\n                        \n                    \n                \n            \n            \n                \nrobots(res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('robots.txt')\n                \n            \n\n            \n                \n                    Defined in server/root/root.controller.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Res } from \"@nestjs/common\";\n\n@Controller(\"api\")\nexport class RootController {\n    @Get(\"robots.txt\")\n    robots(@Res() res) {\n        res.type(\"text/plain\").end(\"User-agent: *\\nDisallow: /api\\n\");\n    }\n\n    @Get(\"health\")\n    health() {\n        return { status: \"ok\" };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/SessionGuard.html":{"url":"guards/SessionGuard.html","title":"guard - SessionGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    SessionGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                server/auth/session.guard.ts\n            \n\n\n\n\n                \n                Implements\n                \n                \n                                CanActivate\n                \n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in server/auth/session.guard.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n    CanActivate,\n    ExecutionContext,\n    UnauthorizedException,\n} from \"@nestjs/common\";\n\nexport class SessionGuard implements CanActivate {\n    canActivate(context: ExecutionContext): boolean | Promise {\n        const httpContext = context.switchToHttp();\n        const request = httpContext.getRequest();\n        const response = httpContext.getResponse();\n        try {\n            if (request.isAuthenticated && request.isAuthenticated()) {\n                return true;\n            } else {\n                if (request.url.startsWith(\"/api\")) {\n                    return false;\n                } else {\n                    response.redirect(\"/login\");\n                }\n            }\n        } catch (e) {\n            throw new UnauthorizedException();\n        }\n    }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Source.html":{"url":"classes/Source.html","title":"class - Source","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Source\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/source/schemas/source.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                classification\n                            \n                            \n                                description\n                            \n                            \n                                link\n                            \n                            \n                                targetId\n                            \n                            \n                                targetModel\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        classification\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({validate: undefined, message: tag => })\n                        \n                    \n                \n                    \n                        \n                                Defined in server/source/schemas/source.schema.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in server/source/schemas/source.schema.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        link\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/source/schemas/source.schema.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        targetId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, refPath: 'onModel'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/source/schemas/source.schema.ts:37\n                        \n                    \n\n            \n                \n                    Use Dynamic ref https://mongoosejs.com/docs/populate.html#dynamic-ref\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        targetModel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, enum: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/source/schemas/source.schema.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/source/schemas/source.schema.ts:50\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport * as mongoose from \"mongoose\";\nimport { User } from \"../../users/schemas/user.schema\";\n\nexport type SourceDocument = Source & mongoose.Document;\n\n@Schema()\nexport class Source {\n    @Prop({ required: true })\n    link: string;\n\n    @Prop({\n        validate: {\n            validator: (v) => {\n                return (\n                    [\"unclassified\", \"reliable\", \"unreliable\", \"fake\"].indexOf(\n                        v\n                    ) !== -1\n                );\n            },\n        },\n        message: (tag) => `${tag} is not a valid classification.`,\n    })\n    classification: string;\n\n    @Prop()\n    description: string;\n\n    /**\n     * Use Dynamic ref https://mongoosejs.com/docs/populate.html#dynamic-ref\n     */\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        refPath: \"onModel\",\n    })\n    targetId: mongoose.Types.ObjectId;\n\n    @Prop({\n        required: true,\n        enum: [\"Claim\", \"ClaimReview\"],\n    })\n    targetModel: string;\n\n    @Prop({\n        type: mongoose.Types.ObjectId,\n        required: true,\n        ref: \"User\",\n    })\n    user: User;\n}\n\nexport const SourceSchema = SchemaFactory.createForClass(Source);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SourceModule.html":{"url":"modules/SourceModule.html","title":"module - SourceModule","body":"\n                   \n\n\n\n\n    Modules\n    SourceModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SourceModule\n\n\n\ncluster_SourceModule_exports\n\n\n\ncluster_SourceModule_providers\n\n\n\n\nSourceService \n\nSourceService \n\n\n\nSourceModule\n\nSourceModule\n\nSourceService  -->\n\nSourceModule->SourceService \n\n\n\n\n\nSourceService\n\nSourceService\n\nSourceModule -->\n\nSourceService->SourceModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/source/source.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SourceService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SourceService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { Source, SourceSchema } from \"./schemas/source.schema\";\nimport { SourceService } from \"./source.service\";\n\nconst SourceModel = MongooseModule.forFeature([\n    {\n        name: Source.name,\n        schema: SourceSchema,\n    },\n]);\n\n@Module({\n    imports: [SourceModel],\n    providers: [SourceService],\n    exports: [SourceService],\n})\nexport class SourceModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SourceService.html":{"url":"injectables/SourceService.html","title":"injectable - SourceService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SourceService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/source/source.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(SourceModel: Model)\n                    \n                \n                        \n                            \n                                Defined in server/source/source.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        SourceModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data)\n                \n            \n\n\n            \n                \n                    Defined in server/source/source.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport {Model, Types} from \"mongoose\";\nimport { SourceDocument, Source } from \"./schemas/source.schema\";\nimport { InjectModel } from \"@nestjs/mongoose\";\n\n@Injectable()\nexport class SourceService {\n    constructor(\n        @InjectModel(Source.name)\n        private SourceModel: Model\n    ) {}\n    async create(data) {\n        data.targetId = new Types.ObjectId(data.targetId);\n        data.user = new Types.ObjectId(data.user);\n        const source = new this.SourceModel(data);\n        await source.save();\n        return source;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StatsController.html":{"url":"controllers/StatsController.html","title":"controller - StatsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StatsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/stats/stats.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/stats\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHomeStats\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHomeStats\n                        \n                    \n                \n            \n            \n                \ngetHomeStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('home')\n                \n            \n\n            \n                \n                    Defined in server/stats/stats.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport {StatsService} from \"./stats.service\";\n\n@Controller(\"api/stats\")\nexport class StatsController {\n    constructor(\n        private statsService: StatsService,\n    ) {}\n    @Get(\"home\")\n    getHomeStats() {\n        return this.statsService.getHomeStats();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StatsModule.html":{"url":"modules/StatsModule.html","title":"module - StatsModule","body":"\n                   \n\n\n\n\n    Modules\n    StatsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StatsModule\n\n\n\ncluster_StatsModule_providers\n\n\n\ncluster_StatsModule_exports\n\n\n\ncluster_StatsModule_imports\n\n\n\n\nClaimModule\n\nClaimModule\n\n\n\nStatsModule\n\nStatsModule\n\nStatsModule -->\n\nClaimModule->StatsModule\n\n\n\n\n\nClaimReviewModule\n\nClaimReviewModule\n\nStatsModule -->\n\nClaimReviewModule->StatsModule\n\n\n\n\n\nPersonalityModule\n\nPersonalityModule\n\nStatsModule -->\n\nPersonalityModule->StatsModule\n\n\n\n\n\nStatsService \n\nStatsService \n\nStatsService  -->\n\nStatsModule->StatsService \n\n\n\n\n\nStatsService\n\nStatsService\n\nStatsModule -->\n\nStatsService->StatsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/stats/stats.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StatsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StatsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClaimModule\n                        \n                        \n                            ClaimReviewModule\n                        \n                        \n                            PersonalityModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StatsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { StatsController } from \"./stats.controller\";\nimport { PersonalityModule } from \"../personality/personality.module\";\nimport { ClaimModule } from \"../claim/claim.module\";\nimport { ClaimReviewModule } from \"../claim-review/claim-review.module\";\nimport {StatsService} from \"./stats.service\";\n\n@Module({\n    imports: [PersonalityModule, ClaimModule, ClaimReviewModule],\n    controllers: [StatsController],\n    providers: [StatsService],\n    exports: [StatsService]\n})\nexport class StatsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StatsService.html":{"url":"injectables/StatsService.html","title":"injectable - StatsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StatsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/stats/stats.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHomeStats\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(claimReviewService: ClaimReviewService, personalityService: PersonalityService, claimService: ClaimService)\n                    \n                \n                        \n                            \n                                Defined in server/stats/stats.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        claimReviewService\n                                                  \n                                                        \n                                                                        ClaimReviewService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        personalityService\n                                                  \n                                                        \n                                                                        PersonalityService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        claimService\n                                                  \n                                                        \n                                                                        ClaimService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHomeStats\n                        \n                    \n                \n            \n            \n                \ngetHomeStats()\n                \n            \n\n\n            \n                \n                    Defined in server/stats/stats.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Injectable} from \"@nestjs/common\";\nimport {ClaimReviewService} from \"../claim-review/claim-review.service\";\nimport {PersonalityService} from \"../personality/personality.service\";\nimport {ClaimService} from \"../claim/claim.service\";\n\n@Injectable()\nexport class StatsService {\n    constructor(\n        private claimReviewService: ClaimReviewService,\n        private personalityService: PersonalityService,\n        private claimService: ClaimService\n    ) {}\n\n    getHomeStats() {\n        return Promise.all([\n            this.claimService.count(),\n            this.personalityService.count(),\n            this.claimReviewService.count(),\n        ]).then((values) => {\n            return {\n                claims: values[0],\n                personalities: values[1],\n                reviews: values[2],\n            };\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/users/schemas/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstPasswordChanged\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/users/schemas/user.schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstPasswordChanged\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/users/schemas/user.schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/users/schemas/user.schema.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { Document } from \"mongoose\";\n\nexport interface UserDocument extends User, Document {\n    authenticate(): any;\n}\n\n@Schema()\nexport class User {\n    @Prop({ required: true })\n    name: string;\n\n    @Prop({ required: true, unique: true })\n    email: string;\n\n    @Prop({ required: true, default: false })\n    firstPasswordChanged: boolean;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserDocument.html":{"url":"interfaces/UserDocument.html","title":"interface - UserDocument","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserDocument\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/users/schemas/user.schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        User\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        authenticate\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate()\n                \n            \n\n\n            \n                \n                    Defined in server/users/schemas/user.schema.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { Document } from \"mongoose\";\n\nexport interface UserDocument extends User, Document {\n    authenticate(): any;\n}\n\n@Schema()\nexport class User {\n    @Prop({ required: true })\n    name: string;\n\n    @Prop({ required: true, unique: true })\n    email: string;\n\n    @Prop({ required: true, default: false })\n    firstPasswordChanged: boolean;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/users/users.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Public\n                                    Async\n                                personalityList\n                            \n                            \n                                    Public\n                                    Async\n                                profile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    changePassword(req, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Put('api/user/:id/password')\n                \n            \n\n            \n                \n                    Defined in server/users/users.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Get('api/user/validate')\n                \n            \n\n            \n                \n                    Defined in server/users/users.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Post('api/user/signin')\n                \n            \n\n            \n                \n                    Defined in server/users/users.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        personalityList\n                        \n                    \n                \n            \n            \n                \n                    \n                    personalityList(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('login')\n                \n            \n\n            \n                \n                    Defined in server/users/users.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        profile\n                        \n                    \n                \n            \n            \n                \n                    \n                    profile(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Get('profile')\n                \n            \n\n            \n                \n                    Defined in server/users/users.controller.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get, Logger,\n    Post, Put, Req,\n    Res,\n    UseGuards,\n} from \"@nestjs/common\";\nimport {Request, Response} from \"express\";\nimport { UsersService } from \"./users.service\";\nimport { LocalAuthGuard } from \"../auth/local-auth.guard\";\nimport { SessionGuard } from \"../auth/session.guard\";\nimport { parse } from \"url\";\nimport { ViewService } from \"../view/view.service\";\nimport * as mongoose from \"mongoose\";\n\n@Controller()\nexport class UsersController {\n    private readonly logger = new Logger(\"UserController\");\n    constructor(\n        private readonly usersService: UsersService,\n        private viewService: ViewService\n    ) {}\n\n    @UseGuards(SessionGuard)\n    @Get(\"api/user/validate\")\n    async findAll(@Req() req): Promise {\n        return { login: true, user: req.user };\n    }\n\n    @UseGuards(LocalAuthGuard)\n    @Post(\"api/user/signin\")\n    async login(@Req() req, @Res() res) {\n        return req.logIn(req.user, (err) => {\n            return res.send({ login: true });\n        });\n    }\n\n    @UseGuards(SessionGuard)\n    @Put(\"api/user/:id/password\")\n    async changePassword(@Req() req, @Res() res) {\n        const { currentPassword, newPassword, repeatedNewPassword } = req.body;\n\n        try {\n            if (req.params.id !== req.user._id.toString()) {\n                throw Error(\"Invalid user attempting to change password\");\n            }\n            if (newPassword !== repeatedNewPassword) {\n                throw Error(\"Repeated password doesn't match\");\n            }\n            this.usersService\n                .changePassword(new mongoose.Types.ObjectId(req.params.id), currentPassword, newPassword)\n                .then(() => {\n                    res.status(200).json({\n                        success: true,\n                        message: \"Password reset successful\"\n                    });\n                }).catch(e => {\n                    this.logger.error(e);\n                    res.status(500).json({ message: e.message });\n                });\n        } catch (e) {\n            this.logger.error(e);\n            res.status(500).json({ message: e.message });\n        }\n    }\n\n    @Get(\"login\")\n    public async personalityList(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n        req.language = req.headers[\"accept-language\"] || \"en\";\n\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/login\",\n                Object.assign(parsedUrl.query, {})\n            );\n    }\n\n    @UseGuards(SessionGuard)\n    @Get(\"profile\")\n    public async profile(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n        req.language = req.headers[\"accept-language\"] || \"en\";\n\n        await this.viewService\n            .getNextServer()\n            .render(\n                req,\n                res,\n                \"/profile-page\",\n                Object.assign(parsedUrl.query, {})\n            );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nViewModule\n\nViewModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nViewModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ViewModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { User, UserSchema } from \"./schemas/user.schema\";\nimport { UsersService } from \"./users.service\";\nimport { UsersController } from \"./users.controller\";\nimport { ViewModule } from \"../view/view.module\";\n\nconst UserModel = MongooseModule.forFeatureAsync([\n    {\n        name: User.name,\n        useFactory: () => {\n            const schema = UserSchema;\n            schema.plugin(require(\"passport-local-mongoose\"), {\n                usernameField: \"email\",\n            });\n            return schema;\n        },\n    },\n]);\n\n@Module({\n    imports: [UserModel, ViewModule],\n    exports: [UsersService, UserModel],\n    controllers: [UsersController],\n    providers: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(UserModel: Model)\n                    \n                \n                        \n                            \n                                Defined in server/users/users.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        UserModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    changePassword(userId, currentPassword, newPassword)\n                \n            \n\n\n            \n                \n                    Defined in server/users/users.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentPassword\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newPassword\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in server/users/users.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(userId)\n                \n            \n\n\n            \n                \n                    Defined in server/users/users.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(user)\n                \n            \n\n\n            \n                \n                    Defined in server/users/users.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"UserService\")\n                    \n                \n                    \n                        \n                                Defined in server/users/users.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Model } from \"mongoose\";\nimport {Injectable, Logger} from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport { User, UserDocument } from \"./schemas/user.schema\";\n\n@Injectable()\nexport class UsersService {\n    private readonly logger = new Logger(\"UserService\");\n    constructor(\n        @InjectModel(User.name) private UserModel: Model\n    ) {}\n\n    async findAll(): Promise {\n        return this.UserModel.find().exec();\n    }\n\n    register(user) {\n        // @ts-ignore\n        return this.UserModel.register(\n            new this.UserModel(user),\n            user.password\n        );\n    }\n\n    async getById(userId) {\n        const user = await this.UserModel.findById(userId);\n        this.logger.log(`Found user ${user._id}`);\n        return user;\n    }\n\n    async changePassword(userId, currentPassword, newPassword) {\n        const user = await this.getById(userId);\n        // @ts-ignore\n        return user.changePassword(currentPassword, newPassword).then(() => {\n            if (user.firstPasswordChanged === false) {\n                this.logger.log(`User ${user._id} changed first password`);\n                user.firstPasswordChanged = true;\n            }\n            this.logger.log(`User ${user._id} changed password`);\n            user.save();\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UtilService.html":{"url":"injectables/UtilService.html","title":"injectable - UtilService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UtilService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/util.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                formatStats\n                            \n                            \n                                mergeObjectsInUnique\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        formatStats\n                        \n                    \n                \n            \n            \n                \nformatStats(reviews, slice)\n                \n            \n\n\n            \n                \n                    Defined in server/util.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    reviews\n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    slice\n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { total: any; reviews: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mergeObjectsInUnique\n                        \n                    \n                \n            \n            \n                \nmergeObjectsInUnique(array: T[], property: any)\n                \n            \n\n\n            \n                \n                    Defined in server/util.ts:26\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    https://medium.com/javascript-in-plain-english/javascript-merge-duplicate-objects-in-array-of-objects-9a76c3a1c35c\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    array\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    property\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\n@Injectable()\nexport class UtilService {\n    formatStats(reviews, slice = false) {\n        const total = reviews.reduce((agg, review) => {\n            agg += review.count;\n            return agg;\n        }, 0);\n        const result = reviews.map((review) => {\n            const percentage = (review.count / total) * 100;\n            return {\n                _id: review._id,\n                percentage: percentage.toFixed(0),\n                count: review.count,\n            };\n        });\n        return { total, reviews: slice ? result.slice(0, 3) : result };\n    }\n\n    /**\n     * https://medium.com/javascript-in-plain-english/javascript-merge-duplicate-objects-in-array-of-objects-9a76c3a1c35c\n     * @param array\n     * @param property\n     */\n    mergeObjectsInUnique(array: T[], property: any): T[] {\n        const newArray = new Map();\n\n        array.forEach((item: T) => {\n            const propertyValue = item[property];\n            newArray.has(propertyValue)\n                ? newArray.set(propertyValue, {\n                      ...item,\n                      ...newArray.get(propertyValue),\n                  })\n                : newArray.set(propertyValue, item);\n        });\n\n        return Array.from(newArray.values());\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ViewController.html":{"url":"controllers/ViewController.html","title":"controller - ViewController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ViewController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/view/view.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                assets\n                            \n                            \n                                    Public\n                                    Async\n                                codeOfConductPage\n                            \n                            \n                                    Async\n                                handler\n                            \n                            \n                                    Public\n                                    Async\n                                showAboutPage\n                            \n                            \n                                    Public\n                                    Async\n                                showHome\n                            \n                            \n                                    Public\n                                    Async\n                                showPrivacyPolicyPage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        assets\n                        \n                    \n                \n            \n            \n                \n                    \n                    assets(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('_next*')\n                \n            \n\n            \n                \n                    Defined in server/view/view.controller.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        codeOfConductPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    codeOfConductPage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('code-of-conduct')\n                \n            \n\n            \n                \n                    Defined in server/view/view.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handler\n                        \n                    \n                \n            \n            \n                \n                    \n                    handler(req: Request, res: Response)\n                \n            \n\n\n            \n                \n                    Defined in server/view/view.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        showAboutPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    showAboutPage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('about')\n                \n            \n\n            \n                \n                    Defined in server/view/view.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        showHome\n                        \n                    \n                \n            \n            \n                \n                    \n                    showHome(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in server/view/view.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        showPrivacyPolicyPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    showPrivacyPolicyPage(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('privacy-policy')\n                \n            \n\n            \n                \n                    Defined in server/view/view.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Res, Req } from \"@nestjs/common\";\nimport { Request, Response } from \"express\";\nimport { parse } from \"url\";\nimport { ViewService } from \"./view.service\";\n\n@Controller(\"/\")\nexport class ViewController {\n    constructor(private viewService: ViewService) {}\n\n    async handler(req: Request, res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n        req.language = req.headers[\"accept-language\"] || \"en\";\n\n        await this.viewService\n            .getNextServer()\n            .render(req, res, parsedUrl.pathname, parsedUrl.query);\n    }\n\n    @Get()\n    public async showHome(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n        req.language = req.headers[\"accept-language\"] || \"en\";\n\n        await this.viewService\n            .getNextServer()\n            .render(req, res, \"/landing-page\", Object.assign(parsedUrl.query));\n    }\n\n    @Get(\"about\")\n    public async showAboutPage(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n        req.language = req.headers[\"accept-language\"] || \"en\";\n\n        await this.viewService\n            .getNextServer()\n            .render(req, res, \"/about-page\", Object.assign(parsedUrl.query));\n    }\n\n    @Get(\"privacy-policy\")\n    public async showPrivacyPolicyPage(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n        req.language = req.headers[\"accept-language\"] || \"en\";\n\n        await this.viewService\n            .getNextServer()\n            .render(req, res, \"/privacy-policy-page\", Object.assign(parsedUrl.query));\n    }\n\n    @Get(\"code-of-conduct\")\n    public async codeOfConductPage(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n        req.language = req.headers[\"accept-language\"] || \"en\";\n\n        await this.viewService\n            .getNextServer()\n            .render(req, res, \"/code-of-conduct-page\", Object.assign(parsedUrl.query));\n    }\n\n    @Get(\"_next*\")\n    public async assets(@Req() req: Request, @Res() res: Response) {\n        const parsedUrl = parse(req.url, true);\n        // @ts-ignore\n        req.language = req.headers[\"accept-language\"] || \"en\";\n\n        await this.viewService\n            .getNextServer()\n            .render(req, res, parsedUrl.pathname, parsedUrl.query);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ViewModule.html":{"url":"modules/ViewModule.html","title":"module - ViewModule","body":"\n                   \n\n\n\n\n    Modules\n    ViewModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ViewModule\n\n\n\ncluster_ViewModule_exports\n\n\n\ncluster_ViewModule_providers\n\n\n\n\nViewService \n\nViewService \n\n\n\nViewModule\n\nViewModule\n\nViewService  -->\n\nViewModule->ViewService \n\n\n\n\n\nViewService\n\nViewService\n\nViewModule -->\n\nViewService->ViewModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/view/view.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ViewService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ViewController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ViewService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ViewController } from \"./view.controller\";\nimport { ViewService } from \"./view.service\";\n\n@Module({\n    imports: [],\n    providers: [ViewService],\n    controllers: [ViewController],\n    exports: [ViewService]\n})\nexport class ViewModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ViewService.html":{"url":"injectables/ViewService.html","title":"injectable - ViewService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ViewService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/view/view.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getNextServer\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in server/view/view.service.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getNextServer\n                        \n                    \n                \n            \n            \n                \ngetNextServer()\n                \n            \n\n\n            \n                \n                    Defined in server/view/view.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     NextServer\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in server/view/view.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"ViewService\")\n                    \n                \n                    \n                        \n                                Defined in server/view/view.service.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     NextServer\n\n                    \n                \n                    \n                        \n                                Defined in server/view/view.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {Injectable, Logger, OnModuleInit} from \"@nestjs/common\";\nimport createServer from \"next\";\nimport { NextServer } from \"next/dist/server/next\";\n\n@Injectable()\nexport class ViewService implements OnModuleInit {\n    private server: NextServer;\n    private readonly logger = new Logger(\"ViewService\");\n\n    constructor() {}\n\n    async onModuleInit(): Promise {\n        try {\n            this.server = await createServer({\n                dev: process.env.ENVIRONMENT === \"watch-dev\",\n                dir: \"./\",\n            });\n            await this.server.prepare();\n        } catch (error) {\n            this.logger.error(\"Failed to load NextServer\", error);\n        }\n    }\n\n    getNextServer(): NextServer {\n        return this.server;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WikidataCache.html":{"url":"classes/WikidataCache.html","title":"class - WikidataCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WikidataCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/wikidata/schemas/wikidata.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                language\n                            \n                            \n                                props\n                            \n                            \n                                wikidataId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/wikidata/schemas/wikidata.schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/wikidata/schemas/wikidata.schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        props\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/wikidata/schemas/wikidata.schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wikidataId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in server/wikidata/schemas/wikidata.schema.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { Document } from \"mongoose\";\n\nexport type WikidataCacheDocument = WikidataCache & Document;\n\n@Schema()\nexport class WikidataCache {\n    @Prop({ required: true })\n    wikidataId: string;\n\n    @Prop({ required: true })\n    language: string;\n\n    @Prop({ type: Object, required: true })\n    props: object;\n\n    @Prop({ default: Date.now })\n    createdAt: Date;\n}\n\nexport const WikidataCacheSchema = SchemaFactory.createForClass(WikidataCache);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/WikidataController.html":{"url":"controllers/WikidataController.html","title":"controller - WikidataController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  WikidataController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/wikidata/wikidata.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/wikidata\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getWikidata\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getWikidata\n                        \n                    \n                \n            \n            \n                \n                    \n                    getWikidata(params, query, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':wikidataId')\n                \n            \n\n            \n                \n                    Defined in server/wikidata/wikidata.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Query, Response } from \"@nestjs/common\";\nimport { WikidataService } from \"./wikidata.service\";\n\n@Controller(\"api/wikidata\")\nexport class WikidataController {\n    constructor(private readonly wikidataService: WikidataService) {}\n\n    @Get(\":wikidataId\")\n    async getWikidata(\n        @Param() params,\n        @Query() query,\n        @Response() res\n    ): Promise {\n        this.wikidataService\n            .fetchProperties({ ...params, ...query })\n            .then((props) => {\n                res.send({ ...props });\n            });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WikidataModule.html":{"url":"modules/WikidataModule.html","title":"module - WikidataModule","body":"\n                   \n\n\n\n\n    Modules\n    WikidataModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_WikidataModule\n\n\n\ncluster_WikidataModule_exports\n\n\n\ncluster_WikidataModule_providers\n\n\n\n\nWikidataService \n\nWikidataService \n\n\n\nWikidataModule\n\nWikidataModule\n\nWikidataService  -->\n\nWikidataModule->WikidataService \n\n\n\n\n\nWikidataService\n\nWikidataService\n\nWikidataModule -->\n\nWikidataService->WikidataModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/wikidata/wikidata.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            WikidataService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            WikidataController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            WikidataService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { WikidataService } from \"./wikidata.service\";\nimport { WikidataController } from \"./wikidata.controller\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { WikidataCache, WikidataCacheSchema } from \"./schemas/wikidata.schema\";\n\nconst WikidataCacheModel = MongooseModule.forFeatureAsync([\n    {\n        name: WikidataCache.name,\n        useFactory: () => {\n            const wikidataCacheSchema = WikidataCacheSchema;\n            wikidataCacheSchema.index(\n                { wikidataId: 1, language: 1 },\n                { unique: true }\n            );\n            wikidataCacheSchema.index(\n                { createdAt: 1 },\n                { expireAfterSeconds: 86400 }\n            );\n            return wikidataCacheSchema;\n        },\n    },\n]);\n\n@Module({\n    imports: [WikidataCacheModel],\n    exports: [WikidataService],\n    providers: [WikidataService],\n    controllers: [WikidataController],\n})\nexport class WikidataModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WikidataService.html":{"url":"injectables/WikidataService.html","title":"injectable - WikidataService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WikidataService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/wikidata/wikidata.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                extractProperties\n                            \n                            \n                                extractValue\n                            \n                            \n                                    Async\n                                fetchProperties\n                            \n                            \n                                    Async\n                                getCommonsThumbURL\n                            \n                            \n                                getSiteLinkName\n                            \n                            \n                                queryWikibaseEntities\n                            \n                            \n                                    Async\n                                requestProperties\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(WikidataCache: Model)\n                    \n                \n                        \n                            \n                                Defined in server/wikidata/wikidata.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        WikidataCache\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        extractProperties\n                        \n                    \n                \n            \n            \n                \n                    \n                    extractProperties(wikidata, language: string)\n                \n            \n\n\n            \n                \n                    Defined in server/wikidata/wikidata.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    wikidata\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"en\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        extractValue\n                        \n                    \n                \n            \n            \n                \nextractValue(wikidata, property, language)\n                \n            \n\n\n            \n                \n                    Defined in server/wikidata/wikidata.service.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    wikidata\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    property\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    language\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        fetchProperties\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchProperties(params)\n                \n            \n\n\n            \n                \n                    Defined in server/wikidata/wikidata.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCommonsThumbURL\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCommonsThumbURL(imageTitle)\n                \n            \n\n\n            \n                \n                    Defined in server/wikidata/wikidata.service.ts:153\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imageTitle\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSiteLinkName\n                        \n                    \n                \n            \n            \n                \ngetSiteLinkName(language)\n                \n            \n\n\n            \n                \n                    Defined in server/wikidata/wikidata.service.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    language\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        queryWikibaseEntities\n                        \n                    \n                \n            \n            \n                \nqueryWikibaseEntities(query, language: string)\n                \n            \n\n\n            \n                \n                    Defined in server/wikidata/wikidata.service.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"en\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        requestProperties\n                        \n                    \n                \n            \n            \n                \n                    \n                    requestProperties(params)\n                \n            \n\n\n            \n                \n                    Defined in server/wikidata/wikidata.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Model } from \"mongoose\";\nimport { Injectable } from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport {\n    WikidataCache,\n    WikidataCacheDocument,\n} from \"./schemas/wikidata.schema\";\n\nconst axios = require(\"axios\");\n\nconst languageVariantMap = {\n    \"pt-br\": \"pt\",\n};\n\n@Injectable()\nexport class WikidataService {\n    constructor(\n        @InjectModel(WikidataCache.name)\n        private WikidataCache: Model\n    ) {}\n\n    async fetchProperties(params) {\n        const wikidataCache = await this.WikidataCache.findOne({\n            wikidataId: params.wikidataId,\n            language: params.language,\n        }).exec();\n        if (!wikidataCache) {\n            const props = await this.requestProperties(params);\n            const newWikidataCache = new this.WikidataCache({\n                ...params,\n                props,\n            });\n            newWikidataCache.save();\n            return props;\n        }\n        return wikidataCache.props;\n    }\n\n    async requestProperties(params) {\n        const { data } = await axios.get(\"https://www.wikidata.org/w/api.php\", {\n            params: {\n                action: \"wbgetentities\",\n                ids: encodeURIComponent(params.wikidataId),\n                format: \"json\",\n                formatversion: \"2\",\n            },\n        });\n        const entities = data && data.entities;\n        return this.extractProperties(\n            entities && entities[params.wikidataId],\n            params.language\n        );\n    }\n\n    async extractProperties(wikidata, language = \"en\"): Promise {\n        const wikidataProps = {\n            name: undefined,\n            description: undefined,\n            isAllowedProp: undefined,\n            image: undefined,\n            wikipedia: undefined,\n        };\n        if (!wikidata) {\n            return {};\n        }\n\n        // Get label for the personality name\n        wikidataProps.name = this.extractValue(wikidata, \"labels\", language);\n\n        // Get description for the personality description\n        wikidataProps.description = this.extractValue(\n            wikidata,\n            \"descriptions\",\n            language\n        );\n\n        if (wikidata.claims.P31) {\n            const wikidataInstanceof =\n                wikidata.claims.P31[0].mainsnak.datavalue.value;\n            wikidataProps.isAllowedProp = wikidataInstanceof.id === \"Q5\";\n        } else {\n            wikidataProps.isAllowedProp = false;\n        }\n\n        // Extract image if it exists\n        if (wikidata.claims.P18) {\n            const fileName = wikidata.claims.P18[0].mainsnak.datavalue.value;\n            wikidataProps.image = await this.getCommonsThumbURL(fileName);\n        }\n        const siteLinkName = this.getSiteLinkName(language);\n        if (wikidata.sitelinks[siteLinkName]) {\n            const wikiLang = siteLinkName.match(/^(.*)wiki$/)[1];\n            const wikiTitle = wikidata.sitelinks[siteLinkName].title;\n            if (wikiLang && wikiTitle) {\n                wikidataProps.wikipedia = `https://${wikiLang.replace(\n                    \"_\",\n                    \"-\"\n                )}.wikipedia.org/wiki/${encodeURI(wikiTitle)}`;\n            }\n        }\n        return wikidataProps;\n    }\n\n    getSiteLinkName(language) {\n        if (languageVariantMap[language]) {\n            language = languageVariantMap[language];\n        }\n        return `${language}wiki`;\n    }\n\n    extractValue(wikidata, property, language) {\n        if (!wikidata[property]) {\n            return;\n        }\n        const languageFallback =\n            wikidata[property] && wikidata[property][language]\n                ? language\n                : \"en\";\n        return (\n            wikidata[property][languageFallback] &&\n            wikidata[property][languageFallback].value\n        );\n    }\n\n    queryWikibaseEntities(query, language = \"en\") {\n        const params = {\n            action: \"wbsearchentities\",\n            search: query,\n            format: \"json\",\n            errorformat: \"plaintext\",\n            language,\n            type: \"item\",\n            origin: \"*\",\n        };\n\n        return axios\n            .get(`https://www.wikidata.org/w/api.php`, { params })\n            .then((response) => {\n                const { search } = response && response.data;\n                return search.map((wbentity) => {\n                    if (!wbentity.label) {\n                        return;\n                    }\n                    return {\n                        name: wbentity.label,\n                        description: wbentity.description,\n                        wikidata: wbentity.id,\n                    };\n                });\n            });\n    }\n\n    async getCommonsThumbURL(imageTitle) {\n        const { data } = await axios.get(\n            \"https://commons.wikimedia.org/w/api.php\",\n            {\n                params: {\n                    action: \"query\",\n                    titles: `File:${imageTitle}`,\n                    prop: \"imageinfo\",\n                    iiprop: \"url\",\n                    iiurlwidth: 400,\n                    format: \"json\",\n                    formatversion: \"2\",\n                },\n            }\n        );\n        const { pages } = data && data.query;\n        if (pages.length \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                server/auth/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/auth/local.serializer.ts\n            \n            injectable\n            LocalSerializer\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/auth/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/auth/session.guard.ts\n            \n            guard\n            SessionGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/claim-review/claim-review.controller.ts\n            \n            controller\n            ClaimReviewController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                server/claim-review/claim-review.module.ts\n            \n            variable\n            ClaimReviewModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim-review/claim-review.service.ts\n            \n            injectable\n            ClaimReviewService\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                server/claim-review/schemas/claim-review.schema.ts\n            \n            class\n            ClaimReview\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                server/claim-review/schemas/claim-review.schema.ts\n            \n            variable\n            ClaimReviewSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim-review/schemas/claim-review.schema.ts\n            \n            variable\n            ClaimReviewSchemaRaw\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim/claim.controller.ts\n            \n            controller\n            ClaimController\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                server/claim/claim.module.ts\n            \n            variable\n            ClaimModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim/claim.service.ts\n            \n            injectable\n            ClaimService\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                server/claim/schemas/claim.schema.ts\n            \n            class\n            Claim\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                server/claim/schemas/claim.schema.ts\n            \n            variable\n            ClaimSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/claim/schemas/claim.schema.ts\n            \n            variable\n            ClaimSchemaRaw\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/email/email.service.ts\n            \n            injectable\n            EmailService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                server/email/email.service.ts\n            \n            variable\n            fs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/email/email.service.ts\n            \n            variable\n            handlebars\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/email/email.service.ts\n            \n            variable\n            nodemailer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/email/email.service.ts\n            \n            variable\n            path\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/home/home.controller.ts\n            \n            controller\n            HomeController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/logger.ts\n            \n            class\n            Logger\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                server/main.ts\n            \n            variable\n            cookieParser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/main.ts\n            \n            variable\n            initApp\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/main.ts\n            \n            variable\n            mongodb_host\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/main.ts\n            \n            variable\n            mongodb_name\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/main.ts\n            \n            variable\n            MongoStore\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/parser/parser.service.ts\n            \n            injectable\n            ParserService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                server/parser/parser.service.ts\n            \n            variable\n            md5\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/parser/parser.service.ts\n            \n            variable\n            nlp\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/parser/parser.service.ts\n            \n            variable\n            phdRegex\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/parser/parser.service.ts\n            \n            variable\n            prefixes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/personality/personality.controller.ts\n            \n            controller\n            PersonalityController\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                server/personality/personality.module.ts\n            \n            variable\n            PersonalityModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/personality/personality.service.ts\n            \n            injectable\n            PersonalityService\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                server/personality/schemas/personality.schema.ts\n            \n            class\n            Personality\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                server/personality/schemas/personality.schema.ts\n            \n            variable\n            PersonalitySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/personality/schemas/personality.schema.ts\n            \n            variable\n            PersonalitySchemaRaw\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/root/root.controller.ts\n            \n            controller\n            RootController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                server/seed.ts\n            \n            variable\n            initApp\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/seed.ts\n            \n            variable\n            mongodb_host\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/seed.ts\n            \n            variable\n            mongodb_name\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/server.ts\n            \n            variable\n            ServiceRunner\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/source/schemas/source.schema.ts\n            \n            class\n            Source\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                server/source/schemas/source.schema.ts\n            \n            variable\n            SourceSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/source/source.module.ts\n            \n            variable\n            SourceModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/source/source.service.ts\n            \n            injectable\n            SourceService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                server/stats/stats.controller.ts\n            \n            controller\n            StatsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/stats/stats.service.ts\n            \n            injectable\n            StatsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                server/users/schemas/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                server/users/schemas/user.schema.ts\n            \n            interface\n            UserDocument\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/users/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                server/users/users.module.ts\n            \n            variable\n            UserModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                server/util.ts\n            \n            injectable\n            UtilService\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                server/view/view.controller.ts\n            \n            controller\n            ViewController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                server/view/view.service.ts\n            \n            injectable\n            ViewService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                server/wikidata/schemas/wikidata.schema.ts\n            \n            class\n            WikidataCache\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                server/wikidata/schemas/wikidata.schema.ts\n            \n            variable\n            WikidataCacheSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/wikidata/wikidata.controller.ts\n            \n            controller\n            WikidataController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/wikidata/wikidata.module.ts\n            \n            variable\n            WikidataCacheModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/wikidata/wikidata.service.ts\n            \n            injectable\n            WikidataService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                server/wikidata/wikidata.service.ts\n            \n            variable\n            axios\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/wikidata/wikidata.service.ts\n            \n            variable\n            languageVariantMap\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @ant-design/icons : ^4.6.2\n        \n            @ant-design/icons-svg : ^4.1.0\n        \n            @babel/polyfill : ^7.12.1\n        \n            @compodoc/compodoc : ^1.1.18\n        \n            @dhaiwat10/react-link-preview : ^1.9.1\n        \n            @nestjs/axios : ^0.0.1\n        \n            @nestjs/common : ^8.0.6\n        \n            @nestjs/config : ^1.0.1\n        \n            @nestjs/core : ^8.0.6\n        \n            @nestjs/mongoose : ^8.0.0\n        \n            @nestjs/passport : ^8.0.1\n        \n            @nestjs/platform-express : ^8.0.6\n        \n            @types/jest : ^27.4.0\n        \n            @typescript-eslint/eslint-plugin : ^4.29.0\n        \n            accept-language-parser : ^1.5.0\n        \n            antd : ^4.18.5\n        \n            axios : ^0.21.2\n        \n            compromise : ^13.11.4\n        \n            compromise-paragraphs : ^0.0.5\n        \n            compromise-sentences : ^0.3.0\n        \n            connect-mongo : ^4.6.0\n        \n            cookie-parser : ^1.4.5\n        \n            domino : ^2.1.6\n        \n            draft-js : ^0.11.7\n        \n            draft-js-export-html : ^1.4.1\n        \n            draft-js-import-html : ^1.4.1\n        \n            express : ^4.17.1\n        \n            express-session : ^1.17.2\n        \n            handlebars : ^4.7.7\n        \n            i18next : ^21.6.10\n        \n            md5 : ^2.3.0\n        \n            mongoose : ^  5.13.5\n        \n            next : ^12.0.10\n        \n            next-i18next : ^10.2.0\n        \n            next-plugin-antd-less : ^1.8.0\n        \n            nodemailer : ^6.7.0\n        \n            passport : ^0.4.1\n        \n            passport-local : ^1.0.0\n        \n            passport-local-mongoose : ^6.1.0\n        \n            react : ^17.0.2\n        \n            react-cookie-consent : ^6.4.1\n        \n            react-countdown : ^2.3.2\n        \n            react-dom : ^17.0.2\n        \n            react-google-recaptcha : ^2.1.0\n        \n            react-is : ^17.0.2\n        \n            react-markdown : ^8.0.0\n        \n            react-redux : ^7.2.4\n        \n            react-share : ^4.4.0\n        \n            react-social-icons : ^5.5.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rehype-raw : ^6.1.1\n        \n            rxjs : ^7.3.0\n        \n            service-runner : ^2.8.4\n        \n            slugify : ^1.6.1\n        \n            styled-components : ^5.3.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nAletheia\n\nPlataforma de análise de discursos de personalidades públicas e combate a Fake News.\n\nInstalação\n\nFork this repo and clone it locally:git clone https://github.com//aletheia\ncd aletheia\nStartup Mongo DB via Docker:docker-compose up -d\nInstall packages:yarn install\nTo run in dev modeyarn dev\nAccess http://localhost:3000 in your browser.\n\nDevelopment DB\n\nRun seeder:\nyarn seedBuild to production\n\nThe build step should be run as follow:\nyarn build\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\n                GNU GENERAL PUBLIC LICENSE\n                   Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n                        Preamble  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n                   TERMS AND CONDITIONS\nDefinitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\nSource Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n  The Corresponding Source for a work in source code form is that\nsame work.\n\nBasic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\nProtecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\nConveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\nConveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\na) The work must carry prominent notices stating that you modified\nit, and giving a relevant date.\n\nb) The work must carry prominent notices stating that it is\nreleased under this License and any conditions added under section\n7.  This requirement modifies the requirement in section 4 to\n\"keep intact all notices\".\n\nc) You must license the entire work, as a whole, under this\nLicense to anyone who comes into possession of a copy.  This\nLicense will therefore apply, along with any applicable section 7\nadditional terms, to the whole of the work, and all its parts,\nregardless of how they are packaged.  This License gives no\npermission to license the work in any other way, but it does not\ninvalidate such permission if you have separately received it.\n\nd) If the work has interactive user interfaces, each must display\nAppropriate Legal Notices; however, if the Program has interactive\ninterfaces that do not display Appropriate Legal Notices, your\nwork need not make them do so.  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\nConveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\na) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by the\nCorresponding Source fixed on a durable physical medium\ncustomarily used for software interchange.\n\nb) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by a\nwritten offer, valid for at least three years and valid for as\nlong as you offer spare parts or customer support for that product\nmodel, to give anyone who possesses the object code either (1) a\ncopy of the Corresponding Source for all the software in the\nproduct that is covered by this License, on a durable physical\nmedium customarily used for software interchange, for a price no\nmore than your reasonable cost of physically performing this\nconveying of source, or (2) access to copy the\nCorresponding Source from a network server at no charge.\n\nc) Convey individual copies of the object code with a copy of the\nwritten offer to provide the Corresponding Source.  This\nalternative is allowed only occasionally and noncommercially, and\nonly if you received the object code with such an offer, in accord\nwith subsection 6b.\n\nd) Convey the object code by offering access from a designated\nplace (gratis or for a charge), and offer equivalent access to the\nCorresponding Source in the same way through the same place at no\nfurther charge.  You need not require recipients to copy the\nCorresponding Source along with the object code.  If the place to\ncopy the object code is a network server, the Corresponding Source\nmay be on a different server (operated by you or a third party)\nthat supports equivalent copying facilities, provided you maintain\nclear directions next to the object code saying where to find the\nCorresponding Source.  Regardless of what server hosts the\nCorresponding Source, you remain obligated to ensure that it is\navailable for as long as needed to satisfy these requirements.\n\ne) Convey the object code using peer-to-peer transmission, provided\nyou inform other peers where the object code and Corresponding\nSource of the work are being offered to the general public at no\ncharge under subsection 6d.  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\nAdditional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\na) Disclaiming warranty or limiting liability differently from the\nterms of sections 15 and 16 of this License; or\n\nb) Requiring preservation of specified reasonable legal notices or\nauthor attributions in that material or in the Appropriate Legal\nNotices displayed by works containing it; or\n\nc) Prohibiting misrepresentation of the origin of that material, or\nrequiring that modified versions of such material be marked in\nreasonable ways as different from the original version; or\n\nd) Limiting the use for publicity purposes of names of licensors or\nauthors of the material; or\n\ne) Declining to grant rights under trademark law for use of some\ntrade names, trademarks, or service marks; or\n\nf) Requiring indemnification of licensors and authors of that\nmaterial by anyone who conveys the material (or modified versions of\nit) with contractual assumptions of liability to the recipient, for\nany liability that these contractual assumptions directly impose on\nthose licensors and authors.  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\nTermination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\nAcceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\nAutomatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\nPatents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\nNo Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\nUse with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\nRevised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\nDisclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\nLimitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\nInterpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n                 END OF TERMS AND CONDITIONS\n\n        How to Apply These Terms to Your New Programs  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\nCopyright (C)   \n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see .Also add information on how to contact you by electronic and paper mail.\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n  Copyright (C)   \nThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.The hypothetical commands show w' and show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\nhttps://www.gnu.org/licenses/.\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\nhttps://www.gnu.org/licenses/why-not-lgpl.html.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ClaimModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ClaimReviewModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HomeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ParserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PersonalityModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SourceModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StatsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ViewModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        WikidataModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ClaimModule\n\n\n\ncluster_ClaimModule_imports\n\n\n\ncluster_ClaimModule_exports\n\n\n\ncluster_ClaimModule_providers\n\n\n\ncluster_ClaimReviewModule\n\n\n\ncluster_ClaimReviewModule_exports\n\n\n\ncluster_ClaimReviewModule_providers\n\n\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_HomeModule\n\n\n\ncluster_HomeModule_imports\n\n\n\ncluster_ParserModule\n\n\n\ncluster_ParserModule_exports\n\n\n\ncluster_ParserModule_providers\n\n\n\ncluster_PersonalityModule\n\n\n\ncluster_PersonalityModule_imports\n\n\n\ncluster_PersonalityModule_exports\n\n\n\ncluster_PersonalityModule_providers\n\n\n\ncluster_SourceModule\n\n\n\ncluster_SourceModule_exports\n\n\n\ncluster_SourceModule_providers\n\n\n\ncluster_StatsModule\n\n\n\ncluster_StatsModule_exports\n\n\n\ncluster_StatsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_ViewModule\n\n\n\ncluster_ViewModule_exports\n\n\n\ncluster_ViewModule_providers\n\n\n\ncluster_WikidataModule\n\n\n\ncluster_WikidataModule_exports\n\n\n\ncluster_WikidataModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nLocalSerializer\n\nLocalSerializer\n\nAuthModule -->\n\nLocalSerializer->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nClaimReviewModule\n\nClaimReviewModule\n\n\n\nPersonalityModule\n\nPersonalityModule\n\nPersonalityModule -->\n\nClaimReviewModule->PersonalityModule\n\n\n\n\n\nClaimModule\n\nClaimModule\n\nClaimModule -->\n\nClaimReviewModule->ClaimModule\n\n\n\n\n\nClaimReviewService \n\nClaimReviewService \n\nClaimReviewService  -->\n\nClaimReviewModule->ClaimReviewService \n\n\n\n\n\nStatsModule\n\nStatsModule\n\nStatsModule -->\n\nClaimReviewModule->StatsModule\n\n\n\n\n\nParserModule\n\nParserModule\n\nClaimModule -->\n\nParserModule->ClaimModule\n\n\n\n\n\nParserService \n\nParserService \n\nParserService  -->\n\nParserModule->ParserService \n\n\n\nClaimModule -->\n\nPersonalityModule->ClaimModule\n\n\n\nStatsModule -->\n\nPersonalityModule->StatsModule\n\n\n\n\n\nHomeModule\n\nHomeModule\n\nHomeModule -->\n\nPersonalityModule->HomeModule\n\n\n\n\n\nPersonalityService \n\nPersonalityService \n\nPersonalityService  -->\n\nPersonalityModule->PersonalityService \n\n\n\n\n\nSourceModule\n\nSourceModule\n\nClaimReviewModule -->\n\nSourceModule->ClaimReviewModule\n\n\n\nClaimModule -->\n\nSourceModule->ClaimModule\n\n\n\n\n\nSourceService \n\nSourceService \n\nSourceService  -->\n\nSourceModule->SourceService \n\n\n\n\n\nViewModule\n\nViewModule\n\nUsersModule -->\n\nViewModule->UsersModule\n\n\n\nPersonalityModule -->\n\nViewModule->PersonalityModule\n\n\n\nClaimModule -->\n\nViewModule->ClaimModule\n\n\n\nHomeModule -->\n\nViewModule->HomeModule\n\n\n\n\n\nViewService \n\nViewService \n\nViewService  -->\n\nViewModule->ViewService \n\n\n\n\n\nClaimService \n\nClaimService \n\nClaimService  -->\n\nClaimModule->ClaimService \n\n\n\nStatsModule -->\n\nClaimModule->StatsModule\n\n\n\n\n\nClaimService\n\nClaimService\n\nClaimModule -->\n\nClaimService->ClaimModule\n\n\n\n\n\nClaimReviewService\n\nClaimReviewService\n\nClaimReviewModule -->\n\nClaimReviewService->ClaimReviewModule\n\n\n\n\n\nUtilService\n\nUtilService\n\nClaimReviewModule -->\n\nUtilService->ClaimReviewModule\n\n\n\nPersonalityModule -->\n\nUtilService->PersonalityModule\n\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\nHomeModule -->\n\nStatsModule->HomeModule\n\n\n\n\n\nStatsService \n\nStatsService \n\nStatsService  -->\n\nStatsModule->StatsService \n\n\n\n\n\nParserService\n\nParserService\n\nParserModule -->\n\nParserService->ParserModule\n\n\n\n\n\nWikidataModule\n\nWikidataModule\n\nPersonalityModule -->\n\nWikidataModule->PersonalityModule\n\n\n\n\n\nWikidataService \n\nWikidataService \n\nWikidataService  -->\n\nWikidataModule->WikidataService \n\n\n\n\n\nPersonalityService\n\nPersonalityService\n\nPersonalityModule -->\n\nPersonalityService->PersonalityModule\n\n\n\n\n\nSourceService\n\nSourceService\n\nSourceModule -->\n\nSourceService->SourceModule\n\n\n\n\n\nStatsService\n\nStatsService\n\nStatsModule -->\n\nStatsService->StatsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nViewService\n\nViewService\n\nViewModule -->\n\nViewService->ViewModule\n\n\n\n\n\nWikidataService\n\nWikidataService\n\nWikidataModule -->\n\nWikidataService->WikidataModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        13 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    9 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    14 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ClaimDocument   (server/.../claim.schema.ts)\n                        \n                        \n                            ClaimReviewDocument   (server/.../claim-review.schema.ts)\n                        \n                        \n                            PersonalityDocument   (server/.../personality.schema.ts)\n                        \n                        \n                            SourceDocument   (server/.../source.schema.ts)\n                        \n                        \n                            WikidataCacheDocument   (server/.../wikidata.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    server/claim/schemas/claim.schema.ts\n    \n    \n        \n            \n                \n                    \n                    ClaimDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    server/claim-review/schemas/claim-review.schema.ts\n    \n    \n        \n            \n                \n                    \n                    ClaimReviewDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    server/personality/schemas/personality.schema.ts\n    \n    \n        \n            \n                \n                    \n                    PersonalityDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    server/source/schemas/source.schema.ts\n    \n    \n        \n            \n                \n                    \n                    SourceDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    server/wikidata/schemas/wikidata.schema.ts\n    \n    \n        \n            \n                \n                    \n                    WikidataCacheDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            axios   (server/.../wikidata.service.ts)\n                        \n                        \n                            ClaimModel   (server/.../claim.module.ts)\n                        \n                        \n                            ClaimReviewModel   (server/.../claim-review.module.ts)\n                        \n                        \n                            ClaimReviewSchema   (server/.../claim-review.schema.ts)\n                        \n                        \n                            ClaimReviewSchemaRaw   (server/.../claim-review.schema.ts)\n                        \n                        \n                            ClaimSchema   (server/.../claim.schema.ts)\n                        \n                        \n                            ClaimSchemaRaw   (server/.../claim.schema.ts)\n                        \n                        \n                            cookieParser   (server/.../main.ts)\n                        \n                        \n                            fs   (server/.../email.service.ts)\n                        \n                        \n                            handlebars   (server/.../email.service.ts)\n                        \n                        \n                            initApp   (server/.../main.ts)\n                        \n                        \n                            initApp   (server/.../seed.ts)\n                        \n                        \n                            languageVariantMap   (server/.../wikidata.service.ts)\n                        \n                        \n                            md5   (server/.../parser.service.ts)\n                        \n                        \n                            mongodb_host   (server/.../main.ts)\n                        \n                        \n                            mongodb_host   (server/.../seed.ts)\n                        \n                        \n                            mongodb_name   (server/.../main.ts)\n                        \n                        \n                            mongodb_name   (server/.../seed.ts)\n                        \n                        \n                            MongoStore   (server/.../main.ts)\n                        \n                        \n                            nlp   (server/.../parser.service.ts)\n                        \n                        \n                            nodemailer   (server/.../email.service.ts)\n                        \n                        \n                            path   (server/.../email.service.ts)\n                        \n                        \n                            PersonalityModel   (server/.../personality.module.ts)\n                        \n                        \n                            PersonalitySchema   (server/.../personality.schema.ts)\n                        \n                        \n                            PersonalitySchemaRaw   (server/.../personality.schema.ts)\n                        \n                        \n                            phdRegex   (server/.../parser.service.ts)\n                        \n                        \n                            prefixes   (server/.../parser.service.ts)\n                        \n                        \n                            ServiceRunner   (server/.../server.ts)\n                        \n                        \n                            SourceModel   (server/.../source.module.ts)\n                        \n                        \n                            SourceSchema   (server/.../source.schema.ts)\n                        \n                        \n                            UserModel   (server/.../users.module.ts)\n                        \n                        \n                            UserSchema   (server/.../user.schema.ts)\n                        \n                        \n                            WikidataCacheModel   (server/.../wikidata.module.ts)\n                        \n                        \n                            WikidataCacheSchema   (server/.../wikidata.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    server/wikidata/wikidata.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        axios\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"axios\")\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        languageVariantMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    \"pt-br\": \"pt\",\n}\n                    \n                \n\n\n        \n    \n\n    server/claim/claim.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ClaimModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeature([\n    {\n        name: Claim.name,\n        schema: ClaimSchema,\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/claim-review/claim-review.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ClaimReviewModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeature([\n    {\n        name: ClaimReview.name,\n        schema: ClaimReviewSchema,\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/claim-review/schemas/claim-review.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ClaimReviewSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ClaimReviewSchemaRaw\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ClaimReviewSchemaRaw\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(ClaimReview)\n                    \n                \n\n\n        \n    \n\n    server/claim/schemas/claim.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ClaimSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ClaimSchemaRaw\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ClaimSchemaRaw\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Claim)\n                    \n                \n\n\n        \n    \n\n    server/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cookieParser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"cookie-parser\")\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initApp\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (options) => {\n    const corsOptions = {\n        origin: options?.config?.cors || \"*\",\n        credentials: true,\n        methods: \"GET,HEAD,PUT,PATCH,POST,DELETE, OPTIONS\",\n        allowedHeaders: [\"accept\", \"x-requested-with\", \"content-type\"],\n    };\n\n    options.db = {\n        connection_uri: `mongodb://${mongodb_host}/${mongodb_name}`,\n        options: {\n            useUnifiedTopology: true,\n            useNewUrlParser: true,\n            useCreateIndex: true,\n            useFindAndModify: false,\n        }\n    }\n    const app = await NestFactory.create(\n        AppModule.register(options),\n        {\n            logger: new Logger(options.logger) || undefined,\n            cors: corsOptions,\n        }\n    );\n\n    app.use(cookieParser());\n    app.use(\n        session({\n            secret: \"replace_me\",\n            resave: false,\n            saveUninitialized: false,\n            store: MongoStore.create({\n                mongoUrl: options.db.connection_uri,\n                mongoOptions: options.db.options\n            })\n        })\n    );\n    app.use(passport.initialize());\n    app.use(passport.session());\n    app.useStaticAssets(join(__dirname, \"..\", \"public\"));\n    // app.setGlobalPrefix(\"api\");\n    await app.listen(options.config.port);\n    options.logger.log(\n        \"info\",\n        `${options.name} with PID ${process.pid} listening on ${\n            options.config.interface || \"*\"\n        }:${options.config.port}`\n    );\n    return app;\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mongodb_host\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.MONGODB_HOST || \"localhost\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mongodb_name\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.MONGODB_NAME || \"Aletheia\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MongoStore\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"connect-mongo\")\n                    \n                \n\n\n        \n    \n\n    server/email/email.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        fs\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"fs\")\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handlebars\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"handlebars\")\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nodemailer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"nodemailer\")\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"path\")\n                    \n                \n\n\n        \n    \n\n    server/seed.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        initApp\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (options) => {\n    options.db = {\n        connection_uri: `mongodb://${mongodb_host}/${mongodb_name}`,\n        options: {\n            useUnifiedTopology: true,\n            useNewUrlParser: true,\n            useCreateIndex: true,\n            useFindAndModify: false,\n        }\n    }\n    options.logger.log(\"info\", `Loading AppModule`);\n    const app = await NestFactory.create(\n        AppModule.register(options),\n        {\n            logger: new Logger(options.logger) || undefined\n        }\n    );\n    options.logger.log(\"info\", `AppModule loaded`);\n    const emailService = app.get(EmailService);\n    const configService = app.get(ConfigService);\n    const userService = app.get(UsersService);\n    const users = configService.get(\"users\");\n    const disableSMTP = configService.get(\"disable_smtp\");\n\n    const generatePassword = (isTestUser = false, forcePassword = null) => {\n        const buf = randomBytes(8);\n\n        if (isTestUser) {\n            return forcePassword ? `${forcePassword}` : process.env.DEVELOPMENT_PASSWORD;\n        }\n\n        return buf.toString(\"hex\");\n    };\n\n    const seedSingleUser = async (userData, password) => {\n        return userService.register({ ...userData, password})\n            .then(async (user) => {\n                options.logger.log(\"info\", `${userData.email} seeded`);\n                if (userData.sendAuthDetails && !disableSMTP) {\n                    const emailResponse = await emailService.sendEmail(\n                        userData.email,\n                        \"Bem-vinda(o) a Aletheia\",\n                        \"Você poderá acessar o sistema usando as credenciais abaixo\",\n                        { ...userData, password },\n                        \"./templates/userSeed.html\"\n                    );\n                    options.logger.log(\"info\", emailResponse);\n                    options.logger.log(\"info\", `E-mail sent to ${userData.email}`);\n                }\n                return user;\n            })\n            .catch((e) => {\n                options.logger.log(\"error\", e);\n                options.logger.log(\"info\", `Error while seeding ${userData.email}`);\n                return null;\n            });\n    };\n    // Using await Promise.all to force loop to finish before continuing\n    await Promise.all(\n        users.map(async (userData) => {\n            const password = generatePassword(userData.isTestUser, userData.password);\n            return seedSingleUser(userData, password);\n        })\n    );\n\n    options.logger.log(\n        \"info\",\n        \"Seed is finished\"\n    );\n    await app.close();\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mongodb_host\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.MONGODB_HOST || \"localhost\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mongodb_name\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.MONGODB_NAME || \"Aletheia\"\n                    \n                \n\n\n        \n    \n\n    server/parser/parser.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        md5\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"md5\")\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nlp\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('compromise')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phdRegex\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /Ph\\.D\\./g\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prefixes\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /(Mr|St|Mrs|Ms|Dr)[.]/g\n                    \n                \n\n\n        \n    \n\n    server/personality/personality.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PersonalityModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeature([\n    {\n        name: Personality.name,\n        schema: PersonalitySchema,\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/personality/schemas/personality.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PersonalitySchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : PersonalitySchemaRaw\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PersonalitySchemaRaw\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Personality)\n                    \n                \n\n\n        \n    \n\n    server/server.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ServiceRunner\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"service-runner\")\n                    \n                \n\n\n        \n    \n\n    server/source/source.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SourceModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeature([\n    {\n        name: Source.name,\n        schema: SourceSchema,\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/source/schemas/source.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SourceSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Source)\n                    \n                \n\n\n        \n    \n\n    server/users/users.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeatureAsync([\n    {\n        name: User.name,\n        useFactory: () => {\n            const schema = UserSchema;\n            schema.plugin(require(\"passport-local-mongoose\"), {\n                usernameField: \"email\",\n            });\n            return schema;\n        },\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/users/schemas/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n    server/wikidata/wikidata.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        WikidataCacheModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : MongooseModule.forFeatureAsync([\n    {\n        name: WikidataCache.name,\n        useFactory: () => {\n            const wikidataCacheSchema = WikidataCacheSchema;\n            wikidataCacheSchema.index(\n                { wikidataId: 1, language: 1 },\n                { unique: true }\n            );\n            wikidataCacheSchema.index(\n                { createdAt: 1 },\n                { expireAfterSeconds: 86400 }\n            );\n            return wikidataCacheSchema;\n        },\n    },\n])\n                    \n                \n\n\n        \n    \n\n    server/wikidata/schemas/wikidata.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        WikidataCacheSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(WikidataCache)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
